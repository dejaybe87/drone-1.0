   1               		.file	"i2c.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 405               		.section	.text.i2c_init,"ax",@progbits
 407               	.global	i2c_init
 409               	i2c_init:
   1:i2c.c         **** /************************************************************************/
   2:i2c.c         **** /* XBoot Extensible AVR Bootloader                                      */
   3:i2c.c         **** /*                                                                      */
   4:i2c.c         **** /* I2C/TWI Module                                                       */
   5:i2c.c         **** /*                                                                      */
   6:i2c.c         **** /* i2c.c                                                                */
   7:i2c.c         **** /*                                                                      */
   8:i2c.c         **** /* Alex Forencich <alex@alexforencich.com>                              */
   9:i2c.c         **** /*                                                                      */
  10:i2c.c         **** /* Copyright (c) 2010 Alex Forencich                                    */
  11:i2c.c         **** /*                                                                      */
  12:i2c.c         **** /* Permission is hereby granted, free of charge, to any person          */
  13:i2c.c         **** /* obtaining a copy of this software and associated documentation       */
  14:i2c.c         **** /* files(the "Software"), to deal in the Software without restriction,  */
  15:i2c.c         **** /* including without limitation the rights to use, copy, modify, merge, */
  16:i2c.c         **** /* publish, distribute, sublicense, and/or sell copies of the Software, */
  17:i2c.c         **** /* and to permit persons to whom the Software is furnished to do so,    */
  18:i2c.c         **** /* subject to the following conditions:                                 */
  19:i2c.c         **** /*                                                                      */
  20:i2c.c         **** /* The above copyright notice and this permission notice shall be       */
  21:i2c.c         **** /* included in all copies or substantial portions of the Software.      */
  22:i2c.c         **** /*                                                                      */
  23:i2c.c         **** /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,      */
  24:i2c.c         **** /* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF   */
  25:i2c.c         **** /* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                */
  26:i2c.c         **** /* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  */
  27:i2c.c         **** /* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN   */
  28:i2c.c         **** /* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN    */
  29:i2c.c         **** /* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE     */
  30:i2c.c         **** /* SOFTWARE.                                                            */
  31:i2c.c         **** /*                                                                      */
  32:i2c.c         **** /************************************************************************/
  33:i2c.c         **** 
  34:i2c.c         **** #include "i2c.h"
  35:i2c.c         **** 
  36:i2c.c         **** // Globals
  37:i2c.c         **** #ifdef USE_I2C
  38:i2c.c         **** unsigned char first_byte;
  39:i2c.c         **** #endif
  40:i2c.c         **** 
  41:i2c.c         **** // Interrupts
  42:i2c.c         **** #ifdef USE_INTERRUPTS
  43:i2c.c         **** #ifdef USE_I2C
  44:i2c.c         **** ISR(I2C_DEVICE_ISR)
  45:i2c.c         **** {
  46:i2c.c         ****         if ((I2C_DEVICE.SLAVE.STATUS & TWI_SLAVE_APIF_bm) && 
  47:i2c.c         ****                 (I2C_DEVICE.SLAVE.STATUS & TWI_SLAVE_AP_bm))
  48:i2c.c         ****         {
  49:i2c.c         ****                 // Address match, send ACK
  50:i2c.c         ****                 I2C_DEVICE.SLAVE.CTRLB = 0b00000011;
  51:i2c.c         ****                 comm_mode = MODE_I2C;
  52:i2c.c         ****                 #ifdef USE_UART
  53:i2c.c         ****                 #ifdef __AVR_XMEGA__
  54:i2c.c         ****                 // disable I2C interrupt
  55:i2c.c         ****                 UART_DEVICE.CTRLA = 0;
  56:i2c.c         ****                 #endif // __AVR_XMEGA__
  57:i2c.c         ****                 #endif // USE_UART
  58:i2c.c         ****                 first_byte = 1;
  59:i2c.c         ****         }
  60:i2c.c         ****         if ((I2C_DEVICE.SLAVE.STATUS & TWI_SLAVE_DIF_bm) &&
  61:i2c.c         ****                 !(I2C_DEVICE.SLAVE.STATUS & TWI_SLAVE_DIR_bm))
  62:i2c.c         ****         {
  63:i2c.c         ****                 // Data has arrived
  64:i2c.c         ****                 if (rx_char_cnt == 0)
  65:i2c.c         ****                 {
  66:i2c.c         ****                         rx_buff0 = I2C_DEVICE.SLAVE.DATA;
  67:i2c.c         ****                         rx_char_cnt = 1;
  68:i2c.c         ****                 }
  69:i2c.c         ****                 else
  70:i2c.c         ****                 {
  71:i2c.c         ****                         rx_buff1 = I2C_DEVICE.SLAVE.DATA;
  72:i2c.c         ****                         rx_char_cnt = 2;
  73:i2c.c         ****                 }
  74:i2c.c         ****                 I2C_DEVICE.SLAVE.CTRLB = 0b00000011;
  75:i2c.c         ****         }
  76:i2c.c         ****         if ((I2C_DEVICE.SLAVE.STATUS & TWI_SLAVE_DIF_bm) &&
  77:i2c.c         ****                 (I2C_DEVICE.SLAVE.STATUS & TWI_SLAVE_DIR_bm))
  78:i2c.c         ****         {
  79:i2c.c         ****                 if (!first_byte && I2C_DEVICE.SLAVE.STATUS & TWI_SLAVE_RXACK_bm)
  80:i2c.c         ****                 {
  81:i2c.c         ****                         I2C_DEVICE.SLAVE.CTRLB = 0b00000010; // end transaction
  82:i2c.c         ****                 }
  83:i2c.c         ****                 else
  84:i2c.c         ****                 {
  85:i2c.c         ****                         first_byte = 0;
  86:i2c.c         ****                         if (tx_char_cnt == 0)
  87:i2c.c         ****                         {
  88:i2c.c         ****                                 // Wants data, but there is no data to send...
  89:i2c.c         ****                                 // also include NAK
  90:i2c.c         ****                                 I2C_DEVICE.SLAVE.DATA = '?';
  91:i2c.c         ****                         }
  92:i2c.c         ****                         else
  93:i2c.c         ****                         {
  94:i2c.c         ****                                 I2C_DEVICE.SLAVE.DATA = tx_buff0;
  95:i2c.c         ****                                 tx_char_cnt = 0;
  96:i2c.c         ****                         }
  97:i2c.c         ****                         I2C_DEVICE.SLAVE.CTRLB = 0b00000110;
  98:i2c.c         ****                 }
  99:i2c.c         ****         }
 100:i2c.c         **** }
 101:i2c.c         **** #endif // USE_I2C
 102:i2c.c         **** #endif // USE_INTERRUPTS
 103:i2c.c         **** 
 104:i2c.c         **** void i2c_init(void)
 105:i2c.c         **** {
 411               	.LM0:
 412               	.LFBB1:
 413               	/* prologue: function */
 414               	/* frame size = 0 */
 415               	/* stack size = 0 */
 416               	.L__stack_usage = 0
 106:i2c.c         **** #ifdef __AVR_XMEGA__
 107:i2c.c         ****         I2C_DEVICE.CTRL = 0;
 418               	.LM1:
 419 0000 E0E8      		ldi r30,lo8(-128)
 420 0002 F4E0      		ldi r31,lo8(4)
 421 0004 1082      		st Z,__zero_reg__
 108:i2c.c         ****         #if I2C_MATCH_ANY
 109:i2c.c         ****         #ifdef USE_INTERRUPTS
 110:i2c.c         ****         I2C_DEVICE.SLAVE.CTRLA = TWI_SLAVE_ENABLE_bm | TWI_SLAVE_PMEN_bm | TWI_SLAVE_INTLVL0_bm;
 111:i2c.c         ****         #else
 112:i2c.c         ****         I2C_DEVICE.SLAVE.CTRLA = TWI_SLAVE_ENABLE_bm | TWI_SLAVE_PMEN_bm;
 423               	.LM2:
 424 0006 8AE0      		ldi r24,lo8(10)
 425 0008 8087      		std Z+8,r24
 113:i2c.c         ****         #endif // USE_INTERRUPTS
 114:i2c.c         ****         #else
 115:i2c.c         ****         #ifdef USE_INTERRUPTS
 116:i2c.c         ****         I2C_DEVICE.SLAVE.CTRLA = TWI_SLAVE_ENABLE_bm | TWI_SLAVE_INTLVL0_bm;
 117:i2c.c         ****         #else
 118:i2c.c         ****         I2C_DEVICE.SLAVE.CTRLA = TWI_SLAVE_ENABLE_bm;
 119:i2c.c         ****         #endif // USE_INTERRUPTS
 120:i2c.c         ****         #endif
 121:i2c.c         ****         #if I2C_GC_ENABLE
 122:i2c.c         ****         I2C_DEVICE.SLAVE.ADDR = I2C_ADDRESS | 1;
 427               	.LM3:
 428 000a 81E1      		ldi r24,lo8(17)
 429 000c 8387      		std Z+11,r24
 123:i2c.c         ****         #else
 124:i2c.c         ****         I2C_DEVICE.SLAVE.ADDR = I2C_ADDRESS;
 125:i2c.c         ****         #endif
 126:i2c.c         ****         I2C_DEVICE.SLAVE.ADDRMASK = 0;
 431               	.LM4:
 432 000e 1586      		std Z+13,__zero_reg__
 433 0010 0895      		ret
 435               	.Lscope1:
 436               		.section	.text.i2c_deinit,"ax",@progbits
 438               	.global	i2c_deinit
 440               	i2c_deinit:
 127:i2c.c         **** #endif // __AVR_XMEGA__
 128:i2c.c         **** }
 129:i2c.c         **** 
 130:i2c.c         **** void i2c_deinit(void)
 131:i2c.c         **** {
 442               	.LM5:
 443               	.LFBB2:
 444               	/* prologue: function */
 445               	/* frame size = 0 */
 446               	/* stack size = 0 */
 447               	.L__stack_usage = 0
 132:i2c.c         ****         // Shut down I2C module and turn off interrupt
 133:i2c.c         **** #ifdef __AVR_XMEGA__
 134:i2c.c         ****         I2C_DEVICE.SLAVE.CTRLA = 0;
 449               	.LM6:
 450 0000 E0E8      		ldi r30,lo8(-128)
 451 0002 F4E0      		ldi r31,lo8(4)
 452 0004 1086      		std Z+8,__zero_reg__
 135:i2c.c         ****         I2C_DEVICE.SLAVE.ADDR = 0;
 454               	.LM7:
 455 0006 1386      		std Z+11,__zero_reg__
 136:i2c.c         ****         I2C_DEVICE.SLAVE.ADDRMASK = 0;
 457               	.LM8:
 458 0008 1586      		std Z+13,__zero_reg__
 459 000a 0895      		ret
 461               	.Lscope2:
 462               		.text
 464               	.Letext0:
 465               		.ident	"GCC: (AVR_8_bit_GNU_Toolchain_3.4.4_1229) 4.8.1"
DEFINED SYMBOLS
                            *ABS*:00000000 i2c.c
C:\Users\Matthew\AppData\Local\Temp\ccLXOFAC.s:2      *ABS*:0000003e __SP_H__
C:\Users\Matthew\AppData\Local\Temp\ccLXOFAC.s:3      *ABS*:0000003d __SP_L__
C:\Users\Matthew\AppData\Local\Temp\ccLXOFAC.s:4      *ABS*:0000003f __SREG__
C:\Users\Matthew\AppData\Local\Temp\ccLXOFAC.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\Matthew\AppData\Local\Temp\ccLXOFAC.s:6      *ABS*:00000034 __CCP__
C:\Users\Matthew\AppData\Local\Temp\ccLXOFAC.s:7      *ABS*:00000000 __tmp_reg__
C:\Users\Matthew\AppData\Local\Temp\ccLXOFAC.s:8      *ABS*:00000001 __zero_reg__
C:\Users\Matthew\AppData\Local\Temp\ccLXOFAC.s:409    .text.i2c_init:00000000 i2c_init
C:\Users\Matthew\AppData\Local\Temp\ccLXOFAC.s:440    .text.i2c_deinit:00000000 i2c_deinit

NO UNDEFINED SYMBOLS
