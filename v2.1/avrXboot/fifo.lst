   1               		.file	"fifo.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 405               		.section	.text.fifo_init,"ax",@progbits
 407               	.global	fifo_init
 409               	fifo_init:
   1:fifo.c        **** /************************************************************************/
   2:fifo.c        **** /* XBoot Extensible AVR Bootloader                                      */
   3:fifo.c        **** /*                                                                      */
   4:fifo.c        **** /* FT245/2232 asynchronous Fifo Module                                  */
   5:fifo.c        **** /*                                                                      */
   6:fifo.c        **** /* fifo.c                                                               */
   7:fifo.c        **** /*                                                                      */
   8:fifo.c        **** /* Uwe Bonnes bon@elektron.ikp.physik.tu-darmstadt.de                   */
   9:fifo.c        **** /*                                                                      */
  10:fifo.c        **** /* Copyright (c) 2011 Uwe Bonnes                                        */
  11:fifo.c        **** /*                                                                      */
  12:fifo.c        **** /* Permission is hereby granted, free of charge, to any person          */
  13:fifo.c        **** /* obtaining a copy of this software and associated documentation       */
  14:fifo.c        **** /* files(the "Software"), to deal in the Software without restriction,  */
  15:fifo.c        **** /* including without limitation the rights to use, copy, modify, merge, */
  16:fifo.c        **** /* publish, distribute, sublicense, and/or sell copies of the Software, */
  17:fifo.c        **** /* and to permit persons to whom the Software is furnished to do so,    */
  18:fifo.c        **** /* subject to the following conditions:                                 */
  19:fifo.c        **** /*                                                                      */
  20:fifo.c        **** /* The above copyright notice and this permission notice shall be       */
  21:fifo.c        **** /* included in all copies or substantial portions of the Software.      */
  22:fifo.c        **** /*                                                                      */
  23:fifo.c        **** /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,      */
  24:fifo.c        **** /* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF   */
  25:fifo.c        **** /* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                */
  26:fifo.c        **** /* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  */
  27:fifo.c        **** /* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN   */
  28:fifo.c        **** /* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN    */
  29:fifo.c        **** /* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE     */
  30:fifo.c        **** /* SOFTWARE.                                                            */
  31:fifo.c        **** /*                                                                      */
  32:fifo.c        **** /************************************************************************/
  33:fifo.c        **** 
  34:fifo.c        **** #include "fifo.h"
  35:fifo.c        **** /* As discussed in
  36:fifo.c        ****  * http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&t=41613
  37:fifo.c        ****  * Accessing a bitrev table in bootloader flash will not be faster, as 
  38:fifo.c        ****  * a our character needs to be added to the table converted to a far address
  39:fifo.c        ****  * and probaly also the NVM needs to be cared about
  40:fifo.c        ****  */ 
  41:fifo.c        **** 
  42:fifo.c        **** #define REVERSE(a) do                     \
  43:fifo.c        **** {                                         \
  44:fifo.c        ****   a=((a>>1)&0x55)|((a<<1)&0xaa);          \
  45:fifo.c        ****   a=((a>>2)&0x33)|((a<<2)&0xcc);          \
  46:fifo.c        ****   asm volatile("swap %0":"=r"(a):"0"(a)); \
  47:fifo.c        **** } while(0)
  48:fifo.c        **** 
  49:fifo.c        **** // Initialize FIFO
  50:fifo.c        **** void fifo_init(void)
  51:fifo.c        **** {
 411               	.LM0:
 412               	.LFBB1:
 413               	/* prologue: function */
 414               	/* frame size = 0 */
 415               	/* stack size = 0 */
 416               	.L__stack_usage = 0
  52:fifo.c        **** #ifdef __AVR_XMEGA__
  53:fifo.c        ****         FIFO_DATA_PORT.DIR = 0;
 418               	.LM1:
 419 0000 1092 4006 		sts 1600,__zero_reg__
  54:fifo.c        ****         FIFO_CTL_PORT.OUTSET = _BV(FIFO_RD_N) | _BV(FIFO_WR_N);
 421               	.LM2:
 422 0004 E0E6      		ldi r30,lo8(96)
 423 0006 F6E0      		ldi r31,lo8(6)
 424 0008 83E0      		ldi r24,lo8(3)
 425 000a 8583      		std Z+5,r24
  55:fifo.c        ****         FIFO_CTL_PORT.DIRSET = _BV(FIFO_RD_N) | _BV(FIFO_WR_N);
 427               	.LM3:
 428 000c 8183      		std Z+1,r24
 429 000e 0895      		ret
 431               	.Lscope1:
 432               		.section	.text.fifo_deinit,"ax",@progbits
 434               	.global	fifo_deinit
 436               	fifo_deinit:
  56:fifo.c        **** #else // __AVR_XMEGA__
  57:fifo.c        ****         FIFO_DATA_PORT_DDR = 0;
  58:fifo.c        ****         FIFO_DATA_PORT |= (_BV(FIFO_RD_N) | _BV(FIFO_WR_N));
  59:fifo.c        ****         FIFO_CTL_PORT_DDR |= (_BV(FIFO_RD_N) | _BV(FIFO_WR_N));
  60:fifo.c        **** #endif // __AVR_XMEGA__
  61:fifo.c        **** }
  62:fifo.c        **** 
  63:fifo.c        **** // Shut down UART
  64:fifo.c        **** void fifo_deinit(void)
  65:fifo.c        **** {
 438               	.LM4:
 439               	.LFBB2:
 440               	/* prologue: function */
 441               	/* frame size = 0 */
 442               	/* stack size = 0 */
 443               	.L__stack_usage = 0
  66:fifo.c        **** #ifdef __AVR_XMEGA__
  67:fifo.c        ****         FIFO_DATA_PORT.DIR = 0xff;
 445               	.LM5:
 446 0000 E0E4      		ldi r30,lo8(64)
 447 0002 F6E0      		ldi r31,lo8(6)
 448 0004 8FEF      		ldi r24,lo8(-1)
 449 0006 8083      		st Z,r24
  68:fifo.c        ****         FIFO_DATA_PORT.OUTCLR = 0xff;
 451               	.LM6:
 452 0008 8683      		std Z+6,r24
  69:fifo.c        ****         FIFO_CTL_PORT.OUTCLR = _BV(FIFO_RD_N) | _BV(FIFO_WR_N);
 454               	.LM7:
 455 000a E0E6      		ldi r30,lo8(96)
 456 000c F6E0      		ldi r31,lo8(6)
 457 000e 83E0      		ldi r24,lo8(3)
 458 0010 8683      		std Z+6,r24
  70:fifo.c        ****         FIFO_CTL_PORT.DIRCLR = _BV(FIFO_RD_N) | _BV(FIFO_WR_N);
 460               	.LM8:
 461 0012 8283      		std Z+2,r24
 462 0014 0895      		ret
 464               	.Lscope2:
 465               		.section	.text.fifo_cur_char,"ax",@progbits
 467               	.global	fifo_cur_char
 469               	fifo_cur_char:
  71:fifo.c        **** #else // __AVR_XMEGA__
  72:fifo.c        ****         FIFO_DATA_PORT_DDR = 0xff;
  73:fifo.c        ****         FIFO_DATA_PORT= 0x00;
  74:fifo.c        ****         FIFO_DATA_PORT &= ~(_BV(FIFO_RD_N) | _BV(FIFO_WR_N));
  75:fifo.c        ****         FIFO_CTL_PORT_DDR &= ~(_BV(FIFO_RD_N) | _BV(FIFO_WR_N));
  76:fifo.c        **** #endif // __AVR_XMEGA__
  77:fifo.c        **** }
  78:fifo.c        **** 
  79:fifo.c        **** uint8_t fifo_cur_char(void)
  80:fifo.c        **** {
 471               	.LM9:
 472               	.LFBB3:
 473               	/* prologue: function */
 474               	/* frame size = 0 */
 475               	/* stack size = 0 */
 476               	.L__stack_usage = 0
  81:fifo.c        ****         uint8_t ret;
  82:fifo.c        **** #ifdef __AVR_XMEGA__
  83:fifo.c        ****         FIFO_CTL_PORT.OUTCLR = _BV(FIFO_RD_N);
 478               	.LM10:
 479 0000 82E0      		ldi r24,lo8(2)
 480 0002 E0E6      		ldi r30,lo8(96)
 481 0004 F6E0      		ldi r31,lo8(6)
 482 0006 8683      		std Z+6,r24
  84:fifo.c        ****         ret = FIFO_DATA_PORT.IN;
 484               	.LM11:
 485 0008 E0E4      		ldi r30,lo8(64)
 486 000a F6E0      		ldi r31,lo8(6)
 487 000c 8085      		ldd r24,Z+8
  85:fifo.c        ****         #ifdef  FIFO_BIT_REVERSE
  86:fifo.c        ****         REVERSE(ret);
 489               	.LM12:
 490 000e 282F      		mov r18,r24
 491 0010 220F      		lsl r18
 492 0012 2A7A      		andi r18,lo8(-86)
 493 0014 8695      		lsr r24
 494 0016 8575      		andi r24,lo8(85)
 495 0018 282B      		or r18,r24
 496 001a 34E0      		ldi r19,lo8(4)
 497 001c 239F      		mul r18,r19
 498 001e C001      		movw r24,r0
 499 0020 1124      		clr __zero_reg__
 500 0022 8C7C      		andi r24,lo8(-52)
 501 0024 2695      		lsr r18
 502 0026 2695      		lsr r18
 503 0028 2373      		andi r18,lo8(51)
 504 002a 822B      		or r24,r18
 505               	/* #APP */
 506               	 ;  86 "fifo.c" 1
 507 002c 8295      		swap r24
 508               	 ;  0 "" 2
  87:fifo.c        ****         #endif
  88:fifo.c        ****         FIFO_CTL_PORT.OUTSET = _BV(FIFO_RD_N);
 510               	.LM13:
 511               	/* #NOAPP */
 512 002e 92E0      		ldi r25,lo8(2)
 513 0030 E0E6      		ldi r30,lo8(96)
 514 0032 F6E0      		ldi r31,lo8(6)
 515 0034 9583      		std Z+5,r25
  89:fifo.c        **** #else // __AVR_XMEGA__
  90:fifo.c        ****         FIFO_CTL_PORT &= ~_BV(FIFO_RD_N);
  91:fifo.c        ****         ret = FIFO_DATA_PORT_PIN;
  92:fifo.c        ****         #ifdef  FIFO_BIT_REVERSE
  93:fifo.c        ****         REVERSE(ret);
  94:fifo.c        ****         #endif
  95:fifo.c        ****         FIFO_CTL_PORT |= _BV(FIFO_RD_N);
  96:fifo.c        **** #endif // __AVR_XMEGA__
  97:fifo.c        ****         return ret;
  98:fifo.c        **** }
 517               	.LM14:
 518 0036 0895      		ret
 520               	.Lscope3:
 521               		.section	.text.fifo_send_char,"ax",@progbits
 524               	.global	fifo_send_char
 526               	fifo_send_char:
  99:fifo.c        **** 
 100:fifo.c        **** void fifo_send_char(uint8_t c)
 101:fifo.c        **** {
 528               	.LM15:
 529               	.LFBB4:
 530               	/* prologue: function */
 531               	/* frame size = 0 */
 532               	/* stack size = 0 */
 533               	.L__stack_usage = 0
 102:fifo.c        **** #ifdef __AVR_XMEGA__
 103:fifo.c        ****         if ((FIFO_CTL_PORT.IN & _BV(FIFO_TXE_N)) !=  _BV(FIFO_TXE_N))
 535               	.LM16:
 536 0000 9091 6806 		lds r25,1640
 537 0004 92FD      		sbrc r25,2
 538 0006 00C0      		rjmp .L4
 104:fifo.c        ****         {
 105:fifo.c        ****                 FIFO_DATA_PORT.DIR = 0xff;
 540               	.LM17:
 541 0008 9FEF      		ldi r25,lo8(-1)
 542 000a 9093 4006 		sts 1600,r25
 106:fifo.c        ****                 #ifdef  FIFO_BIT_REVERSE
 107:fifo.c        ****                 REVERSE(c);
 544               	.LM18:
 545 000e 282F      		mov r18,r24
 546 0010 220F      		lsl r18
 547 0012 2A7A      		andi r18,lo8(-86)
 548 0014 8695      		lsr r24
 549 0016 8575      		andi r24,lo8(85)
 550 0018 282B      		or r18,r24
 551 001a 34E0      		ldi r19,lo8(4)
 552 001c 239F      		mul r18,r19
 553 001e C001      		movw r24,r0
 554 0020 1124      		clr __zero_reg__
 555 0022 8C7C      		andi r24,lo8(-52)
 556 0024 2695      		lsr r18
 557 0026 2695      		lsr r18
 558 0028 2373      		andi r18,lo8(51)
 559 002a 822B      		or r24,r18
 560               	/* #APP */
 561               	 ;  107 "fifo.c" 1
 562 002c 8295      		swap r24
 563               	 ;  0 "" 2
 108:fifo.c        ****                 #endif
 109:fifo.c        ****                 FIFO_DATA_PORT.OUT = c;
 565               	.LM19:
 566               	/* #NOAPP */
 567 002e 8093 4406 		sts 1604,r24
 110:fifo.c        ****                 FIFO_DATA_PORT.DIR = 0xff;
 569               	.LM20:
 570 0032 8FEF      		ldi r24,lo8(-1)
 571 0034 8093 4006 		sts 1600,r24
 111:fifo.c        ****                 FIFO_CTL_PORT.OUTCLR = _BV(FIFO_WR_N);
 573               	.LM21:
 574 0038 81E0      		ldi r24,lo8(1)
 575 003a 8093 6606 		sts 1638,r24
 112:fifo.c        ****                 FIFO_DATA_PORT.DIR = 0;
 577               	.LM22:
 578 003e 1092 4006 		sts 1600,__zero_reg__
 113:fifo.c        ****                 FIFO_CTL_PORT.OUTSET = _BV(FIFO_WR_N);
 580               	.LM23:
 581 0042 8093 6506 		sts 1637,r24
 582               	.L4:
 583 0046 0895      		ret
 585               	.Lscope4:
 586               		.section	.text.fifo_send_char_blocking,"ax",@progbits
 589               	.global	fifo_send_char_blocking
 591               	fifo_send_char_blocking:
 114:fifo.c        ****         }
 115:fifo.c        **** #else // __AVR_XMEGA__
 116:fifo.c        ****         if ((FIFO_CTL_PORT_PIN & _BV(FIFO_TXE_N)) !=  _BV(FIFO_TXE_N))
 117:fifo.c        ****         {
 118:fifo.c        ****                 FIFO_DATA_PORT_DDR = 0xff;
 119:fifo.c        ****                 #ifdef  FIFO_BIT_REVERSE
 120:fifo.c        ****                 REVERSE(c);
 121:fifo.c        ****                 #endif
 122:fifo.c        ****                 FIFO_DATA_PORT = c;
 123:fifo.c        ****                 FIFO_DATA_PORT_DDR = 0xff;
 124:fifo.c        ****                 FIFO_CTL_PORT &= ~_BV(FIFO_WR_N);
 125:fifo.c        ****                 FIFO_DATA_PORT_DDR = 0;
 126:fifo.c        ****                 FIFO_CTL_PORT |= _BV(FIFO_WR_N);
 127:fifo.c        ****         }
 128:fifo.c        **** #endif // __AVR_XMEGA__
 129:fifo.c        **** }
 130:fifo.c        **** 
 131:fifo.c        **** void fifo_send_char_blocking(uint8_t c)
 132:fifo.c        **** {
 593               	.LM24:
 594               	.LFBB5:
 595               	/* prologue: function */
 596               	/* frame size = 0 */
 597               	/* stack size = 0 */
 598               	.L__stack_usage = 0
 599               	.L9:
 133:fifo.c        **** #ifdef __AVR_XMEGA__
 134:fifo.c        ****         while (FIFO_CTL_PORT.IN & _BV(FIFO_TXE_N))
 601               	.LM25:
 602 0000 9091 6806 		lds r25,1640
 603 0004 92FD      		sbrc r25,2
 604 0006 00C0      		rjmp .L9
 135:fifo.c        **** #else // __AVR_XMEGA__
 136:fifo.c        ****         while (FIFO_CTL_PORT_PIN & _BV(FIFO_TXE_N))
 137:fifo.c        **** #endif // __AVR_XMEGA__
 138:fifo.c        ****         {
 139:fifo.c        ****         };
 140:fifo.c        ****         fifo_send_char(c);
 606               	.LM26:
 607 0008 0C94 0000 		jmp fifo_send_char
 609               	.Lscope5:
 610               		.text
 612               	.Letext0:
 613               		.ident	"GCC: (AVR_8_bit_GNU_Toolchain_3.4.4_1229) 4.8.1"
DEFINED SYMBOLS
                            *ABS*:00000000 fifo.c
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:2      *ABS*:0000003e __SP_H__
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:3      *ABS*:0000003d __SP_L__
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:4      *ABS*:0000003f __SREG__
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:6      *ABS*:00000034 __CCP__
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:7      *ABS*:00000000 __tmp_reg__
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:8      *ABS*:00000001 __zero_reg__
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:409    .text.fifo_init:00000000 fifo_init
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:436    .text.fifo_deinit:00000000 fifo_deinit
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:469    .text.fifo_cur_char:00000000 fifo_cur_char
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:526    .text.fifo_send_char:00000000 fifo_send_char
C:\Users\Matthew\AppData\Local\Temp\ccTDTOnP.s:591    .text.fifo_send_char_blocking:00000000 fifo_send_char_blocking

NO UNDEFINED SYMBOLS
