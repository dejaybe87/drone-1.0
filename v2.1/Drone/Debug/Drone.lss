
Drone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009384  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000652  00802000  00009384  00009418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002bb  00802652  00802652  00009a6a  2**0
                  ALLOC
  3 .stab         00000b94  00000000  00000000  00009a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000353  00000000  00000000  0000a600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000a953  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000010c0  00000000  00000000  0000a988  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000183d7  00000000  00000000  0000ba48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000550b  00000000  00000000  00023e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001ba67  00000000  00000000  0002932a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003e88  00000000  00000000  00044d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00020b0f  00000000  00000000  00048c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000837a  00000000  00000000  0006972b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f78  00000000  00000000  00071aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000e6ba  00000000  00000000  00072a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f4 c0       	rjmp	.+488    	; 0x1ea <__ctors_end>
       2:	00 00       	nop
       4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
       6:	00 00       	nop
       8:	f7 c7       	rjmp	.+4078   	; 0xff8 <__vector_2>
       a:	00 00       	nop
       c:	0d c1       	rjmp	.+538    	; 0x228 <__bad_interrupt>
       e:	00 00       	nop
      10:	0b c1       	rjmp	.+534    	; 0x228 <__bad_interrupt>
      12:	00 00       	nop
      14:	09 c1       	rjmp	.+530    	; 0x228 <__bad_interrupt>
      16:	00 00       	nop
      18:	07 c1       	rjmp	.+526    	; 0x228 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
      1e:	00 00       	nop
      20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c0       	rjmp	.+498    	; 0x228 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 77 30 	jmp	0x60ee	; 0x60ee <__vector_14>
      3c:	0c 94 b3 30 	jmp	0x6166	; 0x6166 <__vector_15>
      40:	0c 94 ef 30 	jmp	0x61de	; 0x61de <__vector_16>
      44:	0c 94 2b 31 	jmp	0x6256	; 0x6256 <__vector_17>
      48:	0c 94 67 31 	jmp	0x62ce	; 0x62ce <__vector_18>
      4c:	0c 94 a3 31 	jmp	0x6346	; 0x6346 <__vector_19>
      50:	0c 94 df 31 	jmp	0x63be	; 0x63be <__vector_20>
      54:	0c 94 1b 32 	jmp	0x6436	; 0x6436 <__vector_21>
      58:	0c 94 57 32 	jmp	0x64ae	; 0x64ae <__vector_22>
      5c:	0c 94 93 32 	jmp	0x6526	; 0x6526 <__vector_23>
      60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__vector_25>
      68:	0c 94 38 2a 	jmp	0x5470	; 0x5470 <__vector_26>
      6c:	dd c0       	rjmp	.+442    	; 0x228 <__bad_interrupt>
      6e:	00 00       	nop
      70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
      72:	00 00       	nop
      74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
      82:	00 00       	nop
      84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
      86:	00 00       	nop
      88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
      92:	00 00       	nop
      94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
      96:	00 00       	nop
      98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 37 34 	jmp	0x686e	; 0x686e <__vector_47>
      c0:	0c 94 73 34 	jmp	0x68e6	; 0x68e6 <__vector_48>
      c4:	0c 94 af 34 	jmp	0x695e	; 0x695e <__vector_49>
      c8:	0c 94 eb 34 	jmp	0x69d6	; 0x69d6 <__vector_50>
      cc:	0c 94 27 35 	jmp	0x6a4e	; 0x6a4e <__vector_51>
      d0:	0c 94 63 35 	jmp	0x6ac6	; 0x6ac6 <__vector_52>
      d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a7 c0       	rjmp	.+334    	; 0x228 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a1 c0       	rjmp	.+322    	; 0x228 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9f c0       	rjmp	.+318    	; 0x228 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	9d c0       	rjmp	.+314    	; 0x228 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	9b c0       	rjmp	.+310    	; 0x228 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	99 c0       	rjmp	.+306    	; 0x228 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	97 c0       	rjmp	.+302    	; 0x228 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	95 c0       	rjmp	.+298    	; 0x228 <__bad_interrupt>
      fe:	00 00       	nop
     100:	93 c0       	rjmp	.+294    	; 0x228 <__bad_interrupt>
     102:	00 00       	nop
     104:	91 c0       	rjmp	.+290    	; 0x228 <__bad_interrupt>
     106:	00 00       	nop
     108:	8f c0       	rjmp	.+286    	; 0x228 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	8d c0       	rjmp	.+282    	; 0x228 <__bad_interrupt>
     10e:	00 00       	nop
     110:	8b c0       	rjmp	.+278    	; 0x228 <__bad_interrupt>
     112:	00 00       	nop
     114:	89 c0       	rjmp	.+274    	; 0x228 <__bad_interrupt>
     116:	00 00       	nop
     118:	87 c0       	rjmp	.+270    	; 0x228 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	85 c0       	rjmp	.+266    	; 0x228 <__bad_interrupt>
     11e:	00 00       	nop
     120:	83 c0       	rjmp	.+262    	; 0x228 <__bad_interrupt>
     122:	00 00       	nop
     124:	81 c0       	rjmp	.+258    	; 0x228 <__bad_interrupt>
     126:	00 00       	nop
     128:	7f c0       	rjmp	.+254    	; 0x228 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	7d c0       	rjmp	.+250    	; 0x228 <__bad_interrupt>
     12e:	00 00       	nop
     130:	7b c0       	rjmp	.+246    	; 0x228 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 cf 32 	jmp	0x659e	; 0x659e <__vector_77>
     138:	0c 94 0b 33 	jmp	0x6616	; 0x6616 <__vector_78>
     13c:	0c 94 47 33 	jmp	0x668e	; 0x668e <__vector_79>
     140:	0c 94 83 33 	jmp	0x6706	; 0x6706 <__vector_80>
     144:	0c 94 bf 33 	jmp	0x677e	; 0x677e <__vector_81>
     148:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <__vector_82>
     14c:	6d c0       	rjmp	.+218    	; 0x228 <__bad_interrupt>
     14e:	00 00       	nop
     150:	6b c0       	rjmp	.+214    	; 0x228 <__bad_interrupt>
     152:	00 00       	nop
     154:	69 c0       	rjmp	.+210    	; 0x228 <__bad_interrupt>
     156:	00 00       	nop
     158:	67 c0       	rjmp	.+206    	; 0x228 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	65 c0       	rjmp	.+202    	; 0x228 <__bad_interrupt>
     15e:	00 00       	nop
     160:	63 c0       	rjmp	.+198    	; 0x228 <__bad_interrupt>
     162:	00 00       	nop
     164:	61 c0       	rjmp	.+194    	; 0x228 <__bad_interrupt>
     166:	00 00       	nop
     168:	5f c0       	rjmp	.+190    	; 0x228 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	5d c0       	rjmp	.+186    	; 0x228 <__bad_interrupt>
     16e:	00 00       	nop
     170:	5b c0       	rjmp	.+182    	; 0x228 <__bad_interrupt>
     172:	00 00       	nop
     174:	59 c0       	rjmp	.+178    	; 0x228 <__bad_interrupt>
     176:	00 00       	nop
     178:	57 c0       	rjmp	.+174    	; 0x228 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	55 c0       	rjmp	.+170    	; 0x228 <__bad_interrupt>
     17e:	00 00       	nop
     180:	53 c0       	rjmp	.+166    	; 0x228 <__bad_interrupt>
     182:	00 00       	nop
     184:	51 c0       	rjmp	.+162    	; 0x228 <__bad_interrupt>
     186:	00 00       	nop
     188:	4f c0       	rjmp	.+158    	; 0x228 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	4d c0       	rjmp	.+154    	; 0x228 <__bad_interrupt>
     18e:	00 00       	nop
     190:	4b c0       	rjmp	.+150    	; 0x228 <__bad_interrupt>
     192:	00 00       	nop
     194:	49 c0       	rjmp	.+146    	; 0x228 <__bad_interrupt>
     196:	00 00       	nop
     198:	47 c0       	rjmp	.+142    	; 0x228 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	45 c0       	rjmp	.+138    	; 0x228 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	0c 94 8e 48 	jmp	0x911c	; 0x911c <__vector_104>
     1a4:	41 c0       	rjmp	.+130    	; 0x228 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	3f c0       	rjmp	.+126    	; 0x228 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3d c0       	rjmp	.+122    	; 0x228 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 9f 35 	jmp	0x6b3e	; 0x6b3e <__vector_108>
     1b4:	0c 94 db 35 	jmp	0x6bb6	; 0x6bb6 <__vector_109>
     1b8:	0c 94 17 36 	jmp	0x6c2e	; 0x6c2e <__vector_110>
     1bc:	0c 94 53 36 	jmp	0x6ca6	; 0x6ca6 <__vector_111>
     1c0:	0c 94 8f 36 	jmp	0x6d1e	; 0x6d1e <__vector_112>
     1c4:	0c 94 cb 36 	jmp	0x6d96	; 0x6d96 <__vector_113>

000001c8 <good>:
     1c8:	47 4f 4f 44 00                                      GOOD.

000001cd <bad>:
     1cd:	42 41 44 00                                         BAD.

000001d1 <debuguartinit>:
     1d1:	44 45 42 55 47 20 55 41 52 54 20 49 4e 49 54 3a     DEBUG UART INIT:
     1e1:	20 00                                                .

000001e3 <sleepmgr_configs>:
     1e3:	00 0e 06 0c 04 00 00                                .......

000001ea <__ctors_end>:
     1ea:	11 24       	eor	r1, r1
     1ec:	1f be       	out	0x3f, r1	; 63
     1ee:	cf ef       	ldi	r28, 0xFF	; 255
     1f0:	df e2       	ldi	r29, 0x2F	; 47
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	cd bf       	out	0x3d, r28	; 61

000001f6 <__do_copy_data>:
     1f6:	16 e2       	ldi	r17, 0x26	; 38
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	b0 e2       	ldi	r27, 0x20	; 32
     1fc:	e4 e8       	ldi	r30, 0x84	; 132
     1fe:	f3 e9       	ldi	r31, 0x93	; 147
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0b bf       	out	0x3b, r16	; 59
     204:	02 c0       	rjmp	.+4      	; 0x20a <__do_copy_data+0x14>
     206:	07 90       	elpm	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	a2 35       	cpi	r26, 0x52	; 82
     20c:	b1 07       	cpc	r27, r17
     20e:	d9 f7       	brne	.-10     	; 0x206 <__do_copy_data+0x10>

00000210 <__do_clear_bss>:
     210:	29 e2       	ldi	r18, 0x29	; 41
     212:	a2 e5       	ldi	r26, 0x52	; 82
     214:	b6 e2       	ldi	r27, 0x26	; 38
     216:	01 c0       	rjmp	.+2      	; 0x21a <.do_clear_bss_start>

00000218 <.do_clear_bss_loop>:
     218:	1d 92       	st	X+, r1

0000021a <.do_clear_bss_start>:
     21a:	ad 30       	cpi	r26, 0x0D	; 13
     21c:	b2 07       	cpc	r27, r18
     21e:	e1 f7       	brne	.-8      	; 0x218 <.do_clear_bss_loop>
     220:	0e 94 49 42 	call	0x8492	; 0x8492 <main>
     224:	0c 94 c0 49 	jmp	0x9380	; 0x9380 <_exit>

00000228 <__bad_interrupt>:
     228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <cpu_irq_save>:
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
	return arch_ioport_pin_to_mask(pin);
}
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	1f 92       	push	r1
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	8f e3       	ldi	r24, 0x3F	; 63
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	80 81       	ld	r24, Z
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	f8 94       	cli
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	0f 90       	pop	r0
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <cpu_irq_restore>:
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	8f e3       	ldi	r24, 0x3F	; 63
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	29 81       	ldd	r18, Y+1	; 0x01
     25c:	fc 01       	movw	r30, r24
     25e:	20 83       	st	Z, r18
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62

	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	98 e4       	ldi	r25, 0x48	; 72
     274:	a8 ee       	ldi	r26, 0xE8	; 232
     276:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
     278:	bc 01       	movw	r22, r24
     27a:	cd 01       	movw	r24, r26
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	1f 92       	push	r1
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
     28c:	19 82       	std	Y+1, r1	; 0x01

	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
     28e:	ec df       	rcall	.-40     	; 0x268 <sysclk_get_main_hz>
     290:	dc 01       	movw	r26, r24
     292:	cb 01       	movw	r24, r22
     294:	29 81       	ldd	r18, Y+1	; 0x01
     296:	22 2f       	mov	r18, r18
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	02 2e       	mov	r0, r18
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <sysclk_get_per4_hz+0x24>
     29e:	b6 95       	lsr	r27
     2a0:	a7 95       	ror	r26
     2a2:	97 95       	ror	r25
     2a4:	87 95       	ror	r24
     2a6:	0a 94       	dec	r0
     2a8:	d2 f7       	brpl	.-12     	; 0x29e <sysclk_get_per4_hz+0x1c>
}
     2aa:	bc 01       	movw	r22, r24
     2ac:	cd 01       	movw	r24, r26
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
     2be:	e1 df       	rcall	.-62     	; 0x282 <sysclk_get_per4_hz>
     2c0:	dc 01       	movw	r26, r24
     2c2:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
     2c4:	bc 01       	movw	r22, r24
     2c6:	cd 01       	movw	r24, r26
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
     2d6:	ef df       	rcall	.-34     	; 0x2b6 <sysclk_get_per2_hz>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
}
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <adc_start_conversion>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <adc_start_conversion+0x6>
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <adc_start_conversion+0x8>
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	8a 83       	std	Y+2, r24	; 0x02
     2f4:	9b 83       	std	Y+3, r25	; 0x03
     2f6:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
     2f8:	98 df       	rcall	.-208    	; 0x22a <cpu_irq_save>
     2fa:	89 83       	std	Y+1, r24	; 0x01
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     2fc:	8a 81       	ldd	r24, Y+2	; 0x02
     2fe:	9b 81       	ldd	r25, Y+3	; 0x03
     300:	fc 01       	movw	r30, r24
     302:	80 81       	ld	r24, Z
     304:	28 2f       	mov	r18, r24
     306:	8c 81       	ldd	r24, Y+4	; 0x04
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	82 2b       	or	r24, r18
     316:	28 2f       	mov	r18, r24
     318:	8a 81       	ldd	r24, Y+2	; 0x02
     31a:	9b 81       	ldd	r25, Y+3	; 0x03
     31c:	fc 01       	movw	r30, r24
     31e:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	93 df       	rcall	.-218    	; 0x24a <cpu_irq_restore>
}
     324:	24 96       	adiw	r28, 0x04	; 4
     326:	cd bf       	out	0x3d, r28	; 61
     328:	de bf       	out	0x3e, r29	; 62
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <adc_get_interrupt_flag>:
 * together.)
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	00 d0       	rcall	.+0      	; 0x336 <adc_get_interrupt_flag+0x6>
     336:	1f 92       	push	r1
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	89 83       	std	Y+1, r24	; 0x01
     33e:	9a 83       	std	Y+2, r25	; 0x02
     340:	6b 83       	std	Y+3, r22	; 0x03
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	9a 81       	ldd	r25, Y+2	; 0x02
     346:	fc 01       	movw	r30, r24
     348:	96 81       	ldd	r25, Z+6	; 0x06
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	89 23       	and	r24, r25
}
     34e:	23 96       	adiw	r28, 0x03	; 3
     350:	cd bf       	out	0x3d, r28	; 61
     352:	de bf       	out	0x3e, r29	; 62
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <adc_clear_interrupt_flag>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	00 d0       	rcall	.+0      	; 0x360 <adc_clear_interrupt_flag+0x6>
     360:	1f 92       	push	r1
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	89 83       	std	Y+1, r24	; 0x01
     368:	9a 83       	std	Y+2, r25	; 0x02
     36a:	6b 83       	std	Y+3, r22	; 0x03
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	2b 81       	ldd	r18, Y+3	; 0x03
     372:	fc 01       	movw	r30, r24
     374:	26 83       	std	Z+6, r18	; 0x06
}
     376:	23 96       	adiw	r28, 0x03	; 3
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <adc_wait_for_interrupt_flag>:
 * \param ch_mask Mask of ADC channel(s):
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	00 d0       	rcall	.+0      	; 0x388 <adc_wait_for_interrupt_flag+0x6>
     388:	1f 92       	push	r1
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	89 83       	std	Y+1, r24	; 0x01
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	6b 83       	std	Y+3, r22	; 0x03
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	6b 81       	ldd	r22, Y+3	; 0x03
     39a:	ca df       	rcall	.-108    	; 0x330 <adc_get_interrupt_flag>
     39c:	98 2f       	mov	r25, r24
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	98 17       	cp	r25, r24
     3a2:	c1 f7       	brne	.-16     	; 0x394 <adc_wait_for_interrupt_flag+0x12>
	adc_clear_interrupt_flag(adc, ch_mask);
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	6b 81       	ldd	r22, Y+3	; 0x03
     3aa:	d7 df       	rcall	.-82     	; 0x35a <adc_clear_interrupt_flag>
}
     3ac:	23 96       	adiw	r28, 0x03	; 3
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	08 95       	ret

000003b8 <adc_set_clock_rate>:
 * devices. Setting the current limit mode on some devices will also affect the
 * maximum ADC sampling rate. Refer to the device manual for detailed
 * information on conversion timing and/or the current limitation mode.
 */
static inline void adc_set_clock_rate(struct adc_config *conf, uint32_t clk_adc)
{
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	2d 97       	sbiw	r28, 0x0d	; 13
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	88 87       	std	Y+8, r24	; 0x08
     3c8:	99 87       	std	Y+9, r25	; 0x09
     3ca:	4a 87       	std	Y+10, r20	; 0x0a
     3cc:	5b 87       	std	Y+11, r21	; 0x0b
     3ce:	6c 87       	std	Y+12, r22	; 0x0c
     3d0:	7d 87       	std	Y+13, r23	; 0x0d
	Assert(clk_adc <= 1400000UL);
#elif XMEGA_C
	Assert(clk_adc <= 1800000UL);
#endif

	clk_per = sysclk_get_per_hz();
     3d2:	7d df       	rcall	.-262    	; 0x2ce <sysclk_get_per_hz>
     3d4:	dc 01       	movw	r26, r24
     3d6:	cb 01       	movw	r24, r22
     3d8:	8a 83       	std	Y+2, r24	; 0x02
     3da:	9b 83       	std	Y+3, r25	; 0x03
     3dc:	ac 83       	std	Y+4, r26	; 0x04
     3de:	bd 83       	std	Y+5, r27	; 0x05
	ratio = clk_per / clk_adc;
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	9b 81       	ldd	r25, Y+3	; 0x03
     3e4:	ac 81       	ldd	r26, Y+4	; 0x04
     3e6:	bd 81       	ldd	r27, Y+5	; 0x05
     3e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     3ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     3ec:	4c 85       	ldd	r20, Y+12	; 0x0c
     3ee:	5d 85       	ldd	r21, Y+13	; 0x0d
     3f0:	bc 01       	movw	r22, r24
     3f2:	cd 01       	movw	r24, r26
     3f4:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
     3f8:	da 01       	movw	r26, r20
     3fa:	c9 01       	movw	r24, r18
     3fc:	8e 83       	std	Y+6, r24	; 0x06
     3fe:	9f 83       	std	Y+7, r25	; 0x07

	/* Round ratio up to the nearest prescaling factor. */
	if (ratio <= 4) {
     400:	8e 81       	ldd	r24, Y+6	; 0x06
     402:	9f 81       	ldd	r25, Y+7	; 0x07
     404:	85 30       	cpi	r24, 0x05	; 5
     406:	91 05       	cpc	r25, r1
     408:	10 f4       	brcc	.+4      	; 0x40e <adc_set_clock_rate+0x56>
		psc = ADC_PRESCALER_DIV4_gc;
     40a:	19 82       	std	Y+1, r1	; 0x01
     40c:	33 c0       	rjmp	.+102    	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 8) {
     40e:	8e 81       	ldd	r24, Y+6	; 0x06
     410:	9f 81       	ldd	r25, Y+7	; 0x07
     412:	89 30       	cpi	r24, 0x09	; 9
     414:	91 05       	cpc	r25, r1
     416:	18 f4       	brcc	.+6      	; 0x41e <adc_set_clock_rate+0x66>
		psc = ADC_PRESCALER_DIV8_gc;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	2b c0       	rjmp	.+86     	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 16) {
     41e:	8e 81       	ldd	r24, Y+6	; 0x06
     420:	9f 81       	ldd	r25, Y+7	; 0x07
     422:	81 31       	cpi	r24, 0x11	; 17
     424:	91 05       	cpc	r25, r1
     426:	18 f4       	brcc	.+6      	; 0x42e <adc_set_clock_rate+0x76>
		psc = ADC_PRESCALER_DIV16_gc;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	23 c0       	rjmp	.+70     	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 32) {
     42e:	8e 81       	ldd	r24, Y+6	; 0x06
     430:	9f 81       	ldd	r25, Y+7	; 0x07
     432:	81 32       	cpi	r24, 0x21	; 33
     434:	91 05       	cpc	r25, r1
     436:	18 f4       	brcc	.+6      	; 0x43e <adc_set_clock_rate+0x86>
		psc = ADC_PRESCALER_DIV32_gc;
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	1b c0       	rjmp	.+54     	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 64) {
     43e:	8e 81       	ldd	r24, Y+6	; 0x06
     440:	9f 81       	ldd	r25, Y+7	; 0x07
     442:	81 34       	cpi	r24, 0x41	; 65
     444:	91 05       	cpc	r25, r1
     446:	18 f4       	brcc	.+6      	; 0x44e <adc_set_clock_rate+0x96>
		psc = ADC_PRESCALER_DIV64_gc;
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	13 c0       	rjmp	.+38     	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 128) {
     44e:	8e 81       	ldd	r24, Y+6	; 0x06
     450:	9f 81       	ldd	r25, Y+7	; 0x07
     452:	81 38       	cpi	r24, 0x81	; 129
     454:	91 05       	cpc	r25, r1
     456:	18 f4       	brcc	.+6      	; 0x45e <adc_set_clock_rate+0xa6>
		psc = ADC_PRESCALER_DIV128_gc;
     458:	85 e0       	ldi	r24, 0x05	; 5
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	0b c0       	rjmp	.+22     	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 256) {
     45e:	8e 81       	ldd	r24, Y+6	; 0x06
     460:	9f 81       	ldd	r25, Y+7	; 0x07
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	92 07       	cpc	r25, r18
     468:	18 f4       	brcc	.+6      	; 0x470 <adc_set_clock_rate+0xb8>
		psc = ADC_PRESCALER_DIV256_gc;
     46a:	86 e0       	ldi	r24, 0x06	; 6
     46c:	89 83       	std	Y+1, r24	; 0x01
     46e:	02 c0       	rjmp	.+4      	; 0x474 <adc_set_clock_rate+0xbc>
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
     470:	87 e0       	ldi	r24, 0x07	; 7
     472:	89 83       	std	Y+1, r24	; 0x01
	}

	conf->prescaler = psc;
     474:	88 85       	ldd	r24, Y+8	; 0x08
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	29 81       	ldd	r18, Y+1	; 0x01
     47a:	fc 01       	movw	r30, r24
     47c:	23 83       	std	Z+3, r18	; 0x03
}
     47e:	2d 96       	adiw	r28, 0x0d	; 13
     480:	cd bf       	out	0x3d, r28	; 61
     482:	de bf       	out	0x3e, r29	; 62
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <adc_set_conversion_parameters>:
 * \param ref Voltage reference to use.
 */
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	25 97       	sbiw	r28, 0x05	; 5
     494:	cd bf       	out	0x3d, r28	; 61
     496:	de bf       	out	0x3e, r29	; 62
     498:	89 83       	std	Y+1, r24	; 0x01
     49a:	9a 83       	std	Y+2, r25	; 0x02
     49c:	6b 83       	std	Y+3, r22	; 0x03
     49e:	4c 83       	std	Y+4, r20	; 0x04
     4a0:	2d 83       	std	Y+5, r18	; 0x05
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	fc 01       	movw	r30, r24
     4a8:	80 81       	ld	r24, Z
     4aa:	28 2f       	mov	r18, r24
     4ac:	29 7e       	andi	r18, 0xE9	; 233
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	9a 81       	ldd	r25, Y+2	; 0x02
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ba:	fc 01       	movw	r30, r24
     4bc:	90 81       	ld	r25, Z
     4be:	2c 81       	ldd	r18, Y+4	; 0x04
     4c0:	8b 81       	ldd	r24, Y+3	; 0x03
     4c2:	82 2b       	or	r24, r18
     4c4:	29 2f       	mov	r18, r25
     4c6:	28 2b       	or	r18, r24
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18

	conf->refctrl &= ~ADC_REFSEL_gm;
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	fc 01       	movw	r30, r24
     4d6:	81 81       	ldd	r24, Z+1	; 0x01
     4d8:	28 2f       	mov	r18, r24
     4da:	2f 7c       	andi	r18, 0xCF	; 207
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	9a 81       	ldd	r25, Y+2	; 0x02
     4e0:	fc 01       	movw	r30, r24
     4e2:	21 83       	std	Z+1, r18	; 0x01
	conf->refctrl |= ref;
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	9a 81       	ldd	r25, Y+2	; 0x02
     4e8:	fc 01       	movw	r30, r24
     4ea:	91 81       	ldd	r25, Z+1	; 0x01
     4ec:	8d 81       	ldd	r24, Y+5	; 0x05
     4ee:	29 2f       	mov	r18, r25
     4f0:	28 2b       	or	r18, r24
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	9a 81       	ldd	r25, Y+2	; 0x02
     4f6:	fc 01       	movw	r30, r24
     4f8:	21 83       	std	Z+1, r18	; 0x01
}
     4fa:	25 96       	adiw	r28, 0x05	; 5
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <adc_set_conversion_trigger>:
 * \arg \c 1 - \c ADC_NR_OF_CHANNELS (must be non-zero).
 * \param base_ev_ch Base event channel, if used.
 */
static inline void adc_set_conversion_trigger(struct adc_config *conf,
		enum adc_trigger trig, uint8_t nr_of_ch, uint8_t base_ev_ch)
{
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	25 97       	sbiw	r28, 0x05	; 5
     510:	cd bf       	out	0x3d, r28	; 61
     512:	de bf       	out	0x3e, r29	; 62
     514:	89 83       	std	Y+1, r24	; 0x01
     516:	9a 83       	std	Y+2, r25	; 0x02
     518:	6b 83       	std	Y+3, r22	; 0x03
     51a:	4c 83       	std	Y+4, r20	; 0x04
     51c:	2d 83       	std	Y+5, r18	; 0x05
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	88 2f       	mov	r24, r24
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	00 97       	sbiw	r24, 0x00	; 0
     526:	21 f0       	breq	.+8      	; 0x530 <adc_set_conversion_trigger+0x2a>
     528:	82 30       	cpi	r24, 0x02	; 2
     52a:	91 05       	cpc	r25, r1
     52c:	81 f0       	breq	.+32     	; 0x54e <adc_set_conversion_trigger+0x48>
     52e:	2b c0       	rjmp	.+86     	; 0x586 <adc_set_conversion_trigger+0x80>
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	fc 01       	movw	r30, r24
     536:	80 81       	ld	r24, Z
     538:	28 2f       	mov	r18, r24
     53a:	27 7f       	andi	r18, 0xF7	; 247
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
		conf->evctrl = ADC_EVACT_NONE_gc;
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	fc 01       	movw	r30, r24
     54a:	12 82       	std	Z+2, r1	; 0x02
		break;
     54c:	1c c0       	rjmp	.+56     	; 0x586 <adc_set_conversion_trigger+0x80>

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	fc 01       	movw	r30, r24
     554:	80 81       	ld	r24, Z
     556:	28 2f       	mov	r18, r24
     558:	27 7f       	andi	r18, 0xF7	; 247
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	9a 81       	ldd	r25, Y+2	; 0x02
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
     562:	8d 81       	ldd	r24, Y+5	; 0x05
     564:	88 2f       	mov	r24, r24
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	98 2f       	mov	r25, r24
     576:	8c 81       	ldd	r24, Y+4	; 0x04
     578:	89 2b       	or	r24, r25
     57a:	28 2f       	mov	r18, r24
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	fc 01       	movw	r30, r24
     582:	22 83       	std	Z+2, r18	; 0x02
				(nr_of_ch << ADC_EVACT_gp);
		break;
     584:	00 00       	nop
#endif

	default:
		Assert(0);
	}
}
     586:	25 96       	adiw	r28, 0x05	; 5
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <adcch_get_gain_setting>:
 * \param gain Valid gain factor for the measurement.
 *
 * \return Gain setting of type ADC_CH_GAIN_t.
 */
static inline uint8_t adcch_get_gain_setting(uint8_t gain)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	1f 92       	push	r1
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	89 83       	std	Y+1, r24	; 0x01
	switch (gain) {
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	88 2f       	mov	r24, r24
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	88 30       	cpi	r24, 0x08	; 8
     5a6:	91 05       	cpc	r25, r1
     5a8:	61 f1       	breq	.+88     	; 0x602 <adcch_get_gain_setting+0x70>
     5aa:	89 30       	cpi	r24, 0x09	; 9
     5ac:	91 05       	cpc	r25, r1
     5ae:	84 f4       	brge	.+32     	; 0x5d0 <adcch_get_gain_setting+0x3e>
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	91 05       	cpc	r25, r1
     5b4:	01 f1       	breq	.+64     	; 0x5f6 <adcch_get_gain_setting+0x64>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	91 05       	cpc	r25, r1
     5ba:	1c f4       	brge	.+6      	; 0x5c2 <adcch_get_gain_setting+0x30>
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	c9 f0       	breq	.+50     	; 0x5f2 <adcch_get_gain_setting+0x60>
     5c0:	2a c0       	rjmp	.+84     	; 0x616 <adcch_get_gain_setting+0x84>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	91 05       	cpc	r25, r1
     5c6:	c9 f0       	breq	.+50     	; 0x5fa <adcch_get_gain_setting+0x68>
     5c8:	84 30       	cpi	r24, 0x04	; 4
     5ca:	91 05       	cpc	r25, r1
     5cc:	c1 f0       	breq	.+48     	; 0x5fe <adcch_get_gain_setting+0x6c>
     5ce:	23 c0       	rjmp	.+70     	; 0x616 <adcch_get_gain_setting+0x84>
     5d0:	80 32       	cpi	r24, 0x20	; 32
     5d2:	91 05       	cpc	r25, r1
     5d4:	d1 f0       	breq	.+52     	; 0x60a <adcch_get_gain_setting+0x78>
     5d6:	81 32       	cpi	r24, 0x21	; 33
     5d8:	91 05       	cpc	r25, r1
     5da:	24 f4       	brge	.+8      	; 0x5e4 <adcch_get_gain_setting+0x52>
     5dc:	80 31       	cpi	r24, 0x10	; 16
     5de:	91 05       	cpc	r25, r1
     5e0:	91 f0       	breq	.+36     	; 0x606 <adcch_get_gain_setting+0x74>
     5e2:	19 c0       	rjmp	.+50     	; 0x616 <adcch_get_gain_setting+0x84>
     5e4:	80 34       	cpi	r24, 0x40	; 64
     5e6:	91 05       	cpc	r25, r1
     5e8:	91 f0       	breq	.+36     	; 0x60e <adcch_get_gain_setting+0x7c>
     5ea:	8f 3f       	cpi	r24, 0xFF	; 255
     5ec:	91 05       	cpc	r25, r1
     5ee:	89 f0       	breq	.+34     	; 0x612 <adcch_get_gain_setting+0x80>
     5f0:	12 c0       	rjmp	.+36     	; 0x616 <adcch_get_gain_setting+0x84>
#if (CONFIG_ADC_VERSION == 2) || XMEGA_D
	case 0:
		return ADC_CH_GAIN_DIV2_tmpfix_gc;
     5f2:	8c e1       	ldi	r24, 0x1C	; 28
     5f4:	11 c0       	rjmp	.+34     	; 0x618 <adcch_get_gain_setting+0x86>
#endif
	case 1:
		return ADC_CH_GAIN_1X_gc;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0f c0       	rjmp	.+30     	; 0x618 <adcch_get_gain_setting+0x86>

	case 2:
		return ADC_CH_GAIN_2X_gc;
     5fa:	84 e0       	ldi	r24, 0x04	; 4
     5fc:	0d c0       	rjmp	.+26     	; 0x618 <adcch_get_gain_setting+0x86>

	case 4:
		return ADC_CH_GAIN_4X_gc;
     5fe:	88 e0       	ldi	r24, 0x08	; 8
     600:	0b c0       	rjmp	.+22     	; 0x618 <adcch_get_gain_setting+0x86>

	case 8:
		return ADC_CH_GAIN_8X_gc;
     602:	8c e0       	ldi	r24, 0x0C	; 12
     604:	09 c0       	rjmp	.+18     	; 0x618 <adcch_get_gain_setting+0x86>

	case 16:
		return ADC_CH_GAIN_16X_gc;
     606:	80 e1       	ldi	r24, 0x10	; 16
     608:	07 c0       	rjmp	.+14     	; 0x618 <adcch_get_gain_setting+0x86>

	case 32:
		return ADC_CH_GAIN_32X_gc;
     60a:	84 e1       	ldi	r24, 0x14	; 20
     60c:	05 c0       	rjmp	.+10     	; 0x618 <adcch_get_gain_setting+0x86>

	case 64:
		return ADC_CH_GAIN_64X_gc;
     60e:	88 e1       	ldi	r24, 0x18	; 24
     610:	03 c0       	rjmp	.+6      	; 0x618 <adcch_get_gain_setting+0x86>

	case ADCCH_FORCE_1X_GAINSTAGE:
		return ADC_CH_GAIN_1X_gc;
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	01 c0       	rjmp	.+2      	; 0x618 <adcch_get_gain_setting+0x86>

	default:
		Assert(0);
		return 0;
     616:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     618:	0f 90       	pop	r0
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <adcch_set_input>:
 * possible unless the user specifies \ref ADCCH_FORCE_1X_GAINSTAGE as \a gain.
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	25 97       	sbiw	r28, 0x05	; 5
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	9a 83       	std	Y+2, r25	; 0x02
     632:	6b 83       	std	Y+3, r22	; 0x03
     634:	4c 83       	std	Y+4, r20	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
	/* Zero gain is not applicable on other devices */
	Assert(gain);
#endif

	/* Configure for internal input. */
	if (pos >= ADCCH_POS_TEMPSENSE) {
     638:	8b 81       	ldd	r24, Y+3	; 0x03
     63a:	80 31       	cpi	r24, 0x10	; 16
     63c:	78 f0       	brcs	.+30     	; 0x65c <adcch_set_input+0x3c>
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	fc 01       	movw	r30, r24
     644:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
     646:	8b 81       	ldd	r24, Y+3	; 0x03
     648:	80 51       	subi	r24, 0x10	; 16
     64a:	28 2f       	mov	r18, r24
     64c:	22 0f       	add	r18, r18
     64e:	22 0f       	add	r18, r18
     650:	22 0f       	add	r18, r18
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	9a 81       	ldd	r25, Y+2	; 0x02
     656:	fc 01       	movw	r30, r24
     658:	21 83       	std	Z+1, r18	; 0x01
				ADC_CH_MUXPOS_gp;
		return;
     65a:	49 c0       	rjmp	.+146    	; 0x6ee <adcch_set_input+0xce>
	}

	/* Configure for single-ended measurement. */
	if (neg == ADCCH_NEG_NONE) {
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	88 30       	cpi	r24, 0x08	; 8
     660:	79 f4       	brne	.+30     	; 0x680 <adcch_set_input+0x60>
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	21 e0       	ldi	r18, 0x01	; 1
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	28 2f       	mov	r18, r24
     670:	22 0f       	add	r18, r18
     672:	22 0f       	add	r18, r18
     674:	22 0f       	add	r18, r18
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	fc 01       	movw	r30, r24
     67c:	21 83       	std	Z+1, r18	; 0x01
     67e:	37 c0       	rjmp	.+110    	; 0x6ee <adcch_set_input+0xce>
		/* Configure for differential measurement. */
	} else {
		/* Pins 0-3 can only be used for negative input if the gain
		 * stage is not used, i.e., unity gain.
		 */
		if (neg <= ADCCH_NEG_PIN3) {
     680:	8c 81       	ldd	r24, Y+4	; 0x04
     682:	84 30       	cpi	r24, 0x04	; 4
     684:	b8 f4       	brcc	.+46     	; 0x6b4 <adcch_set_input+0x94>
			Assert(gain == 1);

			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	9a 81       	ldd	r25, Y+2	; 0x02
     68a:	22 e0       	ldi	r18, 0x02	; 2
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	98 2f       	mov	r25, r24
     6a4:	8c 81       	ldd	r24, Y+4	; 0x04
     6a6:	89 2b       	or	r24, r25
     6a8:	28 2f       	mov	r18, r24
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	fc 01       	movw	r30, r24
     6b0:	21 83       	std	Z+1, r18	; 0x01
     6b2:	1d c0       	rjmp	.+58     	; 0x6ee <adcch_set_input+0xce>
					(neg << ADC_CH_MUXNEG_gp);
		} else if (neg <= ADCCH_NEG_PIN7) {
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	88 30       	cpi	r24, 0x08	; 8
     6b8:	d0 f4       	brcc	.+52     	; 0x6ee <adcch_set_input+0xce>
			 * unity
			 * gain, which is available even if the gain stage is
			 *active.
			 */
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
					adcch_get_gain_setting(gain);
     6ba:	8d 81       	ldd	r24, Y+5	; 0x05
     6bc:	6a df       	rcall	.-300    	; 0x592 <adcch_get_gain_setting>
			/* Pins 4-7 can be used for all gain settings, including
			 * unity
			 * gain, which is available even if the gain stage is
			 *active.
			 */
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
     6be:	28 2f       	mov	r18, r24
     6c0:	23 60       	ori	r18, 0x03	; 3
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
					adcch_get_gain_setting(gain);
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	88 2f       	mov	r24, r24
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	98 2f       	mov	r25, r24
     6de:	8c 81       	ldd	r24, Y+4	; 0x04
     6e0:	84 50       	subi	r24, 0x04	; 4
     6e2:	89 2b       	or	r24, r25
     6e4:	28 2f       	mov	r18, r24
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	fc 01       	movw	r30, r24
     6ec:	21 83       	std	Z+1, r18	; 0x01
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
					(neg << ADC_CH_MUXNEG_gp);
		}
#endif
	}
}
     6ee:	25 96       	adiw	r28, 0x05	; 5
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <setupAnalog>:
#include "joysticks.h"

static struct adc_config         analog_config;
static struct adc_channel_config analog_channel_config;

void setupAnalog(void) {
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	
	// Populate the structs with default values:
	adc_read_configuration(&JOYSTICK_ADC_MODULE, &analog_config);
     702:	62 e5       	ldi	r22, 0x52	; 82
     704:	76 e2       	ldi	r23, 0x26	; 38
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <adc_read_configuration>
	adcch_read_configuration(&JOYSTICK_ADC_MODULE, JOYSTICK_ADC_CHANNEL, &analog_channel_config);
     70e:	48 e5       	ldi	r20, 0x58	; 88
     710:	56 e2       	ldi	r21, 0x26	; 38
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <adcch_read_configuration>
	
	// Configure the ADC
	adc_set_conversion_parameters(&analog_config, DRONE_ADC_SIGN,DRONE_ADC_RES,ADC_REF_AREFA); // Reference is VCC/1.6
     71c:	20 e2       	ldi	r18, 0x20	; 32
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	82 e5       	ldi	r24, 0x52	; 82
     724:	96 e2       	ldi	r25, 0x26	; 38
     726:	b1 de       	rcall	.-670    	; 0x48a <adc_set_conversion_parameters>
	adc_set_conversion_trigger(&analog_config, ADC_TRIG_MANUAL, 1, 0);
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	41 e0       	ldi	r20, 0x01	; 1
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	82 e5       	ldi	r24, 0x52	; 82
     730:	96 e2       	ldi	r25, 0x26	; 38
     732:	e9 de       	rcall	.-558    	; 0x506 <adc_set_conversion_trigger>
	
	// Set the adc clock rate:
	adc_set_clock_rate(&analog_config, ADC_CLOCK_HZ);
     734:	40 e2       	ldi	r20, 0x20	; 32
     736:	51 ea       	ldi	r21, 0xA1	; 161
     738:	67 e0       	ldi	r22, 0x07	; 7
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	82 e5       	ldi	r24, 0x52	; 82
     73e:	96 e2       	ldi	r25, 0x26	; 38
     740:	3b de       	rcall	.-906    	; 0x3b8 <adc_set_clock_rate>

	// Write the configuration to its registers:
	adc_write_configuration(&JOYSTICK_ADC_MODULE, &analog_config);
     742:	62 e5       	ldi	r22, 0x52	; 82
     744:	76 e2       	ldi	r23, 0x26	; 38
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <adc_write_configuration>
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <AdcInput>:

void AdcInput(enum adcch_positive_input channel)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	89 83       	std	Y+1, r24	; 0x01
	// Select the input to the adc:
	adcch_set_input(&analog_channel_config, channel, ADCCH_NEG_NONE, 1);
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	48 e0       	ldi	r20, 0x08	; 8
     764:	69 81       	ldd	r22, Y+1	; 0x01
     766:	88 e5       	ldi	r24, 0x58	; 88
     768:	96 e2       	ldi	r25, 0x26	; 38
     76a:	5a df       	rcall	.-332    	; 0x620 <adcch_set_input>

	// Write the channel configuration:
	adcch_write_configuration(&JOYSTICK_ADC_MODULE, JOYSTICK_ADC_CHANNEL, &analog_channel_config);
     76c:	48 e5       	ldi	r20, 0x58	; 88
     76e:	56 e2       	ldi	r21, 0x26	; 38
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <adcch_write_configuration>
};
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <AdcSample>:

//THIS IS BLOCKING!
uint16_t AdcSample(void)
{
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <AdcSample+0x6>
     788:	00 d0       	rcall	.+0      	; 0x78a <AdcSample+0x8>
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
	// Start the conversion:
	adc_start_conversion(&JOYSTICK_ADC_MODULE, JOYSTICK_ADC_CHANNEL);
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	a8 dd       	rcall	.-1200   	; 0x2e6 <adc_start_conversion>
		
	// Wait for it to finish:
	adc_wait_for_interrupt_flag(&JOYSTICK_ADC_MODULE, JOYSTICK_ADC_CHANNEL); //THIS IS BLOCKING!
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	f2 dd       	rcall	.-1052   	; 0x382 <adc_wait_for_interrupt_flag>
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	89 83       	std	Y+1, r24	; 0x01
     7a4:	9a 83       	std	Y+2, r25	; 0x02
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	8c 83       	std	Y+4, r24	; 0x04
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     7aa:	1b 82       	std	Y+3, r1	; 0x03
	if (!(ch_mask & 0x01)) {
		index++;
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	9c 01       	movw	r18, r24
     7b2:	20 5e       	subi	r18, 0xE0	; 224
     7b4:	3f 4f       	sbci	r19, 0xFF	; 255
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	88 2f       	mov	r24, r24
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	82 0f       	add	r24, r18
     7ca:	93 1f       	adc	r25, r19

	// Return the result
	return (adc_get_result(&JOYSTICK_ADC_MODULE, JOYSTICK_ADC_CHANNEL)); //was flipping by inverting result
     7cc:	fc 01       	movw	r30, r24
     7ce:	84 81       	ldd	r24, Z+4	; 0x04
     7d0:	95 81       	ldd	r25, Z+5	; 0x05
}
     7d2:	24 96       	adiw	r28, 0x04	; 4
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <sampleAnalogChannel>:

uint16_t sampleAnalogChannel(enum adcch_positive_input channel) {
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <sampleAnalogChannel+0x6>
     7e4:	1f 92       	push	r1
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t result;
	AdcInput(channel);
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	b2 df       	rcall	.-156    	; 0x754 <AdcInput>
	result = AdcSample();
     7f0:	c8 df       	rcall	.-112    	; 0x782 <AdcSample>
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	9a 83       	std	Y+2, r25	; 0x02
	return result;
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
};
     7fa:	23 96       	adiw	r28, 0x03	; 3
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <enableAnalog>:

void enableAnalog(void)
{
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
	adc_enable(&JOYSTICK_ADC_MODULE);
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	0e 94 9d 2c 	call	0x593a	; 0x593a <adc_enable>
}
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <ioport_init>:
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <ioport_set_pin_mode>:
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	2a 97       	sbiw	r28, 0x0a	; 10
     834:	cd bf       	out	0x3d, r28	; 61
     836:	de bf       	out	0x3e, r29	; 62
     838:	89 87       	std	Y+9, r24	; 0x09
     83a:	6a 87       	std	Y+10, r22	; 0x0a
     83c:	89 85       	ldd	r24, Y+9	; 0x09
     83e:	89 83       	std	Y+1, r24	; 0x01
     840:	8a 85       	ldd	r24, Y+10	; 0x0a
     842:	8a 83       	std	Y+2, r24	; 0x02
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	8b 83       	std	Y+3, r24	; 0x03
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	8c 83       	std	Y+4, r24	; 0x04
     84c:	8c 81       	ldd	r24, Y+4	; 0x04
     84e:	86 95       	lsr	r24
     850:	86 95       	lsr	r24
     852:	86 95       	lsr	r24
     854:	8d 83       	std	Y+5, r24	; 0x05
     856:	8d 81       	ldd	r24, Y+5	; 0x05
     858:	88 2f       	mov	r24, r24
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	82 95       	swap	r24
     862:	92 95       	swap	r25
     864:	90 7f       	andi	r25, 0xF0	; 240
     866:	98 27       	eor	r25, r24
     868:	80 7f       	andi	r24, 0xF0	; 240
     86a:	98 27       	eor	r25, r24
     86c:	9a 5f       	subi	r25, 0xFA	; 250
     86e:	8e 83       	std	Y+6, r24	; 0x06
     870:	9f 83       	std	Y+7, r25	; 0x07
     872:	80 eb       	ldi	r24, 0xB0	; 176
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	29 81       	ldd	r18, Y+1	; 0x01
     878:	28 87       	std	Y+8, r18	; 0x08
     87a:	28 85       	ldd	r18, Y+8	; 0x08
     87c:	22 2f       	mov	r18, r18
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	a9 01       	movw	r20, r18
     882:	47 70       	andi	r20, 0x07	; 7
     884:	55 27       	eor	r21, r21
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	04 2e       	mov	r0, r20
     88c:	02 c0       	rjmp	.+4      	; 0x892 <ioport_set_pin_mode+0x68>
     88e:	22 0f       	add	r18, r18
     890:	33 1f       	adc	r19, r19
     892:	0a 94       	dec	r0
     894:	e2 f7       	brpl	.-8      	; 0x88e <ioport_set_pin_mode+0x64>
     896:	fc 01       	movw	r30, r24
     898:	20 83       	st	Z, r18
     89a:	8e 81       	ldd	r24, Y+6	; 0x06
     89c:	9f 81       	ldd	r25, Y+7	; 0x07
     89e:	2a 81       	ldd	r18, Y+2	; 0x02
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 8b       	std	Z+16, r18	; 0x10
     8a4:	2a 96       	adiw	r28, 0x0a	; 10
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <ioport_set_pin_dir>:
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	2b 97       	sbiw	r28, 0x0b	; 11
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	8a 87       	std	Y+10, r24	; 0x0a
     8c0:	6b 87       	std	Y+11, r22	; 0x0b
     8c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     8c8:	8a 83       	std	Y+2, r24	; 0x02
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	8b 83       	std	Y+3, r24	; 0x03
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	8c 83       	std	Y+4, r24	; 0x04
     8d2:	8c 81       	ldd	r24, Y+4	; 0x04
     8d4:	86 95       	lsr	r24
     8d6:	86 95       	lsr	r24
     8d8:	86 95       	lsr	r24
     8da:	8d 83       	std	Y+5, r24	; 0x05
     8dc:	8d 81       	ldd	r24, Y+5	; 0x05
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	82 95       	swap	r24
     8e8:	92 95       	swap	r25
     8ea:	90 7f       	andi	r25, 0xF0	; 240
     8ec:	98 27       	eor	r25, r24
     8ee:	80 7f       	andi	r24, 0xF0	; 240
     8f0:	98 27       	eor	r25, r24
     8f2:	9a 5f       	subi	r25, 0xFA	; 250
     8f4:	8e 83       	std	Y+6, r24	; 0x06
     8f6:	9f 83       	std	Y+7, r25	; 0x07
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	a9 f4       	brne	.+42     	; 0x928 <ioport_set_pin_dir+0x78>
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	88 87       	std	Y+8, r24	; 0x08
     902:	88 85       	ldd	r24, Y+8	; 0x08
     904:	88 2f       	mov	r24, r24
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	9c 01       	movw	r18, r24
     90a:	27 70       	andi	r18, 0x07	; 7
     90c:	33 27       	eor	r19, r19
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	02 c0       	rjmp	.+4      	; 0x918 <ioport_set_pin_dir+0x68>
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	2a 95       	dec	r18
     91a:	e2 f7       	brpl	.-8      	; 0x914 <ioport_set_pin_dir+0x64>
     91c:	28 2f       	mov	r18, r24
     91e:	8e 81       	ldd	r24, Y+6	; 0x06
     920:	9f 81       	ldd	r25, Y+7	; 0x07
     922:	fc 01       	movw	r30, r24
     924:	21 83       	std	Z+1, r18	; 0x01
     926:	17 c0       	rjmp	.+46     	; 0x956 <ioport_set_pin_dir+0xa6>
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	88 23       	and	r24, r24
     92c:	a1 f4       	brne	.+40     	; 0x956 <ioport_set_pin_dir+0xa6>
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	89 87       	std	Y+9, r24	; 0x09
     932:	89 85       	ldd	r24, Y+9	; 0x09
     934:	88 2f       	mov	r24, r24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9c 01       	movw	r18, r24
     93a:	27 70       	andi	r18, 0x07	; 7
     93c:	33 27       	eor	r19, r19
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	02 c0       	rjmp	.+4      	; 0x948 <ioport_set_pin_dir+0x98>
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	2a 95       	dec	r18
     94a:	e2 f7       	brpl	.-8      	; 0x944 <ioport_set_pin_dir+0x94>
     94c:	28 2f       	mov	r18, r24
     94e:	8e 81       	ldd	r24, Y+6	; 0x06
     950:	9f 81       	ldd	r25, Y+7	; 0x07
     952:	fc 01       	movw	r30, r24
     954:	22 83       	std	Z+2, r18	; 0x02
     956:	2b 96       	adiw	r28, 0x0b	; 11
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <ioport_set_pin_level>:
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	2b 97       	sbiw	r28, 0x0b	; 11
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	de bf       	out	0x3e, r29	; 62
     970:	8a 87       	std	Y+10, r24	; 0x0a
     972:	6b 87       	std	Y+11, r22	; 0x0b
     974:	8a 85       	ldd	r24, Y+10	; 0x0a
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	8b 85       	ldd	r24, Y+11	; 0x0b
     97a:	8a 83       	std	Y+2, r24	; 0x02
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	8b 83       	std	Y+3, r24	; 0x03
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	8c 83       	std	Y+4, r24	; 0x04
     984:	8c 81       	ldd	r24, Y+4	; 0x04
     986:	86 95       	lsr	r24
     988:	86 95       	lsr	r24
     98a:	86 95       	lsr	r24
     98c:	8d 83       	std	Y+5, r24	; 0x05
     98e:	8d 81       	ldd	r24, Y+5	; 0x05
     990:	88 2f       	mov	r24, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	82 95       	swap	r24
     99a:	92 95       	swap	r25
     99c:	90 7f       	andi	r25, 0xF0	; 240
     99e:	98 27       	eor	r25, r24
     9a0:	80 7f       	andi	r24, 0xF0	; 240
     9a2:	98 27       	eor	r25, r24
     9a4:	9a 5f       	subi	r25, 0xFA	; 250
     9a6:	8e 83       	std	Y+6, r24	; 0x06
     9a8:	9f 83       	std	Y+7, r25	; 0x07
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	88 23       	and	r24, r24
     9ae:	a9 f0       	breq	.+42     	; 0x9da <ioport_set_pin_level+0x78>
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	88 87       	std	Y+8, r24	; 0x08
     9b4:	88 85       	ldd	r24, Y+8	; 0x08
     9b6:	88 2f       	mov	r24, r24
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	9c 01       	movw	r18, r24
     9bc:	27 70       	andi	r18, 0x07	; 7
     9be:	33 27       	eor	r19, r19
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <ioport_set_pin_level+0x68>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	2a 95       	dec	r18
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <ioport_set_pin_level+0x64>
     9ce:	28 2f       	mov	r18, r24
     9d0:	8e 81       	ldd	r24, Y+6	; 0x06
     9d2:	9f 81       	ldd	r25, Y+7	; 0x07
     9d4:	fc 01       	movw	r30, r24
     9d6:	25 83       	std	Z+5, r18	; 0x05
     9d8:	14 c0       	rjmp	.+40     	; 0xa02 <ioport_set_pin_level+0xa0>
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	89 87       	std	Y+9, r24	; 0x09
     9de:	89 85       	ldd	r24, Y+9	; 0x09
     9e0:	88 2f       	mov	r24, r24
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	9c 01       	movw	r18, r24
     9e6:	27 70       	andi	r18, 0x07	; 7
     9e8:	33 27       	eor	r19, r19
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <ioport_set_pin_level+0x92>
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	2a 95       	dec	r18
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <ioport_set_pin_level+0x8e>
     9f8:	28 2f       	mov	r18, r24
     9fa:	8e 81       	ldd	r24, Y+6	; 0x06
     9fc:	9f 81       	ldd	r25, Y+7	; 0x07
     9fe:	fc 01       	movw	r30, r24
     a00:	26 83       	std	Z+6, r18	; 0x06
     a02:	2b 96       	adiw	r28, 0x0b	; 11
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <board_init>:

#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	// Enable ioport:
	ioport_init();
     a16:	02 df       	rcall	.-508    	; 0x81c <ioport_init>

	// Setup the power pins:
	ioport_set_pin_level(POWER_SWITCH_PIN, 1); // 1- enable power, 0 - disable power
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	81 e1       	ldi	r24, 0x11	; 17
     a1c:	a2 df       	rcall	.-188    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (POWER_SWITCH_PIN, IOPORT_DIR_OUTPUT);
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	81 e1       	ldi	r24, 0x11	; 17
     a22:	46 df       	rcall	.-372    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (POWER_SWITCH_PIN, IOPORT_MODE_WIREDOR);
     a24:	60 e2       	ldi	r22, 0x20	; 32
     a26:	81 e1       	ldi	r24, 0x11	; 17
     a28:	00 df       	rcall	.-512    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (CHRG_STAT_PIN, IOPORT_DIR_INPUT);
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	80 e1       	ldi	r24, 0x10	; 16
     a2e:	40 df       	rcall	.-384    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(CHRG_STAT_PIN, IOPORT_MODE_PULLUP);// IOPORT_MODE_TOTEM);
     a30:	68 e1       	ldi	r22, 0x18	; 24
     a32:	80 e1       	ldi	r24, 0x10	; 16
     a34:	fa de       	rcall	.-524    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (BATTERY_DETECT_PIN, IOPORT_DIR_INPUT);
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	3a df       	rcall	.-396    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(BATTERY_DETECT_PIN, IOPORT_MODE_TOTEM);
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	f4 de       	rcall	.-536    	; 0x82a <ioport_set_pin_mode>
	
	// Setup the buttons:
	ioport_set_pin_dir (UP_PIN, IOPORT_DIR_INPUT);
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	89 e0       	ldi	r24, 0x09	; 9
     a46:	34 df       	rcall	.-408    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(UP_PIN, IOPORT_MODE_PULLUP);
     a48:	68 e1       	ldi	r22, 0x18	; 24
     a4a:	89 e0       	ldi	r24, 0x09	; 9
     a4c:	ee de       	rcall	.-548    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (DOWN_PIN, IOPORT_DIR_INPUT);
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	8d e0       	ldi	r24, 0x0D	; 13
     a52:	2e df       	rcall	.-420    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(DOWN_PIN, IOPORT_MODE_PULLUP);
     a54:	68 e1       	ldi	r22, 0x18	; 24
     a56:	8d e0       	ldi	r24, 0x0D	; 13
     a58:	e8 de       	rcall	.-560    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (LEFT_PIN, IOPORT_DIR_INPUT);
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	8b e0       	ldi	r24, 0x0B	; 11
     a5e:	28 df       	rcall	.-432    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(LEFT_PIN, IOPORT_MODE_PULLUP);
     a60:	68 e1       	ldi	r22, 0x18	; 24
     a62:	8b e0       	ldi	r24, 0x0B	; 11
     a64:	e2 de       	rcall	.-572    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (RIGHT_PIN, IOPORT_DIR_INPUT);
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	22 df       	rcall	.-444    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(RIGHT_PIN, IOPORT_MODE_PULLUP);
     a6c:	68 e1       	ldi	r22, 0x18	; 24
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	dc de       	rcall	.-584    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (A_PIN, IOPORT_DIR_INPUT);
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	85 e0       	ldi	r24, 0x05	; 5
     a76:	1c df       	rcall	.-456    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(A_PIN, IOPORT_MODE_PULLUP);
     a78:	68 e1       	ldi	r22, 0x18	; 24
     a7a:	85 e0       	ldi	r24, 0x05	; 5
     a7c:	d6 de       	rcall	.-596    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (B_PIN, IOPORT_DIR_INPUT);
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	8c e2       	ldi	r24, 0x2C	; 44
     a82:	16 df       	rcall	.-468    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(B_PIN, IOPORT_MODE_PULLUP);
     a84:	68 e1       	ldi	r22, 0x18	; 24
     a86:	8c e2       	ldi	r24, 0x2C	; 44
     a88:	d0 de       	rcall	.-608    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (X_PIN, IOPORT_DIR_INPUT);
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	84 e0       	ldi	r24, 0x04	; 4
     a8e:	10 df       	rcall	.-480    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(X_PIN, IOPORT_MODE_PULLUP);
     a90:	68 e1       	ldi	r22, 0x18	; 24
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	ca de       	rcall	.-620    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (Y_PIN, IOPORT_DIR_INPUT);
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	87 e0       	ldi	r24, 0x07	; 7
     a9a:	0a df       	rcall	.-492    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(Y_PIN, IOPORT_MODE_PULLUP);
     a9c:	68 e1       	ldi	r22, 0x18	; 24
     a9e:	87 e0       	ldi	r24, 0x07	; 7
     aa0:	c4 de       	rcall	.-632    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (START_PIN, IOPORT_DIR_INPUT);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	8a e2       	ldi	r24, 0x2A	; 42
     aa6:	04 df       	rcall	.-504    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(START_PIN, IOPORT_MODE_PULLDOWN);
     aa8:	60 e1       	ldi	r22, 0x10	; 16
     aaa:	8a e2       	ldi	r24, 0x2A	; 42
     aac:	be de       	rcall	.-644    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (SELECT_PIN, IOPORT_DIR_INPUT);
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	8d e2       	ldi	r24, 0x2D	; 45
     ab2:	fe de       	rcall	.-516    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(SELECT_PIN, IOPORT_MODE_PULLUP);
     ab4:	68 e1       	ldi	r22, 0x18	; 24
     ab6:	8d e2       	ldi	r24, 0x2D	; 45
     ab8:	b8 de       	rcall	.-656    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (RB_PIN, IOPORT_DIR_INPUT);
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	8f e2       	ldi	r24, 0x2F	; 47
     abe:	f8 de       	rcall	.-528    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(RB_PIN, IOPORT_MODE_PULLUP);
     ac0:	68 e1       	ldi	r22, 0x18	; 24
     ac2:	8f e2       	ldi	r24, 0x2F	; 47
     ac4:	b2 de       	rcall	.-668    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (LB_PIN, IOPORT_DIR_INPUT);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	8e e2       	ldi	r24, 0x2E	; 46
     aca:	f2 de       	rcall	.-540    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(LB_PIN, IOPORT_MODE_PULLUP);
     acc:	68 e1       	ldi	r22, 0x18	; 24
     ace:	8e e2       	ldi	r24, 0x2E	; 46
     ad0:	ac de       	rcall	.-680    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (RT_PIN, IOPORT_DIR_INPUT);
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	ec de       	rcall	.-552    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(RT_PIN, IOPORT_MODE_PULLUP);
     ad8:	68 e1       	ldi	r22, 0x18	; 24
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	a6 de       	rcall	.-692    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (LT_PIN, IOPORT_DIR_INPUT);
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	8c e0       	ldi	r24, 0x0C	; 12
     ae2:	e6 de       	rcall	.-564    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(LT_PIN, IOPORT_MODE_PULLUP);
     ae4:	68 e1       	ldi	r22, 0x18	; 24
     ae6:	8c e0       	ldi	r24, 0x0C	; 12
     ae8:	a0 de       	rcall	.-704    	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(JOYSTICK_L_CLICK, IOPORT_DIR_INPUT);
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	8d e1       	ldi	r24, 0x1D	; 29
     aee:	e0 de       	rcall	.-576    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_L_CLICK, IOPORT_MODE_PULLUP);
     af0:	68 e1       	ldi	r22, 0x18	; 24
     af2:	8d e1       	ldi	r24, 0x1D	; 29
     af4:	9a de       	rcall	.-716    	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(JOYSTICK_R_CLICK, IOPORT_DIR_INPUT);
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	8c e1       	ldi	r24, 0x1C	; 28
     afa:	da de       	rcall	.-588    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_R_CLICK, IOPORT_MODE_PULLUP);	
     afc:	68 e1       	ldi	r22, 0x18	; 24
     afe:	8c e1       	ldi	r24, 0x1C	; 28
     b00:	94 de       	rcall	.-728    	; 0x82a <ioport_set_pin_mode>
	
	// Setup the joysticks:
	ioport_set_pin_dir (JOYSTICK_L_X_PIN, IOPORT_DIR_INPUT);
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	86 e0       	ldi	r24, 0x06	; 6
     b06:	d4 de       	rcall	.-600    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_L_X_PIN, IOPORT_MODE_TOTEM);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	86 e0       	ldi	r24, 0x06	; 6
     b0c:	8e de       	rcall	.-740    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (JOYSTICK_L_Y_PIN, IOPORT_DIR_INPUT);
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	88 e0       	ldi	r24, 0x08	; 8
     b12:	ce de       	rcall	.-612    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_L_Y_PIN, IOPORT_MODE_TOTEM);
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	88 e0       	ldi	r24, 0x08	; 8
     b18:	88 de       	rcall	.-752    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (JOYSTICK_R_X_PIN, IOPORT_DIR_INPUT);
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	8e e0       	ldi	r24, 0x0E	; 14
     b1e:	c8 de       	rcall	.-624    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_R_X_PIN, IOPORT_MODE_TOTEM);
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	8e e0       	ldi	r24, 0x0E	; 14
     b24:	82 de       	rcall	.-764    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (JOYSTICK_R_Y_PIN, IOPORT_DIR_INPUT);
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	8f e0       	ldi	r24, 0x0F	; 15
     b2a:	c2 de       	rcall	.-636    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_R_Y_PIN, IOPORT_MODE_TOTEM);
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	8f e0       	ldi	r24, 0x0F	; 15
     b30:	7c de       	rcall	.-776    	; 0x82a <ioport_set_pin_mode>
	
	// Setup the bluetooth pins:	
	ioport_set_pin_level(BT_RESET_PIN, true); // Hold it in reset.
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	80 e2       	ldi	r24, 0x20	; 32
     b36:	15 df       	rcall	.-470    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_RESET_PIN, IOPORT_DIR_OUTPUT);
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	80 e2       	ldi	r24, 0x20	; 32
     b3c:	b9 de       	rcall	.-654    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_RESET_PIN, IOPORT_MODE_TOTEM);
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	80 e2       	ldi	r24, 0x20	; 32
     b42:	73 de       	rcall	.-794    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(BT_FACTORY_RESET_PIN, true); // Float to default (low)
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	88 e2       	ldi	r24, 0x28	; 40
     b48:	0c df       	rcall	.-488    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_FACTORY_RESET_PIN, IOPORT_DIR_OUTPUT);
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	88 e2       	ldi	r24, 0x28	; 40
     b4e:	b0 de       	rcall	.-672    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_FACTORY_RESET_PIN, IOPORT_MODE_TOTEM);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	88 e2       	ldi	r24, 0x28	; 40
     b54:	6a de       	rcall	.-812    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(BT_CTS_PIN, false); // Default - enable transmitter.
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	84 e2       	ldi	r24, 0x24	; 36
     b5a:	03 df       	rcall	.-506    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_CTS_PIN, IOPORT_DIR_INPUT);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	84 e2       	ldi	r24, 0x24	; 36
     b60:	a7 de       	rcall	.-690    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_CTS_PIN, IOPORT_MODE_TOTEM);
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	84 e2       	ldi	r24, 0x24	; 36
     b66:	61 de       	rcall	.-830    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir  (BT_RTS_PIN, IOPORT_DIR_OUTPUT);
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	81 e2       	ldi	r24, 0x21	; 33
     b6c:	a1 de       	rcall	.-702    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_RTS_PIN, IOPORT_MODE_TOTEM);
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	81 e2       	ldi	r24, 0x21	; 33
     b72:	5b de       	rcall	.-842    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(BT_TX_PIN, true); // Hold it high.
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	83 e2       	ldi	r24, 0x23	; 35
     b78:	f4 de       	rcall	.-536    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_TX_PIN, IOPORT_DIR_OUTPUT);
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	83 e2       	ldi	r24, 0x23	; 35
     b7e:	98 de       	rcall	.-720    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_TX_PIN, IOPORT_MODE_TOTEM);
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	83 e2       	ldi	r24, 0x23	; 35
     b84:	52 de       	rcall	.-860    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(BT_RX_PIN, true);
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	82 e2       	ldi	r24, 0x22	; 34
     b8a:	eb de       	rcall	.-554    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_RX_PIN, IOPORT_DIR_INPUT);
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	82 e2       	ldi	r24, 0x22	; 34
     b90:	8f de       	rcall	.-738    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_RX_PIN, IOPORT_MODE_TOTEM);
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	82 e2       	ldi	r24, 0x22	; 34
     b96:	49 de       	rcall	.-878    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(BT_ENABLE_PIN, false); // Hold power off (low)
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	85 e2       	ldi	r24, 0x25	; 37
     b9c:	e2 de       	rcall	.-572    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_ENABLE_PIN, IOPORT_DIR_OUTPUT);
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	85 e2       	ldi	r24, 0x25	; 37
     ba2:	86 de       	rcall	.-756    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_ENABLE_PIN, IOPORT_MODE_TOTEM);
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	85 e2       	ldi	r24, 0x25	; 37
     ba8:	40 de       	rcall	.-896    	; 0x82a <ioport_set_pin_mode>

	// Setup led pins: (Default: off)
	ioport_set_pin_level(RED_LED_PIN, true); 
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	89 e2       	ldi	r24, 0x29	; 41
     bae:	d9 de       	rcall	.-590    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (RED_LED_PIN,   IOPORT_DIR_OUTPUT);
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	89 e2       	ldi	r24, 0x29	; 41
     bb4:	7d de       	rcall	.-774    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (RED_LED_PIN,   IOPORT_MODE_TOTEM);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	89 e2       	ldi	r24, 0x29	; 41
     bba:	37 de       	rcall	.-914    	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_level(GREEN_LED_PIN, true);
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	88 e1       	ldi	r24, 0x18	; 24
     bc0:	d0 de       	rcall	.-608    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (GREEN_LED_PIN, IOPORT_DIR_OUTPUT);
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	88 e1       	ldi	r24, 0x18	; 24
     bc6:	74 de       	rcall	.-792    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (GREEN_LED_PIN, IOPORT_MODE_TOTEM);
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	88 e1       	ldi	r24, 0x18	; 24
     bcc:	2e de       	rcall	.-932    	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_level(BLUE_LED_PIN, true);
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	89 e1       	ldi	r24, 0x19	; 25
     bd2:	c7 de       	rcall	.-626    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BLUE_LED_PIN,  IOPORT_DIR_OUTPUT);
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	89 e1       	ldi	r24, 0x19	; 25
     bd8:	6b de       	rcall	.-810    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BLUE_LED_PIN,  IOPORT_MODE_TOTEM);
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	89 e1       	ldi	r24, 0x19	; 25
     bde:	25 de       	rcall	.-950    	; 0x82a <ioport_set_pin_mode>

	// Setup USB:
	ioport_set_pin_dir  (USB_5V_PIN, IOPORT_DIR_INPUT);
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	8a e0       	ldi	r24, 0x0A	; 10
     be4:	65 de       	rcall	.-822    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (USB_5V_PIN, IOPORT_MODE_PULLUP);
     be6:	68 e1       	ldi	r22, 0x18	; 24
     be8:	8a e0       	ldi	r24, 0x0A	; 10
     bea:	1f de       	rcall	.-962    	; 0x82a <ioport_set_pin_mode>
	
	// Setup USB UART:
	ioport_set_pin_level(USB_TX_PIN, true); // Hold it high.
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	83 e1       	ldi	r24, 0x13	; 19
     bf0:	b8 de       	rcall	.-656    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (USB_TX_PIN, IOPORT_DIR_OUTPUT);
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	83 e1       	ldi	r24, 0x13	; 19
     bf6:	5c de       	rcall	.-840    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (USB_TX_PIN, IOPORT_MODE_TOTEM);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	83 e1       	ldi	r24, 0x13	; 19
     bfc:	16 de       	rcall	.-980    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(USB_RX_PIN, true);
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	82 e1       	ldi	r24, 0x12	; 18
     c02:	af de       	rcall	.-674    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (USB_RX_PIN, IOPORT_DIR_INPUT);
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	82 e1       	ldi	r24, 0x12	; 18
     c08:	53 de       	rcall	.-858    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (USB_RX_PIN, IOPORT_MODE_TOTEM);
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	82 e1       	ldi	r24, 0x12	; 18
     c0e:	0d de       	rcall	.-998    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(USB_RESET_PIN, true); // Release it from reset.
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	87 e2       	ldi	r24, 0x27	; 39
     c14:	a6 de       	rcall	.-692    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (USB_RESET_PIN, IOPORT_DIR_OUTPUT);
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	87 e2       	ldi	r24, 0x27	; 39
     c1a:	4a de       	rcall	.-876    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (USB_RESET_PIN, IOPORT_MODE_TOTEM);
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	87 e2       	ldi	r24, 0x27	; 39
     c20:	04 de       	rcall	.-1016   	; 0x82a <ioport_set_pin_mode>

	// Setup debug UART:
	ioport_set_pin_level(DEBUG_TX_PIN, true); // Hold it high.
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	8b e1       	ldi	r24, 0x1B	; 27
     c26:	9d de       	rcall	.-710    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (DEBUG_TX_PIN, IOPORT_DIR_OUTPUT);
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	8b e1       	ldi	r24, 0x1B	; 27
     c2c:	41 de       	rcall	.-894    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (DEBUG_TX_PIN, IOPORT_MODE_TOTEM);
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	8b e1       	ldi	r24, 0x1B	; 27
     c32:	fb dd       	rcall	.-1034   	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir  (DEBUG_RX_PIN, IOPORT_DIR_INPUT);
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	8a e1       	ldi	r24, 0x1A	; 26
     c38:	3b de       	rcall	.-906    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (DEBUG_RX_PIN, IOPORT_MODE_TOTEM);
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	8a e1       	ldi	r24, 0x1A	; 26
     c3e:	f5 dd       	rcall	.-1046   	; 0x82a <ioport_set_pin_mode>
	
	// Manufacture Test Pins
	ioport_set_pin_dir(IsManufactureTestMode, IOPORT_DIR_INPUT); // Input from Test Jig
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	8f e1       	ldi	r24, 0x1F	; 31
     c44:	35 de       	rcall	.-918    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(IsManufactureTestMode, IOPORT_MODE_PULLDOWN);	
     c46:	60 e1       	ldi	r22, 0x10	; 16
     c48:	8f e1       	ldi	r24, 0x1F	; 31
     c4a:	ef dd       	rcall	.-1058   	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(DRONE_GPIO_0, IOPORT_DIR_INPUT);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	84 e1       	ldi	r24, 0x14	; 20
     c50:	2f de       	rcall	.-930    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(DRONE_GPIO_0, IOPORT_MODE_PULLDOWN);
     c52:	60 e1       	ldi	r22, 0x10	; 16
     c54:	84 e1       	ldi	r24, 0x14	; 20
     c56:	e9 dd       	rcall	.-1070   	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(DRONE_GPIO_1, IOPORT_DIR_INPUT);
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	85 e1       	ldi	r24, 0x15	; 21
     c5c:	29 de       	rcall	.-942    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(DRONE_GPIO_1, IOPORT_MODE_PULLDOWN);
     c5e:	60 e1       	ldi	r22, 0x10	; 16
     c60:	85 e1       	ldi	r24, 0x15	; 21
     c62:	e3 dd       	rcall	.-1082   	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(DRONE_GPIO_2, IOPORT_DIR_INPUT);
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	86 e1       	ldi	r24, 0x16	; 22
     c68:	23 de       	rcall	.-954    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(DRONE_GPIO_2, IOPORT_MODE_PULLDOWN);
     c6a:	60 e1       	ldi	r22, 0x10	; 16
     c6c:	86 e1       	ldi	r24, 0x16	; 22
     c6e:	dd dd       	rcall	.-1094   	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(DRONE_GPIO_3, IOPORT_DIR_INPUT);
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	87 e1       	ldi	r24, 0x17	; 23
     c74:	1d de       	rcall	.-966    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(DRONE_GPIO_3, IOPORT_MODE_PULLDOWN);
     c76:	60 e1       	ldi	r22, 0x10	; 16
     c78:	87 e1       	ldi	r24, 0x17	; 23
     c7a:	d7 dd       	rcall	.-1106   	; 0x82a <ioport_set_pin_mode>
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <cpu_irq_save>:
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	1f 92       	push	r1
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	8f e3       	ldi	r24, 0x3F	; 63
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	fc 01       	movw	r30, r24
     c92:	80 81       	ld	r24, Z
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	f8 94       	cli
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	0f 90       	pop	r0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <cpu_irq_restore>:
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	1f 92       	push	r1
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	8f e3       	ldi	r24, 0x3F	; 63
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	29 81       	ldd	r18, Y+1	; 0x01
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18
     cb8:	0f 90       	pop	r0
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <ioport_set_pin_mode>:
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	2a 97       	sbiw	r28, 0x0a	; 10
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	89 87       	std	Y+9, r24	; 0x09
     cd0:	6a 87       	std	Y+10, r22	; 0x0a
     cd2:	89 85       	ldd	r24, Y+9	; 0x09
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd8:	8a 83       	std	Y+2, r24	; 0x02
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	8b 83       	std	Y+3, r24	; 0x03
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	8c 83       	std	Y+4, r24	; 0x04
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	86 95       	lsr	r24
     ce6:	86 95       	lsr	r24
     ce8:	86 95       	lsr	r24
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	82 95       	swap	r24
     cf8:	92 95       	swap	r25
     cfa:	90 7f       	andi	r25, 0xF0	; 240
     cfc:	98 27       	eor	r25, r24
     cfe:	80 7f       	andi	r24, 0xF0	; 240
     d00:	98 27       	eor	r25, r24
     d02:	9a 5f       	subi	r25, 0xFA	; 250
     d04:	8e 83       	std	Y+6, r24	; 0x06
     d06:	9f 83       	std	Y+7, r25	; 0x07
     d08:	80 eb       	ldi	r24, 0xB0	; 176
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	29 81       	ldd	r18, Y+1	; 0x01
     d0e:	28 87       	std	Y+8, r18	; 0x08
     d10:	28 85       	ldd	r18, Y+8	; 0x08
     d12:	22 2f       	mov	r18, r18
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	a9 01       	movw	r20, r18
     d18:	47 70       	andi	r20, 0x07	; 7
     d1a:	55 27       	eor	r21, r21
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	04 2e       	mov	r0, r20
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <ioport_set_pin_mode+0x68>
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <ioport_set_pin_mode+0x64>
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
     d30:	8e 81       	ldd	r24, Y+6	; 0x06
     d32:	9f 81       	ldd	r25, Y+7	; 0x07
     d34:	2a 81       	ldd	r18, Y+2	; 0x02
     d36:	fc 01       	movw	r30, r24
     d38:	20 8b       	std	Z+16, r18	; 0x10
     d3a:	2a 96       	adiw	r28, 0x0a	; 10
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <ioport_get_pin_level>:
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	28 97       	sbiw	r28, 0x08	; 8
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	88 87       	std	Y+8, r24	; 0x08
     d56:	88 85       	ldd	r24, Y+8	; 0x08
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	8a 83       	std	Y+2, r24	; 0x02
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	8b 83       	std	Y+3, r24	; 0x03
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	86 95       	lsr	r24
     d66:	86 95       	lsr	r24
     d68:	86 95       	lsr	r24
     d6a:	8c 83       	std	Y+4, r24	; 0x04
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	82 95       	swap	r24
     d78:	92 95       	swap	r25
     d7a:	90 7f       	andi	r25, 0xF0	; 240
     d7c:	98 27       	eor	r25, r24
     d7e:	80 7f       	andi	r24, 0xF0	; 240
     d80:	98 27       	eor	r25, r24
     d82:	9a 5f       	subi	r25, 0xFA	; 250
     d84:	8d 83       	std	Y+5, r24	; 0x05
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	fc 01       	movw	r30, r24
     d8e:	40 85       	ldd	r20, Z+8	; 0x08
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	8f 83       	std	Y+7, r24	; 0x07
     d94:	8f 81       	ldd	r24, Y+7	; 0x07
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9c 01       	movw	r18, r24
     d9c:	27 70       	andi	r18, 0x07	; 7
     d9e:	33 27       	eor	r19, r19
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <ioport_get_pin_level+0x66>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <ioport_get_pin_level+0x62>
     db0:	94 2f       	mov	r25, r20
     db2:	98 23       	and	r25, r24
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	99 23       	and	r25, r25
     db8:	09 f4       	brne	.+2      	; 0xdbc <ioport_get_pin_level+0x76>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	28 96       	adiw	r28, 0x08	; 8
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <reset_do_soft_reset>:
{
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	89 e7       	ldi	r24, 0x79	; 121
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <ccp_write_io>

	while (1) {
		/* Intentionally empty. */
	}
     dda:	ff cf       	rjmp	.-2      	; 0xdda <reset_do_soft_reset+0x12>

00000ddc <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     ddc:	61 50       	subi	r22, 0x01	; 1
     dde:	71 09       	sbc	r23, r1
     de0:	81 09       	sbc	r24, r1
     de2:	91 09       	sbc	r25, r1
     de4:	d9 f7       	brne	.-10     	; 0xddc <__portable_avr_delay_cycles>
}
     de6:	08 95       	ret

00000de8 <IsChargingDone>:
}
*/


bool IsChargingDone(void)
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	1f 92       	push	r1
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	bool chargingDone;
	ioport_set_pin_mode(CHRG_STAT_PIN, IOPORT_MODE_PULLDOWN); //set pulldown mode
     df2:	60 e1       	ldi	r22, 0x10	; 16
     df4:	80 e1       	ldi	r24, 0x10	; 16
     df6:	64 df       	rcall	.-312    	; 0xcc0 <ioport_set_pin_mode>
	delay_us(PIN_CHECK_DELAY_US);
     df8:	6a e6       	ldi	r22, 0x6A	; 106
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	ed df       	rcall	.-38     	; 0xddc <__portable_avr_delay_cycles>
	chargingDone = ioport_get_pin_level(CHRG_STAT_PIN);
     e02:	80 e1       	ldi	r24, 0x10	; 16
     e04:	a0 df       	rcall	.-192    	; 0xd46 <ioport_get_pin_level>
     e06:	89 83       	std	Y+1, r24	; 0x01
	ioport_set_pin_mode(CHRG_STAT_PIN, IOPORT_MODE_TOTEM); //set pin to normal (low power) mode
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	80 e1       	ldi	r24, 0x10	; 16
     e0c:	59 df       	rcall	.-334    	; 0xcc0 <ioport_set_pin_mode>
	return chargingDone;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e10:	0f 90       	pop	r0
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <MaintainControllerStatus>:
const uint16_t BATTERY_HIGH_THRESHOLD = BAT_DET_4P10V; //~85%

const uint8_t BATTERY_DEAD_INDICATOR = 3;

void MaintainControllerStatus(bool pulse, bool chargingDone, uint16_t battery_level)
{
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	29 97       	sbiw	r28, 0x09	; 9
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	8e 83       	std	Y+6, r24	; 0x06
     e28:	6f 83       	std	Y+7, r22	; 0x07
     e2a:	48 87       	std	Y+8, r20	; 0x08
     e2c:	59 87       	std	Y+9, r21	; 0x09
	bool bluetoothConnected = btIsConnected();
     e2e:	0e 94 62 41 	call	0x82c4	; 0x82c4 <btIsConnected>
     e32:	8d 83       	std	Y+5, r24	; 0x05
	
	uint8_t r = LED_OFF;
     e34:	19 82       	std	Y+1, r1	; 0x01
	uint8_t g = LED_OFF;
     e36:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t b = LED_OFF;
     e38:	1b 82       	std	Y+3, r1	; 0x03
	
	//ChargeState_t batteryChargeState = !ioport_get_pin_level(CHRG_STAT_PIN) ? FULLY_CHARGED : CHARGING;
	//ChargeState_t batteryChargeState = getChargeState();
	//batteryChargeState = NOT_CHARGING; //TODO: getChargeState() can't differentiate between 0 and HiZ -- comment this to reenable

	if(chargingDone)
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	88 23       	and	r24, r24
     e3e:	39 f0       	breq	.+14     	; 0xe4e <MaintainControllerStatus+0x36>
	{
		r = g = b = LED_DIM; // White
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	8b 83       	std	Y+3, r24	; 0x03
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	8a 83       	std	Y+2, r24	; 0x02
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	57 c0       	rjmp	.+174    	; 0xefc <MaintainControllerStatus+0xe4>
	}
	else // Not Charging
	{
		if(battery_level < BATTERY_SAFE_THRESHOLD)
     e4e:	80 91 62 22 	lds	r24, 0x2262
     e52:	90 91 63 22 	lds	r25, 0x2263
     e56:	28 85       	ldd	r18, Y+8	; 0x08
     e58:	39 85       	ldd	r19, Y+9	; 0x09
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	90 f5       	brcc	.+100    	; 0xec4 <MaintainControllerStatus+0xac>
		{
			for( uint8_t i=0; i<BATTERY_DEAD_INDICATOR; i++)
     e60:	1c 82       	std	Y+4, r1	; 0x04
     e62:	17 c0       	rjmp	.+46     	; 0xe92 <MaintainControllerStatus+0x7a>
			{
				setLEDValue(LED_DIM, LED_OFF, LED_OFF);
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
				delay_ms(200);
     e6e:	6a ea       	ldi	r22, 0xAA	; 170
     e70:	76 e4       	ldi	r23, 0x46	; 70
     e72:	80 e1       	ldi	r24, 0x10	; 16
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	b2 df       	rcall	.-156    	; 0xddc <__portable_avr_delay_cycles>
				setLEDValue(LED_OFF, LED_OFF, LED_OFF);
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
				delay_ms(200);
     e82:	6a ea       	ldi	r22, 0xAA	; 170
     e84:	76 e4       	ldi	r23, 0x46	; 70
     e86:	80 e1       	ldi	r24, 0x10	; 16
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	a8 df       	rcall	.-176    	; 0xddc <__portable_avr_delay_cycles>
	}
	else // Not Charging
	{
		if(battery_level < BATTERY_SAFE_THRESHOLD)
		{
			for( uint8_t i=0; i<BATTERY_DEAD_INDICATOR; i++)
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	8c 83       	std	Y+4, r24	; 0x04
     e92:	80 91 68 22 	lds	r24, 0x2268
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	98 17       	cp	r25, r24
     e9a:	20 f3       	brcs	.-56     	; 0xe64 <MaintainControllerStatus+0x4c>
				setLEDValue(LED_DIM, LED_OFF, LED_OFF);
				delay_ms(200);
				setLEDValue(LED_OFF, LED_OFF, LED_OFF);
				delay_ms(200);
			}
			powerOff(global_header.powerOffSoftware);
     e9c:	80 91 28 28 	lds	r24, 0x2828
     ea0:	88 1f       	adc	r24, r24
     ea2:	88 27       	eor	r24, r24
     ea4:	88 1f       	adc	r24, r24
     ea6:	90 91 29 28 	lds	r25, 0x2829
     eaa:	9f 73       	andi	r25, 0x3F	; 63
     eac:	99 0f       	add	r25, r25
     eae:	89 2b       	or	r24, r25
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	21 e0       	ldi	r18, 0x01	; 1
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	09 f4       	brne	.+2      	; 0xebc <MaintainControllerStatus+0xa4>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	82 2f       	mov	r24, r18
     ebe:	0e 94 af 24 	call	0x495e	; 0x495e <powerOff>
     ec2:	1c c0       	rjmp	.+56     	; 0xefc <MaintainControllerStatus+0xe4>
		}
		else if (battery_level < BATTERY_LOW_THRESHOLD)
     ec4:	80 91 64 22 	lds	r24, 0x2264
     ec8:	90 91 65 22 	lds	r25, 0x2265
     ecc:	28 85       	ldd	r18, Y+8	; 0x08
     ece:	39 85       	ldd	r19, Y+9	; 0x09
     ed0:	28 17       	cp	r18, r24
     ed2:	39 07       	cpc	r19, r25
     ed4:	18 f4       	brcc	.+6      	; 0xedc <MaintainControllerStatus+0xc4>
		{
			//Needs Charging
			r = LED_DIM; // Red
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	10 c0       	rjmp	.+32     	; 0xefc <MaintainControllerStatus+0xe4>
		}
		else if(battery_level < BATTERY_MED_THRESHOLD)
     edc:	80 91 66 22 	lds	r24, 0x2266
     ee0:	90 91 67 22 	lds	r25, 0x2267
     ee4:	28 85       	ldd	r18, Y+8	; 0x08
     ee6:	39 85       	ldd	r19, Y+9	; 0x09
     ee8:	28 17       	cp	r18, r24
     eea:	39 07       	cpc	r19, r25
     eec:	28 f4       	brcc	.+10     	; 0xef8 <MaintainControllerStatus+0xe0>
		{
			//Needs Charging
			r = g = LED_DIM; // Yellow
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <MaintainControllerStatus+0xe4>
		}
		else
		{
			// Normal - Ideal State
			b = LED_DIM; // Default to blue
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	//If Bluetooth not connected, blink
	if (!bluetoothConnected && !pulse)
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	89 27       	eor	r24, r25
     f02:	88 23       	and	r24, r24
     f04:	51 f0       	breq	.+20     	; 0xf1a <MaintainControllerStatus+0x102>
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	89 27       	eor	r24, r25
     f0c:	88 23       	and	r24, r24
     f0e:	29 f0       	breq	.+10     	; 0xf1a <MaintainControllerStatus+0x102>
	{
		r = g = b = LED_OFF;
     f10:	1b 82       	std	Y+3, r1	; 0x03
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	8a 83       	std	Y+2, r24	; 0x02
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
	}
	
	setLEDValue(r,g,b);
     f1a:	4b 81       	ldd	r20, Y+3	; 0x03
     f1c:	6a 81       	ldd	r22, Y+2	; 0x02
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
}
     f24:	29 96       	adiw	r28, 0x09	; 9
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <SetupChrgStatPinExternalInterrupt>:


//Setup CHRG_STAT_PIN external interrupt
void SetupChrgStatPinExternalInterrupt(void)
{
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	2a 97       	sbiw	r28, 0x0a	; 10
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	de bf       	out	0x3e, r29	; 62
	irqflags_t flags;
	flags = cpu_irq_save();
     f3e:	a1 de       	rcall	.-702    	; 0xc82 <cpu_irq_save>
     f40:	89 83       	std	Y+1, r24	; 0x01
	
	PORTC_INT0MASK = 1u<<0; //Set PORTC interrupt on PORTC.0 pin
     f42:	8a e4       	ldi	r24, 0x4A	; 74
     f44:	96 e0       	ldi	r25, 0x06	; 6
     f46:	21 e0       	ldi	r18, 0x01	; 1
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
     f4c:	80 e1       	ldi	r24, 0x10	; 16
     f4e:	8a 83       	std	Y+2, r24	; 0x02
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	8b 83       	std	Y+3, r24	; 0x03
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	8c 83       	std	Y+4, r24	; 0x04
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	8d 83       	std	Y+5, r24	; 0x05
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static inline ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	86 95       	lsr	r24
     f60:	86 95       	lsr	r24
     f62:	86 95       	lsr	r24
     f64:	8e 83       	std	Y+6, r24	; 0x06
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     f66:	8e 81       	ldd	r24, Y+6	; 0x06
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	82 95       	swap	r24
     f72:	92 95       	swap	r25
     f74:	90 7f       	andi	r25, 0xF0	; 240
     f76:	98 27       	eor	r25, r24
     f78:	80 7f       	andi	r24, 0xF0	; 240
     f7a:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     f7c:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     f7e:	8f 83       	std	Y+7, r24	; 0x07
     f80:	98 87       	std	Y+8, r25	; 0x08

	uint8_t flags = cpu_irq_save();
     f82:	7f de       	rcall	.-770    	; 0xc82 <cpu_irq_save>
     f84:	89 87       	std	Y+9, r24	; 0x09

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     f86:	80 eb       	ldi	r24, 0xB0	; 176
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	2a 81       	ldd	r18, Y+2	; 0x02
     f8c:	2a 87       	std	Y+10, r18	; 0x0a
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     f8e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f90:	22 2f       	mov	r18, r18
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	a9 01       	movw	r20, r18
     f96:	47 70       	andi	r20, 0x07	; 7
     f98:	55 27       	eor	r21, r21
     f9a:	21 e0       	ldi	r18, 0x01	; 1
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <SetupChrgStatPinExternalInterrupt+0x74>
     fa0:	22 0f       	add	r18, r18
     fa2:	33 1f       	adc	r19, r19
     fa4:	4a 95       	dec	r20
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <SetupChrgStatPinExternalInterrupt+0x70>
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	uint8_t flags = cpu_irq_save();

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18

	base->PIN0CTRL &= ~PORT_ISC_gm;
     fac:	8f 81       	ldd	r24, Y+7	; 0x07
     fae:	98 85       	ldd	r25, Y+8	; 0x08
     fb0:	fc 01       	movw	r30, r24
     fb2:	80 89       	ldd	r24, Z+16	; 0x10
     fb4:	28 2f       	mov	r18, r24
     fb6:	28 7f       	andi	r18, 0xF8	; 248
     fb8:	8f 81       	ldd	r24, Y+7	; 0x07
     fba:	98 85       	ldd	r25, Y+8	; 0x08
     fbc:	fc 01       	movw	r30, r24
     fbe:	20 8b       	std	Z+16, r18	; 0x10
	base->PIN0CTRL |= (pin_sense & PORT_ISC_gm);
     fc0:	8f 81       	ldd	r24, Y+7	; 0x07
     fc2:	98 85       	ldd	r25, Y+8	; 0x08
     fc4:	fc 01       	movw	r30, r24
     fc6:	80 89       	ldd	r24, Z+16	; 0x10
     fc8:	98 2f       	mov	r25, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	87 70       	andi	r24, 0x07	; 7
     fce:	89 2b       	or	r24, r25
     fd0:	28 2f       	mov	r18, r24
     fd2:	8f 81       	ldd	r24, Y+7	; 0x07
     fd4:	98 85       	ldd	r25, Y+8	; 0x08
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 8b       	std	Z+16, r18	; 0x10

	cpu_irq_restore(flags);
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	62 de       	rcall	.-828    	; 0xca2 <cpu_irq_restore>
	arch_ioport_set_pin_sense_mode(CHRG_STAT_PIN,IOPORT_SENSE_RISING);
	PORTC_INTCTRL = 2u; //Enable medium level external interrupt
     fde:	89 e4       	ldi	r24, 0x49	; 73
     fe0:	96 e0       	ldi	r25, 0x06	; 6
     fe2:	22 e0       	ldi	r18, 0x02	; 2
     fe4:	fc 01       	movw	r30, r24
     fe6:	20 83       	st	Z, r18
	
	cpu_irq_restore(flags);
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	5b de       	rcall	.-842    	; 0xca2 <cpu_irq_restore>
}
     fec:	2a 96       	adiw	r28, 0x0a	; 10
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <__vector_2>:

// PORTF interrupt vector, Vector 0 is the reset vector
ISR(PORTC_INT0_vect)
{
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	00 90 3f 00 	lds	r0, 0x003F
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	00 90 3b 00 	lds	r0, 0x003B
    1008:	0f 92       	push	r0
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	1f 92       	push	r1
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags;
	flags = cpu_irq_save();
    102c:	2a de       	rcall	.-940    	; 0xc82 <cpu_irq_save>
    102e:	89 83       	std	Y+1, r24	; 0x01
	
	// If interrupt0 flag is set, clear it
	#define INT0IF 1u<<0
	#define INT1IF 1u<<1
	if( PORTC_INTFLAGS & INT0IF )
    1030:	8c e4       	ldi	r24, 0x4C	; 76
    1032:	96 e0       	ldi	r25, 0x06	; 6
    1034:	fc 01       	movw	r30, r24
    1036:	80 81       	ld	r24, Z
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	81 70       	andi	r24, 0x01	; 1
    103e:	99 27       	eor	r25, r25
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	29 f0       	breq	.+10     	; 0x104e <__vector_2+0x56>
	{
		PORTC_INTFLAGS = INT0IF; // write-1-to-clear - to clear interrupt flag write a '1'
    1044:	8c e4       	ldi	r24, 0x4C	; 76
    1046:	96 e0       	ldi	r25, 0x06	; 6
    1048:	21 e0       	ldi	r18, 0x01	; 1
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18
	}
    
	setLEDValue(LED_DIM,LED_DIM,LED_DIM);
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
	
	if( SLEEP_MODE_PWR_DOWN==(SLEEP.CTRL & SLEEP_SMODE_gm) )
    1058:	88 e4       	ldi	r24, 0x48	; 72
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	fc 01       	movw	r30, r24
    105e:	80 81       	ld	r24, Z
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	8e 70       	andi	r24, 0x0E	; 14
    1066:	99 27       	eor	r25, r25
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	91 05       	cpc	r25, r1
    106c:	51 f4       	brne	.+20     	; 0x1082 <__vector_2+0x8a>
	{
		sleep_disable();
    106e:	88 e4       	ldi	r24, 0x48	; 72
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	28 e4       	ldi	r18, 0x48	; 72
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	f9 01       	movw	r30, r18
    1078:	20 81       	ld	r18, Z
    107a:	2e 7f       	andi	r18, 0xFE	; 254
    107c:	fc 01       	movw	r30, r24
    107e:	20 83       	st	Z, r18
		reset_do_soft_reset(); // don't want to continue in powerOff() - checks that the START button was pressed
    1080:	a3 de       	rcall	.-698    	; 0xdc8 <reset_do_soft_reset>
	}
	
	cpu_irq_restore(flags);
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	0e de       	rcall	.-996    	; 0xca2 <cpu_irq_restore>
}
    1086:	0f 90       	pop	r0
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	00 92 3b 00 	sts	0x003B, r0
    10aa:	0f 90       	pop	r0
    10ac:	00 92 3f 00 	sts	0x003F, r0
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <reset_do_soft_reset>:
{
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	89 e7       	ldi	r24, 0x79	; 121
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <ccp_write_io>

	while (1) {
		/* Intentionally empty. */
	}
    10c8:	ff cf       	rjmp	.-2      	; 0x10c8 <reset_do_soft_reset+0x12>

000010ca <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    10ca:	61 50       	subi	r22, 0x01	; 1
    10cc:	71 09       	sbc	r23, r1
    10ce:	81 09       	sbc	r24, r1
    10d0:	91 09       	sbc	r25, r1
    10d2:	d9 f7       	brne	.-10     	; 0x10ca <__portable_avr_delay_cycles>
}
    10d4:	08 95       	ret

000010d6 <biosMain>:

const static uint16_xy * center[2] = {(uint16_xy*)&(joysticks[JOYSTICK_LEFT].center_x),(uint16_xy*)&(joysticks[JOYSTICK_RIGHT].center_x)};
const static int16_xy deadzone = {(int16_t)JOYSTICK_TEST_DEADZONE_X,(int16_t)JOYSTICK_TEST_DEADZONE_Y};

void biosMain(void)
{
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	00 d0       	rcall	.+0      	; 0x10dc <biosMain+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	//Follows same left,right ordering defined in JoystickName
	//uint16_xy * center[2] = {&(joysticks[JOYSTICK_LEFT].center_x),&(joysticks[JOYSTICK_RIGHT].center_x)};
	//deadzone->x = JOYSTICK_TEST_DEADZONE_X;
	//deadzone->y = JOYSTICK_TEST_DEADZONE_Y;
	
	setupLEDs(false);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <setupLEDs>
	
	for( int i=0; i<TEST_MODE_NUM_BLINKS; i++)
    10e6:	19 82       	std	Y+1, r1	; 0x01
    10e8:	1a 82       	std	Y+2, r1	; 0x02
    10ea:	19 c0       	rjmp	.+50     	; 0x111e <biosMain+0x48>
	{
		setLEDValue(LED_DIM, LED_OFF, LED_OFF);
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
		delay_ms(200);
    10f6:	6a ea       	ldi	r22, 0xAA	; 170
    10f8:	76 e4       	ldi	r23, 0x46	; 70
    10fa:	80 e1       	ldi	r24, 0x10	; 16
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	e5 df       	rcall	.-54     	; 0x10ca <__portable_avr_delay_cycles>
		setLEDValue(LED_OFF, LED_OFF, LED_OFF);
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
		delay_ms(200);
    110a:	6a ea       	ldi	r22, 0xAA	; 170
    110c:	76 e4       	ldi	r23, 0x46	; 70
    110e:	80 e1       	ldi	r24, 0x10	; 16
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	db df       	rcall	.-74     	; 0x10ca <__portable_avr_delay_cycles>
	//deadzone->x = JOYSTICK_TEST_DEADZONE_X;
	//deadzone->y = JOYSTICK_TEST_DEADZONE_Y;
	
	setupLEDs(false);
	
	for( int i=0; i<TEST_MODE_NUM_BLINKS; i++)
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	83 30       	cpi	r24, 0x03	; 3
    1124:	91 05       	cpc	r25, r1
    1126:	14 f3       	brlt	.-60     	; 0x10ec <biosMain+0x16>
		delay_ms(200);
		setLEDValue(LED_OFF, LED_OFF, LED_OFF);
		delay_ms(200);
	}
	
	turnBTOn(); //Joysticks are on the same power rail island as the Bluetooth module, so turn BT on
    1128:	0e 94 83 40 	call	0x8106	; 0x8106 <turnBTOn>
	
	ManufactureTestButtonPress();
    112c:	05 d0       	rcall	.+10     	; 0x1138 <ManufactureTestButtonPress>
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <ManufactureTestButtonPress>:


void ManufactureTestButtonPress(void)
{
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	2c 97       	sbiw	r28, 0x0c	; 12
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	de bf       	out	0x3e, r29	; 62
	startTimeout(&biosUnused, BIOS_UNUSED_MS);
    114a:	40 ef       	ldi	r20, 0xF0	; 240
    114c:	59 e4       	ldi	r21, 0x49	; 73
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	8b e2       	ldi	r24, 0x2B	; 43
    1154:	98 e2       	ldi	r25, 0x28	; 40
    1156:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
	while(1)
	{
		uint8_t red = LED_OFF;
    115a:	19 82       	std	Y+1, r1	; 0x01
		uint8_t green = LED_OFF;
    115c:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t blue = LED_OFF;		
    115e:	1b 82       	std	Y+3, r1	; 0x03
		
		WatchdogPet();
    1160:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
		
		if (buttonActivated(B_START) & buttonActivated(B_SELECT))
    1164:	88 e0       	ldi	r24, 0x08	; 8
    1166:	3f d1       	rcall	.+638    	; 0x13e6 <buttonActivated>
    1168:	08 2f       	mov	r16, r24
    116a:	10 e0       	ldi	r17, 0x00	; 0
    116c:	89 e0       	ldi	r24, 0x09	; 9
    116e:	3b d1       	rcall	.+630    	; 0x13e6 <buttonActivated>
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	80 23       	and	r24, r16
    1176:	91 23       	and	r25, r17
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	31 f0       	breq	.+12     	; 0x1188 <ManufactureTestButtonPress+0x50>
		{
			delay_ms(500);
    117c:	6a ea       	ldi	r22, 0xAA	; 170
    117e:	70 eb       	ldi	r23, 0xB0	; 176
    1180:	88 e2       	ldi	r24, 0x28	; 40
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a2 df       	rcall	.-188    	; 0x10ca <__portable_avr_delay_cycles>
			reset_do_soft_reset();
    1186:	97 df       	rcall	.-210    	; 0x10b6 <reset_do_soft_reset>
		}
		
		if(checkTimeout(&biosUnused))
    1188:	8b e2       	ldi	r24, 0x2B	; 43
    118a:	98 e2       	ldi	r25, 0x28	; 40
    118c:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    1190:	88 23       	and	r24, r24
    1192:	e1 f0       	breq	.+56     	; 0x11cc <ManufactureTestButtonPress+0x94>
		{
			cancelTimeout(&biosUnused);
    1194:	8b e2       	ldi	r24, 0x2B	; 43
    1196:	98 e2       	ldi	r25, 0x28	; 40
    1198:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <cancelTimeout>
			setLEDValue(0, 0, 0);
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
			powerOff(global_header.powerOffSoftware);
    11a6:	80 91 28 28 	lds	r24, 0x2828
    11aa:	88 1f       	adc	r24, r24
    11ac:	88 27       	eor	r24, r24
    11ae:	88 1f       	adc	r24, r24
    11b0:	90 91 29 28 	lds	r25, 0x2829
    11b4:	9f 73       	andi	r25, 0x3F	; 63
    11b6:	99 0f       	add	r25, r25
    11b8:	89 2b       	or	r24, r25
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	21 e0       	ldi	r18, 0x01	; 1
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <ManufactureTestButtonPress+0x8e>
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	82 2f       	mov	r24, r18
    11c8:	0e 94 af 24 	call	0x495e	; 0x495e <powerOff>
		}

		if( buttonActivated(B_UP) ||
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	0b d1       	rcall	.+534    	; 0x13e6 <buttonActivated>
    11d0:	88 23       	and	r24, r24
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <ManufactureTestButtonPress+0x9e>
    11d4:	3f c0       	rjmp	.+126    	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_DOWN) ||
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	06 d1       	rcall	.+524    	; 0x13e6 <buttonActivated>
			cancelTimeout(&biosUnused);
			setLEDValue(0, 0, 0);
			powerOff(global_header.powerOffSoftware);
		}

		if( buttonActivated(B_UP) ||
    11da:	88 23       	and	r24, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <ManufactureTestButtonPress+0xa8>
    11de:	3a c0       	rjmp	.+116    	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	01 d1       	rcall	.+514    	; 0x13e6 <buttonActivated>
			setLEDValue(0, 0, 0);
			powerOff(global_header.powerOffSoftware);
		}

		if( buttonActivated(B_UP) ||
			buttonActivated(B_DOWN) ||
    11e4:	88 23       	and	r24, r24
    11e6:	09 f0       	breq	.+2      	; 0x11ea <ManufactureTestButtonPress+0xb2>
    11e8:	35 c0       	rjmp	.+106    	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	fc d0       	rcall	.+504    	; 0x13e6 <buttonActivated>
			powerOff(global_header.powerOffSoftware);
		}

		if( buttonActivated(B_UP) ||
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
    11ee:	88 23       	and	r24, r24
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <ManufactureTestButtonPress+0xbc>
    11f2:	30 c0       	rjmp	.+96     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
    11f4:	84 e0       	ldi	r24, 0x04	; 4
    11f6:	f7 d0       	rcall	.+494    	; 0x13e6 <buttonActivated>
		}

		if( buttonActivated(B_UP) ||
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
    11f8:	88 23       	and	r24, r24
    11fa:	61 f5       	brne	.+88     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
    11fc:	85 e0       	ldi	r24, 0x05	; 5
    11fe:	f3 d0       	rcall	.+486    	; 0x13e6 <buttonActivated>

		if( buttonActivated(B_UP) ||
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
    1200:	88 23       	and	r24, r24
    1202:	41 f5       	brne	.+80     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
    1204:	86 e0       	ldi	r24, 0x06	; 6
    1206:	ef d0       	rcall	.+478    	; 0x13e6 <buttonActivated>
		if( buttonActivated(B_UP) ||
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
    1208:	88 23       	and	r24, r24
    120a:	21 f5       	brne	.+72     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
    120c:	87 e0       	ldi	r24, 0x07	; 7
    120e:	eb d0       	rcall	.+470    	; 0x13e6 <buttonActivated>
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
    1210:	88 23       	and	r24, r24
    1212:	01 f5       	brne	.+64     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	e7 d0       	rcall	.+462    	; 0x13e6 <buttonActivated>
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
    1218:	88 23       	and	r24, r24
    121a:	e1 f4       	brne	.+56     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
    121c:	89 e0       	ldi	r24, 0x09	; 9
    121e:	e3 d0       	rcall	.+454    	; 0x13e6 <buttonActivated>
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
    1220:	88 23       	and	r24, r24
    1222:	c1 f4       	brne	.+48     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
    1224:	8b e0       	ldi	r24, 0x0B	; 11
    1226:	df d0       	rcall	.+446    	; 0x13e6 <buttonActivated>
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
    1228:	88 23       	and	r24, r24
    122a:	a1 f4       	brne	.+40     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_LB) ||
			buttonActivated(B_RB) ||
    122c:	8a e0       	ldi	r24, 0x0A	; 10
    122e:	db d0       	rcall	.+438    	; 0x13e6 <buttonActivated>
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
    1230:	88 23       	and	r24, r24
    1232:	81 f4       	brne	.+32     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_RB) ||
			buttonActivated(B_LT) ||
    1234:	8d e0       	ldi	r24, 0x0D	; 13
    1236:	d7 d0       	rcall	.+430    	; 0x13e6 <buttonActivated>
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
			buttonActivated(B_RB) ||
    1238:	88 23       	and	r24, r24
    123a:	61 f4       	brne	.+24     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_LT) ||
			buttonActivated(B_RT) ||
    123c:	8c e0       	ldi	r24, 0x0C	; 12
    123e:	d3 d0       	rcall	.+422    	; 0x13e6 <buttonActivated>
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
			buttonActivated(B_RB) ||
			buttonActivated(B_LT) ||
    1240:	88 23       	and	r24, r24
    1242:	41 f4       	brne	.+16     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_RT) ||
			buttonActivated(B_JL) ||
    1244:	8e e0       	ldi	r24, 0x0E	; 14
    1246:	cf d0       	rcall	.+414    	; 0x13e6 <buttonActivated>
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
			buttonActivated(B_RB) ||
			buttonActivated(B_LT) ||
			buttonActivated(B_RT) ||
    1248:	88 23       	and	r24, r24
    124a:	21 f4       	brne	.+8      	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_JL) ||
			buttonActivated(B_JR)
    124c:	8f e0       	ldi	r24, 0x0F	; 15
    124e:	cb d0       	rcall	.+406    	; 0x13e6 <buttonActivated>
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
			buttonActivated(B_RB) ||
			buttonActivated(B_LT) ||
			buttonActivated(B_RT) ||
			buttonActivated(B_JL) ||
    1250:	88 23       	and	r24, r24
    1252:	11 f0       	breq	.+4      	; 0x1258 <ManufactureTestButtonPress+0x120>
			buttonActivated(B_JR)
		)
		{
			green = LED_DIM;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		for(uint8_t idx = 0 ; idx<NUM_JOYSTICKS; idx++) 
    1258:	1c 82       	std	Y+4, r1	; 0x04
    125a:	7a c0       	rjmp	.+244    	; 0x1350 <ManufactureTestButtonPress+0x218>
		{
			uint16_xy raw;
			raw.x = sampleAnalogChannel(joysticks[idx].adc_channel_x);
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	9c 01       	movw	r18, r24
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	22 0f       	add	r18, r18
    1272:	33 1f       	adc	r19, r19
    1274:	28 1b       	sub	r18, r24
    1276:	39 0b       	sbc	r19, r25
    1278:	c9 01       	movw	r24, r18
    127a:	8a 5a       	subi	r24, 0xAA	; 170
    127c:	9f 4d       	sbci	r25, 0xDF	; 223
    127e:	fc 01       	movw	r30, r24
    1280:	80 81       	ld	r24, Z
    1282:	ad da       	rcall	.-2726   	; 0x7de <sampleAnalogChannel>
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	9e 83       	std	Y+6, r25	; 0x06
			raw.y = sampleAnalogChannel(joysticks[idx].adc_channel_y);
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	9c 01       	movw	r18, r24
    1294:	22 0f       	add	r18, r18
    1296:	33 1f       	adc	r19, r19
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	22 0f       	add	r18, r18
    129e:	33 1f       	adc	r19, r19
    12a0:	28 1b       	sub	r18, r24
    12a2:	39 0b       	sbc	r19, r25
    12a4:	c9 01       	movw	r24, r18
    12a6:	89 5a       	subi	r24, 0xA9	; 169
    12a8:	9f 4d       	sbci	r25, 0xDF	; 223
    12aa:	fc 01       	movw	r30, r24
    12ac:	80 81       	ld	r24, Z
    12ae:	97 da       	rcall	.-2770   	; 0x7de <sampleAnalogChannel>
    12b0:	8f 83       	std	Y+7, r24	; 0x07
    12b2:	98 87       	std	Y+8, r25	; 0x08
			
			int16_xy out;
			SimpleJoystickAdj( center[idx], &deadzone, &raw, &out );
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	80 50       	subi	r24, 0x00	; 0
    12c0:	90 4e       	sbci	r25, 0xE0	; 224
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	9e 01       	movw	r18, r28
    12ca:	27 5f       	subi	r18, 0xF7	; 247
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	ae 01       	movw	r20, r28
    12d0:	4b 5f       	subi	r20, 0xFB	; 251
    12d2:	5f 4f       	sbci	r21, 0xFF	; 255
    12d4:	69 e6       	ldi	r22, 0x69	; 105
    12d6:	72 e2       	ldi	r23, 0x22	; 34
    12d8:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <SimpleJoystickAdj>
			
			//Write raw and adjusted X,Y values to USB serial port
			PrintXY(raw.x,raw.y);
    12dc:	8f 81       	ldd	r24, Y+7	; 0x07
    12de:	98 85       	ldd	r25, Y+8	; 0x08
    12e0:	9c 01       	movw	r18, r24
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	b9 01       	movw	r22, r18
    12e8:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <PrintXY>
			sendUSBString("->", false);
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	8d e7       	ldi	r24, 0x7D	; 125
    12f0:	90 e2       	ldi	r25, 0x20	; 32
    12f2:	0e 94 9e 29 	call	0x533c	; 0x533c <sendUSBString>
			PrintXY(out.x,out.y);
    12f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    12f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    12fa:	89 85       	ldd	r24, Y+9	; 0x09
    12fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fe:	b9 01       	movw	r22, r18
    1300:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <PrintXY>
			sendUSBLine("");
    1304:	80 e8       	ldi	r24, 0x80	; 128
    1306:	90 e2       	ldi	r25, 0x20	; 32
    1308:	0e 94 c5 29 	call	0x538a	; 0x538a <sendUSBLine>
			
			if( out.y<0 )
    130c:	8b 85       	ldd	r24, Y+11	; 0x0b
    130e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1310:	99 23       	and	r25, r25
    1312:	2c f4       	brge	.+10     	; 0x131e <ManufactureTestButtonPress+0x1e6>
			{
				//up is yellow
				red = LED_DIM;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
				green = LED_DIM;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	16 c0       	rjmp	.+44     	; 0x134a <ManufactureTestButtonPress+0x212>
			}
			else if( out.y>0 )
    131e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1320:	9c 85       	ldd	r25, Y+12	; 0x0c
    1322:	18 16       	cp	r1, r24
    1324:	19 06       	cpc	r1, r25
    1326:	1c f4       	brge	.+6      	; 0x132e <ManufactureTestButtonPress+0x1f6>
			{
				//down is blue
				blue = LED_DIM;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	8b 83       	std	Y+3, r24	; 0x03
    132c:	0e c0       	rjmp	.+28     	; 0x134a <ManufactureTestButtonPress+0x212>
			}
			else if( out.x>0 )
    132e:	89 85       	ldd	r24, Y+9	; 0x09
    1330:	9a 85       	ldd	r25, Y+10	; 0x0a
    1332:	18 16       	cp	r1, r24
    1334:	19 06       	cpc	r1, r25
    1336:	1c f4       	brge	.+6      	; 0x133e <ManufactureTestButtonPress+0x206>
			{
				//right is Red
				red = LED_DIM;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	06 c0       	rjmp	.+12     	; 0x134a <ManufactureTestButtonPress+0x212>
			}
			else if( out.x<0 )
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	99 23       	and	r25, r25
    1344:	14 f4       	brge	.+4      	; 0x134a <ManufactureTestButtonPress+0x212>
			{
				//left is green
				green = LED_DIM;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	8a 83       	std	Y+2, r24	; 0x02
		)
		{
			green = LED_DIM;
		}
		
		for(uint8_t idx = 0 ; idx<NUM_JOYSTICKS; idx++) 
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	8c 83       	std	Y+4, r24	; 0x04
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	82 30       	cpi	r24, 0x02	; 2
    1354:	08 f4       	brcc	.+2      	; 0x1358 <ManufactureTestButtonPress+0x220>
    1356:	82 cf       	rjmp	.-252    	; 0x125c <ManufactureTestButtonPress+0x124>
				//left is green
				green = LED_DIM;
			}
		}
		
		setLEDValue(red, green, blue);
    1358:	4b 81       	ldd	r20, Y+3	; 0x03
    135a:	6a 81       	ldd	r22, Y+2	; 0x02
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
				
	} // end while(1)
    1362:	fb ce       	rjmp	.-522    	; 0x115a <ManufactureTestButtonPress+0x22>

00001364 <ioport_get_pin_level>:
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	28 97       	sbiw	r28, 0x08	; 8
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	88 87       	std	Y+8, r24	; 0x08
    1374:	88 85       	ldd	r24, Y+8	; 0x08
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	8a 83       	std	Y+2, r24	; 0x02
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	8b 83       	std	Y+3, r24	; 0x03
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	86 95       	lsr	r24
    1384:	86 95       	lsr	r24
    1386:	86 95       	lsr	r24
    1388:	8c 83       	std	Y+4, r24	; 0x04
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	82 95       	swap	r24
    1396:	92 95       	swap	r25
    1398:	90 7f       	andi	r25, 0xF0	; 240
    139a:	98 27       	eor	r25, r24
    139c:	80 7f       	andi	r24, 0xF0	; 240
    139e:	98 27       	eor	r25, r24
    13a0:	9a 5f       	subi	r25, 0xFA	; 250
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	fc 01       	movw	r30, r24
    13ac:	40 85       	ldd	r20, Z+8	; 0x08
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	8f 83       	std	Y+7, r24	; 0x07
    13b2:	8f 81       	ldd	r24, Y+7	; 0x07
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9c 01       	movw	r18, r24
    13ba:	27 70       	andi	r18, 0x07	; 7
    13bc:	33 27       	eor	r19, r19
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <ioport_get_pin_level+0x66>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <ioport_get_pin_level+0x62>
    13ce:	94 2f       	mov	r25, r20
    13d0:	98 23       	and	r25, r24
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	99 23       	and	r25, r25
    13d6:	09 f4       	brne	.+2      	; 0x13da <ioport_get_pin_level+0x76>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	28 96       	adiw	r28, 0x08	; 8
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <buttonActivated>:
{ LT_PIN,			0, BUTTON_RELEASED, ACTIVE_LOW},
{ JOYSTICK_L_CLICK, 0, BUTTON_RELEASED, ACTIVE_LOW},
{ JOYSTICK_R_CLICK, 0, BUTTON_RELEASED, ACTIVE_LOW}
};

bool buttonActivated(enum ButtonName bn) {
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	1f 92       	push	r1
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	89 83       	std	Y+1, r24	; 0x01
	if(ioport_get_pin_level(buttons[bn].pin)) {
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	8c 5f       	subi	r24, 0xFC	; 252
    1402:	9f 4d       	sbci	r25, 0xDF	; 223
    1404:	fc 01       	movw	r30, r24
    1406:	80 81       	ld	r24, Z
    1408:	ad df       	rcall	.-166    	; 0x1364 <ioport_get_pin_level>
    140a:	88 23       	and	r24, r24
    140c:	81 f0       	breq	.+32     	; 0x142e <buttonActivated+0x48>
		return buttons[bn].polarity;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	89 5f       	subi	r24, 0xF9	; 249
    141e:	9f 4d       	sbci	r25, 0xDF	; 223
    1420:	fc 01       	movw	r30, r24
    1422:	90 81       	ld	r25, Z
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	99 23       	and	r25, r25
    1428:	89 f4       	brne	.+34     	; 0x144c <buttonActivated+0x66>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0f c0       	rjmp	.+30     	; 0x144c <buttonActivated+0x66>
	}
	else {
		return !buttons[bn].polarity;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	89 5f       	subi	r24, 0xF9	; 249
    143e:	9f 4d       	sbci	r25, 0xDF	; 223
    1440:	fc 01       	movw	r30, r24
    1442:	90 81       	ld	r25, Z
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	99 23       	and	r25, r25
    1448:	09 f0       	breq	.+2      	; 0x144c <buttonActivated+0x66>
    144a:	80 e0       	ldi	r24, 0x00	; 0
	}	
    144c:	0f 90       	pop	r0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <keyboardiOSInit>:
#include "configurations.h"

// Local pointer to the current controller configuration.
static struct ControllerConfiguration *my_cc;

void keyboardiOSInit(struct ControllerConfiguration *cc) {
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	00 d0       	rcall	.+0      	; 0x145a <keyboardiOSInit+0x6>
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	9a 83       	std	Y+2, r25	; 0x02
	my_cc = cc;
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	80 93 5b 26 	sts	0x265B, r24
    146a:	90 93 5c 26 	sts	0x265C, r25
    BluetoothKeyboardMode();
    146e:	0e 94 83 41 	call	0x8306	; 0x8306 <BluetoothKeyboardMode>
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <keyboardiOSButtonHandler>:

void keyboardiOSButtonHandler(enum ButtonName name, enum ButtonState state) {
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	00 d0       	rcall	.+0      	; 0x1482 <keyboardiOSButtonHandler+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <keyboardiOSButtonHandler+0x8>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8b 83       	std	Y+3, r24	; 0x03
    148a:	6c 83       	std	Y+4, r22	; 0x04
	char key;
	unsigned char i;
	
	// Get the ASCII character to press:
	if (state == BUTTON_PRESSED) {
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	b9 f4       	brne	.+46     	; 0x14c0 <keyboardiOSButtonHandler+0x44>
		key = my_cc->button_configs[name].button_down.scan_code;
    1492:	40 91 5b 26 	lds	r20, 0x265B
    1496:	50 91 5c 26 	lds	r21, 0x265C
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	c9 01       	movw	r24, r18
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	84 0f       	add	r24, r20
    14b4:	95 1f       	adc	r25, r21
    14b6:	06 96       	adiw	r24, 0x06	; 6
    14b8:	fc 01       	movw	r30, r24
    14ba:	80 81       	ld	r24, Z
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	16 c0       	rjmp	.+44     	; 0x14ec <keyboardiOSButtonHandler+0x70>
	}
	else {
		key = my_cc->button_configs[name].button_up.scan_code;
    14c0:	40 91 5b 26 	lds	r20, 0x265B
    14c4:	50 91 5c 26 	lds	r21, 0x265C
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	c9 01       	movw	r24, r18
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	82 0f       	add	r24, r18
    14de:	93 1f       	adc	r25, r19
    14e0:	84 0f       	add	r24, r20
    14e2:	95 1f       	adc	r25, r21
    14e4:	04 96       	adiw	r24, 0x04	; 4
    14e6:	fc 01       	movw	r30, r24
    14e8:	80 81       	ld	r24, Z
    14ea:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if (key != 0) {
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	88 23       	and	r24, r24
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <keyboardiOSButtonHandler+0x78>
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <keyboardiOSButtonHandler+0xf6>
		sendDBGChar(key);
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	0e 94 a2 21 	call	0x4344	; 0x4344 <sendDBGChar>
			sendBTChar(0);
		}
		
		#else
		// Send the identifier:
		sendBTString("BC:KR=A1,01,00,");
    14fa:	81 e8       	ldi	r24, 0x81	; 129
    14fc:	90 e2       	ldi	r25, 0x20	; 32
    14fe:	0e 94 4b 40 	call	0x8096	; 0x8096 <sendBTString>
		
		// Send the modifiers:
		sendBTHexPair(0);
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
		
		// send the scan code as the first code
		sendBTChar(',');
    1508:	8c e2       	ldi	r24, 0x2C	; 44
    150a:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
		sendBTHexPair(key);
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
		
		// Pad the other scan codes with 0
		for (i=0;i < 5; i++) {
    1514:	1a 82       	std	Y+2, r1	; 0x02
    1516:	09 c0       	rjmp	.+18     	; 0x152a <keyboardiOSButtonHandler+0xae>
			sendBTChar(',');
    1518:	8c e2       	ldi	r24, 0x2C	; 44
    151a:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
			sendBTHexPair(0);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
		// send the scan code as the first code
		sendBTChar(',');
		sendBTHexPair(key);
		
		// Pad the other scan codes with 0
		for (i=0;i < 5; i++) {
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	8a 83       	std	Y+2, r24	; 0x02
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	85 30       	cpi	r24, 0x05	; 5
    152e:	a0 f3       	brcs	.-24     	; 0x1518 <keyboardiOSButtonHandler+0x9c>
			sendBTChar(',');
			sendBTHexPair(0);
		}
		sendBTChar('\r'); 
    1530:	8d e0       	ldi	r24, 0x0D	; 13
    1532:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
		sendBTChar('\n');
    1536:	8a e0       	ldi	r24, 0x0A	; 10
    1538:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
		
		// Now send the no-scan-code so the button released is recognized
		// Send the identifier:
		sendBTString("BC:KR=A1,01,00,");
    153c:	81 e8       	ldi	r24, 0x81	; 129
    153e:	90 e2       	ldi	r25, 0x20	; 32
    1540:	0e 94 4b 40 	call	0x8096	; 0x8096 <sendBTString>
		
		// Send the modifiers:
		sendBTHexPair(0);
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
		
		// Pad the scan codes with 0s
		for (i=0;i < 6; i++) {
    154a:	1a 82       	std	Y+2, r1	; 0x02
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <keyboardiOSButtonHandler+0xe4>
			sendBTChar(',');
    154e:	8c e2       	ldi	r24, 0x2C	; 44
    1550:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
			sendBTHexPair(0);
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
		
		// Send the modifiers:
		sendBTHexPair(0);
		
		// Pad the scan codes with 0s
		for (i=0;i < 6; i++) {
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	8a 83       	std	Y+2, r24	; 0x02
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	86 30       	cpi	r24, 0x06	; 6
    1564:	a0 f3       	brcs	.-24     	; 0x154e <keyboardiOSButtonHandler+0xd2>
			sendBTChar(',');
			sendBTHexPair(0);
		}
		sendBTChar('\r'); 
    1566:	8d e0       	ldi	r24, 0x0D	; 13
    1568:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
		sendBTChar('\n');
    156c:	8a e0       	ldi	r24, 0x0A	; 10
    156e:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
		#endif
	}
};
    1572:	24 96       	adiw	r28, 0x04	; 4
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <flushCB>:
	while (temp < count && addByteToCB(cb, src[temp])) {
		temp++;
	}
	
	return temp;
}
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	00 d0       	rcall	.+0      	; 0x1584 <flushCB+0x6>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	fc 01       	movw	r30, r24
    1592:	14 82       	std	Z+4, r1	; 0x04
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	fc 01       	movw	r30, r24
    159a:	22 81       	ldd	r18, Z+2	; 0x02
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	fc 01       	movw	r30, r24
    15a2:	23 83       	std	Z+3, r18	; 0x03
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	08 95       	ret

000015ae <cpu_irq_save>:
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	1f 92       	push	r1
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8f e3       	ldi	r24, 0x3F	; 63
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	fc 01       	movw	r30, r24
    15be:	80 81       	ld	r24, Z
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	f8 94       	cli
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	0f 90       	pop	r0
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <cpu_irq_restore>:
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	1f 92       	push	r1
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	8f e3       	ldi	r24, 0x3F	; 63
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	29 81       	ldd	r18, Y+1	; 0x01
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 83       	st	Z, r18
    15e4:	0f 90       	pop	r0
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <initCB>:
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	25 97       	sbiw	r28, 0x05	; 5
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	6b 83       	std	Y+3, r22	; 0x03
    1600:	7c 83       	std	Y+4, r23	; 0x04
    1602:	4d 83       	std	Y+5, r20	; 0x05
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	2b 81       	ldd	r18, Y+3	; 0x03
    160a:	3c 81       	ldd	r19, Y+4	; 0x04
    160c:	fc 01       	movw	r30, r24
    160e:	20 83       	st	Z, r18
    1610:	31 83       	std	Z+1, r19	; 0x01
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	2d 81       	ldd	r18, Y+5	; 0x05
    1618:	fc 01       	movw	r30, r24
    161a:	25 83       	std	Z+5, r18	; 0x05
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	fc 01       	movw	r30, r24
    1622:	12 82       	std	Z+2, r1	; 0x02
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	aa df       	rcall	.-172    	; 0x157e <flushCB>
    162a:	25 96       	adiw	r28, 0x05	; 5
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <addByteToCB>:
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	25 97       	sbiw	r28, 0x05	; 5
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	8b 83       	std	Y+3, r24	; 0x03
    1646:	9c 83       	std	Y+4, r25	; 0x04
    1648:	6d 83       	std	Y+5, r22	; 0x05
    164a:	19 82       	std	Y+1, r1	; 0x01
    164c:	b0 df       	rcall	.-160    	; 0x15ae <cpu_irq_save>
    164e:	8a 83       	std	Y+2, r24	; 0x02
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	fc 01       	movw	r30, r24
    1656:	24 81       	ldd	r18, Z+4	; 0x04
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	fc 01       	movw	r30, r24
    165e:	85 81       	ldd	r24, Z+5	; 0x05
    1660:	28 17       	cp	r18, r24
    1662:	80 f5       	brcc	.+96     	; 0x16c4 <addByteToCB+0x8e>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	fc 01       	movw	r30, r24
    166a:	20 81       	ld	r18, Z
    166c:	31 81       	ldd	r19, Z+1	; 0x01
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	fc 01       	movw	r30, r24
    1674:	42 81       	ldd	r20, Z+2	; 0x02
    1676:	84 2f       	mov	r24, r20
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	82 0f       	add	r24, r18
    167c:	93 1f       	adc	r25, r19
    167e:	2d 81       	ldd	r18, Y+5	; 0x05
    1680:	fc 01       	movw	r30, r24
    1682:	20 83       	st	Z, r18
    1684:	24 2f       	mov	r18, r20
    1686:	2f 5f       	subi	r18, 0xFF	; 255
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	fc 01       	movw	r30, r24
    168e:	22 83       	std	Z+2, r18	; 0x02
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	fc 01       	movw	r30, r24
    1696:	84 81       	ldd	r24, Z+4	; 0x04
    1698:	28 2f       	mov	r18, r24
    169a:	2f 5f       	subi	r18, 0xFF	; 255
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	fc 01       	movw	r30, r24
    16a2:	24 83       	std	Z+4, r18	; 0x04
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	fc 01       	movw	r30, r24
    16aa:	22 81       	ldd	r18, Z+2	; 0x02
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	fc 01       	movw	r30, r24
    16b2:	85 81       	ldd	r24, Z+5	; 0x05
    16b4:	28 17       	cp	r18, r24
    16b6:	20 f0       	brcs	.+8      	; 0x16c0 <addByteToCB+0x8a>
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	fc 01       	movw	r30, r24
    16be:	12 82       	std	Z+2, r1	; 0x02
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	83 df       	rcall	.-250    	; 0x15ce <cpu_irq_restore>
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	25 96       	adiw	r28, 0x05	; 5
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <readByteFromCB>:

bool readByteFromCB(struct CircularBuffer* cb, uint8_t *dst) {
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	26 97       	sbiw	r28, 0x06	; 6
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	8b 83       	std	Y+3, r24	; 0x03
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	6d 83       	std	Y+5, r22	; 0x05
    16ea:	7e 83       	std	Y+6, r23	; 0x06
	bool success = false;
    16ec:	19 82       	std	Y+1, r1	; 0x01
	// Save the interrupt state and disable interrupts:
	irqflags_t flags = cpu_irq_save();
    16ee:	5f df       	rcall	.-322    	; 0x15ae <cpu_irq_save>
    16f0:	8a 83       	std	Y+2, r24	; 0x02

	// Is there available data?
	if (cb->count > 0) {
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	fc 01       	movw	r30, r24
    16f8:	84 81       	ldd	r24, Z+4	; 0x04
    16fa:	88 23       	and	r24, r24
    16fc:	99 f1       	breq	.+102    	; 0x1764 <readByteFromCB+0x8e>
		// Remove the data from the back and update counters:
		*dst = cb->buffer[cb->back++];
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	fc 01       	movw	r30, r24
    1704:	20 81       	ld	r18, Z
    1706:	31 81       	ldd	r19, Z+1	; 0x01
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	fc 01       	movw	r30, r24
    170e:	43 81       	ldd	r20, Z+3	; 0x03
    1710:	84 2f       	mov	r24, r20
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	82 0f       	add	r24, r18
    1716:	93 1f       	adc	r25, r19
    1718:	fc 01       	movw	r30, r24
    171a:	20 81       	ld	r18, Z
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	fc 01       	movw	r30, r24
    1722:	20 83       	st	Z, r18
    1724:	24 2f       	mov	r18, r20
    1726:	2f 5f       	subi	r18, 0xFF	; 255
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	fc 01       	movw	r30, r24
    172e:	23 83       	std	Z+3, r18	; 0x03
		cb->count--;
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	fc 01       	movw	r30, r24
    1736:	84 81       	ldd	r24, Z+4	; 0x04
    1738:	28 2f       	mov	r18, r24
    173a:	21 50       	subi	r18, 0x01	; 1
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	fc 01       	movw	r30, r24
    1742:	24 83       	std	Z+4, r18	; 0x04
		
		// Has the back value overflown?
		if (cb->back >= cb->size) {
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	fc 01       	movw	r30, r24
    174a:	23 81       	ldd	r18, Z+3	; 0x03
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	fc 01       	movw	r30, r24
    1752:	85 81       	ldd	r24, Z+5	; 0x05
    1754:	28 17       	cp	r18, r24
    1756:	20 f0       	brcs	.+8      	; 0x1760 <readByteFromCB+0x8a>
			cb->back = 0;
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	fc 01       	movw	r30, r24
    175e:	13 82       	std	Z+3, r1	; 0x03
		}
		
		// Hooray!
		success = true;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
	}

	// Restore the interrupt state:
	cpu_irq_restore(flags);
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	33 df       	rcall	.-410    	; 0x15ce <cpu_irq_restore>
	
	return success;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
}
    176a:	26 96       	adiw	r28, 0x06	; 6
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <readFromCB>:

uint8_t readFromCB(struct CircularBuffer* cb, uint8_t* dst, uint8_t max_count) {
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	26 97       	sbiw	r28, 0x06	; 6
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	9b 83       	std	Y+3, r25	; 0x03
    1788:	6c 83       	std	Y+4, r22	; 0x04
    178a:	7d 83       	std	Y+5, r23	; 0x05
    178c:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t temp = 0;
    178e:	19 82       	std	Y+1, r1	; 0x01
		
	while (temp < max_count && readByteFromCB(cb, dst + temp)) {
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <readFromCB+0x22>
		temp++;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	89 83       	std	Y+1, r24	; 0x01
}

uint8_t readFromCB(struct CircularBuffer* cb, uint8_t* dst, uint8_t max_count) {
	uint8_t temp = 0;
		
	while (temp < max_count && readByteFromCB(cb, dst + temp)) {
    1798:	99 81       	ldd	r25, Y+1	; 0x01
    179a:	8e 81       	ldd	r24, Y+6	; 0x06
    179c:	98 17       	cp	r25, r24
    179e:	68 f4       	brcc	.+26     	; 0x17ba <readFromCB+0x44>
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	2c 81       	ldd	r18, Y+4	; 0x04
    17a8:	3d 81       	ldd	r19, Y+5	; 0x05
    17aa:	28 0f       	add	r18, r24
    17ac:	39 1f       	adc	r19, r25
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	9b 81       	ldd	r25, Y+3	; 0x03
    17b2:	b9 01       	movw	r22, r18
    17b4:	90 df       	rcall	.-224    	; 0x16d6 <readByteFromCB>
    17b6:	88 23       	and	r24, r24
    17b8:	61 f7       	brne	.-40     	; 0x1792 <readFromCB+0x1c>
		temp++;
	}		
		
	return temp;
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    17bc:	26 96       	adiw	r28, 0x06	; 6
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <readStringFromCB>:

bool readStringFromCB(struct CircularBuffer *cb, char* dst, uint8_t max_count) {
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	2a 97       	sbiw	r28, 0x0a	; 10
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	8e 83       	std	Y+6, r24	; 0x06
    17d8:	9f 83       	std	Y+7, r25	; 0x07
    17da:	68 87       	std	Y+8, r22	; 0x08
    17dc:	79 87       	std	Y+9, r23	; 0x09
    17de:	4a 87       	std	Y+10, r20	; 0x0a
	uint8_t temp, idx, count;
	bool found = false;
    17e0:	1b 82       	std	Y+3, r1	; 0x03
	// Save the interrupt state and disable interrupts:
	irqflags_t flags = cpu_irq_save();
    17e2:	e5 de       	rcall	.-566    	; 0x15ae <cpu_irq_save>
    17e4:	8c 83       	std	Y+4, r24	; 0x04
	
	// Start at the back for the circular buffer:
	idx = cb->back;
    17e6:	8e 81       	ldd	r24, Y+6	; 0x06
    17e8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ea:	fc 01       	movw	r30, r24
    17ec:	83 81       	ldd	r24, Z+3	; 0x03
    17ee:	8a 83       	std	Y+2, r24	; 0x02
	
	// Pick the minimum search area:
	count = MIN(cb->count, max_count);
    17f0:	8e 81       	ldd	r24, Y+6	; 0x06
    17f2:	9f 81       	ldd	r25, Y+7	; 0x07
    17f4:	fc 01       	movw	r30, r24
    17f6:	94 81       	ldd	r25, Z+4	; 0x04
    17f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fa:	98 17       	cp	r25, r24
    17fc:	28 f4       	brcc	.+10     	; 0x1808 <readStringFromCB+0x40>
    17fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1800:	9f 81       	ldd	r25, Y+7	; 0x07
    1802:	fc 01       	movw	r30, r24
    1804:	84 81       	ldd	r24, Z+4	; 0x04
    1806:	01 c0       	rjmp	.+2      	; 0x180a <readStringFromCB+0x42>
    1808:	8a 85       	ldd	r24, Y+10	; 0x0a
    180a:	8d 83       	std	Y+5, r24	; 0x05
	
	// Search for the first CB_STRING_TERMINATOR:
	for (temp = 0; temp < count; temp++) {
    180c:	19 82       	std	Y+1, r1	; 0x01
    180e:	1f c0       	rjmp	.+62     	; 0x184e <readStringFromCB+0x86>
		// Has it been found?
		if (cb->buffer[idx] == CB_STRING_TERMINATOR) {
    1810:	8e 81       	ldd	r24, Y+6	; 0x06
    1812:	9f 81       	ldd	r25, Y+7	; 0x07
    1814:	fc 01       	movw	r30, r24
    1816:	20 81       	ld	r18, Z
    1818:	31 81       	ldd	r19, Z+1	; 0x01
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	82 0f       	add	r24, r18
    1822:	93 1f       	adc	r25, r19
    1824:	fc 01       	movw	r30, r24
    1826:	80 81       	ld	r24, Z
    1828:	88 23       	and	r24, r24
    182a:	19 f4       	brne	.+6      	; 0x1832 <readStringFromCB+0x6a>
			// Then stop searching:
			found = true;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	8b 83       	std	Y+3, r24	; 0x03
			break;
    1830:	12 c0       	rjmp	.+36     	; 0x1856 <readStringFromCB+0x8e>
		}
		
		// Increment:
		idx++;
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	8a 83       	std	Y+2, r24	; 0x02
		if (idx >= cb->size) {
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	9f 81       	ldd	r25, Y+7	; 0x07
    183c:	fc 01       	movw	r30, r24
    183e:	95 81       	ldd	r25, Z+5	; 0x05
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	89 17       	cp	r24, r25
    1844:	08 f0       	brcs	.+2      	; 0x1848 <readStringFromCB+0x80>
			idx = 0;
    1846:	1a 82       	std	Y+2, r1	; 0x02
	
	// Pick the minimum search area:
	count = MIN(cb->count, max_count);
	
	// Search for the first CB_STRING_TERMINATOR:
	for (temp = 0; temp < count; temp++) {
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	99 81       	ldd	r25, Y+1	; 0x01
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	98 17       	cp	r25, r24
    1854:	e8 f2       	brcs	.-70     	; 0x1810 <readStringFromCB+0x48>
			idx = 0;
		}
	}

	// Restore the interrupt state:
	cpu_irq_restore(flags);
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	ba de       	rcall	.-652    	; 0x15ce <cpu_irq_restore>
	
	// Make sure there is room for the terminator:
	found &= (temp + 1) < max_count;
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	ac 01       	movw	r20, r24
    1868:	4f 5f       	subi	r20, 0xFF	; 255
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	8a 85       	ldd	r24, Y+10	; 0x0a
    186e:	88 2f       	mov	r24, r24
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	48 17       	cp	r20, r24
    1876:	59 07       	cpc	r21, r25
    1878:	0c f0       	brlt	.+2      	; 0x187c <readStringFromCB+0xb4>
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	86 2f       	mov	r24, r22
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	82 23       	and	r24, r18
    1882:	93 23       	and	r25, r19
    1884:	21 e0       	ldi	r18, 0x01	; 1
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	09 f4       	brne	.+2      	; 0x188c <readStringFromCB+0xc4>
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	2b 83       	std	Y+3, r18	; 0x03
	
	// Read the line:
	if (found) {
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	88 23       	and	r24, r24
    1892:	49 f0       	breq	.+18     	; 0x18a6 <readStringFromCB+0xde>
		readFromCB(cb, dst, temp + 1);
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	48 2f       	mov	r20, r24
    1898:	4f 5f       	subi	r20, 0xFF	; 255
    189a:	28 85       	ldd	r18, Y+8	; 0x08
    189c:	39 85       	ldd	r19, Y+9	; 0x09
    189e:	8e 81       	ldd	r24, Y+6	; 0x06
    18a0:	9f 81       	ldd	r25, Y+7	; 0x07
    18a2:	b9 01       	movw	r22, r18
    18a4:	68 df       	rcall	.-304    	; 0x1776 <readFromCB>
	}
	
	return found;
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18a8:	2a 96       	adiw	r28, 0x0a	; 10
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <ioport_set_pin_level>:
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	2b 97       	sbiw	r28, 0x0b	; 11
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	8a 87       	std	Y+10, r24	; 0x0a
    18c4:	6b 87       	std	Y+11, r22	; 0x0b
    18c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    18cc:	8a 83       	std	Y+2, r24	; 0x02
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	8b 83       	std	Y+3, r24	; 0x03
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	8c 83       	std	Y+4, r24	; 0x04
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	86 95       	lsr	r24
    18da:	86 95       	lsr	r24
    18dc:	86 95       	lsr	r24
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	8d 81       	ldd	r24, Y+5	; 0x05
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	82 95       	swap	r24
    18ec:	92 95       	swap	r25
    18ee:	90 7f       	andi	r25, 0xF0	; 240
    18f0:	98 27       	eor	r25, r24
    18f2:	80 7f       	andi	r24, 0xF0	; 240
    18f4:	98 27       	eor	r25, r24
    18f6:	9a 5f       	subi	r25, 0xFA	; 250
    18f8:	8e 83       	std	Y+6, r24	; 0x06
    18fa:	9f 83       	std	Y+7, r25	; 0x07
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	88 23       	and	r24, r24
    1900:	a9 f0       	breq	.+42     	; 0x192c <ioport_set_pin_level+0x78>
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	88 87       	std	Y+8, r24	; 0x08
    1906:	88 85       	ldd	r24, Y+8	; 0x08
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 01       	movw	r18, r24
    190e:	27 70       	andi	r18, 0x07	; 7
    1910:	33 27       	eor	r19, r19
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <ioport_set_pin_level+0x68>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	2a 95       	dec	r18
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <ioport_set_pin_level+0x64>
    1920:	28 2f       	mov	r18, r24
    1922:	8e 81       	ldd	r24, Y+6	; 0x06
    1924:	9f 81       	ldd	r25, Y+7	; 0x07
    1926:	fc 01       	movw	r30, r24
    1928:	25 83       	std	Z+5, r18	; 0x05
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <ioport_set_pin_level+0xa0>
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	89 87       	std	Y+9, r24	; 0x09
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 01       	movw	r18, r24
    1938:	27 70       	andi	r18, 0x07	; 7
    193a:	33 27       	eor	r19, r19
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <ioport_set_pin_level+0x92>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	2a 95       	dec	r18
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <ioport_set_pin_level+0x8e>
    194a:	28 2f       	mov	r18, r24
    194c:	8e 81       	ldd	r24, Y+6	; 0x06
    194e:	9f 81       	ldd	r25, Y+7	; 0x07
    1950:	fc 01       	movw	r30, r24
    1952:	26 83       	std	Z+6, r18	; 0x06
    1954:	2b 96       	adiw	r28, 0x0b	; 11
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <reset_do_soft_reset>:
{
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	89 e7       	ldi	r24, 0x79	; 121
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <ccp_write_io>

	while (1) {
		/* Intentionally empty. */
	}
    1972:	ff cf       	rjmp	.-2      	; 0x1972 <reset_do_soft_reset+0x12>

00001974 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1974:	61 50       	subi	r22, 0x01	; 1
    1976:	71 09       	sbc	r23, r1
    1978:	81 09       	sbc	r24, r1
    197a:	91 09       	sbc	r25, r1
    197c:	d9 f7       	brne	.-10     	; 0x1974 <__portable_avr_delay_cycles>
}
    197e:	08 95       	ret

00001980 <byteToASCIIHex>:

// Local "pointers" for the working sets:
static uint8_t ghAddr;
static uint8_t ccAddr;

void byteToASCIIHex(const uint8_t b, char* high, char* low) {
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	25 97       	sbiw	r28, 0x05	; 5
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	6a 83       	std	Y+2, r22	; 0x02
    1992:	7b 83       	std	Y+3, r23	; 0x03
    1994:	4c 83       	std	Y+4, r20	; 0x04
    1996:	5d 83       	std	Y+5, r21	; 0x05
	*low = b & 0x0F;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	28 2f       	mov	r18, r24
    199c:	2f 70       	andi	r18, 0x0F	; 15
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
    19a0:	9d 81       	ldd	r25, Y+5	; 0x05
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18
	*high = (b>>4) & 0x0F;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	82 95       	swap	r24
    19aa:	8f 70       	andi	r24, 0x0F	; 15
    19ac:	28 2f       	mov	r18, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	9b 81       	ldd	r25, Y+3	; 0x03
    19b2:	fc 01       	movw	r30, r24
    19b4:	20 83       	st	Z, r18
	
	if (*low > 9) {
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ba:	fc 01       	movw	r30, r24
    19bc:	80 81       	ld	r24, Z
    19be:	8a 30       	cpi	r24, 0x0A	; 10
    19c0:	5c f0       	brlt	.+22     	; 0x19d8 <byteToASCIIHex+0x58>
		*low = 'a' + *low - 0x0A;
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	9d 81       	ldd	r25, Y+5	; 0x05
    19c6:	fc 01       	movw	r30, r24
    19c8:	80 81       	ld	r24, Z
    19ca:	89 5a       	subi	r24, 0xA9	; 169
    19cc:	28 2f       	mov	r18, r24
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	9d 81       	ldd	r25, Y+5	; 0x05
    19d2:	fc 01       	movw	r30, r24
    19d4:	20 83       	st	Z, r18
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <byteToASCIIHex+0x6c>
	}
	else {
		*low = '0' + *low;
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	fc 01       	movw	r30, r24
    19de:	80 81       	ld	r24, Z
    19e0:	80 5d       	subi	r24, 0xD0	; 208
    19e2:	28 2f       	mov	r18, r24
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	9d 81       	ldd	r25, Y+5	; 0x05
    19e8:	fc 01       	movw	r30, r24
    19ea:	20 83       	st	Z, r18
	}

	if (*high > 9) {
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	9b 81       	ldd	r25, Y+3	; 0x03
    19f0:	fc 01       	movw	r30, r24
    19f2:	80 81       	ld	r24, Z
    19f4:	8a 30       	cpi	r24, 0x0A	; 10
    19f6:	5c f0       	brlt	.+22     	; 0x1a0e <byteToASCIIHex+0x8e>
		*high = 'a' + *high - 0x0A;
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	9b 81       	ldd	r25, Y+3	; 0x03
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	89 5a       	subi	r24, 0xA9	; 169
    1a02:	28 2f       	mov	r18, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	fc 01       	movw	r30, r24
    1a0a:	20 83       	st	Z, r18
    1a0c:	0a c0       	rjmp	.+20     	; 0x1a22 <byteToASCIIHex+0xa2>
	}
	else {
		*high = '0' + *high;
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	9b 81       	ldd	r25, Y+3	; 0x03
    1a12:	fc 01       	movw	r30, r24
    1a14:	80 81       	ld	r24, Z
    1a16:	80 5d       	subi	r24, 0xD0	; 208
    1a18:	28 2f       	mov	r18, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1e:	fc 01       	movw	r30, r24
    1a20:	20 83       	st	Z, r18
	}
}
    1a22:	25 96       	adiw	r28, 0x05	; 5
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <ASCIIHexToByte>:

uint8_t ASCIIHexToByte(char high, char low) {
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <ASCIIHexToByte+0x6>
    1a34:	1f 92       	push	r1
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
    1a3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t temp;
	
	// Make high and low lower case:
	high |= 0x20;
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	80 62       	ori	r24, 0x20	; 32
    1a42:	8a 83       	std	Y+2, r24	; 0x02
	low  |= 0x20;
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	80 62       	ori	r24, 0x20	; 32
    1a48:	8b 83       	std	Y+3, r24	; 0x03
	
	if (high >= 'a') {
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	81 36       	cpi	r24, 0x61	; 97
    1a4e:	24 f0       	brlt	.+8      	; 0x1a58 <ASCIIHexToByte+0x2a>
		temp = 0x0A + high - 'a';
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	87 55       	subi	r24, 0x57	; 87
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	03 c0       	rjmp	.+6      	; 0x1a5e <ASCIIHexToByte+0x30>
	}
	else {
		temp = high - '0';
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	80 53       	subi	r24, 0x30	; 48
    1a5c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	temp <<= 4;
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	82 95       	swap	r24
    1a62:	80 7f       	andi	r24, 0xF0	; 240
    1a64:	89 83       	std	Y+1, r24	; 0x01
	
	if (low >= 'a') {
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	81 36       	cpi	r24, 0x61	; 97
    1a6a:	34 f0       	brlt	.+12     	; 0x1a78 <ASCIIHexToByte+0x4a>
		temp += 0x0A + low - 'a';
    1a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	89 0f       	add	r24, r25
    1a72:	87 55       	subi	r24, 0x57	; 87
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <ASCIIHexToByte+0x54>
	}
	else {
		temp += low - '0';
    1a78:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	89 0f       	add	r24, r25
    1a7e:	80 53       	subi	r24, 0x30	; 48
    1a80:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return temp;
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a84:	23 96       	adiw	r28, 0x03	; 3
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <processComm>:

void processComm(void) {
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	c5 54       	subi	r28, 0x45	; 69
    1a9a:	d1 09       	sbc	r29, r1
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	de bf       	out	0x3e, r29	; 62
	uint8_t i;
	char str[USB_SERIAL_RX_BUFFER_SIZE];
	char cmd[3];
	bool match = false;
    1aa0:	1a 82       	std	Y+2, r1	; 0x02
	
	// Was a string transmitted?
	if (recvUSBString(str, USB_SERIAL_RX_BUFFER_SIZE)) {
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	03 96       	adiw	r24, 0x03	; 3
    1aa6:	60 e4       	ldi	r22, 0x40	; 64
    1aa8:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <recvUSBString>
    1aac:	88 23       	and	r24, r24
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <processComm+0x22>
    1ab0:	6f c0       	rjmp	.+222    	; 0x1b90 <processComm+0x100>
		cmd[0] = str[0];
    1ab2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	8d 5b       	subi	r24, 0xBD	; 189
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	fc 01       	movw	r30, r24
    1abc:	20 83       	st	Z, r18
		cmd[1] = str[1];
    1abe:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	8d 5b       	subi	r24, 0xBD	; 189
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	21 83       	std	Z+1, r18	; 0x01
		cmd[2] = '\0';
    1aca:	ce 01       	movw	r24, r28
    1acc:	8d 5b       	subi	r24, 0xBD	; 189
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	12 82       	std	Z+2, r1	; 0x02
		sendDBGLine("USB:rcv" + *cmd);
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	8d 5b       	subi	r24, 0xBD	; 189
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	fc 01       	movw	r30, r24
    1adc:	80 81       	ld	r24, Z
    1ade:	99 27       	eor	r25, r25
    1ae0:	87 fd       	sbrc	r24, 7
    1ae2:	90 95       	com	r25
    1ae4:	8e 54       	subi	r24, 0x4E	; 78
    1ae6:	9f 4d       	sbci	r25, 0xDF	; 223
    1ae8:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
		// Search for the command:
		for (i = 0; i < NUM_COMMANDS; i++) {
    1aec:	19 82       	std	Y+1, r1	; 0x01
    1aee:	3d c0       	rjmp	.+122    	; 0x1b6a <processComm+0xda>
			// Is this a match?
			if (0 == strcmp(COMMANDS[i].CMD, cmd)) {
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	83 59       	subi	r24, 0x93	; 147
    1b00:	9d 4d       	sbci	r25, 0xDD	; 221
    1b02:	fc 01       	movw	r30, r24
    1b04:	80 81       	ld	r24, Z
    1b06:	91 81       	ldd	r25, Z+1	; 0x01
    1b08:	9e 01       	movw	r18, r28
    1b0a:	2d 5b       	subi	r18, 0xBD	; 189
    1b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0e:	b9 01       	movw	r22, r18
    1b10:	0e 94 7f 49 	call	0x92fe	; 0x92fe <strcmp>
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	31 f5       	brne	.+76     	; 0x1b64 <processComm+0xd4>
				sendDBGString("Command match ");
    1b18:	8a eb       	ldi	r24, 0xBA	; 186
    1b1a:	90 e2       	ldi	r25, 0x20	; 32
    1b1c:	0e 94 b1 21 	call	0x4362	; 0x4362 <sendDBGString>
				sendDBGLine(COMMANDS[i].CMD);
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	83 59       	subi	r24, 0x93	; 147
    1b30:	9d 4d       	sbci	r25, 0xDD	; 221
    1b32:	fc 01       	movw	r30, r24
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
				// Then execute the command passing it the rest of the string:
				match = true;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	8a 83       	std	Y+2, r24	; 0x02
				COMMANDS[i].action(str+2);
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	81 59       	subi	r24, 0x91	; 145
    1b50:	9d 4d       	sbci	r25, 0xDD	; 221
    1b52:	fc 01       	movw	r30, r24
    1b54:	20 81       	ld	r18, Z
    1b56:	31 81       	ldd	r19, Z+1	; 0x01
    1b58:	ce 01       	movw	r24, r28
    1b5a:	03 96       	adiw	r24, 0x03	; 3
    1b5c:	02 96       	adiw	r24, 0x02	; 2
    1b5e:	f9 01       	movw	r30, r18
    1b60:	09 95       	icall
				break;
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <processComm+0xe2>
		cmd[0] = str[0];
		cmd[1] = str[1];
		cmd[2] = '\0';
		sendDBGLine("USB:rcv" + *cmd);
		// Search for the command:
		for (i = 0; i < NUM_COMMANDS; i++) {
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	8b 30       	cpi	r24, 0x0B	; 11
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <processComm+0xe2>
    1b70:	bf cf       	rjmp	.-130    	; 0x1af0 <processComm+0x60>
				break;
			}
		}
		
		// If the command was not found, Then send a NO:
		if (!match) {
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	89 27       	eor	r24, r25
    1b78:	88 23       	and	r24, r24
    1b7a:	51 f0       	breq	.+20     	; 0x1b90 <processComm+0x100>
			sendDBGString("No command matching ");
    1b7c:	89 ec       	ldi	r24, 0xC9	; 201
    1b7e:	90 e2       	ldi	r25, 0x20	; 32
    1b80:	0e 94 b1 21 	call	0x4362	; 0x4362 <sendDBGString>
			sendDBGLine(cmd);
    1b84:	ce 01       	movw	r24, r28
    1b86:	8d 5b       	subi	r24, 0xBD	; 189
    1b88:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8a:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
			sendCommNO();
    1b8e:	13 d0       	rcall	.+38     	; 0x1bb6 <sendCommNO>
		}
	}
}
    1b90:	cb 5b       	subi	r28, 0xBB	; 187
    1b92:	df 4f       	sbci	r29, 0xFF	; 255
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <sendCommOK>:

void sendCommOK(void) {
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	sendUSBString("OK", true);
    1ba6:	61 e0       	ldi	r22, 0x01	; 1
    1ba8:	8e ed       	ldi	r24, 0xDE	; 222
    1baa:	90 e2       	ldi	r25, 0x20	; 32
    1bac:	0e 94 9e 29 	call	0x533c	; 0x533c <sendUSBString>
}
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <sendCommNO>:

void sendCommNO(void) {
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
	sendUSBString("NO", true);
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	81 ee       	ldi	r24, 0xE1	; 225
    1bc2:	90 e2       	ldi	r25, 0x20	; 32
    1bc4:	0e 94 9e 29 	call	0x533c	; 0x533c <sendUSBString>
}
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <commRG>:

void commRG(char* args) {
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	25 97       	sbiw	r28, 0x05	; 5
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	8c 83       	std	Y+4, r24	; 0x04
    1bde:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t i;
	char high, low;
	
	// Read the global header:
	readGlobalHeader(&ghTemp);
    1be0:	8d e5       	ldi	r24, 0x5D	; 93
    1be2:	96 e2       	ldi	r25, 0x26	; 38
    1be4:	39 d2       	rcall	.+1138   	; 0x2058 <readGlobalHeader>
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct GlobalHeader); i++) {
    1be6:	19 82       	std	Y+1, r1	; 0x01
    1be8:	19 c0       	rjmp	.+50     	; 0x1c1c <commRG+0x4e>
		byteToASCIIHex(((uint8_t*)&ghTemp)[i], &high, &low);
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	83 5a       	subi	r24, 0xA3	; 163
    1bf2:	99 4d       	sbci	r25, 0xD9	; 217
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	ec 91       	ld	r30, X
    1bf8:	9e 01       	movw	r18, r28
    1bfa:	2d 5f       	subi	r18, 0xFD	; 253
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	ce 01       	movw	r24, r28
    1c00:	02 96       	adiw	r24, 0x02	; 2
    1c02:	a9 01       	movw	r20, r18
    1c04:	bc 01       	movw	r22, r24
    1c06:	8e 2f       	mov	r24, r30
    1c08:	bb de       	rcall	.-650    	; 0x1980 <byteToASCIIHex>
		sendUSBChar(high);
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	0e 94 85 29 	call	0x530a	; 0x530a <sendUSBChar>
		sendUSBChar(low);
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	0e 94 85 29 	call	0x530a	; 0x530a <sendUSBChar>
	
	// Read the global header:
	readGlobalHeader(&ghTemp);
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct GlobalHeader); i++) {
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	88 30       	cpi	r24, 0x08	; 8
    1c20:	20 f3       	brcs	.-56     	; 0x1bea <commRG+0x1c>
		sendUSBChar(high);
		sendUSBChar(low);
	}
	
	// Add the terminator:
	sendUSBChar('\0');
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0e 94 85 29 	call	0x530a	; 0x530a <sendUSBChar>
	
	// Send an OK:
	sendCommOK();
    1c28:	ba df       	rcall	.-140    	; 0x1b9e <sendCommOK>
	
	// Reset the working copy address:
	ghAddr = 0;
    1c2a:	10 92 22 27 	sts	0x2722, r1
}
    1c2e:	25 96       	adiw	r28, 0x05	; 5
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	08 95       	ret

00001c3a <commAG>:

void commAG(char* args) {
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <commAG+0x6>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	9a 83       	std	Y+2, r25	; 0x02
	// Check for the argument:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	80 81       	ld	r24, Z
    1c50:	88 23       	and	r24, r24
    1c52:	71 f0       	breq	.+28     	; 0x1c70 <commAG+0x36>
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	01 96       	adiw	r24, 0x01	; 1
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	39 f0       	breq	.+14     	; 0x1c70 <commAG+0x36>
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	02 96       	adiw	r24, 0x02	; 2
    1c68:	fc 01       	movw	r30, r24
    1c6a:	80 81       	ld	r24, Z
    1c6c:	88 23       	and	r24, r24
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <commAG+0x3a>
		sendCommNO();
    1c70:	a2 df       	rcall	.-188    	; 0x1bb6 <sendCommNO>
    1c72:	0e c0       	rjmp	.+28     	; 0x1c90 <commAG+0x56>
	}
	else {
		// Set the new address:
		ghAddr = ASCIIHexToByte(args[0], args[1]);
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	20 81       	ld	r18, Z
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	fc 01       	movw	r30, r24
    1c84:	80 81       	ld	r24, Z
    1c86:	62 2f       	mov	r22, r18
    1c88:	d2 de       	rcall	.-604    	; 0x1a2e <ASCIIHexToByte>
    1c8a:	80 93 22 27 	sts	0x2722, r24
		
		// Send an OK:
		sendCommOK();
    1c8e:	87 df       	rcall	.-242    	; 0x1b9e <sendCommOK>
	}
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	08 95       	ret

00001c9a <commWG>:

void commWG(char* args) {
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <commWG+0xc>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <commWG+0xe>
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    1cae:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t length;
	uint8_t temp = 0;
    1cb0:	19 82       	std	Y+1, r1	; 0x01
	
	// How much data is being written?
	length = strlen(args);
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	0e 94 88 49 	call	0x9310	; 0x9310 <strlen>
    1cba:	8a 83       	std	Y+2, r24	; 0x02
	
	// Length must be an even number since it represents ASCII coded hex.
	if ((length & 1) == 1) {
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	81 70       	andi	r24, 0x01	; 1
    1cc4:	99 27       	eor	r25, r25
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	39 f1       	breq	.+78     	; 0x1d18 <commWG+0x7e>
		sendCommNO();
    1cca:	75 df       	rcall	.-278    	; 0x1bb6 <sendCommNO>
		return;
    1ccc:	34 c0       	rjmp	.+104    	; 0x1d36 <commWG+0x9c>
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ghAddr < sizeof(struct GlobalHeader)) {
		((uint8_t*)&ghTemp)[ghAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
    1cce:	f0 90 22 27 	lds	r15, 0x2722
    1cd2:	8f 2d       	mov	r24, r15
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	8c 01       	movw	r16, r24
    1cd8:	03 5a       	subi	r16, 0xA3	; 163
    1cda:	19 4d       	sbci	r17, 0xD9	; 217
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce8:	82 0f       	add	r24, r18
    1cea:	93 1f       	adc	r25, r19
    1cec:	fc 01       	movw	r30, r24
    1cee:	40 81       	ld	r20, Z
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	fc 01       	movw	r30, r24
    1d00:	80 81       	ld	r24, Z
    1d02:	64 2f       	mov	r22, r20
    1d04:	94 de       	rcall	.-728    	; 0x1a2e <ASCIIHexToByte>
    1d06:	f8 01       	movw	r30, r16
    1d08:	80 83       	st	Z, r24
    1d0a:	8f 2d       	mov	r24, r15
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	80 93 22 27 	sts	0x2722, r24
		temp += 2;
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	8e 5f       	subi	r24, 0xFE	; 254
    1d16:	89 83       	std	Y+1, r24	; 0x01
		sendCommNO();
		return;
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ghAddr < sizeof(struct GlobalHeader)) {
    1d18:	99 81       	ldd	r25, Y+1	; 0x01
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	98 17       	cp	r25, r24
    1d1e:	20 f4       	brcc	.+8      	; 0x1d28 <commWG+0x8e>
    1d20:	80 91 22 27 	lds	r24, 0x2722
    1d24:	88 30       	cpi	r24, 0x08	; 8
    1d26:	98 f2       	brcs	.-90     	; 0x1cce <commWG+0x34>
		((uint8_t*)&ghTemp)[ghAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
		temp += 2;
	}
	
	// Did the copy complete?
	if (temp == length) {
    1d28:	99 81       	ldd	r25, Y+1	; 0x01
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	98 17       	cp	r25, r24
    1d2e:	11 f4       	brne	.+4      	; 0x1d34 <commWG+0x9a>
		sendCommOK();
    1d30:	36 df       	rcall	.-404    	; 0x1b9e <sendCommOK>
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <commWG+0x9c>
	}
	else {
		sendCommNO();
    1d34:	40 df       	rcall	.-384    	; 0x1bb6 <sendCommNO>
	}
}
    1d36:	24 96       	adiw	r28, 0x04	; 4
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	ff 90       	pop	r15
    1d46:	08 95       	ret

00001d48 <commSG>:

void commSG(char* args) {
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <commSG+0x6>
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t i;
	char high, low;
	
	// Read the global header:
	writeGlobalHeader(&ghTemp);
    1d56:	8d e5       	ldi	r24, 0x5D	; 93
    1d58:	96 e2       	ldi	r25, 0x26	; 38
    1d5a:	93 d1       	rcall	.+806    	; 0x2082 <writeGlobalHeader>
	
	// Send an OK:
	sendCommOK();
    1d5c:	20 df       	rcall	.-448    	; 0x1b9e <sendCommOK>
	
	// Reset the working copy address:
	ghAddr = 0;
    1d5e:	10 92 22 27 	sts	0x2722, r1
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <commRC>:

void commRC(char* args) {
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	26 97       	sbiw	r28, 0x06	; 6
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
	uint8_t i, which;
	char high, low;
	
	// Check for the argument and terminator:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	dc 01       	movw	r26, r24
    1d84:	8c 91       	ld	r24, X
    1d86:	88 23       	and	r24, r24
    1d88:	71 f0       	breq	.+28     	; 0x1da6 <commRC+0x3a>
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	fc 01       	movw	r30, r24
    1d92:	80 81       	ld	r24, Z
    1d94:	88 23       	and	r24, r24
    1d96:	39 f0       	breq	.+14     	; 0x1da6 <commRC+0x3a>
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	02 96       	adiw	r24, 0x02	; 2
    1d9e:	dc 01       	movw	r26, r24
    1da0:	8c 91       	ld	r24, X
    1da2:	88 23       	and	r24, r24
    1da4:	11 f0       	breq	.+4      	; 0x1daa <commRC+0x3e>
		sendCommNO();
    1da6:	07 df       	rcall	.-498    	; 0x1bb6 <sendCommNO>
    1da8:	34 c0       	rjmp	.+104    	; 0x1e12 <commRC+0xa6>
		return;
	}
	
	// Get the argument:
	which = ASCIIHexToByte(args[0], args[1]);
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	fc 01       	movw	r30, r24
    1db2:	20 81       	ld	r18, Z
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	dc 01       	movw	r26, r24
    1dba:	8c 91       	ld	r24, X
    1dbc:	62 2f       	mov	r22, r18
    1dbe:	37 de       	rcall	.-914    	; 0x1a2e <ASCIIHexToByte>
    1dc0:	8a 83       	std	Y+2, r24	; 0x02
	
	// Read the controller configuration:
	readControllerConfig(which, &ccTemp);
    1dc2:	65 e6       	ldi	r22, 0x65	; 101
    1dc4:	76 e2       	ldi	r23, 0x26	; 38
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	71 d1       	rcall	.+738    	; 0x20ac <readControllerConfig>
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct ControllerConfiguration); i++) {
    1dca:	19 82       	std	Y+1, r1	; 0x01
    1dcc:	19 c0       	rjmp	.+50     	; 0x1e00 <commRC+0x94>
		byteToASCIIHex(((uint8_t*)&ccTemp)[i], &high, &low);
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	8b 59       	subi	r24, 0x9B	; 155
    1dd6:	99 4d       	sbci	r25, 0xD9	; 217
    1dd8:	dc 01       	movw	r26, r24
    1dda:	ec 91       	ld	r30, X
    1ddc:	9e 01       	movw	r18, r28
    1dde:	2c 5f       	subi	r18, 0xFC	; 252
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	ce 01       	movw	r24, r28
    1de4:	03 96       	adiw	r24, 0x03	; 3
    1de6:	a9 01       	movw	r20, r18
    1de8:	bc 01       	movw	r22, r24
    1dea:	8e 2f       	mov	r24, r30
    1dec:	c9 dd       	rcall	.-1134   	; 0x1980 <byteToASCIIHex>
		sendUSBChar(high);
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	0e 94 85 29 	call	0x530a	; 0x530a <sendUSBChar>
		sendUSBChar(low);
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	0e 94 85 29 	call	0x530a	; 0x530a <sendUSBChar>
	
	// Read the controller configuration:
	readControllerConfig(which, &ccTemp);
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct ControllerConfiguration); i++) {
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	8f 5f       	subi	r24, 0xFF	; 255
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	8d 3b       	cpi	r24, 0xBD	; 189
    1e04:	20 f3       	brcs	.-56     	; 0x1dce <commRC+0x62>
		sendUSBChar(high);
		sendUSBChar(low);
	}
	
	// Add the terminator:
	sendUSBChar('\0');
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	0e 94 85 29 	call	0x530a	; 0x530a <sendUSBChar>
	
	// Send an OK:
	sendCommOK();
    1e0c:	c8 de       	rcall	.-624    	; 0x1b9e <sendCommOK>
	
	// Reset the working copy address:
	ccAddr = 0;
    1e0e:	10 92 23 27 	sts	0x2723, r1
}
    1e12:	26 96       	adiw	r28, 0x06	; 6
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <commAC>:

void commAC(char* args) {
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <commAC+0x6>
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
	// Check for the argument:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	fc 01       	movw	r30, r24
    1e32:	80 81       	ld	r24, Z
    1e34:	88 23       	and	r24, r24
    1e36:	71 f0       	breq	.+28     	; 0x1e54 <commAC+0x36>
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	fc 01       	movw	r30, r24
    1e40:	80 81       	ld	r24, Z
    1e42:	88 23       	and	r24, r24
    1e44:	39 f0       	breq	.+14     	; 0x1e54 <commAC+0x36>
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	02 96       	adiw	r24, 0x02	; 2
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 23       	and	r24, r24
    1e52:	11 f0       	breq	.+4      	; 0x1e58 <commAC+0x3a>
		sendCommNO();
    1e54:	b0 de       	rcall	.-672    	; 0x1bb6 <sendCommNO>
    1e56:	0e c0       	rjmp	.+28     	; 0x1e74 <commAC+0x56>
	}
	else {
		// Set the new address:
		ccAddr = ASCIIHexToByte(args[0], args[1]);
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	fc 01       	movw	r30, r24
    1e60:	20 81       	ld	r18, Z
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	fc 01       	movw	r30, r24
    1e68:	80 81       	ld	r24, Z
    1e6a:	62 2f       	mov	r22, r18
    1e6c:	e0 dd       	rcall	.-1088   	; 0x1a2e <ASCIIHexToByte>
    1e6e:	80 93 23 27 	sts	0x2723, r24
	
		// Send an OK:
		sendCommOK();
    1e72:	95 de       	rcall	.-726    	; 0x1b9e <sendCommOK>
	}
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	08 95       	ret

00001e7e <commWC>:

void commWC(char* args) {
    1e7e:	ff 92       	push	r15
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <commWC+0xc>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <commWC+0xe>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	8b 83       	std	Y+3, r24	; 0x03
    1e92:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t length;
	uint8_t temp = 0;
    1e94:	19 82       	std	Y+1, r1	; 0x01
	
	// How much data is being written?
	length = strlen(args);
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	0e 94 88 49 	call	0x9310	; 0x9310 <strlen>
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
	
	// Length must be an even number since it represents ASCII coded hex.
	if ((length & 1) == 1) {
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	81 70       	andi	r24, 0x01	; 1
    1ea8:	99 27       	eor	r25, r25
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	39 f1       	breq	.+78     	; 0x1efc <commWC+0x7e>
		sendCommNO();
    1eae:	83 de       	rcall	.-762    	; 0x1bb6 <sendCommNO>
		return;
    1eb0:	34 c0       	rjmp	.+104    	; 0x1f1a <commWC+0x9c>
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ccAddr < sizeof(struct ControllerConfiguration)) {
		((uint8_t*)&ccTemp)[ccAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
    1eb2:	f0 90 23 27 	lds	r15, 0x2723
    1eb6:	8f 2d       	mov	r24, r15
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	8c 01       	movw	r16, r24
    1ebc:	0b 59       	subi	r16, 0x9B	; 155
    1ebe:	19 4d       	sbci	r17, 0xD9	; 217
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	82 0f       	add	r24, r18
    1ece:	93 1f       	adc	r25, r19
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	40 81       	ld	r20, Z
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	2b 81       	ldd	r18, Y+3	; 0x03
    1edc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ede:	82 0f       	add	r24, r18
    1ee0:	93 1f       	adc	r25, r19
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	80 81       	ld	r24, Z
    1ee6:	64 2f       	mov	r22, r20
    1ee8:	a2 dd       	rcall	.-1212   	; 0x1a2e <ASCIIHexToByte>
    1eea:	f8 01       	movw	r30, r16
    1eec:	80 83       	st	Z, r24
    1eee:	8f 2d       	mov	r24, r15
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	80 93 23 27 	sts	0x2723, r24
		temp += 2;
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	8e 5f       	subi	r24, 0xFE	; 254
    1efa:	89 83       	std	Y+1, r24	; 0x01
		sendCommNO();
		return;
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ccAddr < sizeof(struct ControllerConfiguration)) {
    1efc:	99 81       	ldd	r25, Y+1	; 0x01
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	98 17       	cp	r25, r24
    1f02:	20 f4       	brcc	.+8      	; 0x1f0c <commWC+0x8e>
    1f04:	80 91 23 27 	lds	r24, 0x2723
    1f08:	8d 3b       	cpi	r24, 0xBD	; 189
    1f0a:	98 f2       	brcs	.-90     	; 0x1eb2 <commWC+0x34>
		((uint8_t*)&ccTemp)[ccAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
		temp += 2;
	}
	
	// Did the copy complete?
	if (temp == length) {
    1f0c:	99 81       	ldd	r25, Y+1	; 0x01
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	98 17       	cp	r25, r24
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <commWC+0x9a>
		sendCommOK();
    1f14:	44 de       	rcall	.-888    	; 0x1b9e <sendCommOK>
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <commWC+0x9c>
	}
	else {
		sendCommNO();
    1f18:	4e de       	rcall	.-868    	; 0x1bb6 <sendCommNO>
	}
}
    1f1a:	24 96       	adiw	r28, 0x04	; 4
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	08 95       	ret

00001f2c <commSC>:

void commSC(char* args) {
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <commSC+0x6>
    1f32:	1f 92       	push	r1
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    1f3a:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t which;
	
	// Check for the argument and terminator:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f40:	fc 01       	movw	r30, r24
    1f42:	80 81       	ld	r24, Z
    1f44:	88 23       	and	r24, r24
    1f46:	71 f0       	breq	.+28     	; 0x1f64 <commSC+0x38>
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	88 23       	and	r24, r24
    1f54:	39 f0       	breq	.+14     	; 0x1f64 <commSC+0x38>
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	02 96       	adiw	r24, 0x02	; 2
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	80 81       	ld	r24, Z
    1f60:	88 23       	and	r24, r24
    1f62:	11 f0       	breq	.+4      	; 0x1f68 <commSC+0x3c>
		sendCommNO();
    1f64:	28 de       	rcall	.-944    	; 0x1bb6 <sendCommNO>
		return;
    1f66:	13 c0       	rjmp	.+38     	; 0x1f8e <commSC+0x62>
	}
	
	// Get the argument:
	which = ASCIIHexToByte(args[0], args[1]);
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	01 96       	adiw	r24, 0x01	; 1
    1f6e:	fc 01       	movw	r30, r24
    1f70:	20 81       	ld	r18, Z
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	fc 01       	movw	r30, r24
    1f78:	80 81       	ld	r24, Z
    1f7a:	62 2f       	mov	r22, r18
    1f7c:	58 dd       	rcall	.-1360   	; 0x1a2e <ASCIIHexToByte>
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	
	// Write the controller configuration:
	writeControllerConfig(which, &ccTemp);
    1f80:	65 e6       	ldi	r22, 0x65	; 101
    1f82:	76 e2       	ldi	r23, 0x26	; 38
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	be d0       	rcall	.+380    	; 0x2104 <writeControllerConfig>

	// Send an OK:
	sendCommOK();
    1f88:	0a de       	rcall	.-1004   	; 0x1b9e <sendCommOK>

	// Reset the working copy address:
	ccAddr = 0;
    1f8a:	10 92 23 27 	sts	0x2723, r1
}
    1f8e:	23 96       	adiw	r28, 0x03	; 3
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	08 95       	ret

00001f9a <commRS>:

void commRS(char* args)
{	
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <commRS+0x6>
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
	// Send an OK:
	sendCommOK();
    1fa8:	fa dd       	rcall	.-1036   	; 0x1b9e <sendCommOK>
	delay_ms(10);
    1faa:	65 e5       	ldi	r22, 0x55	; 85
    1fac:	70 ed       	ldi	r23, 0xD0	; 208
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	e0 dc       	rcall	.-1600   	; 0x1974 <__portable_avr_delay_cycles>
	reset_do_soft_reset();
    1fb4:	d5 dc       	rcall	.-1622   	; 0x1960 <reset_do_soft_reset>
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	08 95       	ret

00001fc0 <commBL>:

void commBL(char* args)
{
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <commBL+0x6>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
	sendCommOK();
    1fce:	e7 dd       	rcall	.-1074   	; 0x1b9e <sendCommOK>
	delay_ms(10);
    1fd0:	65 e5       	ldi	r22, 0x55	; 85
    1fd2:	70 ed       	ldi	r23, 0xD0	; 208
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	cd dc       	rcall	.-1638   	; 0x1974 <__portable_avr_delay_cycles>
	bootloader();
    1fda:	0e 94 b8 13 	call	0x2770	; 0x2770 <gamepadButtonHandler+0x2b4>
}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	08 95       	ret

00001fe8 <commBU>:

void commBU(char* args)
{	 
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <commBU+0x6>
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
	
	ioport_set_pin_level(BT_FACTORY_RESET_PIN, true);
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	88 e2       	ldi	r24, 0x28	; 40
    1ffa:	5c dc       	rcall	.-1864   	; 0x18b4 <ioport_set_pin_level>
	delay_ms(1);
    1ffc:	65 ed       	ldi	r22, 0xD5	; 213
    1ffe:	74 e1       	ldi	r23, 0x14	; 20
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	b7 dc       	rcall	.-1682   	; 0x1974 <__portable_avr_delay_cycles>
	ioport_set_pin_level(BT_FACTORY_RESET_PIN, false);
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	88 e2       	ldi	r24, 0x28	; 40
    200a:	54 dc       	rcall	.-1880   	; 0x18b4 <ioport_set_pin_level>
	delay_ms(1);
    200c:	65 ed       	ldi	r22, 0xD5	; 213
    200e:	74 e1       	ldi	r23, 0x14	; 20
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	af dc       	rcall	.-1698   	; 0x1974 <__portable_avr_delay_cycles>
	ioport_set_pin_level(BT_FACTORY_RESET_PIN, true);
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	88 e2       	ldi	r24, 0x28	; 40
    201a:	4c dc       	rcall	.-1896   	; 0x18b4 <ioport_set_pin_level>
	delay_ms(1);
    201c:	65 ed       	ldi	r22, 0xD5	; 213
    201e:	74 e1       	ldi	r23, 0x14	; 20
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a7 dc       	rcall	.-1714   	; 0x1974 <__portable_avr_delay_cycles>
	ioport_set_pin_level(BT_FACTORY_RESET_PIN, false);
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	88 e2       	ldi	r24, 0x28	; 40
    202a:	44 dc       	rcall	.-1912   	; 0x18b4 <ioport_set_pin_level>
	delay_ms(1);
    202c:	65 ed       	ldi	r22, 0xD5	; 213
    202e:	74 e1       	ldi	r23, 0x14	; 20
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9f dc       	rcall	.-1730   	; 0x1974 <__portable_avr_delay_cycles>
	ioport_set_pin_level(BT_FACTORY_RESET_PIN, true);
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	88 e2       	ldi	r24, 0x28	; 40
    203a:	3c dc       	rcall	.-1928   	; 0x18b4 <ioport_set_pin_level>
	delay_ms(1);
    203c:	65 ed       	ldi	r22, 0xD5	; 213
    203e:	74 e1       	ldi	r23, 0x14	; 20
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	97 dc       	rcall	.-1746   	; 0x1974 <__portable_avr_delay_cycles>
	sendBTCmd("BC:FU");
    2046:	84 ee       	ldi	r24, 0xE4	; 228
    2048:	90 e2       	ldi	r25, 0x20	; 32
    204a:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <sendBTCmd>
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	08 95       	ret

00002058 <readGlobalHeader>:
#define GLOBAL_HEADER_EEPROM_SIZE (GLOBAL_HEADER_EEPROM_PAGE_COUNT * EEPROM_PAGE_SIZE)
#define CONTROLLER_CONFIGURATION_EEPROM_START_ADDRESS (GLOBAL_HEADER_EEPROM_ADDRESS + GLOBAL_HEADER_EEPROM_SIZE)
#define CONTROLLER_CONFIGURATION_EEPROM_PAGE_COUNT ((sizeof(struct ControllerConfiguration) + (EEPROM_PAGE_SIZE-1)) / EEPROM_PAGE_SIZE)
#define CONTROLLER_CONFIGURATION_EEPROM_SIZE (CONTROLLER_CONFIGURATION_EEPROM_PAGE_COUNT * EEPROM_PAGE_SIZE)

void readGlobalHeader(struct GlobalHeader *gh) {
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	00 d0       	rcall	.+0      	; 0x205e <readGlobalHeader+0x6>
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	9a 83       	std	Y+2, r25	; 0x02
	nvm_eeprom_read_buffer(GLOBAL_HEADER_EEPROM_ADDRESS, (void *)gh, sizeof(struct GlobalHeader));
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	48 e0       	ldi	r20, 0x08	; 8
    206c:	50 e0       	ldi	r21, 0x00	; 0
    206e:	bc 01       	movw	r22, r24
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <nvm_eeprom_read_buffer>
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	08 95       	ret

00002082 <writeGlobalHeader>:

void writeGlobalHeader(const struct GlobalHeader *gh) {
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	00 d0       	rcall	.+0      	; 0x2088 <writeGlobalHeader+0x6>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	9a 83       	std	Y+2, r25	; 0x02
	nvm_eeprom_erase_and_write_buffer(GLOBAL_HEADER_EEPROM_ADDRESS, (const void *) gh, sizeof(struct GlobalHeader));
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	48 e0       	ldi	r20, 0x08	; 8
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	bc 01       	movw	r22, r24
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <nvm_eeprom_erase_and_write_buffer>
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	08 95       	ret

000020ac <readControllerConfig>:

void readControllerConfig(uint8_t index, struct ControllerConfiguration *cc) {
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	25 97       	sbiw	r28, 0x05	; 5
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	8b 83       	std	Y+3, r24	; 0x03
    20bc:	6c 83       	std	Y+4, r22	; 0x04
    20be:	7d 83       	std	Y+5, r23	; 0x05
	eeprom_addr_t addr = CONTROLLER_CONFIGURATION_EEPROM_START_ADDRESS;
    20c0:	80 e2       	ldi	r24, 0x20	; 32
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	9a 83       	std	Y+2, r25	; 0x02
	addr += index * CONTROLLER_CONFIGURATION_EEPROM_SIZE;
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 ec       	ldi	r20, 0xC0	; 192
    20d0:	42 9f       	mul	r20, r18
    20d2:	c0 01       	movw	r24, r0
    20d4:	43 9f       	mul	r20, r19
    20d6:	90 0d       	add	r25, r0
    20d8:	11 24       	eor	r1, r1
    20da:	29 81       	ldd	r18, Y+1	; 0x01
    20dc:	3a 81       	ldd	r19, Y+2	; 0x02
    20de:	82 0f       	add	r24, r18
    20e0:	93 1f       	adc	r25, r19
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	9a 83       	std	Y+2, r25	; 0x02
	nvm_eeprom_read_buffer(addr, (void *)cc, sizeof(struct ControllerConfiguration));
    20e6:	2c 81       	ldd	r18, Y+4	; 0x04
    20e8:	3d 81       	ldd	r19, Y+5	; 0x05
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	4d eb       	ldi	r20, 0xBD	; 189
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	b9 01       	movw	r22, r18
    20f4:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <nvm_eeprom_read_buffer>
}
    20f8:	25 96       	adiw	r28, 0x05	; 5
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	08 95       	ret

00002104 <writeControllerConfig>:

void writeControllerConfig(uint8_t index, const struct ControllerConfiguration *cc) {
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	25 97       	sbiw	r28, 0x05	; 5
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	8b 83       	std	Y+3, r24	; 0x03
    2114:	6c 83       	std	Y+4, r22	; 0x04
    2116:	7d 83       	std	Y+5, r23	; 0x05
	eeprom_addr_t addr = CONTROLLER_CONFIGURATION_EEPROM_START_ADDRESS;
    2118:	80 e2       	ldi	r24, 0x20	; 32
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	9a 83       	std	Y+2, r25	; 0x02
	addr += index * CONTROLLER_CONFIGURATION_EEPROM_SIZE;
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 ec       	ldi	r20, 0xC0	; 192
    2128:	42 9f       	mul	r20, r18
    212a:	c0 01       	movw	r24, r0
    212c:	43 9f       	mul	r20, r19
    212e:	90 0d       	add	r25, r0
    2130:	11 24       	eor	r1, r1
    2132:	29 81       	ldd	r18, Y+1	; 0x01
    2134:	3a 81       	ldd	r19, Y+2	; 0x02
    2136:	82 0f       	add	r24, r18
    2138:	93 1f       	adc	r25, r19
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	9a 83       	std	Y+2, r25	; 0x02
	nvm_eeprom_erase_and_write_buffer(addr, (const void *)cc, sizeof(struct ControllerConfiguration));
    213e:	2c 81       	ldd	r18, Y+4	; 0x04
    2140:	3d 81       	ldd	r19, Y+5	; 0x05
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	9a 81       	ldd	r25, Y+2	; 0x02
    2146:	4d eb       	ldi	r20, 0xBD	; 189
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	b9 01       	movw	r22, r18
    214c:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <nvm_eeprom_erase_and_write_buffer>
}
    2150:	25 96       	adiw	r28, 0x05	; 5
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	08 95       	ret

0000215c <loadConfiguration>:

void loadConfiguration(cfgsel_t which_configuration) {
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	1f 92       	push	r1
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	89 83       	std	Y+1, r24	; 0x01
	
	if(which_configuration==CFG_SELECT)
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	8a 30       	cpi	r24, 0x0A	; 10
    216c:	31 f4       	brne	.+12     	; 0x217a <loadConfiguration+0x1e>
	{
		sendDBGLine("BIOS");
    216e:	8a ee       	ldi	r24, 0xEA	; 234
    2170:	90 e2       	ldi	r25, 0x20	; 32
    2172:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
		biosMain();
    2176:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <biosMain>
	}
	
	readGlobalHeader(&global_header); // Load the global header:
    217a:	83 e2       	ldi	r24, 0x23	; 35
    217c:	98 e2       	ldi	r25, 0x28	; 40
    217e:	6c df       	rcall	.-296    	; 0x2058 <readGlobalHeader>

	// Do the default configurations need to be written?	
	if (global_header.first_run == 1) {
    2180:	80 91 28 28 	lds	r24, 0x2828
    2184:	80 71       	andi	r24, 0x10	; 16
    2186:	88 23       	and	r24, r24
    2188:	39 f1       	breq	.+78     	; 0x21d8 <loadConfiguration+0x7c>

		//Write the default controller configurations to EEPROM:
		writeControllerConfig(CFG_A,     &DRONE_GAMEPAD_CONFIG);		// B_A
    218a:	69 e9       	ldi	r22, 0x99	; 153
    218c:	72 e2       	ldi	r23, 0x22	; 34
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	b9 df       	rcall	.-142    	; 0x2104 <writeControllerConfig>
		writeControllerConfig(CFG_B,     &DRONE_IOS_CONFIG);			// B_B
    2192:	6e e5       	ldi	r22, 0x5E	; 94
    2194:	73 e2       	ldi	r23, 0x23	; 35
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	b5 df       	rcall	.-150    	; 0x2104 <writeControllerConfig>
		writeControllerConfig(CFG_X,     &DRONE_KEYBOARD_CONFIG);		// B_X
    219a:	68 ed       	ldi	r22, 0xD8	; 216
    219c:	74 e2       	ldi	r23, 0x24	; 36
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	b1 df       	rcall	.-158    	; 0x2104 <writeControllerConfig>
		writeControllerConfig(CFG_Y,     &DRONE_KEYBOARD_MOUSE_CONFIG);	// B_Y
    21a2:	65 e9       	ldi	r22, 0x95	; 149
    21a4:	75 e2       	ldi	r23, 0x25	; 37
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	ad df       	rcall	.-166    	; 0x2104 <writeControllerConfig>
		writeControllerConfig(CFG_RB,    &DRONE_JOYSTICK_CONFIG);		// B_RB
    21aa:	6b e1       	ldi	r22, 0x1B	; 27
    21ac:	74 e2       	ldi	r23, 0x24	; 36
    21ae:	84 e0       	ldi	r24, 0x04	; 4
    21b0:	a9 df       	rcall	.-174    	; 0x2104 <writeControllerConfig>
		//writeControllerConfig(CFG_UP,    &DRONE_OPEN_CONFIG_3);			// B_UP
		//writeControllerConfig(CFG_LEFT,  &DRONE_OPEN_CONFIG_4);			// B_LEFT
		//writeControllerConfig(CFG_LB,	   &DRONE_OPEN_CONFIG_5);			// B_LB
		
		// Write the default header to EEPROM:
		memcpy(&global_header, &DEFAULT_HEADER, sizeof(struct GlobalHeader));
    21b2:	88 e0       	ldi	r24, 0x08	; 8
    21b4:	e6 e5       	ldi	r30, 0x56	; 86
    21b6:	f3 e2       	ldi	r31, 0x23	; 35
    21b8:	a3 e2       	ldi	r26, 0x23	; 35
    21ba:	b8 e2       	ldi	r27, 0x28	; 40
    21bc:	01 90       	ld	r0, Z+
    21be:	0d 92       	st	X+, r0
    21c0:	8a 95       	dec	r24
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <loadConfiguration+0x60>
		global_header.first_run = 0;
    21c4:	80 91 28 28 	lds	r24, 0x2828
    21c8:	8f 7e       	andi	r24, 0xEF	; 239
    21ca:	80 93 28 28 	sts	0x2828, r24
		writeGlobalHeader(&global_header);
    21ce:	83 e2       	ldi	r24, 0x23	; 35
    21d0:	98 e2       	ldi	r25, 0x28	; 40
    21d2:	57 df       	rcall	.-338    	; 0x2082 <writeGlobalHeader>
		btFactoryReset();
    21d4:	0e 94 4e 41 	call	0x829c	; 0x829c <btFactoryReset>
	}
	
	sendDBGString("Loading configuration ");
    21d8:	8f ee       	ldi	r24, 0xEF	; 239
    21da:	90 e2       	ldi	r25, 0x20	; 32
    21dc:	0e 94 b1 21 	call	0x4362	; 0x4362 <sendDBGString>
	sendDBGChar('0' + which_configuration);
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	80 5d       	subi	r24, 0xD0	; 208
    21e4:	0e 94 a2 21 	call	0x4344	; 0x4344 <sendDBGChar>
	sendDBGString("");
    21e8:	86 e0       	ldi	r24, 0x06	; 6
    21ea:	91 e2       	ldi	r25, 0x21	; 33
    21ec:	0e 94 b1 21 	call	0x4362	; 0x4362 <sendDBGString>
	readControllerConfig(which_configuration, &ccc);
    21f0:	60 e5       	ldi	r22, 0x50	; 80
    21f2:	78 e2       	ldi	r23, 0x28	; 40
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	5a df       	rcall	.-332    	; 0x20ac <readControllerConfig>
}	
    21f8:	0f 90       	pop	r0
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	08 95       	ret

00002200 <displayWhichConfiguration>:
void displayWhichConfiguration(cfgsel_t configuration)
{
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	1f 92       	push	r1
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	89 83       	std	Y+1, r24	; 0x01
	switch (configuration)
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	85 30       	cpi	r24, 0x05	; 5
    2214:	91 05       	cpc	r25, r1
    2216:	09 f4       	brne	.+2      	; 0x221a <displayWhichConfiguration+0x1a>
    2218:	51 c0       	rjmp	.+162    	; 0x22bc <displayWhichConfiguration+0xbc>
    221a:	86 30       	cpi	r24, 0x06	; 6
    221c:	91 05       	cpc	r25, r1
    221e:	9c f4       	brge	.+38     	; 0x2246 <displayWhichConfiguration+0x46>
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	91 05       	cpc	r25, r1
    2224:	c9 f1       	breq	.+114    	; 0x2298 <displayWhichConfiguration+0x98>
    2226:	83 30       	cpi	r24, 0x03	; 3
    2228:	91 05       	cpc	r25, r1
    222a:	34 f4       	brge	.+12     	; 0x2238 <displayWhichConfiguration+0x38>
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	41 f1       	breq	.+80     	; 0x2280 <displayWhichConfiguration+0x80>
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	91 05       	cpc	r25, r1
    2234:	59 f1       	breq	.+86     	; 0x228c <displayWhichConfiguration+0x8c>
    2236:	60 c0       	rjmp	.+192    	; 0x22f8 <displayWhichConfiguration+0xf8>
    2238:	83 30       	cpi	r24, 0x03	; 3
    223a:	91 05       	cpc	r25, r1
    223c:	99 f1       	breq	.+102    	; 0x22a4 <displayWhichConfiguration+0xa4>
    223e:	84 30       	cpi	r24, 0x04	; 4
    2240:	91 05       	cpc	r25, r1
    2242:	b1 f1       	breq	.+108    	; 0x22b0 <displayWhichConfiguration+0xb0>
    2244:	59 c0       	rjmp	.+178    	; 0x22f8 <displayWhichConfiguration+0xf8>
    2246:	88 30       	cpi	r24, 0x08	; 8
    2248:	91 05       	cpc	r25, r1
    224a:	09 f4       	brne	.+2      	; 0x224e <displayWhichConfiguration+0x4e>
    224c:	43 c0       	rjmp	.+134    	; 0x22d4 <displayWhichConfiguration+0xd4>
    224e:	89 30       	cpi	r24, 0x09	; 9
    2250:	91 05       	cpc	r25, r1
    2252:	44 f4       	brge	.+16     	; 0x2264 <displayWhichConfiguration+0x64>
    2254:	86 30       	cpi	r24, 0x06	; 6
    2256:	91 05       	cpc	r25, r1
    2258:	b9 f1       	breq	.+110    	; 0x22c8 <displayWhichConfiguration+0xc8>
    225a:	87 30       	cpi	r24, 0x07	; 7
    225c:	91 05       	cpc	r25, r1
    225e:	09 f4       	brne	.+2      	; 0x2262 <displayWhichConfiguration+0x62>
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <displayWhichConfiguration+0xe0>
    2262:	4a c0       	rjmp	.+148    	; 0x22f8 <displayWhichConfiguration+0xf8>
    2264:	89 30       	cpi	r24, 0x09	; 9
    2266:	91 05       	cpc	r25, r1
    2268:	09 f4       	brne	.+2      	; 0x226c <displayWhichConfiguration+0x6c>
    226a:	40 c0       	rjmp	.+128    	; 0x22ec <displayWhichConfiguration+0xec>
    226c:	8a 30       	cpi	r24, 0x0A	; 10
    226e:	91 05       	cpc	r25, r1
    2270:	09 f0       	breq	.+2      	; 0x2274 <displayWhichConfiguration+0x74>
    2272:	42 c0       	rjmp	.+132    	; 0x22f8 <displayWhichConfiguration+0xf8>
	{
		case CFG_SELECT:	setLEDValue(LED_OFF, LED_OFF, LED_OFF); break;
    2274:	40 e0       	ldi	r20, 0x00	; 0
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    227e:	3c c0       	rjmp	.+120    	; 0x22f8 <displayWhichConfiguration+0xf8>
		case CFG_A:			setLEDValue(LED_OFF, LED_OFF, LED_DIM); break;
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    228a:	36 c0       	rjmp	.+108    	; 0x22f8 <displayWhichConfiguration+0xf8>
		case CFG_B:			setLEDValue(LED_DIM, LED_OFF, LED_OFF); break;
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    2296:	30 c0       	rjmp	.+96     	; 0x22f8 <displayWhichConfiguration+0xf8>
		case CFG_X:			setLEDValue(LED_OFF, LED_DIM, LED_OFF); break;
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	61 e0       	ldi	r22, 0x01	; 1
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    22a2:	2a c0       	rjmp	.+84     	; 0x22f8 <displayWhichConfiguration+0xf8>
		case CFG_Y:			setLEDValue(LED_DIM, LED_DIM, LED_OFF); break;
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	61 e0       	ldi	r22, 0x01	; 1
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    22ae:	24 c0       	rjmp	.+72     	; 0x22f8 <displayWhichConfiguration+0xf8>
		case CFG_RB:		setLEDValue(LED_DIM, LED_OFF, LED_DIM); break;
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    22ba:	1e c0       	rjmp	.+60     	; 0x22f8 <displayWhichConfiguration+0xf8>
		case CFG_DOWN:		setLEDValue(LED_OFF, LED_OFF, LED_DIM); break;
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    22c6:	18 c0       	rjmp	.+48     	; 0x22f8 <displayWhichConfiguration+0xf8>
		case CFG_RIGHT:		setLEDValue(LED_DIM, LED_OFF, LED_OFF); break;
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    22d2:	12 c0       	rjmp	.+36     	; 0x22f8 <displayWhichConfiguration+0xf8>
		case CFG_LEFT:		setLEDValue(LED_OFF, LED_DIM, LED_OFF); break;
    22d4:	40 e0       	ldi	r20, 0x00	; 0
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    22de:	0c c0       	rjmp	.+24     	; 0x22f8 <displayWhichConfiguration+0xf8>
		case CFG_UP:		setLEDValue(LED_DIM, LED_DIM, LED_OFF); break;
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    22ea:	06 c0       	rjmp	.+12     	; 0x22f8 <displayWhichConfiguration+0xf8>
		case CFG_LB:		setLEDValue(LED_DIM, LED_OFF, LED_DIM); break;		
    22ec:	41 e0       	ldi	r20, 0x01	; 1
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
    22f6:	00 00       	nop
	}
}
    22f8:	0f 90       	pop	r0
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	08 95       	ret

00002300 <whichConfiguration>:

cfgsel_t whichConfiguration(void){
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	1f 92       	push	r1
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
	cfgsel_t which_configuration;
	
	if (buttonActivated(B_SELECT))
    230a:	89 e0       	ldi	r24, 0x09	; 9
    230c:	6c d8       	rcall	.-3880   	; 0x13e6 <buttonActivated>
    230e:	88 23       	and	r24, r24
    2310:	19 f0       	breq	.+6      	; 0x2318 <whichConfiguration+0x18>
	{
		which_configuration = CFG_SELECT;
    2312:	8a e0       	ldi	r24, 0x0A	; 10
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	49 c0       	rjmp	.+146    	; 0x23aa <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_A)) {
    2318:	84 e0       	ldi	r24, 0x04	; 4
    231a:	65 d8       	rcall	.-3894   	; 0x13e6 <buttonActivated>
    231c:	88 23       	and	r24, r24
    231e:	11 f0       	breq	.+4      	; 0x2324 <whichConfiguration+0x24>
		which_configuration = CFG_A;
    2320:	19 82       	std	Y+1, r1	; 0x01
    2322:	43 c0       	rjmp	.+134    	; 0x23aa <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_B)) {
    2324:	85 e0       	ldi	r24, 0x05	; 5
    2326:	5f d8       	rcall	.-3906   	; 0x13e6 <buttonActivated>
    2328:	88 23       	and	r24, r24
    232a:	19 f0       	breq	.+6      	; 0x2332 <whichConfiguration+0x32>
		which_configuration = CFG_B;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	3c c0       	rjmp	.+120    	; 0x23aa <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_X)) {
    2332:	86 e0       	ldi	r24, 0x06	; 6
    2334:	58 d8       	rcall	.-3920   	; 0x13e6 <buttonActivated>
    2336:	88 23       	and	r24, r24
    2338:	19 f0       	breq	.+6      	; 0x2340 <whichConfiguration+0x40>
		which_configuration = CFG_X;
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	35 c0       	rjmp	.+106    	; 0x23aa <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_Y)) {
    2340:	87 e0       	ldi	r24, 0x07	; 7
    2342:	51 d8       	rcall	.-3934   	; 0x13e6 <buttonActivated>
    2344:	88 23       	and	r24, r24
    2346:	19 f0       	breq	.+6      	; 0x234e <whichConfiguration+0x4e>
		which_configuration = CFG_Y; 
    2348:	83 e0       	ldi	r24, 0x03	; 3
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	2e c0       	rjmp	.+92     	; 0x23aa <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_RB)) {
    234e:	8a e0       	ldi	r24, 0x0A	; 10
    2350:	4a d8       	rcall	.-3948   	; 0x13e6 <buttonActivated>
    2352:	88 23       	and	r24, r24
    2354:	19 f0       	breq	.+6      	; 0x235c <whichConfiguration+0x5c>
		which_configuration = CFG_RB;
    2356:	84 e0       	ldi	r24, 0x04	; 4
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	27 c0       	rjmp	.+78     	; 0x23aa <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_DOWN)) {
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	43 d8       	rcall	.-3962   	; 0x13e6 <buttonActivated>
    2360:	88 23       	and	r24, r24
    2362:	19 f0       	breq	.+6      	; 0x236a <whichConfiguration+0x6a>
		which_configuration = CFG_DOWN;
    2364:	85 e0       	ldi	r24, 0x05	; 5
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	20 c0       	rjmp	.+64     	; 0x23aa <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_RIGHT)) {
    236a:	83 e0       	ldi	r24, 0x03	; 3
    236c:	3c d8       	rcall	.-3976   	; 0x13e6 <buttonActivated>
    236e:	88 23       	and	r24, r24
    2370:	19 f0       	breq	.+6      	; 0x2378 <whichConfiguration+0x78>
		which_configuration = CFG_RIGHT;
    2372:	86 e0       	ldi	r24, 0x06	; 6
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	19 c0       	rjmp	.+50     	; 0x23aa <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_LEFT)) {
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	35 d8       	rcall	.-3990   	; 0x13e6 <buttonActivated>
    237c:	88 23       	and	r24, r24
    237e:	19 f0       	breq	.+6      	; 0x2386 <whichConfiguration+0x86>
		which_configuration = CFG_LEFT;
    2380:	88 e0       	ldi	r24, 0x08	; 8
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	12 c0       	rjmp	.+36     	; 0x23aa <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_UP)) {
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	2e d8       	rcall	.-4004   	; 0x13e6 <buttonActivated>
    238a:	88 23       	and	r24, r24
    238c:	19 f0       	breq	.+6      	; 0x2394 <whichConfiguration+0x94>
		which_configuration = CFG_UP;
    238e:	87 e0       	ldi	r24, 0x07	; 7
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	0b c0       	rjmp	.+22     	; 0x23aa <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_LB)) {
    2394:	8b e0       	ldi	r24, 0x0B	; 11
    2396:	27 d8       	rcall	.-4018   	; 0x13e6 <buttonActivated>
    2398:	88 23       	and	r24, r24
    239a:	19 f0       	breq	.+6      	; 0x23a2 <whichConfiguration+0xa2>
		which_configuration = CFG_LB;
    239c:	89 e0       	ldi	r24, 0x09	; 9
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <whichConfiguration+0xaa>
	}	
	else {
		which_configuration = global_header.default_configuration;
    23a2:	80 91 28 28 	lds	r24, 0x2828
    23a6:	8f 70       	andi	r24, 0x0F	; 15
    23a8:	89 83       	std	Y+1, r24	; 0x01
	}
	displayWhichConfiguration(which_configuration);	
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	29 df       	rcall	.-430    	; 0x2200 <displayWhichConfiguration>
	return which_configuration;
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b0:	0f 90       	pop	r0
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <gamepadInit>:
}

void GamepadButtonEvent(enum ButtonName name, enum ButtonState state)
{

};
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	2c 97       	sbiw	r28, 0x0c	; 12
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	8b 87       	std	Y+11, r24	; 0x0b
    23c8:	9c 87       	std	Y+12, r25	; 0x0c
    23ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    23cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ce:	80 93 24 27 	sts	0x2724, r24
    23d2:	90 93 25 27 	sts	0x2725, r25
    23d6:	2a e0       	ldi	r18, 0x0A	; 10
    23d8:	e7 e0       	ldi	r30, 0x07	; 7
    23da:	f1 e2       	ldi	r31, 0x21	; 33
    23dc:	ce 01       	movw	r24, r28
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	dc 01       	movw	r26, r24
    23e2:	01 90       	ld	r0, Z+
    23e4:	0d 92       	st	X+, r0
    23e6:	2a 95       	dec	r18
    23e8:	e1 f7       	brne	.-8      	; 0x23e2 <gamepadInit+0x2a>
    23ea:	2a e0       	ldi	r18, 0x0A	; 10
    23ec:	ce 01       	movw	r24, r28
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	fc 01       	movw	r30, r24
    23f2:	a3 e3       	ldi	r26, 0x33	; 51
    23f4:	b8 e2       	ldi	r27, 0x28	; 40
    23f6:	01 90       	ld	r0, Z+
    23f8:	0d 92       	st	X+, r0
    23fa:	2a 95       	dec	r18
    23fc:	e1 f7       	brne	.-8      	; 0x23f6 <gamepadInit+0x3e>
    23fe:	8a e0       	ldi	r24, 0x0A	; 10
    2400:	e3 e3       	ldi	r30, 0x33	; 51
    2402:	f8 e2       	ldi	r31, 0x28	; 40
    2404:	ad e3       	ldi	r26, 0x3D	; 61
    2406:	b8 e2       	ldi	r27, 0x28	; 40
    2408:	01 90       	ld	r0, Z+
    240a:	0d 92       	st	X+, r0
    240c:	8a 95       	dec	r24
    240e:	e1 f7       	brne	.-8      	; 0x2408 <gamepadInit+0x50>
    2410:	0e 94 97 41 	call	0x832e	; 0x832e <BluetoothGamePadMode>
    2414:	2c 96       	adiw	r28, 0x0c	; 12
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	08 95       	ret

00002420 <GamepadButtonChanged>:

bool GamepadButtonChanged()
{
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
	// Send a report if the buttons have changed:
	if(
		prev_report.dpad != report.dpad ||
    2428:	90 91 44 28 	lds	r25, 0x2844
    242c:	80 91 3a 28 	lds	r24, 0x283A
};

bool GamepadButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
    2430:	98 17       	cp	r25, r24
    2432:	61 f4       	brne	.+24     	; 0x244c <GamepadButtonChanged+0x2c>
		prev_report.dpad != report.dpad ||
		prev_report.buttons1 != report.buttons1 ||
    2434:	90 91 45 28 	lds	r25, 0x2845
    2438:	80 91 3b 28 	lds	r24, 0x283B

bool GamepadButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
		prev_report.dpad != report.dpad ||
    243c:	98 17       	cp	r25, r24
    243e:	31 f4       	brne	.+12     	; 0x244c <GamepadButtonChanged+0x2c>
		prev_report.buttons1 != report.buttons1 ||
		prev_report.buttons2 != report.buttons2
    2440:	90 91 46 28 	lds	r25, 0x2846
    2444:	80 91 3c 28 	lds	r24, 0x283C
bool GamepadButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
		prev_report.dpad != report.dpad ||
		prev_report.buttons1 != report.buttons1 ||
    2448:	98 17       	cp	r25, r24
    244a:	51 f0       	breq	.+20     	; 0x2460 <GamepadButtonChanged+0x40>
		prev_report.buttons2 != report.buttons2
	)
	{
		memcpy( &(prev_report.dpad), &(report.dpad), GAMEPAD_RPT_B_BYTES); // Update the previous values
    244c:	43 e0       	ldi	r20, 0x03	; 3
    244e:	50 e0       	ldi	r21, 0x00	; 0
    2450:	6a e3       	ldi	r22, 0x3A	; 58
    2452:	78 e2       	ldi	r23, 0x28	; 40
    2454:	84 e4       	ldi	r24, 0x44	; 68
    2456:	98 e2       	ldi	r25, 0x28	; 40
    2458:	0e 94 76 49 	call	0x92ec	; 0x92ec <memcpy>
		return true;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <GamepadButtonChanged+0x42>
	}
	return false;
    2460:	80 e0       	ldi	r24, 0x00	; 0
}
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	08 95       	ret

00002468 <GamepadJoystickChanged>:

bool GamepadJoystickChanged(void); //Prototype
bool GamepadJoystickChanged()
{
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
	if(
	prev_report.leftx != report.leftx   ||
    2470:	90 91 40 28 	lds	r25, 0x2840
    2474:	80 91 36 28 	lds	r24, 0x2836
}

bool GamepadJoystickChanged(void); //Prototype
bool GamepadJoystickChanged()
{
	if(
    2478:	98 17       	cp	r25, r24
    247a:	91 f4       	brne	.+36     	; 0x24a0 <GamepadJoystickChanged+0x38>
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
    247c:	90 91 41 28 	lds	r25, 0x2841
    2480:	80 91 37 28 	lds	r24, 0x2837

bool GamepadJoystickChanged(void); //Prototype
bool GamepadJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
    2484:	98 17       	cp	r25, r24
    2486:	61 f4       	brne	.+24     	; 0x24a0 <GamepadJoystickChanged+0x38>
	prev_report.lefty  != report.lefty  ||
	prev_report.rightx != report.rightx ||
    2488:	90 91 42 28 	lds	r25, 0x2842
    248c:	80 91 38 28 	lds	r24, 0x2838
bool GamepadJoystickChanged(void); //Prototype
bool GamepadJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
    2490:	98 17       	cp	r25, r24
    2492:	31 f4       	brne	.+12     	; 0x24a0 <GamepadJoystickChanged+0x38>
	prev_report.rightx != report.rightx ||
	prev_report.righty != report.righty
    2494:	90 91 43 28 	lds	r25, 0x2843
    2498:	80 91 39 28 	lds	r24, 0x2839
bool GamepadJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
	prev_report.rightx != report.rightx ||
    249c:	98 17       	cp	r25, r24
    249e:	51 f0       	breq	.+20     	; 0x24b4 <GamepadJoystickChanged+0x4c>
	prev_report.righty != report.righty
	)
	{
		memcpy(&(prev_report.leftx), &(report.leftx), GAMEPAD_RPT_J_BYTES); // Update the previous values
    24a0:	44 e0       	ldi	r20, 0x04	; 4
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	66 e3       	ldi	r22, 0x36	; 54
    24a6:	78 e2       	ldi	r23, 0x28	; 40
    24a8:	80 e4       	ldi	r24, 0x40	; 64
    24aa:	98 e2       	ldi	r25, 0x28	; 40
    24ac:	0e 94 76 49 	call	0x92ec	; 0x92ec <memcpy>
		return true;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <GamepadJoystickChanged+0x4e>
	}	
	return false;
    24b4:	80 e0       	ldi	r24, 0x00	; 0
}
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	08 95       	ret

000024bc <gamepadButtonHandler>:

void gamepadButtonHandler(enum ButtonName name, enum ButtonState state) {
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <gamepadButtonHandler+0xe>
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	6a 83       	std	Y+2, r22	; 0x02
	
	//Move to ButtonChange()
	if (state == BUTTON_PRESSED) {
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	31 f5       	brne	.+76     	; 0x2524 <gamepadButtonHandler+0x68>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a0 e0       	ldi	r26, 0x00	; 0
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	7c 01       	movw	r14, r24
    24e8:	8d 01       	movw	r16, r26
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <gamepadButtonHandler+0x38>
    24ec:	ee 0c       	add	r14, r14
    24ee:	ff 1c       	adc	r15, r15
    24f0:	00 1f       	adc	r16, r16
    24f2:	11 1f       	adc	r17, r17
    24f4:	2a 95       	dec	r18
    24f6:	d2 f7       	brpl	.-12     	; 0x24ec <gamepadButtonHandler+0x30>
    24f8:	a8 01       	movw	r20, r16
    24fa:	97 01       	movw	r18, r14
    24fc:	80 91 26 27 	lds	r24, 0x2726
    2500:	90 91 27 27 	lds	r25, 0x2727
    2504:	a0 91 28 27 	lds	r26, 0x2728
    2508:	b0 91 29 27 	lds	r27, 0x2729
    250c:	82 2b       	or	r24, r18
    250e:	93 2b       	or	r25, r19
    2510:	a4 2b       	or	r26, r20
    2512:	b5 2b       	or	r27, r21
    2514:	80 93 26 27 	sts	0x2726, r24
    2518:	90 93 27 27 	sts	0x2727, r25
    251c:	a0 93 28 27 	sts	0x2728, r26
    2520:	b0 93 29 27 	sts	0x2729, r27
	}

	if (state == BUTTON_RELEASED) {
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	88 23       	and	r24, r24
    2528:	41 f5       	brne	.+80     	; 0x257a <gamepadButtonHandler+0xbe>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	a0 e0       	ldi	r26, 0x00	; 0
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	04 c0       	rjmp	.+8      	; 0x2542 <gamepadButtonHandler+0x86>
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	aa 1f       	adc	r26, r26
    2540:	bb 1f       	adc	r27, r27
    2542:	2a 95       	dec	r18
    2544:	d2 f7       	brpl	.-12     	; 0x253a <gamepadButtonHandler+0x7e>
    2546:	9c 01       	movw	r18, r24
    2548:	ad 01       	movw	r20, r26
    254a:	20 95       	com	r18
    254c:	30 95       	com	r19
    254e:	40 95       	com	r20
    2550:	50 95       	com	r21
    2552:	80 91 26 27 	lds	r24, 0x2726
    2556:	90 91 27 27 	lds	r25, 0x2727
    255a:	a0 91 28 27 	lds	r26, 0x2728
    255e:	b0 91 29 27 	lds	r27, 0x2729
    2562:	82 23       	and	r24, r18
    2564:	93 23       	and	r25, r19
    2566:	a4 23       	and	r26, r20
    2568:	b5 23       	and	r27, r21
    256a:	80 93 26 27 	sts	0x2726, r24
    256e:	90 93 27 27 	sts	0x2727, r25
    2572:	a0 93 28 27 	sts	0x2728, r26
    2576:	b0 93 29 27 	sts	0x2729, r27
	}
	
	if(name==REPORT)
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	81 31       	cpi	r24, 0x11	; 17
    257e:	09 f0       	breq	.+2      	; 0x2582 <gamepadButtonHandler+0xc6>
    2580:	61 c3       	rjmp	.+1730   	; 0x2c44 <gamepadButtonHandler+0x788>
	{
		BIT_SET(gamepad_buttonsLOW, Button_A, BIT_GET(pressed_buttons, BIT(B_A)));
    2582:	80 91 26 27 	lds	r24, 0x2726
    2586:	90 91 27 27 	lds	r25, 0x2727
    258a:	a0 91 28 27 	lds	r26, 0x2728
    258e:	b0 91 29 27 	lds	r27, 0x2729
    2592:	80 71       	andi	r24, 0x10	; 16
    2594:	99 27       	eor	r25, r25
    2596:	aa 27       	eor	r26, r26
    2598:	bb 27       	eor	r27, r27
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	a1 05       	cpc	r26, r1
    259e:	b1 05       	cpc	r27, r1
    25a0:	91 f0       	breq	.+36     	; 0x25c6 <gamepadButtonHandler+0x10a>
    25a2:	80 91 2a 27 	lds	r24, 0x272A
    25a6:	90 91 2b 27 	lds	r25, 0x272B
    25aa:	a0 91 2c 27 	lds	r26, 0x272C
    25ae:	b0 91 2d 27 	lds	r27, 0x272D
    25b2:	81 60       	ori	r24, 0x01	; 1
    25b4:	80 93 2a 27 	sts	0x272A, r24
    25b8:	90 93 2b 27 	sts	0x272B, r25
    25bc:	a0 93 2c 27 	sts	0x272C, r26
    25c0:	b0 93 2d 27 	sts	0x272D, r27
    25c4:	11 c0       	rjmp	.+34     	; 0x25e8 <gamepadButtonHandler+0x12c>
    25c6:	80 91 2a 27 	lds	r24, 0x272A
    25ca:	90 91 2b 27 	lds	r25, 0x272B
    25ce:	a0 91 2c 27 	lds	r26, 0x272C
    25d2:	b0 91 2d 27 	lds	r27, 0x272D
    25d6:	8e 7f       	andi	r24, 0xFE	; 254
    25d8:	80 93 2a 27 	sts	0x272A, r24
    25dc:	90 93 2b 27 	sts	0x272B, r25
    25e0:	a0 93 2c 27 	sts	0x272C, r26
    25e4:	b0 93 2d 27 	sts	0x272D, r27
		BIT_SET(gamepad_buttonsLOW, Button_B, BIT_GET(pressed_buttons, BIT(B_B)));
    25e8:	80 91 26 27 	lds	r24, 0x2726
    25ec:	90 91 27 27 	lds	r25, 0x2727
    25f0:	a0 91 28 27 	lds	r26, 0x2728
    25f4:	b0 91 29 27 	lds	r27, 0x2729
    25f8:	80 72       	andi	r24, 0x20	; 32
    25fa:	99 27       	eor	r25, r25
    25fc:	aa 27       	eor	r26, r26
    25fe:	bb 27       	eor	r27, r27
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	a1 05       	cpc	r26, r1
    2604:	b1 05       	cpc	r27, r1
    2606:	91 f0       	breq	.+36     	; 0x262c <gamepadButtonHandler+0x170>
    2608:	80 91 2a 27 	lds	r24, 0x272A
    260c:	90 91 2b 27 	lds	r25, 0x272B
    2610:	a0 91 2c 27 	lds	r26, 0x272C
    2614:	b0 91 2d 27 	lds	r27, 0x272D
    2618:	82 60       	ori	r24, 0x02	; 2
    261a:	80 93 2a 27 	sts	0x272A, r24
    261e:	90 93 2b 27 	sts	0x272B, r25
    2622:	a0 93 2c 27 	sts	0x272C, r26
    2626:	b0 93 2d 27 	sts	0x272D, r27
    262a:	11 c0       	rjmp	.+34     	; 0x264e <gamepadButtonHandler+0x192>
    262c:	80 91 2a 27 	lds	r24, 0x272A
    2630:	90 91 2b 27 	lds	r25, 0x272B
    2634:	a0 91 2c 27 	lds	r26, 0x272C
    2638:	b0 91 2d 27 	lds	r27, 0x272D
    263c:	8d 7f       	andi	r24, 0xFD	; 253
    263e:	80 93 2a 27 	sts	0x272A, r24
    2642:	90 93 2b 27 	sts	0x272B, r25
    2646:	a0 93 2c 27 	sts	0x272C, r26
    264a:	b0 93 2d 27 	sts	0x272D, r27
		BIT_SET(gamepad_buttonsLOW, Button_X, BIT_GET(pressed_buttons, BIT(B_X)));
    264e:	80 91 26 27 	lds	r24, 0x2726
    2652:	90 91 27 27 	lds	r25, 0x2727
    2656:	a0 91 28 27 	lds	r26, 0x2728
    265a:	b0 91 29 27 	lds	r27, 0x2729
    265e:	80 74       	andi	r24, 0x40	; 64
    2660:	99 27       	eor	r25, r25
    2662:	aa 27       	eor	r26, r26
    2664:	bb 27       	eor	r27, r27
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	a1 05       	cpc	r26, r1
    266a:	b1 05       	cpc	r27, r1
    266c:	91 f0       	breq	.+36     	; 0x2692 <gamepadButtonHandler+0x1d6>
    266e:	80 91 2a 27 	lds	r24, 0x272A
    2672:	90 91 2b 27 	lds	r25, 0x272B
    2676:	a0 91 2c 27 	lds	r26, 0x272C
    267a:	b0 91 2d 27 	lds	r27, 0x272D
    267e:	88 60       	ori	r24, 0x08	; 8
    2680:	80 93 2a 27 	sts	0x272A, r24
    2684:	90 93 2b 27 	sts	0x272B, r25
    2688:	a0 93 2c 27 	sts	0x272C, r26
    268c:	b0 93 2d 27 	sts	0x272D, r27
    2690:	11 c0       	rjmp	.+34     	; 0x26b4 <gamepadButtonHandler+0x1f8>
    2692:	80 91 2a 27 	lds	r24, 0x272A
    2696:	90 91 2b 27 	lds	r25, 0x272B
    269a:	a0 91 2c 27 	lds	r26, 0x272C
    269e:	b0 91 2d 27 	lds	r27, 0x272D
    26a2:	87 7f       	andi	r24, 0xF7	; 247
    26a4:	80 93 2a 27 	sts	0x272A, r24
    26a8:	90 93 2b 27 	sts	0x272B, r25
    26ac:	a0 93 2c 27 	sts	0x272C, r26
    26b0:	b0 93 2d 27 	sts	0x272D, r27
		BIT_SET(gamepad_buttonsLOW, Button_Y, BIT_GET(pressed_buttons, BIT(B_Y)));
    26b4:	80 91 26 27 	lds	r24, 0x2726
    26b8:	90 91 27 27 	lds	r25, 0x2727
    26bc:	a0 91 28 27 	lds	r26, 0x2728
    26c0:	b0 91 29 27 	lds	r27, 0x2729
    26c4:	80 78       	andi	r24, 0x80	; 128
    26c6:	99 27       	eor	r25, r25
    26c8:	aa 27       	eor	r26, r26
    26ca:	bb 27       	eor	r27, r27
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	a1 05       	cpc	r26, r1
    26d0:	b1 05       	cpc	r27, r1
    26d2:	91 f0       	breq	.+36     	; 0x26f8 <gamepadButtonHandler+0x23c>
    26d4:	80 91 2a 27 	lds	r24, 0x272A
    26d8:	90 91 2b 27 	lds	r25, 0x272B
    26dc:	a0 91 2c 27 	lds	r26, 0x272C
    26e0:	b0 91 2d 27 	lds	r27, 0x272D
    26e4:	80 61       	ori	r24, 0x10	; 16
    26e6:	80 93 2a 27 	sts	0x272A, r24
    26ea:	90 93 2b 27 	sts	0x272B, r25
    26ee:	a0 93 2c 27 	sts	0x272C, r26
    26f2:	b0 93 2d 27 	sts	0x272D, r27
    26f6:	11 c0       	rjmp	.+34     	; 0x271a <gamepadButtonHandler+0x25e>
    26f8:	80 91 2a 27 	lds	r24, 0x272A
    26fc:	90 91 2b 27 	lds	r25, 0x272B
    2700:	a0 91 2c 27 	lds	r26, 0x272C
    2704:	b0 91 2d 27 	lds	r27, 0x272D
    2708:	8f 7e       	andi	r24, 0xEF	; 239
    270a:	80 93 2a 27 	sts	0x272A, r24
    270e:	90 93 2b 27 	sts	0x272B, r25
    2712:	a0 93 2c 27 	sts	0x272C, r26
    2716:	b0 93 2d 27 	sts	0x272D, r27

		BIT_SET(gamepad_buttonsLOW, Button_LBumper, BIT_GET(pressed_buttons, BIT(B_LB)));
    271a:	80 91 26 27 	lds	r24, 0x2726
    271e:	90 91 27 27 	lds	r25, 0x2727
    2722:	a0 91 28 27 	lds	r26, 0x2728
    2726:	b0 91 29 27 	lds	r27, 0x2729
    272a:	88 27       	eor	r24, r24
    272c:	98 70       	andi	r25, 0x08	; 8
    272e:	aa 27       	eor	r26, r26
    2730:	bb 27       	eor	r27, r27
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	a1 05       	cpc	r26, r1
    2736:	b1 05       	cpc	r27, r1
    2738:	91 f0       	breq	.+36     	; 0x275e <gamepadButtonHandler+0x2a2>
    273a:	80 91 2a 27 	lds	r24, 0x272A
    273e:	90 91 2b 27 	lds	r25, 0x272B
    2742:	a0 91 2c 27 	lds	r26, 0x272C
    2746:	b0 91 2d 27 	lds	r27, 0x272D
    274a:	80 64       	ori	r24, 0x40	; 64
    274c:	80 93 2a 27 	sts	0x272A, r24
    2750:	90 93 2b 27 	sts	0x272B, r25
    2754:	a0 93 2c 27 	sts	0x272C, r26
    2758:	b0 93 2d 27 	sts	0x272D, r27
    275c:	11 c0       	rjmp	.+34     	; 0x2780 <gamepadButtonHandler+0x2c4>
    275e:	80 91 2a 27 	lds	r24, 0x272A
    2762:	90 91 2b 27 	lds	r25, 0x272B
    2766:	a0 91 2c 27 	lds	r26, 0x272C
    276a:	b0 91 2d 27 	lds	r27, 0x272D
    276e:	8f 7b       	andi	r24, 0xBF	; 191
    2770:	80 93 2a 27 	sts	0x272A, r24
    2774:	90 93 2b 27 	sts	0x272B, r25
    2778:	a0 93 2c 27 	sts	0x272C, r26
    277c:	b0 93 2d 27 	sts	0x272D, r27
		BIT_SET(gamepad_buttonsLOW, Button_RBumper, BIT_GET(pressed_buttons, BIT(B_RB)));
    2780:	80 91 26 27 	lds	r24, 0x2726
    2784:	90 91 27 27 	lds	r25, 0x2727
    2788:	a0 91 28 27 	lds	r26, 0x2728
    278c:	b0 91 29 27 	lds	r27, 0x2729
    2790:	88 27       	eor	r24, r24
    2792:	94 70       	andi	r25, 0x04	; 4
    2794:	aa 27       	eor	r26, r26
    2796:	bb 27       	eor	r27, r27
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	a1 05       	cpc	r26, r1
    279c:	b1 05       	cpc	r27, r1
    279e:	91 f0       	breq	.+36     	; 0x27c4 <gamepadButtonHandler+0x308>
    27a0:	80 91 2a 27 	lds	r24, 0x272A
    27a4:	90 91 2b 27 	lds	r25, 0x272B
    27a8:	a0 91 2c 27 	lds	r26, 0x272C
    27ac:	b0 91 2d 27 	lds	r27, 0x272D
    27b0:	80 68       	ori	r24, 0x80	; 128
    27b2:	80 93 2a 27 	sts	0x272A, r24
    27b6:	90 93 2b 27 	sts	0x272B, r25
    27ba:	a0 93 2c 27 	sts	0x272C, r26
    27be:	b0 93 2d 27 	sts	0x272D, r27
    27c2:	11 c0       	rjmp	.+34     	; 0x27e6 <gamepadButtonHandler+0x32a>
    27c4:	80 91 2a 27 	lds	r24, 0x272A
    27c8:	90 91 2b 27 	lds	r25, 0x272B
    27cc:	a0 91 2c 27 	lds	r26, 0x272C
    27d0:	b0 91 2d 27 	lds	r27, 0x272D
    27d4:	8f 77       	andi	r24, 0x7F	; 127
    27d6:	80 93 2a 27 	sts	0x272A, r24
    27da:	90 93 2b 27 	sts	0x272B, r25
    27de:	a0 93 2c 27 	sts	0x272C, r26
    27e2:	b0 93 2d 27 	sts	0x272D, r27
		
		BIT_SET(gamepad_buttonsHIGH, Button_LTrigger, BIT_GET(pressed_buttons, BIT(B_LT)));
    27e6:	80 91 26 27 	lds	r24, 0x2726
    27ea:	90 91 27 27 	lds	r25, 0x2727
    27ee:	a0 91 28 27 	lds	r26, 0x2728
    27f2:	b0 91 29 27 	lds	r27, 0x2729
    27f6:	88 27       	eor	r24, r24
    27f8:	90 72       	andi	r25, 0x20	; 32
    27fa:	aa 27       	eor	r26, r26
    27fc:	bb 27       	eor	r27, r27
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	a1 05       	cpc	r26, r1
    2802:	b1 05       	cpc	r27, r1
    2804:	91 f0       	breq	.+36     	; 0x282a <gamepadButtonHandler+0x36e>
    2806:	80 91 2e 27 	lds	r24, 0x272E
    280a:	90 91 2f 27 	lds	r25, 0x272F
    280e:	a0 91 30 27 	lds	r26, 0x2730
    2812:	b0 91 31 27 	lds	r27, 0x2731
    2816:	81 60       	ori	r24, 0x01	; 1
    2818:	80 93 2e 27 	sts	0x272E, r24
    281c:	90 93 2f 27 	sts	0x272F, r25
    2820:	a0 93 30 27 	sts	0x2730, r26
    2824:	b0 93 31 27 	sts	0x2731, r27
    2828:	11 c0       	rjmp	.+34     	; 0x284c <gamepadButtonHandler+0x390>
    282a:	80 91 2e 27 	lds	r24, 0x272E
    282e:	90 91 2f 27 	lds	r25, 0x272F
    2832:	a0 91 30 27 	lds	r26, 0x2730
    2836:	b0 91 31 27 	lds	r27, 0x2731
    283a:	8e 7f       	andi	r24, 0xFE	; 254
    283c:	80 93 2e 27 	sts	0x272E, r24
    2840:	90 93 2f 27 	sts	0x272F, r25
    2844:	a0 93 30 27 	sts	0x2730, r26
    2848:	b0 93 31 27 	sts	0x2731, r27
		BIT_SET(gamepad_buttonsHIGH, Button_RTrigger, BIT_GET(pressed_buttons, BIT(B_RT)));
    284c:	80 91 26 27 	lds	r24, 0x2726
    2850:	90 91 27 27 	lds	r25, 0x2727
    2854:	a0 91 28 27 	lds	r26, 0x2728
    2858:	b0 91 29 27 	lds	r27, 0x2729
    285c:	88 27       	eor	r24, r24
    285e:	90 71       	andi	r25, 0x10	; 16
    2860:	aa 27       	eor	r26, r26
    2862:	bb 27       	eor	r27, r27
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	a1 05       	cpc	r26, r1
    2868:	b1 05       	cpc	r27, r1
    286a:	91 f0       	breq	.+36     	; 0x2890 <gamepadButtonHandler+0x3d4>
    286c:	80 91 2e 27 	lds	r24, 0x272E
    2870:	90 91 2f 27 	lds	r25, 0x272F
    2874:	a0 91 30 27 	lds	r26, 0x2730
    2878:	b0 91 31 27 	lds	r27, 0x2731
    287c:	82 60       	ori	r24, 0x02	; 2
    287e:	80 93 2e 27 	sts	0x272E, r24
    2882:	90 93 2f 27 	sts	0x272F, r25
    2886:	a0 93 30 27 	sts	0x2730, r26
    288a:	b0 93 31 27 	sts	0x2731, r27
    288e:	11 c0       	rjmp	.+34     	; 0x28b2 <gamepadButtonHandler+0x3f6>
    2890:	80 91 2e 27 	lds	r24, 0x272E
    2894:	90 91 2f 27 	lds	r25, 0x272F
    2898:	a0 91 30 27 	lds	r26, 0x2730
    289c:	b0 91 31 27 	lds	r27, 0x2731
    28a0:	8d 7f       	andi	r24, 0xFD	; 253
    28a2:	80 93 2e 27 	sts	0x272E, r24
    28a6:	90 93 2f 27 	sts	0x272F, r25
    28aa:	a0 93 30 27 	sts	0x2730, r26
    28ae:	b0 93 31 27 	sts	0x2731, r27
		
		BIT_SET(gamepad_buttonsHIGH, Button_Select, BIT_GET(pressed_buttons, BIT(B_SELECT)));
    28b2:	80 91 26 27 	lds	r24, 0x2726
    28b6:	90 91 27 27 	lds	r25, 0x2727
    28ba:	a0 91 28 27 	lds	r26, 0x2728
    28be:	b0 91 29 27 	lds	r27, 0x2729
    28c2:	88 27       	eor	r24, r24
    28c4:	92 70       	andi	r25, 0x02	; 2
    28c6:	aa 27       	eor	r26, r26
    28c8:	bb 27       	eor	r27, r27
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	a1 05       	cpc	r26, r1
    28ce:	b1 05       	cpc	r27, r1
    28d0:	91 f0       	breq	.+36     	; 0x28f6 <gamepadButtonHandler+0x43a>
    28d2:	80 91 2e 27 	lds	r24, 0x272E
    28d6:	90 91 2f 27 	lds	r25, 0x272F
    28da:	a0 91 30 27 	lds	r26, 0x2730
    28de:	b0 91 31 27 	lds	r27, 0x2731
    28e2:	84 60       	ori	r24, 0x04	; 4
    28e4:	80 93 2e 27 	sts	0x272E, r24
    28e8:	90 93 2f 27 	sts	0x272F, r25
    28ec:	a0 93 30 27 	sts	0x2730, r26
    28f0:	b0 93 31 27 	sts	0x2731, r27
    28f4:	11 c0       	rjmp	.+34     	; 0x2918 <gamepadButtonHandler+0x45c>
    28f6:	80 91 2e 27 	lds	r24, 0x272E
    28fa:	90 91 2f 27 	lds	r25, 0x272F
    28fe:	a0 91 30 27 	lds	r26, 0x2730
    2902:	b0 91 31 27 	lds	r27, 0x2731
    2906:	8b 7f       	andi	r24, 0xFB	; 251
    2908:	80 93 2e 27 	sts	0x272E, r24
    290c:	90 93 2f 27 	sts	0x272F, r25
    2910:	a0 93 30 27 	sts	0x2730, r26
    2914:	b0 93 31 27 	sts	0x2731, r27
		BIT_SET(gamepad_buttonsHIGH, Button_Start, BIT_GET(pressed_buttons, BIT(B_START)));
    2918:	80 91 26 27 	lds	r24, 0x2726
    291c:	90 91 27 27 	lds	r25, 0x2727
    2920:	a0 91 28 27 	lds	r26, 0x2728
    2924:	b0 91 29 27 	lds	r27, 0x2729
    2928:	88 27       	eor	r24, r24
    292a:	91 70       	andi	r25, 0x01	; 1
    292c:	aa 27       	eor	r26, r26
    292e:	bb 27       	eor	r27, r27
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	a1 05       	cpc	r26, r1
    2934:	b1 05       	cpc	r27, r1
    2936:	91 f0       	breq	.+36     	; 0x295c <gamepadButtonHandler+0x4a0>
    2938:	80 91 2e 27 	lds	r24, 0x272E
    293c:	90 91 2f 27 	lds	r25, 0x272F
    2940:	a0 91 30 27 	lds	r26, 0x2730
    2944:	b0 91 31 27 	lds	r27, 0x2731
    2948:	88 60       	ori	r24, 0x08	; 8
    294a:	80 93 2e 27 	sts	0x272E, r24
    294e:	90 93 2f 27 	sts	0x272F, r25
    2952:	a0 93 30 27 	sts	0x2730, r26
    2956:	b0 93 31 27 	sts	0x2731, r27
    295a:	11 c0       	rjmp	.+34     	; 0x297e <gamepadButtonHandler+0x4c2>
    295c:	80 91 2e 27 	lds	r24, 0x272E
    2960:	90 91 2f 27 	lds	r25, 0x272F
    2964:	a0 91 30 27 	lds	r26, 0x2730
    2968:	b0 91 31 27 	lds	r27, 0x2731
    296c:	87 7f       	andi	r24, 0xF7	; 247
    296e:	80 93 2e 27 	sts	0x272E, r24
    2972:	90 93 2f 27 	sts	0x272F, r25
    2976:	a0 93 30 27 	sts	0x2730, r26
    297a:	b0 93 31 27 	sts	0x2731, r27
		
		BIT_SET(gamepad_buttonsHIGH, Button_LThumb, BIT_GET(pressed_buttons, BIT(B_JL)));
    297e:	80 91 26 27 	lds	r24, 0x2726
    2982:	90 91 27 27 	lds	r25, 0x2727
    2986:	a0 91 28 27 	lds	r26, 0x2728
    298a:	b0 91 29 27 	lds	r27, 0x2729
    298e:	88 27       	eor	r24, r24
    2990:	90 74       	andi	r25, 0x40	; 64
    2992:	aa 27       	eor	r26, r26
    2994:	bb 27       	eor	r27, r27
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	a1 05       	cpc	r26, r1
    299a:	b1 05       	cpc	r27, r1
    299c:	91 f0       	breq	.+36     	; 0x29c2 <gamepadButtonHandler+0x506>
    299e:	80 91 2e 27 	lds	r24, 0x272E
    29a2:	90 91 2f 27 	lds	r25, 0x272F
    29a6:	a0 91 30 27 	lds	r26, 0x2730
    29aa:	b0 91 31 27 	lds	r27, 0x2731
    29ae:	80 62       	ori	r24, 0x20	; 32
    29b0:	80 93 2e 27 	sts	0x272E, r24
    29b4:	90 93 2f 27 	sts	0x272F, r25
    29b8:	a0 93 30 27 	sts	0x2730, r26
    29bc:	b0 93 31 27 	sts	0x2731, r27
    29c0:	11 c0       	rjmp	.+34     	; 0x29e4 <gamepadButtonHandler+0x528>
    29c2:	80 91 2e 27 	lds	r24, 0x272E
    29c6:	90 91 2f 27 	lds	r25, 0x272F
    29ca:	a0 91 30 27 	lds	r26, 0x2730
    29ce:	b0 91 31 27 	lds	r27, 0x2731
    29d2:	8f 7d       	andi	r24, 0xDF	; 223
    29d4:	80 93 2e 27 	sts	0x272E, r24
    29d8:	90 93 2f 27 	sts	0x272F, r25
    29dc:	a0 93 30 27 	sts	0x2730, r26
    29e0:	b0 93 31 27 	sts	0x2731, r27
		BIT_SET(gamepad_buttonsHIGH, Button_RThumb, BIT_GET(pressed_buttons, BIT(B_JR)));
    29e4:	80 91 26 27 	lds	r24, 0x2726
    29e8:	90 91 27 27 	lds	r25, 0x2727
    29ec:	a0 91 28 27 	lds	r26, 0x2728
    29f0:	b0 91 29 27 	lds	r27, 0x2729
    29f4:	88 27       	eor	r24, r24
    29f6:	90 78       	andi	r25, 0x80	; 128
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	a1 05       	cpc	r26, r1
    29fc:	b1 05       	cpc	r27, r1
    29fe:	91 f0       	breq	.+36     	; 0x2a24 <gamepadButtonHandler+0x568>
    2a00:	80 91 2e 27 	lds	r24, 0x272E
    2a04:	90 91 2f 27 	lds	r25, 0x272F
    2a08:	a0 91 30 27 	lds	r26, 0x2730
    2a0c:	b0 91 31 27 	lds	r27, 0x2731
    2a10:	80 64       	ori	r24, 0x40	; 64
    2a12:	80 93 2e 27 	sts	0x272E, r24
    2a16:	90 93 2f 27 	sts	0x272F, r25
    2a1a:	a0 93 30 27 	sts	0x2730, r26
    2a1e:	b0 93 31 27 	sts	0x2731, r27
    2a22:	11 c0       	rjmp	.+34     	; 0x2a46 <gamepadButtonHandler+0x58a>
    2a24:	80 91 2e 27 	lds	r24, 0x272E
    2a28:	90 91 2f 27 	lds	r25, 0x272F
    2a2c:	a0 91 30 27 	lds	r26, 0x2730
    2a30:	b0 91 31 27 	lds	r27, 0x2731
    2a34:	8f 7b       	andi	r24, 0xBF	; 191
    2a36:	80 93 2e 27 	sts	0x272E, r24
    2a3a:	90 93 2f 27 	sts	0x272F, r25
    2a3e:	a0 93 30 27 	sts	0x2730, r26
    2a42:	b0 93 31 27 	sts	0x2731, r27
		
		dpad_buttons = DPadNoAction;
    2a46:	88 e0       	ldi	r24, 0x08	; 8
    2a48:	80 93 48 20 	sts	0x2048, r24
		
		//Dpad diagonal directions
		if (BIT_GET(pressed_buttons, BIT(B_UP)) && BIT_GET(pressed_buttons, BIT(B_LEFT)))
    2a4c:	80 91 26 27 	lds	r24, 0x2726
    2a50:	90 91 27 27 	lds	r25, 0x2727
    2a54:	a0 91 28 27 	lds	r26, 0x2728
    2a58:	b0 91 29 27 	lds	r27, 0x2729
    2a5c:	81 70       	andi	r24, 0x01	; 1
    2a5e:	99 27       	eor	r25, r25
    2a60:	aa 27       	eor	r26, r26
    2a62:	bb 27       	eor	r27, r27
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	a1 05       	cpc	r26, r1
    2a68:	b1 05       	cpc	r27, r1
    2a6a:	a1 f0       	breq	.+40     	; 0x2a94 <gamepadButtonHandler+0x5d8>
    2a6c:	80 91 26 27 	lds	r24, 0x2726
    2a70:	90 91 27 27 	lds	r25, 0x2727
    2a74:	a0 91 28 27 	lds	r26, 0x2728
    2a78:	b0 91 29 27 	lds	r27, 0x2729
    2a7c:	84 70       	andi	r24, 0x04	; 4
    2a7e:	99 27       	eor	r25, r25
    2a80:	aa 27       	eor	r26, r26
    2a82:	bb 27       	eor	r27, r27
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	a1 05       	cpc	r26, r1
    2a88:	b1 05       	cpc	r27, r1
    2a8a:	21 f0       	breq	.+8      	; 0x2a94 <gamepadButtonHandler+0x5d8>
		{
			dpad_buttons = DPadUpLeft;
    2a8c:	87 e0       	ldi	r24, 0x07	; 7
    2a8e:	80 93 48 20 	sts	0x2048, r24
    2a92:	ba c0       	rjmp	.+372    	; 0x2c08 <gamepadButtonHandler+0x74c>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_UP)) && BIT_GET(pressed_buttons, BIT(B_RIGHT)))
    2a94:	80 91 26 27 	lds	r24, 0x2726
    2a98:	90 91 27 27 	lds	r25, 0x2727
    2a9c:	a0 91 28 27 	lds	r26, 0x2728
    2aa0:	b0 91 29 27 	lds	r27, 0x2729
    2aa4:	81 70       	andi	r24, 0x01	; 1
    2aa6:	99 27       	eor	r25, r25
    2aa8:	aa 27       	eor	r26, r26
    2aaa:	bb 27       	eor	r27, r27
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	a1 05       	cpc	r26, r1
    2ab0:	b1 05       	cpc	r27, r1
    2ab2:	a1 f0       	breq	.+40     	; 0x2adc <gamepadButtonHandler+0x620>
    2ab4:	80 91 26 27 	lds	r24, 0x2726
    2ab8:	90 91 27 27 	lds	r25, 0x2727
    2abc:	a0 91 28 27 	lds	r26, 0x2728
    2ac0:	b0 91 29 27 	lds	r27, 0x2729
    2ac4:	88 70       	andi	r24, 0x08	; 8
    2ac6:	99 27       	eor	r25, r25
    2ac8:	aa 27       	eor	r26, r26
    2aca:	bb 27       	eor	r27, r27
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	a1 05       	cpc	r26, r1
    2ad0:	b1 05       	cpc	r27, r1
    2ad2:	21 f0       	breq	.+8      	; 0x2adc <gamepadButtonHandler+0x620>
		{
			dpad_buttons = DPadUPRight;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	80 93 48 20 	sts	0x2048, r24
    2ada:	96 c0       	rjmp	.+300    	; 0x2c08 <gamepadButtonHandler+0x74c>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_DOWN)) && BIT_GET(pressed_buttons, BIT(B_LEFT)))
    2adc:	80 91 26 27 	lds	r24, 0x2726
    2ae0:	90 91 27 27 	lds	r25, 0x2727
    2ae4:	a0 91 28 27 	lds	r26, 0x2728
    2ae8:	b0 91 29 27 	lds	r27, 0x2729
    2aec:	82 70       	andi	r24, 0x02	; 2
    2aee:	99 27       	eor	r25, r25
    2af0:	aa 27       	eor	r26, r26
    2af2:	bb 27       	eor	r27, r27
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	a1 05       	cpc	r26, r1
    2af8:	b1 05       	cpc	r27, r1
    2afa:	a1 f0       	breq	.+40     	; 0x2b24 <gamepadButtonHandler+0x668>
    2afc:	80 91 26 27 	lds	r24, 0x2726
    2b00:	90 91 27 27 	lds	r25, 0x2727
    2b04:	a0 91 28 27 	lds	r26, 0x2728
    2b08:	b0 91 29 27 	lds	r27, 0x2729
    2b0c:	84 70       	andi	r24, 0x04	; 4
    2b0e:	99 27       	eor	r25, r25
    2b10:	aa 27       	eor	r26, r26
    2b12:	bb 27       	eor	r27, r27
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	a1 05       	cpc	r26, r1
    2b18:	b1 05       	cpc	r27, r1
    2b1a:	21 f0       	breq	.+8      	; 0x2b24 <gamepadButtonHandler+0x668>
		{
			dpad_buttons = DPadDownLeft;
    2b1c:	85 e0       	ldi	r24, 0x05	; 5
    2b1e:	80 93 48 20 	sts	0x2048, r24
    2b22:	72 c0       	rjmp	.+228    	; 0x2c08 <gamepadButtonHandler+0x74c>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_DOWN)) && BIT_GET(pressed_buttons, BIT(B_RIGHT)))
    2b24:	80 91 26 27 	lds	r24, 0x2726
    2b28:	90 91 27 27 	lds	r25, 0x2727
    2b2c:	a0 91 28 27 	lds	r26, 0x2728
    2b30:	b0 91 29 27 	lds	r27, 0x2729
    2b34:	82 70       	andi	r24, 0x02	; 2
    2b36:	99 27       	eor	r25, r25
    2b38:	aa 27       	eor	r26, r26
    2b3a:	bb 27       	eor	r27, r27
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	a1 05       	cpc	r26, r1
    2b40:	b1 05       	cpc	r27, r1
    2b42:	a1 f0       	breq	.+40     	; 0x2b6c <gamepadButtonHandler+0x6b0>
    2b44:	80 91 26 27 	lds	r24, 0x2726
    2b48:	90 91 27 27 	lds	r25, 0x2727
    2b4c:	a0 91 28 27 	lds	r26, 0x2728
    2b50:	b0 91 29 27 	lds	r27, 0x2729
    2b54:	88 70       	andi	r24, 0x08	; 8
    2b56:	99 27       	eor	r25, r25
    2b58:	aa 27       	eor	r26, r26
    2b5a:	bb 27       	eor	r27, r27
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	a1 05       	cpc	r26, r1
    2b60:	b1 05       	cpc	r27, r1
    2b62:	21 f0       	breq	.+8      	; 0x2b6c <gamepadButtonHandler+0x6b0>
		{
			dpad_buttons = DPadDownRight;
    2b64:	83 e0       	ldi	r24, 0x03	; 3
    2b66:	80 93 48 20 	sts	0x2048, r24
    2b6a:	4e c0       	rjmp	.+156    	; 0x2c08 <gamepadButtonHandler+0x74c>
		}
		
		//Dpad up,left,down,right directions
		else if (BIT_GET(pressed_buttons, BIT(B_UP)))
    2b6c:	80 91 26 27 	lds	r24, 0x2726
    2b70:	90 91 27 27 	lds	r25, 0x2727
    2b74:	a0 91 28 27 	lds	r26, 0x2728
    2b78:	b0 91 29 27 	lds	r27, 0x2729
    2b7c:	81 70       	andi	r24, 0x01	; 1
    2b7e:	99 27       	eor	r25, r25
    2b80:	aa 27       	eor	r26, r26
    2b82:	bb 27       	eor	r27, r27
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	a1 05       	cpc	r26, r1
    2b88:	b1 05       	cpc	r27, r1
    2b8a:	19 f0       	breq	.+6      	; 0x2b92 <gamepadButtonHandler+0x6d6>
		{
			dpad_buttons = DPadUP;
    2b8c:	10 92 48 20 	sts	0x2048, r1
    2b90:	3b c0       	rjmp	.+118    	; 0x2c08 <gamepadButtonHandler+0x74c>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_LEFT)))
    2b92:	80 91 26 27 	lds	r24, 0x2726
    2b96:	90 91 27 27 	lds	r25, 0x2727
    2b9a:	a0 91 28 27 	lds	r26, 0x2728
    2b9e:	b0 91 29 27 	lds	r27, 0x2729
    2ba2:	84 70       	andi	r24, 0x04	; 4
    2ba4:	99 27       	eor	r25, r25
    2ba6:	aa 27       	eor	r26, r26
    2ba8:	bb 27       	eor	r27, r27
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	a1 05       	cpc	r26, r1
    2bae:	b1 05       	cpc	r27, r1
    2bb0:	21 f0       	breq	.+8      	; 0x2bba <gamepadButtonHandler+0x6fe>
		{
			dpad_buttons = DPadLeft;
    2bb2:	86 e0       	ldi	r24, 0x06	; 6
    2bb4:	80 93 48 20 	sts	0x2048, r24
    2bb8:	27 c0       	rjmp	.+78     	; 0x2c08 <gamepadButtonHandler+0x74c>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_DOWN)))
    2bba:	80 91 26 27 	lds	r24, 0x2726
    2bbe:	90 91 27 27 	lds	r25, 0x2727
    2bc2:	a0 91 28 27 	lds	r26, 0x2728
    2bc6:	b0 91 29 27 	lds	r27, 0x2729
    2bca:	82 70       	andi	r24, 0x02	; 2
    2bcc:	99 27       	eor	r25, r25
    2bce:	aa 27       	eor	r26, r26
    2bd0:	bb 27       	eor	r27, r27
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	a1 05       	cpc	r26, r1
    2bd6:	b1 05       	cpc	r27, r1
    2bd8:	21 f0       	breq	.+8      	; 0x2be2 <gamepadButtonHandler+0x726>
		{
			dpad_buttons = DPadDown;
    2bda:	84 e0       	ldi	r24, 0x04	; 4
    2bdc:	80 93 48 20 	sts	0x2048, r24
    2be0:	13 c0       	rjmp	.+38     	; 0x2c08 <gamepadButtonHandler+0x74c>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_RIGHT)))
    2be2:	80 91 26 27 	lds	r24, 0x2726
    2be6:	90 91 27 27 	lds	r25, 0x2727
    2bea:	a0 91 28 27 	lds	r26, 0x2728
    2bee:	b0 91 29 27 	lds	r27, 0x2729
    2bf2:	88 70       	andi	r24, 0x08	; 8
    2bf4:	99 27       	eor	r25, r25
    2bf6:	aa 27       	eor	r26, r26
    2bf8:	bb 27       	eor	r27, r27
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	a1 05       	cpc	r26, r1
    2bfe:	b1 05       	cpc	r27, r1
    2c00:	19 f0       	breq	.+6      	; 0x2c08 <gamepadButtonHandler+0x74c>
		{
			dpad_buttons = DPadRight;
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	80 93 48 20 	sts	0x2048, r24
		}
		
		report.dpad = dpad_buttons;
    2c08:	80 91 48 20 	lds	r24, 0x2048
    2c0c:	80 93 3a 28 	sts	0x283A, r24
		report.buttons1 = gamepad_buttonsLOW;
    2c10:	80 91 2a 27 	lds	r24, 0x272A
    2c14:	90 91 2b 27 	lds	r25, 0x272B
    2c18:	a0 91 2c 27 	lds	r26, 0x272C
    2c1c:	b0 91 2d 27 	lds	r27, 0x272D
    2c20:	80 93 3b 28 	sts	0x283B, r24
		report.buttons2 = gamepad_buttonsHIGH;
    2c24:	80 91 2e 27 	lds	r24, 0x272E
    2c28:	90 91 2f 27 	lds	r25, 0x272F
    2c2c:	a0 91 30 27 	lds	r26, 0x2730
    2c30:	b0 91 31 27 	lds	r27, 0x2731
    2c34:	80 93 3c 28 	sts	0x283C, r24
		
        if( GamepadButtonChanged() )
    2c38:	f3 db       	rcall	.-2074   	; 0x2420 <GamepadButtonChanged>
    2c3a:	88 23       	and	r24, r24
    2c3c:	19 f0       	breq	.+6      	; 0x2c44 <gamepadButtonHandler+0x788>
		{
			delta = true;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	80 93 32 27 	sts	0x2732, r24
		}
	}
		
}
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	1f 91       	pop	r17
    2c4e:	0f 91       	pop	r16
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	08 95       	ret

00002c56 <gamepadJoystickHandler>:

void gamepadJoystickHandler(enum JoystickName name, int16_t x, int16_t y) {
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	2f 97       	sbiw	r28, 0x0f	; 15
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	8b 87       	std	Y+11, r24	; 0x0b
    2c66:	6c 87       	std	Y+12, r22	; 0x0c
    2c68:	7d 87       	std	Y+13, r23	; 0x0d
    2c6a:	4e 87       	std	Y+14, r20	; 0x0e
    2c6c:	5f 87       	std	Y+15, r21	; 0x0f
	struct Joystick *this_joystick = &joysticks[name];
    2c6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c70:	88 2f       	mov	r24, r24
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	9c 01       	movw	r18, r24
    2c7a:	22 0f       	add	r18, r18
    2c7c:	33 1f       	adc	r19, r19
    2c7e:	22 0f       	add	r18, r18
    2c80:	33 1f       	adc	r19, r19
    2c82:	22 0f       	add	r18, r18
    2c84:	33 1f       	adc	r19, r19
    2c86:	28 1b       	sub	r18, r24
    2c88:	39 0b       	sbc	r19, r25
    2c8a:	c9 01       	movw	r24, r18
    2c8c:	8a 5a       	subi	r24, 0xAA	; 170
    2c8e:	9f 4d       	sbci	r25, 0xDF	; 223
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	9a 83       	std	Y+2, r25	; 0x02
	JoystickConfiguration *this_joystick_cfg = &my_cc->joystick_configs[name];
    2c94:	20 91 24 27 	lds	r18, 0x2724
    2c98:	30 91 25 27 	lds	r19, 0x2725
    2c9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c9e:	48 2f       	mov	r20, r24
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	66 e1       	ldi	r22, 0x16	; 22
    2ca4:	64 9f       	mul	r22, r20
    2ca6:	c0 01       	movw	r24, r0
    2ca8:	65 9f       	mul	r22, r21
    2caa:	90 0d       	add	r25, r0
    2cac:	11 24       	eor	r1, r1
    2cae:	8f 56       	subi	r24, 0x6F	; 111
    2cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb2:	82 0f       	add	r24, r18
    2cb4:	93 1f       	adc	r25, r19
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
    2cb8:	9c 83       	std	Y+4, r25	; 0x04
	
	uint16_xy raw = {x,y};
    2cba:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cbc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
    2cc0:	9e 83       	std	Y+6, r25	; 0x06
    2cc2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cc6:	8f 83       	std	Y+7, r24	; 0x07
    2cc8:	98 87       	std	Y+8, r25	; 0x08
    int8_xy out;
	AnalogJoystickAdj( center[name], this_joystick_cfg, &raw, &out );
    2cca:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ccc:	88 2f       	mov	r24, r24
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	88 0f       	add	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	8c 5b       	subi	r24, 0xBC	; 188
    2cd6:	9f 4d       	sbci	r25, 0xDF	; 223
    2cd8:	fc 01       	movw	r30, r24
    2cda:	80 81       	ld	r24, Z
    2cdc:	91 81       	ldd	r25, Z+1	; 0x01
    2cde:	9e 01       	movw	r18, r28
    2ce0:	27 5f       	subi	r18, 0xF7	; 247
    2ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce4:	ae 01       	movw	r20, r28
    2ce6:	4b 5f       	subi	r20, 0xFB	; 251
    2ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    2cea:	6b 81       	ldd	r22, Y+3	; 0x03
    2cec:	7c 81       	ldd	r23, Y+4	; 0x04
    2cee:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <AnalogJoystickAdj>
	
	if( name==JOYSTICK_LEFT)
    2cf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cf4:	88 23       	and	r24, r24
    2cf6:	39 f4       	brne	.+14     	; 0x2d06 <gamepadJoystickHandler+0xb0>
	{
		report.leftx = out.x;
    2cf8:	89 85       	ldd	r24, Y+9	; 0x09
    2cfa:	80 93 36 28 	sts	0x2836, r24
		report.lefty = out.y;
    2cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d00:	80 93 37 28 	sts	0x2837, r24
    2d04:	0c c0       	rjmp	.+24     	; 0x2d1e <gamepadJoystickHandler+0xc8>
	}
	else 
	{	
		//assert(name==JOYSTICK_RIGHT);
		report.rightx = out.x;
    2d06:	89 85       	ldd	r24, Y+9	; 0x09
    2d08:	80 93 38 28 	sts	0x2838, r24
		report.righty = out.y;
    2d0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d0e:	80 93 39 28 	sts	0x2839, r24
		
		if(GamepadJoystickChanged())
    2d12:	aa db       	rcall	.-2220   	; 0x2468 <GamepadJoystickChanged>
    2d14:	88 23       	and	r24, r24
    2d16:	19 f0       	breq	.+6      	; 0x2d1e <gamepadJoystickHandler+0xc8>
		{
			delta = true; //sets do_send_rpt if not already set
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	80 93 32 27 	sts	0x2732, r24
		}
	}
}
    2d1e:	2f 96       	adiw	r28, 0x0f	; 15
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	08 95       	ret

00002d2a <GamepadSendReport>:

// Sends a gamepad report when needed:
void GamepadSendReport(void) {
    2d2a:	cf 93       	push	r28
    2d2c:	df 93       	push	r29
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <GamepadSendReport+0x6>
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <GamepadSendReport+0x8>
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
  int i;
  unsigned char * u;
  
  u = (unsigned char *) &report;
    2d36:	83 e3       	ldi	r24, 0x33	; 51
    2d38:	98 e2       	ldi	r25, 0x28	; 40
    2d3a:	8b 83       	std	Y+3, r24	; 0x03
    2d3c:	9c 83       	std	Y+4, r25	; 0x04
  
  for(i=0; i<GAMEPAD_RPT_BYTES; i++)
    2d3e:	19 82       	std	Y+1, r1	; 0x01
    2d40:	1a 82       	std	Y+2, r1	; 0x02
    2d42:	10 c0       	rjmp	.+32     	; 0x2d64 <GamepadSendReport+0x3a>
  {
	  sendBTChar(*u);
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	fc 01       	movw	r30, r24
    2d4a:	80 81       	ld	r24, Z
    2d4c:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
	  u++;
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	01 96       	adiw	r24, 0x01	; 1
    2d56:	8b 83       	std	Y+3, r24	; 0x03
    2d58:	9c 83       	std	Y+4, r25	; 0x04
  int i;
  unsigned char * u;
  
  u = (unsigned char *) &report;
  
  for(i=0; i<GAMEPAD_RPT_BYTES; i++)
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	01 96       	adiw	r24, 0x01	; 1
    2d60:	89 83       	std	Y+1, r24	; 0x01
    2d62:	9a 83       	std	Y+2, r25	; 0x02
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	8a 30       	cpi	r24, 0x0A	; 10
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	5c f3       	brlt	.-42     	; 0x2d44 <GamepadSendReport+0x1a>
  {
	  sendBTChar(*u);
	  u++;
  }
    2d6e:	24 96       	adiw	r28, 0x04	; 4
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	08 95       	ret

00002d7a <jStickInit>:
}

void jStickButtonEvent(enum ButtonName name, enum ButtonState state)
{

};
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	2c 97       	sbiw	r28, 0x0c	; 12
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	8b 87       	std	Y+11, r24	; 0x0b
    2d8a:	9c 87       	std	Y+12, r25	; 0x0c
    2d8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d90:	80 93 33 27 	sts	0x2733, r24
    2d94:	90 93 34 27 	sts	0x2734, r25
    2d98:	2a e0       	ldi	r18, 0x0A	; 10
    2d9a:	e1 e1       	ldi	r30, 0x11	; 17
    2d9c:	f1 e2       	ldi	r31, 0x21	; 33
    2d9e:	ce 01       	movw	r24, r28
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	dc 01       	movw	r26, r24
    2da4:	01 90       	ld	r0, Z+
    2da6:	0d 92       	st	X+, r0
    2da8:	2a 95       	dec	r18
    2daa:	e1 f7       	brne	.-8      	; 0x2da4 <jStickInit+0x2a>
    2dac:	2a e0       	ldi	r18, 0x0A	; 10
    2dae:	ce 01       	movw	r24, r28
    2db0:	01 96       	adiw	r24, 0x01	; 1
    2db2:	fc 01       	movw	r30, r24
    2db4:	a3 e3       	ldi	r26, 0x33	; 51
    2db6:	b8 e2       	ldi	r27, 0x28	; 40
    2db8:	01 90       	ld	r0, Z+
    2dba:	0d 92       	st	X+, r0
    2dbc:	2a 95       	dec	r18
    2dbe:	e1 f7       	brne	.-8      	; 0x2db8 <jStickInit+0x3e>
    2dc0:	8a e0       	ldi	r24, 0x0A	; 10
    2dc2:	e3 e3       	ldi	r30, 0x33	; 51
    2dc4:	f8 e2       	ldi	r31, 0x28	; 40
    2dc6:	ad e3       	ldi	r26, 0x3D	; 61
    2dc8:	b8 e2       	ldi	r27, 0x28	; 40
    2dca:	01 90       	ld	r0, Z+
    2dcc:	0d 92       	st	X+, r0
    2dce:	8a 95       	dec	r24
    2dd0:	e1 f7       	brne	.-8      	; 0x2dca <jStickInit+0x50>
    2dd2:	0e 94 a1 41 	call	0x8342	; 0x8342 <BluetoothJoystickMode>
    2dd6:	2c 96       	adiw	r28, 0x0c	; 12
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	08 95       	ret

00002de2 <jStickButtonChanged>:

bool jStickButtonChanged()
{
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
	// Send a report if the buttons have changed:
	if(
	prev_report.dpad != report.dpad ||
    2dea:	90 91 44 28 	lds	r25, 0x2844
    2dee:	80 91 3a 28 	lds	r24, 0x283A
};

bool jStickButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
    2df2:	98 17       	cp	r25, r24
    2df4:	61 f4       	brne	.+24     	; 0x2e0e <jStickButtonChanged+0x2c>
	prev_report.dpad != report.dpad ||
	prev_report.buttons1 != report.buttons1 ||
    2df6:	90 91 45 28 	lds	r25, 0x2845
    2dfa:	80 91 3b 28 	lds	r24, 0x283B

bool jStickButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
	prev_report.dpad != report.dpad ||
    2dfe:	98 17       	cp	r25, r24
    2e00:	31 f4       	brne	.+12     	; 0x2e0e <jStickButtonChanged+0x2c>
	prev_report.buttons1 != report.buttons1 ||
	prev_report.buttons2 != report.buttons2
    2e02:	90 91 46 28 	lds	r25, 0x2846
    2e06:	80 91 3c 28 	lds	r24, 0x283C
bool jStickButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
	prev_report.dpad != report.dpad ||
	prev_report.buttons1 != report.buttons1 ||
    2e0a:	98 17       	cp	r25, r24
    2e0c:	51 f0       	breq	.+20     	; 0x2e22 <jStickButtonChanged+0x40>
	prev_report.buttons2 != report.buttons2
	)
	{
		memcpy( &(prev_report.dpad), &(report.dpad), JSTICK_RPT_B_BYTES); // Update the previous values
    2e0e:	43 e0       	ldi	r20, 0x03	; 3
    2e10:	50 e0       	ldi	r21, 0x00	; 0
    2e12:	6a e3       	ldi	r22, 0x3A	; 58
    2e14:	78 e2       	ldi	r23, 0x28	; 40
    2e16:	84 e4       	ldi	r24, 0x44	; 68
    2e18:	98 e2       	ldi	r25, 0x28	; 40
    2e1a:	0e 94 76 49 	call	0x92ec	; 0x92ec <memcpy>
		return true;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	01 c0       	rjmp	.+2      	; 0x2e24 <jStickButtonChanged+0x42>
	}
	return false;
    2e22:	80 e0       	ldi	r24, 0x00	; 0
}
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	08 95       	ret

00002e2a <jStickJoystickChanged>:

bool jStickJoystickChanged(void); //Prototype
bool jStickJoystickChanged()
{
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
	if(
	prev_report.leftx != report.leftx   ||
    2e32:	90 91 40 28 	lds	r25, 0x2840
    2e36:	80 91 36 28 	lds	r24, 0x2836
}

bool jStickJoystickChanged(void); //Prototype
bool jStickJoystickChanged()
{
	if(
    2e3a:	98 17       	cp	r25, r24
    2e3c:	91 f4       	brne	.+36     	; 0x2e62 <jStickJoystickChanged+0x38>
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
    2e3e:	90 91 41 28 	lds	r25, 0x2841
    2e42:	80 91 37 28 	lds	r24, 0x2837

bool jStickJoystickChanged(void); //Prototype
bool jStickJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
    2e46:	98 17       	cp	r25, r24
    2e48:	61 f4       	brne	.+24     	; 0x2e62 <jStickJoystickChanged+0x38>
	prev_report.lefty  != report.lefty  ||
	prev_report.rightx != report.rightx ||
    2e4a:	90 91 42 28 	lds	r25, 0x2842
    2e4e:	80 91 38 28 	lds	r24, 0x2838
bool jStickJoystickChanged(void); //Prototype
bool jStickJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
    2e52:	98 17       	cp	r25, r24
    2e54:	31 f4       	brne	.+12     	; 0x2e62 <jStickJoystickChanged+0x38>
	prev_report.rightx != report.rightx ||
	prev_report.righty != report.righty
    2e56:	90 91 43 28 	lds	r25, 0x2843
    2e5a:	80 91 39 28 	lds	r24, 0x2839
bool jStickJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
	prev_report.rightx != report.rightx ||
    2e5e:	98 17       	cp	r25, r24
    2e60:	51 f0       	breq	.+20     	; 0x2e76 <jStickJoystickChanged+0x4c>
	prev_report.righty != report.righty
	)
	{
		memcpy(&(prev_report.leftx), &(report.leftx), JSTICK_RPT_J_BYTES); // Update the previous values
    2e62:	44 e0       	ldi	r20, 0x04	; 4
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	66 e3       	ldi	r22, 0x36	; 54
    2e68:	78 e2       	ldi	r23, 0x28	; 40
    2e6a:	80 e4       	ldi	r24, 0x40	; 64
    2e6c:	98 e2       	ldi	r25, 0x28	; 40
    2e6e:	0e 94 76 49 	call	0x92ec	; 0x92ec <memcpy>
		return true;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <jStickJoystickChanged+0x4e>
	}
	return false;
    2e76:	80 e0       	ldi	r24, 0x00	; 0
}
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	08 95       	ret

00002e7e <jStickButtonHandler>:

void jStickButtonHandler(enum ButtonName name, enum ButtonState state) {
    2e7e:	ef 92       	push	r14
    2e80:	ff 92       	push	r15
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <jStickButtonHandler+0xe>
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	6a 83       	std	Y+2, r22	; 0x02
	
	//Move to ButtonChange()
	if (state == BUTTON_PRESSED) {
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	81 30       	cpi	r24, 0x01	; 1
    2e98:	31 f5       	brne	.+76     	; 0x2ee6 <jStickButtonHandler+0x68>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	a0 e0       	ldi	r26, 0x00	; 0
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	7c 01       	movw	r14, r24
    2eaa:	8d 01       	movw	r16, r26
    2eac:	04 c0       	rjmp	.+8      	; 0x2eb6 <jStickButtonHandler+0x38>
    2eae:	ee 0c       	add	r14, r14
    2eb0:	ff 1c       	adc	r15, r15
    2eb2:	00 1f       	adc	r16, r16
    2eb4:	11 1f       	adc	r17, r17
    2eb6:	2a 95       	dec	r18
    2eb8:	d2 f7       	brpl	.-12     	; 0x2eae <jStickButtonHandler+0x30>
    2eba:	a8 01       	movw	r20, r16
    2ebc:	97 01       	movw	r18, r14
    2ebe:	80 91 35 27 	lds	r24, 0x2735
    2ec2:	90 91 36 27 	lds	r25, 0x2736
    2ec6:	a0 91 37 27 	lds	r26, 0x2737
    2eca:	b0 91 38 27 	lds	r27, 0x2738
    2ece:	82 2b       	or	r24, r18
    2ed0:	93 2b       	or	r25, r19
    2ed2:	a4 2b       	or	r26, r20
    2ed4:	b5 2b       	or	r27, r21
    2ed6:	80 93 35 27 	sts	0x2735, r24
    2eda:	90 93 36 27 	sts	0x2736, r25
    2ede:	a0 93 37 27 	sts	0x2737, r26
    2ee2:	b0 93 38 27 	sts	0x2738, r27
	}

	if (state == BUTTON_RELEASED) {
    2ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee8:	88 23       	and	r24, r24
    2eea:	41 f5       	brne	.+80     	; 0x2f3c <jStickButtonHandler+0xbe>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	28 2f       	mov	r18, r24
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	a0 e0       	ldi	r26, 0x00	; 0
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	04 c0       	rjmp	.+8      	; 0x2f04 <jStickButtonHandler+0x86>
    2efc:	88 0f       	add	r24, r24
    2efe:	99 1f       	adc	r25, r25
    2f00:	aa 1f       	adc	r26, r26
    2f02:	bb 1f       	adc	r27, r27
    2f04:	2a 95       	dec	r18
    2f06:	d2 f7       	brpl	.-12     	; 0x2efc <jStickButtonHandler+0x7e>
    2f08:	9c 01       	movw	r18, r24
    2f0a:	ad 01       	movw	r20, r26
    2f0c:	20 95       	com	r18
    2f0e:	30 95       	com	r19
    2f10:	40 95       	com	r20
    2f12:	50 95       	com	r21
    2f14:	80 91 35 27 	lds	r24, 0x2735
    2f18:	90 91 36 27 	lds	r25, 0x2736
    2f1c:	a0 91 37 27 	lds	r26, 0x2737
    2f20:	b0 91 38 27 	lds	r27, 0x2738
    2f24:	82 23       	and	r24, r18
    2f26:	93 23       	and	r25, r19
    2f28:	a4 23       	and	r26, r20
    2f2a:	b5 23       	and	r27, r21
    2f2c:	80 93 35 27 	sts	0x2735, r24
    2f30:	90 93 36 27 	sts	0x2736, r25
    2f34:	a0 93 37 27 	sts	0x2737, r26
    2f38:	b0 93 38 27 	sts	0x2738, r27
	}
	
	if(name==REPORT)
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	81 31       	cpi	r24, 0x11	; 17
    2f40:	09 f0       	breq	.+2      	; 0x2f44 <jStickButtonHandler+0xc6>
    2f42:	35 c2       	rjmp	.+1130   	; 0x33ae <__stack+0x3af>
	{
	
		BIT_SET(joystick_buttonsLOW, Button_A, BIT_GET(pressed_buttons, BIT(B_A)));
    2f44:	80 91 35 27 	lds	r24, 0x2735
    2f48:	90 91 36 27 	lds	r25, 0x2736
    2f4c:	a0 91 37 27 	lds	r26, 0x2737
    2f50:	b0 91 38 27 	lds	r27, 0x2738
    2f54:	80 71       	andi	r24, 0x10	; 16
    2f56:	99 27       	eor	r25, r25
    2f58:	aa 27       	eor	r26, r26
    2f5a:	bb 27       	eor	r27, r27
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	a1 05       	cpc	r26, r1
    2f60:	b1 05       	cpc	r27, r1
    2f62:	31 f0       	breq	.+12     	; 0x2f70 <jStickButtonHandler+0xf2>
    2f64:	80 91 39 27 	lds	r24, 0x2739
    2f68:	81 60       	ori	r24, 0x01	; 1
    2f6a:	80 93 39 27 	sts	0x2739, r24
    2f6e:	05 c0       	rjmp	.+10     	; 0x2f7a <jStickButtonHandler+0xfc>
    2f70:	80 91 39 27 	lds	r24, 0x2739
    2f74:	8e 7f       	andi	r24, 0xFE	; 254
    2f76:	80 93 39 27 	sts	0x2739, r24
		BIT_SET(joystick_buttonsLOW, Button_B, BIT_GET(pressed_buttons, BIT(B_B)));
    2f7a:	80 91 35 27 	lds	r24, 0x2735
    2f7e:	90 91 36 27 	lds	r25, 0x2736
    2f82:	a0 91 37 27 	lds	r26, 0x2737
    2f86:	b0 91 38 27 	lds	r27, 0x2738
    2f8a:	80 72       	andi	r24, 0x20	; 32
    2f8c:	99 27       	eor	r25, r25
    2f8e:	aa 27       	eor	r26, r26
    2f90:	bb 27       	eor	r27, r27
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	a1 05       	cpc	r26, r1
    2f96:	b1 05       	cpc	r27, r1
    2f98:	31 f0       	breq	.+12     	; 0x2fa6 <jStickButtonHandler+0x128>
    2f9a:	80 91 39 27 	lds	r24, 0x2739
    2f9e:	82 60       	ori	r24, 0x02	; 2
    2fa0:	80 93 39 27 	sts	0x2739, r24
    2fa4:	05 c0       	rjmp	.+10     	; 0x2fb0 <jStickButtonHandler+0x132>
    2fa6:	80 91 39 27 	lds	r24, 0x2739
    2faa:	8d 7f       	andi	r24, 0xFD	; 253
    2fac:	80 93 39 27 	sts	0x2739, r24
		BIT_SET(joystick_buttonsLOW, Button_X, BIT_GET(pressed_buttons, BIT(B_X)));
    2fb0:	80 91 35 27 	lds	r24, 0x2735
    2fb4:	90 91 36 27 	lds	r25, 0x2736
    2fb8:	a0 91 37 27 	lds	r26, 0x2737
    2fbc:	b0 91 38 27 	lds	r27, 0x2738
    2fc0:	80 74       	andi	r24, 0x40	; 64
    2fc2:	99 27       	eor	r25, r25
    2fc4:	aa 27       	eor	r26, r26
    2fc6:	bb 27       	eor	r27, r27
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	a1 05       	cpc	r26, r1
    2fcc:	b1 05       	cpc	r27, r1
    2fce:	31 f0       	breq	.+12     	; 0x2fdc <jStickButtonHandler+0x15e>
    2fd0:	80 91 39 27 	lds	r24, 0x2739
    2fd4:	88 60       	ori	r24, 0x08	; 8
    2fd6:	80 93 39 27 	sts	0x2739, r24
    2fda:	05 c0       	rjmp	.+10     	; 0x2fe6 <jStickButtonHandler+0x168>
    2fdc:	80 91 39 27 	lds	r24, 0x2739
    2fe0:	87 7f       	andi	r24, 0xF7	; 247
    2fe2:	80 93 39 27 	sts	0x2739, r24
		BIT_SET(joystick_buttonsLOW, Button_Y, BIT_GET(pressed_buttons, BIT(B_Y)));
    2fe6:	80 91 35 27 	lds	r24, 0x2735
    2fea:	90 91 36 27 	lds	r25, 0x2736
    2fee:	a0 91 37 27 	lds	r26, 0x2737
    2ff2:	b0 91 38 27 	lds	r27, 0x2738
    2ff6:	80 78       	andi	r24, 0x80	; 128
    2ff8:	99 27       	eor	r25, r25
    2ffa:	aa 27       	eor	r26, r26
    2ffc:	bb 27       	eor	r27, r27
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	a1 05       	cpc	r26, r1
    3002:	b1 05       	cpc	r27, r1
    3004:	31 f0       	breq	.+12     	; 0x3012 <__stack+0x13>
    3006:	80 91 39 27 	lds	r24, 0x2739
    300a:	80 61       	ori	r24, 0x10	; 16
    300c:	80 93 39 27 	sts	0x2739, r24
    3010:	05 c0       	rjmp	.+10     	; 0x301c <__stack+0x1d>
    3012:	80 91 39 27 	lds	r24, 0x2739
    3016:	8f 7e       	andi	r24, 0xEF	; 239
    3018:	80 93 39 27 	sts	0x2739, r24

		BIT_SET(joystick_buttonsLOW, Button_LBumper, BIT_GET(pressed_buttons, BIT(B_LB)));
    301c:	80 91 35 27 	lds	r24, 0x2735
    3020:	90 91 36 27 	lds	r25, 0x2736
    3024:	a0 91 37 27 	lds	r26, 0x2737
    3028:	b0 91 38 27 	lds	r27, 0x2738
    302c:	88 27       	eor	r24, r24
    302e:	98 70       	andi	r25, 0x08	; 8
    3030:	aa 27       	eor	r26, r26
    3032:	bb 27       	eor	r27, r27
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	a1 05       	cpc	r26, r1
    3038:	b1 05       	cpc	r27, r1
    303a:	31 f0       	breq	.+12     	; 0x3048 <__stack+0x49>
    303c:	80 91 39 27 	lds	r24, 0x2739
    3040:	80 64       	ori	r24, 0x40	; 64
    3042:	80 93 39 27 	sts	0x2739, r24
    3046:	05 c0       	rjmp	.+10     	; 0x3052 <__stack+0x53>
    3048:	80 91 39 27 	lds	r24, 0x2739
    304c:	8f 7b       	andi	r24, 0xBF	; 191
    304e:	80 93 39 27 	sts	0x2739, r24
		BIT_SET(joystick_buttonsLOW, Button_RBumper, BIT_GET(pressed_buttons, BIT(B_RB)));
    3052:	80 91 35 27 	lds	r24, 0x2735
    3056:	90 91 36 27 	lds	r25, 0x2736
    305a:	a0 91 37 27 	lds	r26, 0x2737
    305e:	b0 91 38 27 	lds	r27, 0x2738
    3062:	88 27       	eor	r24, r24
    3064:	94 70       	andi	r25, 0x04	; 4
    3066:	aa 27       	eor	r26, r26
    3068:	bb 27       	eor	r27, r27
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	a1 05       	cpc	r26, r1
    306e:	b1 05       	cpc	r27, r1
    3070:	31 f0       	breq	.+12     	; 0x307e <__stack+0x7f>
    3072:	80 91 39 27 	lds	r24, 0x2739
    3076:	80 68       	ori	r24, 0x80	; 128
    3078:	80 93 39 27 	sts	0x2739, r24
    307c:	05 c0       	rjmp	.+10     	; 0x3088 <__stack+0x89>
    307e:	80 91 39 27 	lds	r24, 0x2739
    3082:	8f 77       	andi	r24, 0x7F	; 127
    3084:	80 93 39 27 	sts	0x2739, r24
	
		BIT_SET(joystick_buttonsHIGH, Button_LTrigger, BIT_GET(pressed_buttons, BIT(B_LT)));
    3088:	80 91 35 27 	lds	r24, 0x2735
    308c:	90 91 36 27 	lds	r25, 0x2736
    3090:	a0 91 37 27 	lds	r26, 0x2737
    3094:	b0 91 38 27 	lds	r27, 0x2738
    3098:	88 27       	eor	r24, r24
    309a:	90 72       	andi	r25, 0x20	; 32
    309c:	aa 27       	eor	r26, r26
    309e:	bb 27       	eor	r27, r27
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	a1 05       	cpc	r26, r1
    30a4:	b1 05       	cpc	r27, r1
    30a6:	31 f0       	breq	.+12     	; 0x30b4 <__stack+0xb5>
    30a8:	80 91 3a 27 	lds	r24, 0x273A
    30ac:	81 60       	ori	r24, 0x01	; 1
    30ae:	80 93 3a 27 	sts	0x273A, r24
    30b2:	05 c0       	rjmp	.+10     	; 0x30be <__stack+0xbf>
    30b4:	80 91 3a 27 	lds	r24, 0x273A
    30b8:	8e 7f       	andi	r24, 0xFE	; 254
    30ba:	80 93 3a 27 	sts	0x273A, r24
		BIT_SET(joystick_buttonsHIGH, Button_RTrigger, BIT_GET(pressed_buttons, BIT(B_RT)));
    30be:	80 91 35 27 	lds	r24, 0x2735
    30c2:	90 91 36 27 	lds	r25, 0x2736
    30c6:	a0 91 37 27 	lds	r26, 0x2737
    30ca:	b0 91 38 27 	lds	r27, 0x2738
    30ce:	88 27       	eor	r24, r24
    30d0:	90 71       	andi	r25, 0x10	; 16
    30d2:	aa 27       	eor	r26, r26
    30d4:	bb 27       	eor	r27, r27
    30d6:	00 97       	sbiw	r24, 0x00	; 0
    30d8:	a1 05       	cpc	r26, r1
    30da:	b1 05       	cpc	r27, r1
    30dc:	31 f0       	breq	.+12     	; 0x30ea <__stack+0xeb>
    30de:	80 91 3a 27 	lds	r24, 0x273A
    30e2:	82 60       	ori	r24, 0x02	; 2
    30e4:	80 93 3a 27 	sts	0x273A, r24
    30e8:	05 c0       	rjmp	.+10     	; 0x30f4 <__stack+0xf5>
    30ea:	80 91 3a 27 	lds	r24, 0x273A
    30ee:	8d 7f       	andi	r24, 0xFD	; 253
    30f0:	80 93 3a 27 	sts	0x273A, r24
	
		BIT_SET(joystick_buttonsHIGH, Button_Select, BIT_GET(pressed_buttons, BIT(B_SELECT)));
    30f4:	80 91 35 27 	lds	r24, 0x2735
    30f8:	90 91 36 27 	lds	r25, 0x2736
    30fc:	a0 91 37 27 	lds	r26, 0x2737
    3100:	b0 91 38 27 	lds	r27, 0x2738
    3104:	88 27       	eor	r24, r24
    3106:	92 70       	andi	r25, 0x02	; 2
    3108:	aa 27       	eor	r26, r26
    310a:	bb 27       	eor	r27, r27
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	a1 05       	cpc	r26, r1
    3110:	b1 05       	cpc	r27, r1
    3112:	31 f0       	breq	.+12     	; 0x3120 <__stack+0x121>
    3114:	80 91 3a 27 	lds	r24, 0x273A
    3118:	84 60       	ori	r24, 0x04	; 4
    311a:	80 93 3a 27 	sts	0x273A, r24
    311e:	05 c0       	rjmp	.+10     	; 0x312a <__stack+0x12b>
    3120:	80 91 3a 27 	lds	r24, 0x273A
    3124:	8b 7f       	andi	r24, 0xFB	; 251
    3126:	80 93 3a 27 	sts	0x273A, r24
		BIT_SET(joystick_buttonsHIGH, Button_Start, BIT_GET(pressed_buttons, BIT(B_START)));
    312a:	80 91 35 27 	lds	r24, 0x2735
    312e:	90 91 36 27 	lds	r25, 0x2736
    3132:	a0 91 37 27 	lds	r26, 0x2737
    3136:	b0 91 38 27 	lds	r27, 0x2738
    313a:	88 27       	eor	r24, r24
    313c:	91 70       	andi	r25, 0x01	; 1
    313e:	aa 27       	eor	r26, r26
    3140:	bb 27       	eor	r27, r27
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	a1 05       	cpc	r26, r1
    3146:	b1 05       	cpc	r27, r1
    3148:	31 f0       	breq	.+12     	; 0x3156 <__stack+0x157>
    314a:	80 91 3a 27 	lds	r24, 0x273A
    314e:	88 60       	ori	r24, 0x08	; 8
    3150:	80 93 3a 27 	sts	0x273A, r24
    3154:	05 c0       	rjmp	.+10     	; 0x3160 <__stack+0x161>
    3156:	80 91 3a 27 	lds	r24, 0x273A
    315a:	87 7f       	andi	r24, 0xF7	; 247
    315c:	80 93 3a 27 	sts	0x273A, r24
	
		BIT_SET(joystick_buttonsHIGH, Button_LThumb, BIT_GET(pressed_buttons, BIT(B_JL)));
    3160:	80 91 35 27 	lds	r24, 0x2735
    3164:	90 91 36 27 	lds	r25, 0x2736
    3168:	a0 91 37 27 	lds	r26, 0x2737
    316c:	b0 91 38 27 	lds	r27, 0x2738
    3170:	88 27       	eor	r24, r24
    3172:	90 74       	andi	r25, 0x40	; 64
    3174:	aa 27       	eor	r26, r26
    3176:	bb 27       	eor	r27, r27
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	a1 05       	cpc	r26, r1
    317c:	b1 05       	cpc	r27, r1
    317e:	31 f0       	breq	.+12     	; 0x318c <__stack+0x18d>
    3180:	80 91 3a 27 	lds	r24, 0x273A
    3184:	80 62       	ori	r24, 0x20	; 32
    3186:	80 93 3a 27 	sts	0x273A, r24
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <__stack+0x197>
    318c:	80 91 3a 27 	lds	r24, 0x273A
    3190:	8f 7d       	andi	r24, 0xDF	; 223
    3192:	80 93 3a 27 	sts	0x273A, r24
		BIT_SET(joystick_buttonsHIGH, Button_RThumb, BIT_GET(pressed_buttons, BIT(B_JR)));
    3196:	80 91 35 27 	lds	r24, 0x2735
    319a:	90 91 36 27 	lds	r25, 0x2736
    319e:	a0 91 37 27 	lds	r26, 0x2737
    31a2:	b0 91 38 27 	lds	r27, 0x2738
    31a6:	88 27       	eor	r24, r24
    31a8:	90 78       	andi	r25, 0x80	; 128
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	a1 05       	cpc	r26, r1
    31ae:	b1 05       	cpc	r27, r1
    31b0:	31 f0       	breq	.+12     	; 0x31be <__stack+0x1bf>
    31b2:	80 91 3a 27 	lds	r24, 0x273A
    31b6:	80 64       	ori	r24, 0x40	; 64
    31b8:	80 93 3a 27 	sts	0x273A, r24
    31bc:	05 c0       	rjmp	.+10     	; 0x31c8 <__stack+0x1c9>
    31be:	80 91 3a 27 	lds	r24, 0x273A
    31c2:	8f 7b       	andi	r24, 0xBF	; 191
    31c4:	80 93 3a 27 	sts	0x273A, r24
	
		dpad_buttons = DPadNoAction;
    31c8:	88 e0       	ldi	r24, 0x08	; 8
    31ca:	80 93 4d 20 	sts	0x204D, r24
	
		//Dpad diagonal directions
		if (BIT_GET(pressed_buttons, BIT(B_UP)) && BIT_GET(pressed_buttons, BIT(B_LEFT)))
    31ce:	80 91 35 27 	lds	r24, 0x2735
    31d2:	90 91 36 27 	lds	r25, 0x2736
    31d6:	a0 91 37 27 	lds	r26, 0x2737
    31da:	b0 91 38 27 	lds	r27, 0x2738
    31de:	81 70       	andi	r24, 0x01	; 1
    31e0:	99 27       	eor	r25, r25
    31e2:	aa 27       	eor	r26, r26
    31e4:	bb 27       	eor	r27, r27
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	a1 05       	cpc	r26, r1
    31ea:	b1 05       	cpc	r27, r1
    31ec:	a1 f0       	breq	.+40     	; 0x3216 <__stack+0x217>
    31ee:	80 91 35 27 	lds	r24, 0x2735
    31f2:	90 91 36 27 	lds	r25, 0x2736
    31f6:	a0 91 37 27 	lds	r26, 0x2737
    31fa:	b0 91 38 27 	lds	r27, 0x2738
    31fe:	84 70       	andi	r24, 0x04	; 4
    3200:	99 27       	eor	r25, r25
    3202:	aa 27       	eor	r26, r26
    3204:	bb 27       	eor	r27, r27
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	a1 05       	cpc	r26, r1
    320a:	b1 05       	cpc	r27, r1
    320c:	21 f0       	breq	.+8      	; 0x3216 <__stack+0x217>
		{
			dpad_buttons = DPadUpLeft;
    320e:	87 e0       	ldi	r24, 0x07	; 7
    3210:	80 93 4d 20 	sts	0x204D, r24
    3214:	ba c0       	rjmp	.+372    	; 0x338a <__stack+0x38b>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_UP)) && BIT_GET(pressed_buttons, BIT(B_RIGHT)))
    3216:	80 91 35 27 	lds	r24, 0x2735
    321a:	90 91 36 27 	lds	r25, 0x2736
    321e:	a0 91 37 27 	lds	r26, 0x2737
    3222:	b0 91 38 27 	lds	r27, 0x2738
    3226:	81 70       	andi	r24, 0x01	; 1
    3228:	99 27       	eor	r25, r25
    322a:	aa 27       	eor	r26, r26
    322c:	bb 27       	eor	r27, r27
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	a1 05       	cpc	r26, r1
    3232:	b1 05       	cpc	r27, r1
    3234:	a1 f0       	breq	.+40     	; 0x325e <__stack+0x25f>
    3236:	80 91 35 27 	lds	r24, 0x2735
    323a:	90 91 36 27 	lds	r25, 0x2736
    323e:	a0 91 37 27 	lds	r26, 0x2737
    3242:	b0 91 38 27 	lds	r27, 0x2738
    3246:	88 70       	andi	r24, 0x08	; 8
    3248:	99 27       	eor	r25, r25
    324a:	aa 27       	eor	r26, r26
    324c:	bb 27       	eor	r27, r27
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	a1 05       	cpc	r26, r1
    3252:	b1 05       	cpc	r27, r1
    3254:	21 f0       	breq	.+8      	; 0x325e <__stack+0x25f>
		{
			dpad_buttons = DPadUPRight;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	80 93 4d 20 	sts	0x204D, r24
    325c:	96 c0       	rjmp	.+300    	; 0x338a <__stack+0x38b>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_DOWN)) && BIT_GET(pressed_buttons, BIT(B_LEFT)))
    325e:	80 91 35 27 	lds	r24, 0x2735
    3262:	90 91 36 27 	lds	r25, 0x2736
    3266:	a0 91 37 27 	lds	r26, 0x2737
    326a:	b0 91 38 27 	lds	r27, 0x2738
    326e:	82 70       	andi	r24, 0x02	; 2
    3270:	99 27       	eor	r25, r25
    3272:	aa 27       	eor	r26, r26
    3274:	bb 27       	eor	r27, r27
    3276:	00 97       	sbiw	r24, 0x00	; 0
    3278:	a1 05       	cpc	r26, r1
    327a:	b1 05       	cpc	r27, r1
    327c:	a1 f0       	breq	.+40     	; 0x32a6 <__stack+0x2a7>
    327e:	80 91 35 27 	lds	r24, 0x2735
    3282:	90 91 36 27 	lds	r25, 0x2736
    3286:	a0 91 37 27 	lds	r26, 0x2737
    328a:	b0 91 38 27 	lds	r27, 0x2738
    328e:	84 70       	andi	r24, 0x04	; 4
    3290:	99 27       	eor	r25, r25
    3292:	aa 27       	eor	r26, r26
    3294:	bb 27       	eor	r27, r27
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	a1 05       	cpc	r26, r1
    329a:	b1 05       	cpc	r27, r1
    329c:	21 f0       	breq	.+8      	; 0x32a6 <__stack+0x2a7>
		{
			dpad_buttons = DPadDownLeft;
    329e:	85 e0       	ldi	r24, 0x05	; 5
    32a0:	80 93 4d 20 	sts	0x204D, r24
    32a4:	72 c0       	rjmp	.+228    	; 0x338a <__stack+0x38b>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_DOWN)) && BIT_GET(pressed_buttons, BIT(B_RIGHT)))
    32a6:	80 91 35 27 	lds	r24, 0x2735
    32aa:	90 91 36 27 	lds	r25, 0x2736
    32ae:	a0 91 37 27 	lds	r26, 0x2737
    32b2:	b0 91 38 27 	lds	r27, 0x2738
    32b6:	82 70       	andi	r24, 0x02	; 2
    32b8:	99 27       	eor	r25, r25
    32ba:	aa 27       	eor	r26, r26
    32bc:	bb 27       	eor	r27, r27
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	a1 05       	cpc	r26, r1
    32c2:	b1 05       	cpc	r27, r1
    32c4:	a1 f0       	breq	.+40     	; 0x32ee <__stack+0x2ef>
    32c6:	80 91 35 27 	lds	r24, 0x2735
    32ca:	90 91 36 27 	lds	r25, 0x2736
    32ce:	a0 91 37 27 	lds	r26, 0x2737
    32d2:	b0 91 38 27 	lds	r27, 0x2738
    32d6:	88 70       	andi	r24, 0x08	; 8
    32d8:	99 27       	eor	r25, r25
    32da:	aa 27       	eor	r26, r26
    32dc:	bb 27       	eor	r27, r27
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	a1 05       	cpc	r26, r1
    32e2:	b1 05       	cpc	r27, r1
    32e4:	21 f0       	breq	.+8      	; 0x32ee <__stack+0x2ef>
		{
			dpad_buttons = DPadDownRight;
    32e6:	83 e0       	ldi	r24, 0x03	; 3
    32e8:	80 93 4d 20 	sts	0x204D, r24
    32ec:	4e c0       	rjmp	.+156    	; 0x338a <__stack+0x38b>
		}
		
		//Dpad up,left,down,right directions
		else if (BIT_GET(pressed_buttons, BIT(B_UP)))
    32ee:	80 91 35 27 	lds	r24, 0x2735
    32f2:	90 91 36 27 	lds	r25, 0x2736
    32f6:	a0 91 37 27 	lds	r26, 0x2737
    32fa:	b0 91 38 27 	lds	r27, 0x2738
    32fe:	81 70       	andi	r24, 0x01	; 1
    3300:	99 27       	eor	r25, r25
    3302:	aa 27       	eor	r26, r26
    3304:	bb 27       	eor	r27, r27
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	a1 05       	cpc	r26, r1
    330a:	b1 05       	cpc	r27, r1
    330c:	19 f0       	breq	.+6      	; 0x3314 <__stack+0x315>
		{
			dpad_buttons = DPadUP;
    330e:	10 92 4d 20 	sts	0x204D, r1
    3312:	3b c0       	rjmp	.+118    	; 0x338a <__stack+0x38b>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_LEFT)))
    3314:	80 91 35 27 	lds	r24, 0x2735
    3318:	90 91 36 27 	lds	r25, 0x2736
    331c:	a0 91 37 27 	lds	r26, 0x2737
    3320:	b0 91 38 27 	lds	r27, 0x2738
    3324:	84 70       	andi	r24, 0x04	; 4
    3326:	99 27       	eor	r25, r25
    3328:	aa 27       	eor	r26, r26
    332a:	bb 27       	eor	r27, r27
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	a1 05       	cpc	r26, r1
    3330:	b1 05       	cpc	r27, r1
    3332:	21 f0       	breq	.+8      	; 0x333c <__stack+0x33d>
		{
			dpad_buttons = DPadLeft;
    3334:	86 e0       	ldi	r24, 0x06	; 6
    3336:	80 93 4d 20 	sts	0x204D, r24
    333a:	27 c0       	rjmp	.+78     	; 0x338a <__stack+0x38b>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_DOWN)))
    333c:	80 91 35 27 	lds	r24, 0x2735
    3340:	90 91 36 27 	lds	r25, 0x2736
    3344:	a0 91 37 27 	lds	r26, 0x2737
    3348:	b0 91 38 27 	lds	r27, 0x2738
    334c:	82 70       	andi	r24, 0x02	; 2
    334e:	99 27       	eor	r25, r25
    3350:	aa 27       	eor	r26, r26
    3352:	bb 27       	eor	r27, r27
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	a1 05       	cpc	r26, r1
    3358:	b1 05       	cpc	r27, r1
    335a:	21 f0       	breq	.+8      	; 0x3364 <__stack+0x365>
		{
			dpad_buttons = DPadDown;
    335c:	84 e0       	ldi	r24, 0x04	; 4
    335e:	80 93 4d 20 	sts	0x204D, r24
    3362:	13 c0       	rjmp	.+38     	; 0x338a <__stack+0x38b>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_RIGHT)))
    3364:	80 91 35 27 	lds	r24, 0x2735
    3368:	90 91 36 27 	lds	r25, 0x2736
    336c:	a0 91 37 27 	lds	r26, 0x2737
    3370:	b0 91 38 27 	lds	r27, 0x2738
    3374:	88 70       	andi	r24, 0x08	; 8
    3376:	99 27       	eor	r25, r25
    3378:	aa 27       	eor	r26, r26
    337a:	bb 27       	eor	r27, r27
    337c:	00 97       	sbiw	r24, 0x00	; 0
    337e:	a1 05       	cpc	r26, r1
    3380:	b1 05       	cpc	r27, r1
    3382:	19 f0       	breq	.+6      	; 0x338a <__stack+0x38b>
		{
			dpad_buttons = DPadRight;
    3384:	82 e0       	ldi	r24, 0x02	; 2
    3386:	80 93 4d 20 	sts	0x204D, r24
		}
	
		report.dpad = dpad_buttons;
    338a:	80 91 4d 20 	lds	r24, 0x204D
    338e:	80 93 3a 28 	sts	0x283A, r24
		report.buttons1 = joystick_buttonsLOW;
    3392:	80 91 39 27 	lds	r24, 0x2739
    3396:	80 93 3b 28 	sts	0x283B, r24
		report.buttons2 = joystick_buttonsHIGH;
    339a:	80 91 3a 27 	lds	r24, 0x273A
    339e:	80 93 3c 28 	sts	0x283C, r24
		
		if( jStickButtonChanged() )
    33a2:	1f dd       	rcall	.-1474   	; 0x2de2 <jStickButtonChanged>
    33a4:	88 23       	and	r24, r24
    33a6:	19 f0       	breq	.+6      	; 0x33ae <__stack+0x3af>
		{
			jdelta = true;
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	80 93 3b 27 	sts	0x273B, r24
		}
	}
	
}
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	df 91       	pop	r29
    33b4:	cf 91       	pop	r28
    33b6:	1f 91       	pop	r17
    33b8:	0f 91       	pop	r16
    33ba:	ff 90       	pop	r15
    33bc:	ef 90       	pop	r14
    33be:	08 95       	ret

000033c0 <jStickJoystickHandler>:

void jStickJoystickHandler(enum JoystickName name, int16_t x, int16_t y) {
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62
    33c8:	2f 97       	sbiw	r28, 0x0f	; 15
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	8b 87       	std	Y+11, r24	; 0x0b
    33d0:	6c 87       	std	Y+12, r22	; 0x0c
    33d2:	7d 87       	std	Y+13, r23	; 0x0d
    33d4:	4e 87       	std	Y+14, r20	; 0x0e
    33d6:	5f 87       	std	Y+15, r21	; 0x0f
	struct Joystick *this_joystick = &joysticks[name];
    33d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    33da:	88 2f       	mov	r24, r24
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	88 0f       	add	r24, r24
    33e0:	99 1f       	adc	r25, r25
    33e2:	9c 01       	movw	r18, r24
    33e4:	22 0f       	add	r18, r18
    33e6:	33 1f       	adc	r19, r19
    33e8:	22 0f       	add	r18, r18
    33ea:	33 1f       	adc	r19, r19
    33ec:	22 0f       	add	r18, r18
    33ee:	33 1f       	adc	r19, r19
    33f0:	28 1b       	sub	r18, r24
    33f2:	39 0b       	sbc	r19, r25
    33f4:	c9 01       	movw	r24, r18
    33f6:	8a 5a       	subi	r24, 0xAA	; 170
    33f8:	9f 4d       	sbci	r25, 0xDF	; 223
    33fa:	89 83       	std	Y+1, r24	; 0x01
    33fc:	9a 83       	std	Y+2, r25	; 0x02
	JoystickConfiguration *this_joystick_cfg = &my_cc->joystick_configs[name];
    33fe:	20 91 33 27 	lds	r18, 0x2733
    3402:	30 91 34 27 	lds	r19, 0x2734
    3406:	8b 85       	ldd	r24, Y+11	; 0x0b
    3408:	48 2f       	mov	r20, r24
    340a:	50 e0       	ldi	r21, 0x00	; 0
    340c:	66 e1       	ldi	r22, 0x16	; 22
    340e:	64 9f       	mul	r22, r20
    3410:	c0 01       	movw	r24, r0
    3412:	65 9f       	mul	r22, r21
    3414:	90 0d       	add	r25, r0
    3416:	11 24       	eor	r1, r1
    3418:	8f 56       	subi	r24, 0x6F	; 111
    341a:	9f 4f       	sbci	r25, 0xFF	; 255
    341c:	82 0f       	add	r24, r18
    341e:	93 1f       	adc	r25, r19
    3420:	8b 83       	std	Y+3, r24	; 0x03
    3422:	9c 83       	std	Y+4, r25	; 0x04
	
	uint16_xy raw = {x,y};
    3424:	8c 85       	ldd	r24, Y+12	; 0x0c
    3426:	9d 85       	ldd	r25, Y+13	; 0x0d
    3428:	8d 83       	std	Y+5, r24	; 0x05
    342a:	9e 83       	std	Y+6, r25	; 0x06
    342c:	8e 85       	ldd	r24, Y+14	; 0x0e
    342e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3430:	8f 83       	std	Y+7, r24	; 0x07
    3432:	98 87       	std	Y+8, r25	; 0x08
	int8_xy out;
	AnalogJoystickAdj( center[name], this_joystick_cfg, &raw, &out );
    3434:	8b 85       	ldd	r24, Y+11	; 0x0b
    3436:	88 2f       	mov	r24, r24
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	87 5b       	subi	r24, 0xB7	; 183
    3440:	9f 4d       	sbci	r25, 0xDF	; 223
    3442:	fc 01       	movw	r30, r24
    3444:	80 81       	ld	r24, Z
    3446:	91 81       	ldd	r25, Z+1	; 0x01
    3448:	9e 01       	movw	r18, r28
    344a:	27 5f       	subi	r18, 0xF7	; 247
    344c:	3f 4f       	sbci	r19, 0xFF	; 255
    344e:	ae 01       	movw	r20, r28
    3450:	4b 5f       	subi	r20, 0xFB	; 251
    3452:	5f 4f       	sbci	r21, 0xFF	; 255
    3454:	6b 81       	ldd	r22, Y+3	; 0x03
    3456:	7c 81       	ldd	r23, Y+4	; 0x04
    3458:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <AnalogJoystickAdj>
	
	if( name==JOYSTICK_LEFT)
    345c:	8b 85       	ldd	r24, Y+11	; 0x0b
    345e:	88 23       	and	r24, r24
    3460:	39 f4       	brne	.+14     	; 0x3470 <jStickJoystickHandler+0xb0>
	{
		report.leftx = out.x;
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	80 93 36 28 	sts	0x2836, r24
		report.lefty = out.y;
    3468:	8a 85       	ldd	r24, Y+10	; 0x0a
    346a:	80 93 37 28 	sts	0x2837, r24
    346e:	0c c0       	rjmp	.+24     	; 0x3488 <jStickJoystickHandler+0xc8>
	}
	else
	{
		//assert(name==JOYSTICK_RIGHT);
		report.rightx = out.x;
    3470:	89 85       	ldd	r24, Y+9	; 0x09
    3472:	80 93 38 28 	sts	0x2838, r24
		report.righty = out.y;
    3476:	8a 85       	ldd	r24, Y+10	; 0x0a
    3478:	80 93 39 28 	sts	0x2839, r24
	
		if(jStickJoystickChanged())
    347c:	d6 dc       	rcall	.-1620   	; 0x2e2a <jStickJoystickChanged>
    347e:	88 23       	and	r24, r24
    3480:	19 f0       	breq	.+6      	; 0x3488 <jStickJoystickHandler+0xc8>
		{
			jdelta = true; //sets do_send_rpt if not already set
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	80 93 3b 27 	sts	0x273B, r24
		}
	}
}
    3488:	2f 96       	adiw	r28, 0x0f	; 15
    348a:	cd bf       	out	0x3d, r28	; 61
    348c:	de bf       	out	0x3e, r29	; 62
    348e:	df 91       	pop	r29
    3490:	cf 91       	pop	r28
    3492:	08 95       	ret

00003494 <jStickSendReport>:

// Sends a joystick report when needed:
void jStickSendReport(void) {
    3494:	cf 93       	push	r28
    3496:	df 93       	push	r29
    3498:	00 d0       	rcall	.+0      	; 0x349a <jStickSendReport+0x6>
    349a:	00 d0       	rcall	.+0      	; 0x349c <jStickSendReport+0x8>
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
	int i;
	unsigned char * u;
	
	u = (unsigned char *) &report;
    34a0:	83 e3       	ldi	r24, 0x33	; 51
    34a2:	98 e2       	ldi	r25, 0x28	; 40
    34a4:	8b 83       	std	Y+3, r24	; 0x03
    34a6:	9c 83       	std	Y+4, r25	; 0x04
	
	for(i=0; i<JSTICK_RPT_BYTES; i++)
    34a8:	19 82       	std	Y+1, r1	; 0x01
    34aa:	1a 82       	std	Y+2, r1	; 0x02
    34ac:	10 c0       	rjmp	.+32     	; 0x34ce <jStickSendReport+0x3a>
	{
		sendBTChar(*u);
    34ae:	8b 81       	ldd	r24, Y+3	; 0x03
    34b0:	9c 81       	ldd	r25, Y+4	; 0x04
    34b2:	fc 01       	movw	r30, r24
    34b4:	80 81       	ld	r24, Z
    34b6:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
		u++;
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	9c 81       	ldd	r25, Y+4	; 0x04
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	8b 83       	std	Y+3, r24	; 0x03
    34c2:	9c 83       	std	Y+4, r25	; 0x04
	int i;
	unsigned char * u;
	
	u = (unsigned char *) &report;
	
	for(i=0; i<JSTICK_RPT_BYTES; i++)
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	9a 81       	ldd	r25, Y+2	; 0x02
    34c8:	01 96       	adiw	r24, 0x01	; 1
    34ca:	89 83       	std	Y+1, r24	; 0x01
    34cc:	9a 83       	std	Y+2, r25	; 0x02
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	9a 81       	ldd	r25, Y+2	; 0x02
    34d2:	8a 30       	cpi	r24, 0x0A	; 10
    34d4:	91 05       	cpc	r25, r1
    34d6:	5c f3       	brlt	.-42     	; 0x34ae <jStickSendReport+0x1a>
	{
		sendBTChar(*u);
		u++;
	}
    34d8:	24 96       	adiw	r28, 0x04	; 4
    34da:	cd bf       	out	0x3d, r28	; 61
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	df 91       	pop	r29
    34e0:	cf 91       	pop	r28
    34e2:	08 95       	ret

000034e4 <keyboardInit>:
static uint32_t pressed_buttons = 0;

// Local function to handle keyboard button presses.
void ChangeButtonPressState(uint8_t name, enum ButtonState state);

void keyboardInit(struct ControllerConfiguration *cc) {
    34e4:	cf 93       	push	r28
    34e6:	df 93       	push	r29
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <keyboardInit+0x6>
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	9a 83       	std	Y+2, r25	; 0x02
	my_cc = cc;
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	9a 81       	ldd	r25, Y+2	; 0x02
    34f6:	80 93 3c 27 	sts	0x273C, r24
    34fa:	90 93 3d 27 	sts	0x273D, r25
	BluetoothKeyboardMode();
    34fe:	0e 94 83 41 	call	0x8306	; 0x8306 <BluetoothKeyboardMode>
}
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	08 95       	ret

0000350c <keyboardButtonHandler>:

void keyboardButtonHandler(enum ButtonName name, enum ButtonState state) {
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	00 d0       	rcall	.+0      	; 0x3512 <keyboardButtonHandler+0x6>
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	89 83       	std	Y+1, r24	; 0x01
    3518:	6a 83       	std	Y+2, r22	; 0x02
	ChangeButtonPressState((uint8_t)name, state);
    351a:	6a 81       	ldd	r22, Y+2	; 0x02
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	1d d1       	rcall	.+570    	; 0x375a <ChangeButtonPressState>
}
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	08 95       	ret

0000352a <keyboardJoystickHandler>:

void keyboardJoystickHandler(enum JoystickName name, uint16_t x, uint16_t y) {
    352a:	cf 93       	push	r28
    352c:	df 93       	push	r29
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	62 97       	sbiw	r28, 0x12	; 18
    3534:	cd bf       	out	0x3d, r28	; 61
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	8e 87       	std	Y+14, r24	; 0x0e
    353a:	6f 87       	std	Y+15, r22	; 0x0f
    353c:	78 8b       	std	Y+16, r23	; 0x10
    353e:	49 8b       	std	Y+17, r20	; 0x11
    3540:	5a 8b       	std	Y+18, r21	; 0x12
	static enum JoystickButtonState state_y[NUM_JOYSTICKS];
	JoystickConfiguration *this_joystick;
	uint8_t joystick_button_base;

	// Get information about this joystick:
	this_joystick = &(my_cc->joystick_configs[name]);
    3542:	20 91 3c 27 	lds	r18, 0x273C
    3546:	30 91 3d 27 	lds	r19, 0x273D
    354a:	8e 85       	ldd	r24, Y+14	; 0x0e
    354c:	48 2f       	mov	r20, r24
    354e:	50 e0       	ldi	r21, 0x00	; 0
    3550:	66 e1       	ldi	r22, 0x16	; 22
    3552:	64 9f       	mul	r22, r20
    3554:	c0 01       	movw	r24, r0
    3556:	65 9f       	mul	r22, r21
    3558:	90 0d       	add	r25, r0
    355a:	11 24       	eor	r1, r1
    355c:	8f 56       	subi	r24, 0x6F	; 111
    355e:	9f 4f       	sbci	r25, 0xFF	; 255
    3560:	82 0f       	add	r24, r18
    3562:	93 1f       	adc	r25, r19
    3564:	89 83       	std	Y+1, r24	; 0x01
    3566:	9a 83       	std	Y+2, r25	; 0x02

	// Get the base index for these joystick buttons:
	joystick_button_base = NUM_BUTTONS + 4 * name;
    3568:	8e 85       	ldd	r24, Y+14	; 0x0e
    356a:	88 2f       	mov	r24, r24
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	04 96       	adiw	r24, 0x04	; 4
    3570:	88 0f       	add	r24, r24
    3572:	88 0f       	add	r24, r24
    3574:	8b 83       	std	Y+3, r24	; 0x03
	
	uint16_xy raw = {x,y};
    3576:	8f 85       	ldd	r24, Y+15	; 0x0f
    3578:	98 89       	ldd	r25, Y+16	; 0x10
    357a:	8e 83       	std	Y+6, r24	; 0x06
    357c:	9f 83       	std	Y+7, r25	; 0x07
    357e:	89 89       	ldd	r24, Y+17	; 0x11
    3580:	9a 89       	ldd	r25, Y+18	; 0x12
    3582:	88 87       	std	Y+8, r24	; 0x08
    3584:	99 87       	std	Y+9, r25	; 0x09
		
		int16_xy * deadzone = (int16_xy *) &(this_joystick->x_deadzone);
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	9a 81       	ldd	r25, Y+2	; 0x02
    358a:	42 96       	adiw	r24, 0x12	; 18
    358c:	8c 83       	std	Y+4, r24	; 0x04
    358e:	9d 83       	std	Y+5, r25	; 0x05
		int16_xy out;
		SimpleJoystickAdj( center[name], deadzone, &raw, &out );
    3590:	8e 85       	ldd	r24, Y+14	; 0x0e
    3592:	88 2f       	mov	r24, r24
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	88 0f       	add	r24, r24
    3598:	99 1f       	adc	r25, r25
    359a:	82 5b       	subi	r24, 0xB2	; 178
    359c:	9f 4d       	sbci	r25, 0xDF	; 223
    359e:	fc 01       	movw	r30, r24
    35a0:	80 81       	ld	r24, Z
    35a2:	91 81       	ldd	r25, Z+1	; 0x01
    35a4:	9e 01       	movw	r18, r28
    35a6:	26 5f       	subi	r18, 0xF6	; 246
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
    35aa:	ae 01       	movw	r20, r28
    35ac:	4a 5f       	subi	r20, 0xFA	; 250
    35ae:	5f 4f       	sbci	r21, 0xFF	; 255
    35b0:	6c 81       	ldd	r22, Y+4	; 0x04
    35b2:	7d 81       	ldd	r23, Y+5	; 0x05
    35b4:	08 d7       	rcall	.+3600   	; 0x43c6 <SimpleJoystickAdj>
		
		// Check the X axis:
		switch (state_x[name]) {
    35b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    35b8:	88 2f       	mov	r24, r24
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	8e 5b       	subi	r24, 0xBE	; 190
    35be:	98 4d       	sbci	r25, 0xD8	; 216
    35c0:	fc 01       	movw	r30, r24
    35c2:	80 81       	ld	r24, Z
    35c4:	88 2f       	mov	r24, r24
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	83 30       	cpi	r24, 0x03	; 3
    35ca:	91 05       	cpc	r25, r1
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <keyboardJoystickHandler+0xa6>
    35ce:	3b c0       	rjmp	.+118    	; 0x3646 <keyboardJoystickHandler+0x11c>
    35d0:	84 30       	cpi	r24, 0x04	; 4
    35d2:	91 05       	cpc	r25, r1
    35d4:	21 f0       	breq	.+8      	; 0x35de <keyboardJoystickHandler+0xb4>
    35d6:	82 30       	cpi	r24, 0x02	; 2
    35d8:	91 05       	cpc	r25, r1
    35da:	21 f1       	breq	.+72     	; 0x3624 <keyboardJoystickHandler+0xfa>
    35dc:	46 c0       	rjmp	.+140    	; 0x366a <keyboardJoystickHandler+0x140>
			case JBSTATE_IDLE:
			// Do we need to enter the left state?
			if( out.x<0 )
    35de:	8a 85       	ldd	r24, Y+10	; 0x0a
    35e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    35e2:	99 23       	and	r25, r25
    35e4:	6c f4       	brge	.+26     	; 0x3600 <keyboardJoystickHandler+0xd6>
			{
				state_x[name] = JBSTATE_LEFT;
    35e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    35e8:	88 2f       	mov	r24, r24
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	8e 5b       	subi	r24, 0xBE	; 190
    35ee:	98 4d       	sbci	r25, 0xD8	; 216
    35f0:	22 e0       	ldi	r18, 0x02	; 2
    35f2:	fc 01       	movw	r30, r24
    35f4:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_LEFT, BUTTON_PRESSED);
    35f6:	8b 81       	ldd	r24, Y+3	; 0x03
    35f8:	8e 5f       	subi	r24, 0xFE	; 254
    35fa:	61 e0       	ldi	r22, 0x01	; 1
    35fc:	ae d0       	rcall	.+348    	; 0x375a <ChangeButtonPressState>
			else if( out.x>0 )
			{
				state_x[name] = JBSTATE_RIGHT;
				ChangeButtonPressState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
			}
			break;
    35fe:	3e c0       	rjmp	.+124    	; 0x367c <keyboardJoystickHandler+0x152>
			{
				state_x[name] = JBSTATE_LEFT;
				ChangeButtonPressState(joystick_button_base + JBSTATE_LEFT, BUTTON_PRESSED);
			}
			// Do we need to enter the right state?
			else if( out.x>0 )
    3600:	8a 85       	ldd	r24, Y+10	; 0x0a
    3602:	9b 85       	ldd	r25, Y+11	; 0x0b
    3604:	18 16       	cp	r1, r24
    3606:	19 06       	cpc	r1, r25
    3608:	cc f5       	brge	.+114    	; 0x367c <keyboardJoystickHandler+0x152>
			{
				state_x[name] = JBSTATE_RIGHT;
    360a:	8e 85       	ldd	r24, Y+14	; 0x0e
    360c:	88 2f       	mov	r24, r24
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	8e 5b       	subi	r24, 0xBE	; 190
    3612:	98 4d       	sbci	r25, 0xD8	; 216
    3614:	23 e0       	ldi	r18, 0x03	; 3
    3616:	fc 01       	movw	r30, r24
    3618:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
    361a:	8b 81       	ldd	r24, Y+3	; 0x03
    361c:	8d 5f       	subi	r24, 0xFD	; 253
    361e:	61 e0       	ldi	r22, 0x01	; 1
    3620:	9c d0       	rcall	.+312    	; 0x375a <ChangeButtonPressState>
			}
			break;
    3622:	2c c0       	rjmp	.+88     	; 0x367c <keyboardJoystickHandler+0x152>
			case JBSTATE_LEFT:
			// Do we need to leave the left state?
			if( out.x>=0 )
    3624:	8a 85       	ldd	r24, Y+10	; 0x0a
    3626:	9b 85       	ldd	r25, Y+11	; 0x0b
    3628:	99 23       	and	r25, r25
    362a:	54 f1       	brlt	.+84     	; 0x3680 <keyboardJoystickHandler+0x156>
			{
				state_x[name] = JBSTATE_IDLE;
    362c:	8e 85       	ldd	r24, Y+14	; 0x0e
    362e:	88 2f       	mov	r24, r24
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	8e 5b       	subi	r24, 0xBE	; 190
    3634:	98 4d       	sbci	r25, 0xD8	; 216
    3636:	24 e0       	ldi	r18, 0x04	; 4
    3638:	fc 01       	movw	r30, r24
    363a:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_LEFT, BUTTON_RELEASED);
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	8e 5f       	subi	r24, 0xFE	; 254
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	8b d0       	rcall	.+278    	; 0x375a <ChangeButtonPressState>
			}
			break;
    3644:	1d c0       	rjmp	.+58     	; 0x3680 <keyboardJoystickHandler+0x156>
			case JBSTATE_RIGHT:
			// Do we need to leave the right state?
			if( out.x<=0 )
    3646:	8a 85       	ldd	r24, Y+10	; 0x0a
    3648:	9b 85       	ldd	r25, Y+11	; 0x0b
    364a:	18 16       	cp	r1, r24
    364c:	19 06       	cpc	r1, r25
    364e:	d4 f0       	brlt	.+52     	; 0x3684 <keyboardJoystickHandler+0x15a>
			{
				state_x[name] = JBSTATE_IDLE;
    3650:	8e 85       	ldd	r24, Y+14	; 0x0e
    3652:	88 2f       	mov	r24, r24
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	8e 5b       	subi	r24, 0xBE	; 190
    3658:	98 4d       	sbci	r25, 0xD8	; 216
    365a:	24 e0       	ldi	r18, 0x04	; 4
    365c:	fc 01       	movw	r30, r24
    365e:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_RIGHT, BUTTON_RELEASED);
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	8d 5f       	subi	r24, 0xFD	; 253
    3664:	60 e0       	ldi	r22, 0x00	; 0
    3666:	79 d0       	rcall	.+242    	; 0x375a <ChangeButtonPressState>
			}
			break;
    3668:	0d c0       	rjmp	.+26     	; 0x3684 <keyboardJoystickHandler+0x15a>
			default:
			state_x[name] = JBSTATE_IDLE;
    366a:	8e 85       	ldd	r24, Y+14	; 0x0e
    366c:	88 2f       	mov	r24, r24
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	8e 5b       	subi	r24, 0xBE	; 190
    3672:	98 4d       	sbci	r25, 0xD8	; 216
    3674:	24 e0       	ldi	r18, 0x04	; 4
    3676:	fc 01       	movw	r30, r24
    3678:	20 83       	st	Z, r18
			break;
    367a:	05 c0       	rjmp	.+10     	; 0x3686 <keyboardJoystickHandler+0x15c>
			else if( out.x>0 )
			{
				state_x[name] = JBSTATE_RIGHT;
				ChangeButtonPressState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
			}
			break;
    367c:	00 00       	nop
    367e:	03 c0       	rjmp	.+6      	; 0x3686 <keyboardJoystickHandler+0x15c>
			if( out.x>=0 )
			{
				state_x[name] = JBSTATE_IDLE;
				ChangeButtonPressState(joystick_button_base + JBSTATE_LEFT, BUTTON_RELEASED);
			}
			break;
    3680:	00 00       	nop
    3682:	01 c0       	rjmp	.+2      	; 0x3686 <keyboardJoystickHandler+0x15c>
			if( out.x<=0 )
			{
				state_x[name] = JBSTATE_IDLE;
				ChangeButtonPressState(joystick_button_base + JBSTATE_RIGHT, BUTTON_RELEASED);
			}
			break;
    3684:	00 00       	nop
			state_x[name] = JBSTATE_IDLE;
			break;
		};

		// Check the Y axis:
		switch (state_y[name]) {
    3686:	8e 85       	ldd	r24, Y+14	; 0x0e
    3688:	88 2f       	mov	r24, r24
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	8c 5b       	subi	r24, 0xBC	; 188
    368e:	98 4d       	sbci	r25, 0xD8	; 216
    3690:	fc 01       	movw	r30, r24
    3692:	80 81       	ld	r24, Z
    3694:	88 2f       	mov	r24, r24
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	81 30       	cpi	r24, 0x01	; 1
    369a:	91 05       	cpc	r25, r1
    369c:	b9 f1       	breq	.+110    	; 0x370c <keyboardJoystickHandler+0x1e2>
    369e:	84 30       	cpi	r24, 0x04	; 4
    36a0:	91 05       	cpc	r25, r1
    36a2:	19 f0       	breq	.+6      	; 0x36aa <keyboardJoystickHandler+0x180>
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	11 f1       	breq	.+68     	; 0x36ec <keyboardJoystickHandler+0x1c2>
    36a8:	43 c0       	rjmp	.+134    	; 0x3730 <keyboardJoystickHandler+0x206>
			case JBSTATE_IDLE:
			// Do we need to enter the up state?
			if( out.y<0 )
    36aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    36ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    36ae:	99 23       	and	r25, r25
    36b0:	5c f4       	brge	.+22     	; 0x36c8 <keyboardJoystickHandler+0x19e>
			{
				state_y[name] = JBSTATE_UP;
    36b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    36b4:	88 2f       	mov	r24, r24
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	8c 5b       	subi	r24, 0xBC	; 188
    36ba:	98 4d       	sbci	r25, 0xD8	; 216
    36bc:	fc 01       	movw	r30, r24
    36be:	10 82       	st	Z, r1
				ChangeButtonPressState(joystick_button_base + JBSTATE_UP, BUTTON_PRESSED);
    36c0:	61 e0       	ldi	r22, 0x01	; 1
    36c2:	8b 81       	ldd	r24, Y+3	; 0x03
    36c4:	4a d0       	rcall	.+148    	; 0x375a <ChangeButtonPressState>
			else if( out.y>0 )
			{
				state_y[name] = JBSTATE_DOWN;
				ChangeButtonPressState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
			}
			break;
    36c6:	3e c0       	rjmp	.+124    	; 0x3744 <keyboardJoystickHandler+0x21a>
			{
				state_y[name] = JBSTATE_UP;
				ChangeButtonPressState(joystick_button_base + JBSTATE_UP, BUTTON_PRESSED);
			}
			// Do we need to enter the down state?
			else if( out.y>0 )
    36c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    36ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    36cc:	18 16       	cp	r1, r24
    36ce:	19 06       	cpc	r1, r25
    36d0:	cc f5       	brge	.+114    	; 0x3744 <keyboardJoystickHandler+0x21a>
			{
				state_y[name] = JBSTATE_DOWN;
    36d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    36d4:	88 2f       	mov	r24, r24
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	8c 5b       	subi	r24, 0xBC	; 188
    36da:	98 4d       	sbci	r25, 0xD8	; 216
    36dc:	21 e0       	ldi	r18, 0x01	; 1
    36de:	fc 01       	movw	r30, r24
    36e0:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
    36e2:	8b 81       	ldd	r24, Y+3	; 0x03
    36e4:	8f 5f       	subi	r24, 0xFF	; 255
    36e6:	61 e0       	ldi	r22, 0x01	; 1
    36e8:	38 d0       	rcall	.+112    	; 0x375a <ChangeButtonPressState>
			}
			break;
    36ea:	2c c0       	rjmp	.+88     	; 0x3744 <keyboardJoystickHandler+0x21a>
			case JBSTATE_UP:
			// Do we need to leave the up state?
			if( out.y>=0 )
    36ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    36ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    36f0:	99 23       	and	r25, r25
    36f2:	54 f1       	brlt	.+84     	; 0x3748 <keyboardJoystickHandler+0x21e>
			{
				state_y[name] = JBSTATE_IDLE;
    36f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    36f6:	88 2f       	mov	r24, r24
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	8c 5b       	subi	r24, 0xBC	; 188
    36fc:	98 4d       	sbci	r25, 0xD8	; 216
    36fe:	24 e0       	ldi	r18, 0x04	; 4
    3700:	fc 01       	movw	r30, r24
    3702:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_UP, BUTTON_RELEASED);
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	8b 81       	ldd	r24, Y+3	; 0x03
    3708:	28 d0       	rcall	.+80     	; 0x375a <ChangeButtonPressState>
			}
			break;
    370a:	1e c0       	rjmp	.+60     	; 0x3748 <keyboardJoystickHandler+0x21e>
			case JBSTATE_DOWN:
			// Do we need to leave the down state?
			if( out.y<=0 )
    370c:	8c 85       	ldd	r24, Y+12	; 0x0c
    370e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3710:	18 16       	cp	r1, r24
    3712:	19 06       	cpc	r1, r25
    3714:	dc f0       	brlt	.+54     	; 0x374c <keyboardJoystickHandler+0x222>
			{
				state_y[name] = JBSTATE_IDLE;
    3716:	8e 85       	ldd	r24, Y+14	; 0x0e
    3718:	88 2f       	mov	r24, r24
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	8c 5b       	subi	r24, 0xBC	; 188
    371e:	98 4d       	sbci	r25, 0xD8	; 216
    3720:	24 e0       	ldi	r18, 0x04	; 4
    3722:	fc 01       	movw	r30, r24
    3724:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_DOWN, BUTTON_RELEASED);
    3726:	8b 81       	ldd	r24, Y+3	; 0x03
    3728:	8f 5f       	subi	r24, 0xFF	; 255
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	16 d0       	rcall	.+44     	; 0x375a <ChangeButtonPressState>
			}
			break;
    372e:	0e c0       	rjmp	.+28     	; 0x374c <keyboardJoystickHandler+0x222>
			default:
			state_y[name] = JBSTATE_IDLE;
    3730:	8e 85       	ldd	r24, Y+14	; 0x0e
    3732:	88 2f       	mov	r24, r24
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	8c 5b       	subi	r24, 0xBC	; 188
    3738:	98 4d       	sbci	r25, 0xD8	; 216
    373a:	24 e0       	ldi	r18, 0x04	; 4
    373c:	fc 01       	movw	r30, r24
    373e:	20 83       	st	Z, r18
			break;
    3740:	00 00       	nop
    3742:	05 c0       	rjmp	.+10     	; 0x374e <keyboardJoystickHandler+0x224>
			else if( out.y>0 )
			{
				state_y[name] = JBSTATE_DOWN;
				ChangeButtonPressState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
			}
			break;
    3744:	00 00       	nop
    3746:	03 c0       	rjmp	.+6      	; 0x374e <keyboardJoystickHandler+0x224>
			if( out.y>=0 )
			{
				state_y[name] = JBSTATE_IDLE;
				ChangeButtonPressState(joystick_button_base + JBSTATE_UP, BUTTON_RELEASED);
			}
			break;
    3748:	00 00       	nop
    374a:	01 c0       	rjmp	.+2      	; 0x374e <keyboardJoystickHandler+0x224>
			if( out.y<=0 )
			{
				state_y[name] = JBSTATE_IDLE;
				ChangeButtonPressState(joystick_button_base + JBSTATE_DOWN, BUTTON_RELEASED);
			}
			break;
    374c:	00 00       	nop
			default:
			state_y[name] = JBSTATE_IDLE;
			break;
		};	
}
    374e:	62 96       	adiw	r28, 0x12	; 18
    3750:	cd bf       	out	0x3d, r28	; 61
    3752:	de bf       	out	0x3e, r29	; 62
    3754:	df 91       	pop	r29
    3756:	cf 91       	pop	r28
    3758:	08 95       	ret

0000375a <ChangeButtonPressState>:

void ChangeButtonPressState(uint8_t name, enum ButtonState state) {
    375a:	ef 92       	push	r14
    375c:	ff 92       	push	r15
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	2f 97       	sbiw	r28, 0x0f	; 15
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	de bf       	out	0x3e, r29	; 62
    3770:	8e 87       	std	Y+14, r24	; 0x0e
    3772:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t scan_codes[MAX_SCANCODES];
	uint8_t modifiers = 0;
    3774:	19 82       	std	Y+1, r1	; 0x01
	uint8_t count;
	struct ButtonConfiguration *this_button;
	struct HIDReport *this_joystick_button;
	uint8_t i;
	
	if (state == BUTTON_PRESSED) {
    3776:	8f 85       	ldd	r24, Y+15	; 0x0f
    3778:	81 30       	cpi	r24, 0x01	; 1
    377a:	31 f5       	brne	.+76     	; 0x37c8 <ChangeButtonPressState+0x6e>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    377c:	8e 85       	ldd	r24, Y+14	; 0x0e
    377e:	28 2f       	mov	r18, r24
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	a0 e0       	ldi	r26, 0x00	; 0
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	7c 01       	movw	r14, r24
    378c:	8d 01       	movw	r16, r26
    378e:	04 c0       	rjmp	.+8      	; 0x3798 <ChangeButtonPressState+0x3e>
    3790:	ee 0c       	add	r14, r14
    3792:	ff 1c       	adc	r15, r15
    3794:	00 1f       	adc	r16, r16
    3796:	11 1f       	adc	r17, r17
    3798:	2a 95       	dec	r18
    379a:	d2 f7       	brpl	.-12     	; 0x3790 <ChangeButtonPressState+0x36>
    379c:	a8 01       	movw	r20, r16
    379e:	97 01       	movw	r18, r14
    37a0:	80 91 3e 27 	lds	r24, 0x273E
    37a4:	90 91 3f 27 	lds	r25, 0x273F
    37a8:	a0 91 40 27 	lds	r26, 0x2740
    37ac:	b0 91 41 27 	lds	r27, 0x2741
    37b0:	82 2b       	or	r24, r18
    37b2:	93 2b       	or	r25, r19
    37b4:	a4 2b       	or	r26, r20
    37b6:	b5 2b       	or	r27, r21
    37b8:	80 93 3e 27 	sts	0x273E, r24
    37bc:	90 93 3f 27 	sts	0x273F, r25
    37c0:	a0 93 40 27 	sts	0x2740, r26
    37c4:	b0 93 41 27 	sts	0x2741, r27
	}

	if (state == BUTTON_RELEASED) {
    37c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ca:	88 23       	and	r24, r24
    37cc:	41 f5       	brne	.+80     	; 0x381e <ChangeButtonPressState+0xc4>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    37ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    37d0:	28 2f       	mov	r18, r24
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	a0 e0       	ldi	r26, 0x00	; 0
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	04 c0       	rjmp	.+8      	; 0x37e6 <ChangeButtonPressState+0x8c>
    37de:	88 0f       	add	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	aa 1f       	adc	r26, r26
    37e4:	bb 1f       	adc	r27, r27
    37e6:	2a 95       	dec	r18
    37e8:	d2 f7       	brpl	.-12     	; 0x37de <ChangeButtonPressState+0x84>
    37ea:	9c 01       	movw	r18, r24
    37ec:	ad 01       	movw	r20, r26
    37ee:	20 95       	com	r18
    37f0:	30 95       	com	r19
    37f2:	40 95       	com	r20
    37f4:	50 95       	com	r21
    37f6:	80 91 3e 27 	lds	r24, 0x273E
    37fa:	90 91 3f 27 	lds	r25, 0x273F
    37fe:	a0 91 40 27 	lds	r26, 0x2740
    3802:	b0 91 41 27 	lds	r27, 0x2741
    3806:	82 23       	and	r24, r18
    3808:	93 23       	and	r25, r19
    380a:	a4 23       	and	r26, r20
    380c:	b5 23       	and	r27, r21
    380e:	80 93 3e 27 	sts	0x273E, r24
    3812:	90 93 3f 27 	sts	0x273F, r25
    3816:	a0 93 40 27 	sts	0x2740, r26
    381a:	b0 93 41 27 	sts	0x2741, r27
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
    381e:	1d 82       	std	Y+5, r1	; 0x05
    3820:	1a 82       	std	Y+2, r1	; 0x02
    3822:	69 c0       	rjmp	.+210    	; 0x38f6 <ChangeButtonPressState+0x19c>
		// Is this button pressed?
		if (pressed_buttons & (1ul<<i)) {
    3824:	80 91 3e 27 	lds	r24, 0x273E
    3828:	90 91 3f 27 	lds	r25, 0x273F
    382c:	a0 91 40 27 	lds	r26, 0x2740
    3830:	b0 91 41 27 	lds	r27, 0x2741
    3834:	2d 81       	ldd	r18, Y+5	; 0x05
    3836:	22 2f       	mov	r18, r18
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	02 2e       	mov	r0, r18
    383c:	04 c0       	rjmp	.+8      	; 0x3846 <ChangeButtonPressState+0xec>
    383e:	b6 95       	lsr	r27
    3840:	a7 95       	ror	r26
    3842:	97 95       	ror	r25
    3844:	87 95       	ror	r24
    3846:	0a 94       	dec	r0
    3848:	d2 f7       	brpl	.-12     	; 0x383e <ChangeButtonPressState+0xe4>
    384a:	81 70       	andi	r24, 0x01	; 1
    384c:	99 27       	eor	r25, r25
    384e:	aa 27       	eor	r26, r26
    3850:	bb 27       	eor	r27, r27
    3852:	00 97       	sbiw	r24, 0x00	; 0
    3854:	a1 05       	cpc	r26, r1
    3856:	b1 05       	cpc	r27, r1
    3858:	09 f4       	brne	.+2      	; 0x385c <ChangeButtonPressState+0x102>
    385a:	4a c0       	rjmp	.+148    	; 0x38f0 <ChangeButtonPressState+0x196>
			// Get information about this button:
			this_button = &(my_cc->button_configs[i]);
    385c:	40 91 3c 27 	lds	r20, 0x273C
    3860:	50 91 3d 27 	lds	r21, 0x273D
    3864:	8d 81       	ldd	r24, Y+5	; 0x05
    3866:	28 2f       	mov	r18, r24
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	c9 01       	movw	r24, r18
    386c:	88 0f       	add	r24, r24
    386e:	99 1f       	adc	r25, r25
    3870:	88 0f       	add	r24, r24
    3872:	99 1f       	adc	r25, r25
    3874:	88 0f       	add	r24, r24
    3876:	99 1f       	adc	r25, r25
    3878:	82 0f       	add	r24, r18
    387a:	93 1f       	adc	r25, r19
    387c:	01 96       	adiw	r24, 0x01	; 1
    387e:	84 0f       	add	r24, r20
    3880:	95 1f       	adc	r25, r21
    3882:	8e 83       	std	Y+6, r24	; 0x06
    3884:	9f 83       	std	Y+7, r25	; 0x07
			
			// Is it a keyboard button?
			if (this_button->keyboard_and_mouse.input_type == INPUT_TYPE_KEYBOARD) {
    3886:	8e 81       	ldd	r24, Y+6	; 0x06
    3888:	9f 81       	ldd	r25, Y+7	; 0x07
    388a:	fc 01       	movw	r30, r24
    388c:	81 81       	ldd	r24, Z+1	; 0x01
    388e:	88 70       	andi	r24, 0x08	; 8
    3890:	88 23       	and	r24, r24
    3892:	71 f5       	brne	.+92     	; 0x38f0 <ChangeButtonPressState+0x196>
				// Does this button have a scancode associated with it?
				if (this_button->button_down.scan_code != 0) {
    3894:	8e 81       	ldd	r24, Y+6	; 0x06
    3896:	9f 81       	ldd	r25, Y+7	; 0x07
    3898:	fc 01       	movw	r30, r24
    389a:	85 81       	ldd	r24, Z+5	; 0x05
    389c:	88 23       	and	r24, r24
    389e:	09 f1       	breq	.+66     	; 0x38e2 <ChangeButtonPressState+0x188>
					// Is this a new scancode for the list?
					if (memchr(&scan_codes, this_button->button_down.scan_code, count) == NULL) {
    38a0:	8a 81       	ldd	r24, Y+2	; 0x02
    38a2:	48 2f       	mov	r20, r24
    38a4:	50 e0       	ldi	r21, 0x00	; 0
    38a6:	8e 81       	ldd	r24, Y+6	; 0x06
    38a8:	9f 81       	ldd	r25, Y+7	; 0x07
    38aa:	fc 01       	movw	r30, r24
    38ac:	85 81       	ldd	r24, Z+5	; 0x05
    38ae:	28 2f       	mov	r18, r24
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	ce 01       	movw	r24, r28
    38b4:	08 96       	adiw	r24, 0x08	; 8
    38b6:	b9 01       	movw	r22, r18
    38b8:	0e 94 69 49 	call	0x92d2	; 0x92d2 <memchr>
    38bc:	00 97       	sbiw	r24, 0x00	; 0
    38be:	89 f4       	brne	.+34     	; 0x38e2 <ChangeButtonPressState+0x188>
						// Then add it to the hid report:
						scan_codes[count] = this_button->button_down.scan_code;
    38c0:	8a 81       	ldd	r24, Y+2	; 0x02
    38c2:	88 2f       	mov	r24, r24
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	2e 81       	ldd	r18, Y+6	; 0x06
    38c8:	3f 81       	ldd	r19, Y+7	; 0x07
    38ca:	f9 01       	movw	r30, r18
    38cc:	45 81       	ldd	r20, Z+5	; 0x05
    38ce:	9e 01       	movw	r18, r28
    38d0:	28 5f       	subi	r18, 0xF8	; 248
    38d2:	3f 4f       	sbci	r19, 0xFF	; 255
    38d4:	82 0f       	add	r24, r18
    38d6:	93 1f       	adc	r25, r19
    38d8:	fc 01       	movw	r30, r24
    38da:	40 83       	st	Z, r20
						
						// Increment the count:
						count++;
    38dc:	8a 81       	ldd	r24, Y+2	; 0x02
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	8a 83       	std	Y+2, r24	; 0x02
					}
				}
				
				// OR any modifiers for this button:
				modifiers |= this_button->button_down.modifier;
    38e2:	8e 81       	ldd	r24, Y+6	; 0x06
    38e4:	9f 81       	ldd	r25, Y+7	; 0x07
    38e6:	fc 01       	movw	r30, r24
    38e8:	84 81       	ldd	r24, Z+4	; 0x04
    38ea:	99 81       	ldd	r25, Y+1	; 0x01
    38ec:	89 2b       	or	r24, r25
    38ee:	89 83       	std	Y+1, r24	; 0x01
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
    38f0:	8d 81       	ldd	r24, Y+5	; 0x05
    38f2:	8f 5f       	subi	r24, 0xFF	; 255
    38f4:	8d 83       	std	Y+5, r24	; 0x05
    38f6:	8d 81       	ldd	r24, Y+5	; 0x05
    38f8:	80 31       	cpi	r24, 0x10	; 16
    38fa:	20 f4       	brcc	.+8      	; 0x3904 <ChangeButtonPressState+0x1aa>
    38fc:	8a 81       	ldd	r24, Y+2	; 0x02
    38fe:	86 30       	cpi	r24, 0x06	; 6
    3900:	08 f4       	brcc	.+2      	; 0x3904 <ChangeButtonPressState+0x1aa>
    3902:	90 cf       	rjmp	.-224    	; 0x3824 <ChangeButtonPressState+0xca>
			}
		}
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
    3904:	80 e1       	ldi	r24, 0x10	; 16
    3906:	8d 83       	std	Y+5, r24	; 0x05
    3908:	b7 c0       	rjmp	.+366    	; 0x3a78 <ChangeButtonPressState+0x31e>
		// Is this joystick direction pressed?
		if (pressed_buttons & (1ul<<i)) {
    390a:	80 91 3e 27 	lds	r24, 0x273E
    390e:	90 91 3f 27 	lds	r25, 0x273F
    3912:	a0 91 40 27 	lds	r26, 0x2740
    3916:	b0 91 41 27 	lds	r27, 0x2741
    391a:	2d 81       	ldd	r18, Y+5	; 0x05
    391c:	22 2f       	mov	r18, r18
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	02 2e       	mov	r0, r18
    3922:	04 c0       	rjmp	.+8      	; 0x392c <ChangeButtonPressState+0x1d2>
    3924:	b6 95       	lsr	r27
    3926:	a7 95       	ror	r26
    3928:	97 95       	ror	r25
    392a:	87 95       	ror	r24
    392c:	0a 94       	dec	r0
    392e:	d2 f7       	brpl	.-12     	; 0x3924 <ChangeButtonPressState+0x1ca>
    3930:	81 70       	andi	r24, 0x01	; 1
    3932:	99 27       	eor	r25, r25
    3934:	aa 27       	eor	r26, r26
    3936:	bb 27       	eor	r27, r27
    3938:	00 97       	sbiw	r24, 0x00	; 0
    393a:	a1 05       	cpc	r26, r1
    393c:	b1 05       	cpc	r27, r1
    393e:	09 f4       	brne	.+2      	; 0x3942 <ChangeButtonPressState+0x1e8>
    3940:	98 c0       	rjmp	.+304    	; 0x3a72 <ChangeButtonPressState+0x318>
			// Get information about this joystick direction:
			switch (i) {
    3942:	8d 81       	ldd	r24, Y+5	; 0x05
    3944:	88 2f       	mov	r24, r24
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	83 31       	cpi	r24, 0x13	; 19
    394a:	91 05       	cpc	r25, r1
    394c:	b1 f1       	breq	.+108    	; 0x39ba <ChangeButtonPressState+0x260>
    394e:	84 31       	cpi	r24, 0x14	; 20
    3950:	91 05       	cpc	r25, r1
    3952:	54 f4       	brge	.+20     	; 0x3968 <ChangeButtonPressState+0x20e>
    3954:	81 31       	cpi	r24, 0x11	; 17
    3956:	91 05       	cpc	r25, r1
    3958:	f1 f0       	breq	.+60     	; 0x3996 <ChangeButtonPressState+0x23c>
    395a:	82 31       	cpi	r24, 0x12	; 18
    395c:	91 05       	cpc	r25, r1
    395e:	24 f5       	brge	.+72     	; 0x39a8 <ChangeButtonPressState+0x24e>
    3960:	80 31       	cpi	r24, 0x10	; 16
    3962:	91 05       	cpc	r25, r1
    3964:	79 f0       	breq	.+30     	; 0x3984 <ChangeButtonPressState+0x22a>
    3966:	56 c0       	rjmp	.+172    	; 0x3a14 <ChangeButtonPressState+0x2ba>
    3968:	85 31       	cpi	r24, 0x15	; 21
    396a:	91 05       	cpc	r25, r1
    396c:	c1 f1       	breq	.+112    	; 0x39de <ChangeButtonPressState+0x284>
    396e:	85 31       	cpi	r24, 0x15	; 21
    3970:	91 05       	cpc	r25, r1
    3972:	64 f1       	brlt	.+88     	; 0x39cc <ChangeButtonPressState+0x272>
    3974:	86 31       	cpi	r24, 0x16	; 22
    3976:	91 05       	cpc	r25, r1
    3978:	d9 f1       	breq	.+118    	; 0x39f0 <ChangeButtonPressState+0x296>
    397a:	87 31       	cpi	r24, 0x17	; 23
    397c:	91 05       	cpc	r25, r1
    397e:	09 f4       	brne	.+2      	; 0x3982 <ChangeButtonPressState+0x228>
    3980:	40 c0       	rjmp	.+128    	; 0x3a02 <ChangeButtonPressState+0x2a8>
    3982:	48 c0       	rjmp	.+144    	; 0x3a14 <ChangeButtonPressState+0x2ba>
				case B_JOYSTICK_LEFT_UP:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_up);
    3984:	80 91 3c 27 	lds	r24, 0x273C
    3988:	90 91 3d 27 	lds	r25, 0x273D
    398c:	8d 56       	subi	r24, 0x6D	; 109
    398e:	9f 4f       	sbci	r25, 0xFF	; 255
    3990:	8b 83       	std	Y+3, r24	; 0x03
    3992:	9c 83       	std	Y+4, r25	; 0x04
				break;
    3994:	40 c0       	rjmp	.+128    	; 0x3a16 <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_LEFT_DOWN:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_down);
    3996:	80 91 3c 27 	lds	r24, 0x273C
    399a:	90 91 3d 27 	lds	r25, 0x273D
    399e:	8b 56       	subi	r24, 0x6B	; 107
    39a0:	9f 4f       	sbci	r25, 0xFF	; 255
    39a2:	8b 83       	std	Y+3, r24	; 0x03
    39a4:	9c 83       	std	Y+4, r25	; 0x04
				break;
    39a6:	37 c0       	rjmp	.+110    	; 0x3a16 <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_LEFT_LEFT:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_left);
    39a8:	80 91 3c 27 	lds	r24, 0x273C
    39ac:	90 91 3d 27 	lds	r25, 0x273D
    39b0:	89 56       	subi	r24, 0x69	; 105
    39b2:	9f 4f       	sbci	r25, 0xFF	; 255
    39b4:	8b 83       	std	Y+3, r24	; 0x03
    39b6:	9c 83       	std	Y+4, r25	; 0x04
				break;
    39b8:	2e c0       	rjmp	.+92     	; 0x3a16 <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_LEFT_RIGHT:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_right);
    39ba:	80 91 3c 27 	lds	r24, 0x273C
    39be:	90 91 3d 27 	lds	r25, 0x273D
    39c2:	87 56       	subi	r24, 0x67	; 103
    39c4:	9f 4f       	sbci	r25, 0xFF	; 255
    39c6:	8b 83       	std	Y+3, r24	; 0x03
    39c8:	9c 83       	std	Y+4, r25	; 0x04
				break;
    39ca:	25 c0       	rjmp	.+74     	; 0x3a16 <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_RIGHT_UP:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_up);
    39cc:	80 91 3c 27 	lds	r24, 0x273C
    39d0:	90 91 3d 27 	lds	r25, 0x273D
    39d4:	87 55       	subi	r24, 0x57	; 87
    39d6:	9f 4f       	sbci	r25, 0xFF	; 255
    39d8:	8b 83       	std	Y+3, r24	; 0x03
    39da:	9c 83       	std	Y+4, r25	; 0x04
				break;
    39dc:	1c c0       	rjmp	.+56     	; 0x3a16 <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_RIGHT_DOWN:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_down);
    39de:	80 91 3c 27 	lds	r24, 0x273C
    39e2:	90 91 3d 27 	lds	r25, 0x273D
    39e6:	85 55       	subi	r24, 0x55	; 85
    39e8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ea:	8b 83       	std	Y+3, r24	; 0x03
    39ec:	9c 83       	std	Y+4, r25	; 0x04
				break;
    39ee:	13 c0       	rjmp	.+38     	; 0x3a16 <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_RIGHT_LEFT:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_left);
    39f0:	80 91 3c 27 	lds	r24, 0x273C
    39f4:	90 91 3d 27 	lds	r25, 0x273D
    39f8:	83 55       	subi	r24, 0x53	; 83
    39fa:	9f 4f       	sbci	r25, 0xFF	; 255
    39fc:	8b 83       	std	Y+3, r24	; 0x03
    39fe:	9c 83       	std	Y+4, r25	; 0x04
				break;
    3a00:	0a c0       	rjmp	.+20     	; 0x3a16 <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_RIGHT_RIGHT:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_right);
    3a02:	80 91 3c 27 	lds	r24, 0x273C
    3a06:	90 91 3d 27 	lds	r25, 0x273D
    3a0a:	81 55       	subi	r24, 0x51	; 81
    3a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0e:	8b 83       	std	Y+3, r24	; 0x03
    3a10:	9c 83       	std	Y+4, r25	; 0x04
				break;
    3a12:	01 c0       	rjmp	.+2      	; 0x3a16 <ChangeButtonPressState+0x2bc>
				default:
				continue;
    3a14:	2e c0       	rjmp	.+92     	; 0x3a72 <ChangeButtonPressState+0x318>
			};
			
			// Is there a button press associated with this direction?
			if (this_joystick_button->scan_code != 0) {
    3a16:	8b 81       	ldd	r24, Y+3	; 0x03
    3a18:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	81 81       	ldd	r24, Z+1	; 0x01
    3a1e:	88 23       	and	r24, r24
    3a20:	09 f1       	breq	.+66     	; 0x3a64 <ChangeButtonPressState+0x30a>
				// Is this a new scancode for the list?
				if (memchr(scan_codes, this_joystick_button->scan_code, count) == NULL) {
    3a22:	8a 81       	ldd	r24, Y+2	; 0x02
    3a24:	48 2f       	mov	r20, r24
    3a26:	50 e0       	ldi	r21, 0x00	; 0
    3a28:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	81 81       	ldd	r24, Z+1	; 0x01
    3a30:	28 2f       	mov	r18, r24
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	ce 01       	movw	r24, r28
    3a36:	08 96       	adiw	r24, 0x08	; 8
    3a38:	b9 01       	movw	r22, r18
    3a3a:	0e 94 69 49 	call	0x92d2	; 0x92d2 <memchr>
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	89 f4       	brne	.+34     	; 0x3a64 <ChangeButtonPressState+0x30a>
					// Then add it to the hid report:
					scan_codes[count] = this_joystick_button->scan_code;
    3a42:	8a 81       	ldd	r24, Y+2	; 0x02
    3a44:	88 2f       	mov	r24, r24
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	2b 81       	ldd	r18, Y+3	; 0x03
    3a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a4c:	f9 01       	movw	r30, r18
    3a4e:	41 81       	ldd	r20, Z+1	; 0x01
    3a50:	9e 01       	movw	r18, r28
    3a52:	28 5f       	subi	r18, 0xF8	; 248
    3a54:	3f 4f       	sbci	r19, 0xFF	; 255
    3a56:	82 0f       	add	r24, r18
    3a58:	93 1f       	adc	r25, r19
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	40 83       	st	Z, r20
					
					// Increment the count:
					count++;
    3a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a60:	8f 5f       	subi	r24, 0xFF	; 255
    3a62:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
			
			// OR any modifiers for this button:
			modifiers |= this_joystick_button->modifier;
    3a64:	8b 81       	ldd	r24, Y+3	; 0x03
    3a66:	9c 81       	ldd	r25, Y+4	; 0x04
    3a68:	fc 01       	movw	r30, r24
    3a6a:	80 81       	ld	r24, Z
    3a6c:	99 81       	ldd	r25, Y+1	; 0x01
    3a6e:	89 2b       	or	r24, r25
    3a70:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
    3a72:	8d 81       	ldd	r24, Y+5	; 0x05
    3a74:	8f 5f       	subi	r24, 0xFF	; 255
    3a76:	8d 83       	std	Y+5, r24	; 0x05
    3a78:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7a:	88 31       	cpi	r24, 0x18	; 24
    3a7c:	20 f4       	brcc	.+8      	; 0x3a86 <ChangeButtonPressState+0x32c>
    3a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a80:	86 30       	cpi	r24, 0x06	; 6
    3a82:	08 f4       	brcc	.+2      	; 0x3a86 <ChangeButtonPressState+0x32c>
    3a84:	42 cf       	rjmp	.-380    	; 0x390a <ChangeButtonPressState+0x1b0>
	* Scancode 5
	* Scancode 6
	*/

	// Send the identifier:
	sendBTChar('\xA1');
    3a86:	81 ea       	ldi	r24, 0xA1	; 161
    3a88:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
	sendBTChar('\x01');
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
	sendBTChar('\x00');
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
	sendBTChar(modifiers);
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    3a9e:	1d 82       	std	Y+5, r1	; 0x05
    3aa0:	17 c0       	rjmp	.+46     	; 0x3ad0 <ChangeButtonPressState+0x376>
		if (i < count) {
    3aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    3aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa6:	98 17       	cp	r25, r24
    3aa8:	68 f4       	brcc	.+26     	; 0x3ac4 <ChangeButtonPressState+0x36a>
			sendBTChar(scan_codes[i]);
    3aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3aac:	88 2f       	mov	r24, r24
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	9e 01       	movw	r18, r28
    3ab2:	28 5f       	subi	r18, 0xF8	; 248
    3ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab6:	82 0f       	add	r24, r18
    3ab8:	93 1f       	adc	r25, r19
    3aba:	fc 01       	movw	r30, r24
    3abc:	80 81       	ld	r24, Z
    3abe:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
    3ac2:	03 c0       	rjmp	.+6      	; 0x3aca <ChangeButtonPressState+0x370>
		}
		// Otherwise send the no-keys-pressed event:
		else {
			// Send the no-keys-pressed event:
			sendBTChar(0);
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
	sendBTChar('\xA1');
	sendBTChar('\x01');
	sendBTChar('\x00');
	sendBTChar(modifiers);
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    3aca:	8d 81       	ldd	r24, Y+5	; 0x05
    3acc:	8f 5f       	subi	r24, 0xFF	; 255
    3ace:	8d 83       	std	Y+5, r24	; 0x05
    3ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad2:	86 30       	cpi	r24, 0x06	; 6
    3ad4:	30 f3       	brcs	.-52     	; 0x3aa2 <ChangeButtonPressState+0x348>
		else {
			// Send the no-keys-pressed event:
			sendBTChar(0);
		}
	}
    3ad6:	2f 96       	adiw	r28, 0x0f	; 15
    3ad8:	cd bf       	out	0x3d, r28	; 61
    3ada:	de bf       	out	0x3e, r29	; 62
    3adc:	df 91       	pop	r29
    3ade:	cf 91       	pop	r28
    3ae0:	1f 91       	pop	r17
    3ae2:	0f 91       	pop	r16
    3ae4:	ff 90       	pop	r15
    3ae6:	ef 90       	pop	r14
    3ae8:	08 95       	ret

00003aea <keyboardMouseInit>:
void changeButtonState(uint8_t name, enum ButtonState state);

// External reference to system time
extern uint32_t getSystemTime(void);

void keyboardMouseInit(struct ControllerConfiguration *cc) {
    3aea:	cf 93       	push	r28
    3aec:	df 93       	push	r29
    3aee:	00 d0       	rcall	.+0      	; 0x3af0 <keyboardMouseInit+0x6>
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
    3af4:	89 83       	std	Y+1, r24	; 0x01
    3af6:	9a 83       	std	Y+2, r25	; 0x02
	my_cc = cc;
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	9a 81       	ldd	r25, Y+2	; 0x02
    3afc:	80 93 46 27 	sts	0x2746, r24
    3b00:	90 93 47 27 	sts	0x2747, r25
	BluetoothComboMode();
    3b04:	0e 94 8d 41 	call	0x831a	; 0x831a <BluetoothComboMode>
	startTimeout(&mouse_timeout, MOUSE_REPORT_INTERVAL_MS);
    3b08:	44 e1       	ldi	r20, 0x14	; 20
    3b0a:	50 e0       	ldi	r21, 0x00	; 0
    3b0c:	60 e0       	ldi	r22, 0x00	; 0
    3b0e:	70 e0       	ldi	r23, 0x00	; 0
    3b10:	8d e4       	ldi	r24, 0x4D	; 77
    3b12:	97 e2       	ldi	r25, 0x27	; 39
    3b14:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
}
    3b18:	0f 90       	pop	r0
    3b1a:	0f 90       	pop	r0
    3b1c:	df 91       	pop	r29
    3b1e:	cf 91       	pop	r28
    3b20:	08 95       	ret

00003b22 <keyboadMouseButtonHandler>:

void keyboadMouseButtonHandler(enum ButtonName name, enum ButtonState state) {
    3b22:	cf 93       	push	r28
    3b24:	df 93       	push	r29
    3b26:	00 d0       	rcall	.+0      	; 0x3b28 <keyboadMouseButtonHandler+0x6>
    3b28:	cd b7       	in	r28, 0x3d	; 61
    3b2a:	de b7       	in	r29, 0x3e	; 62
    3b2c:	89 83       	std	Y+1, r24	; 0x01
    3b2e:	6a 83       	std	Y+2, r22	; 0x02
	changeButtonState((uint8_t)name, state);
    3b30:	6a 81       	ldd	r22, Y+2	; 0x02
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	de d1       	rcall	.+956    	; 0x3ef2 <changeButtonState>
}
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	08 95       	ret

00003b40 <keyboardMouseJoystickHandler>:

void keyboardMouseJoystickHandler(enum JoystickName name, uint16_t x, uint16_t y) {
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	67 97       	sbiw	r28, 0x17	; 23
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	8b 8b       	std	Y+19, r24	; 0x13
    3b50:	6c 8b       	std	Y+20, r22	; 0x14
    3b52:	7d 8b       	std	Y+21, r23	; 0x15
    3b54:	4e 8b       	std	Y+22, r20	; 0x16
    3b56:	5f 8b       	std	Y+23, r21	; 0x17
	static uint8_t last_mouse_buttons = 0;
	static enum JoystickButtonState state_x[NUM_JOYSTICKS];
	static enum JoystickButtonState state_y[NUM_JOYSTICKS];
	JoystickConfiguration *this_joystick;
	//static int8_t mouse_x = 0, mouse_y = 0;
	int16_xy mouse = {0,0};
    3b58:	1f 82       	std	Y+7, r1	; 0x07
    3b5a:	18 86       	std	Y+8, r1	; 0x08
    3b5c:	19 86       	std	Y+9, r1	; 0x09
    3b5e:	1a 86       	std	Y+10, r1	; 0x0a
	uint8_t joystick_button_base;
	//uint16_t x_center, y_center;
	uint8_t mouseTmp;
	
	uint16_xy raw = {x,y};
    3b60:	8c 89       	ldd	r24, Y+20	; 0x14
    3b62:	9d 89       	ldd	r25, Y+21	; 0x15
    3b64:	8b 87       	std	Y+11, r24	; 0x0b
    3b66:	9c 87       	std	Y+12, r25	; 0x0c
    3b68:	8e 89       	ldd	r24, Y+22	; 0x16
    3b6a:	9f 89       	ldd	r25, Y+23	; 0x17
    3b6c:	8d 87       	std	Y+13, r24	; 0x0d
    3b6e:	9e 87       	std	Y+14, r25	; 0x0e
	
	// Get information about this joystick:
	this_joystick = &(my_cc->joystick_configs[name]);
    3b70:	20 91 46 27 	lds	r18, 0x2746
    3b74:	30 91 47 27 	lds	r19, 0x2747
    3b78:	8b 89       	ldd	r24, Y+19	; 0x13
    3b7a:	48 2f       	mov	r20, r24
    3b7c:	50 e0       	ldi	r21, 0x00	; 0
    3b7e:	66 e1       	ldi	r22, 0x16	; 22
    3b80:	64 9f       	mul	r22, r20
    3b82:	c0 01       	movw	r24, r0
    3b84:	65 9f       	mul	r22, r21
    3b86:	90 0d       	add	r25, r0
    3b88:	11 24       	eor	r1, r1
    3b8a:	8f 56       	subi	r24, 0x6F	; 111
    3b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8e:	82 0f       	add	r24, r18
    3b90:	93 1f       	adc	r25, r19
    3b92:	89 83       	std	Y+1, r24	; 0x01
    3b94:	9a 83       	std	Y+2, r25	; 0x02

	// Get the base index for these joystick buttons:	
	joystick_button_base = NUM_BUTTONS + 4 * name;
    3b96:	8b 89       	ldd	r24, Y+19	; 0x13
    3b98:	88 2f       	mov	r24, r24
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	04 96       	adiw	r24, 0x04	; 4
    3b9e:	88 0f       	add	r24, r24
    3ba0:	88 0f       	add	r24, r24
    3ba2:	8b 83       	std	Y+3, r24	; 0x03

	// Find the center locations of the joysticks:
	//x_center = joysticks[name].center_x;
	//y_center = joysticks[name].center_y;
	
	if (this_joystick->config.button_type == BUTTON_TYPE_ANALOG) 
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba8:	fc 01       	movw	r30, r24
    3baa:	80 81       	ld	r24, Z
    3bac:	80 74       	andi	r24, 0x40	; 64
    3bae:	88 23       	and	r24, r24
    3bb0:	99 f5       	brne	.+102    	; 0x3c18 <keyboardMouseJoystickHandler+0xd8>
	{
		// Is this joystick analog?
		
		//TODO: add scaling (by MOUSE_RESOLUTION) in AnalogJoystickAdj - pre-working gamepad joysticks?
		MouseJoystickAdj( center[name], this_joystick, &raw, &mouse );	
    3bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    3bb4:	88 2f       	mov	r24, r24
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	88 0f       	add	r24, r24
    3bba:	99 1f       	adc	r25, r25
    3bbc:	8e 5a       	subi	r24, 0xAE	; 174
    3bbe:	9f 4d       	sbci	r25, 0xDF	; 223
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	80 81       	ld	r24, Z
    3bc4:	91 81       	ldd	r25, Z+1	; 0x01
    3bc6:	9e 01       	movw	r18, r28
    3bc8:	29 5f       	subi	r18, 0xF9	; 249
    3bca:	3f 4f       	sbci	r19, 0xFF	; 255
    3bcc:	ae 01       	movw	r20, r28
    3bce:	45 5f       	subi	r20, 0xF5	; 245
    3bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd2:	69 81       	ldd	r22, Y+1	; 0x01
    3bd4:	7a 81       	ldd	r23, Y+2	; 0x02
    3bd6:	a8 d5       	rcall	.+2896   	; 0x4728 <MouseJoystickAdj>
		//#endif
		
		//mouse.x /= MOUSE_RESOLUTION;
		//mouse.y /= MOUSE_RESOLUTION;
		
        if(mouse.x)
    3bd8:	8f 81       	ldd	r24, Y+7	; 0x07
    3bda:	98 85       	ldd	r25, Y+8	; 0x08
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	59 f0       	breq	.+22     	; 0x3bf6 <keyboardMouseJoystickHandler+0xb6>
		{
			mouse.x /= MOUSE_RESOLUTION;
    3be0:	8f 81       	ldd	r24, Y+7	; 0x07
    3be2:	98 85       	ldd	r25, Y+8	; 0x08
    3be4:	2e e6       	ldi	r18, 0x6E	; 110
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	b9 01       	movw	r22, r18
    3bea:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__divmodhi4>
    3bee:	9b 01       	movw	r18, r22
    3bf0:	c9 01       	movw	r24, r18
    3bf2:	8f 83       	std	Y+7, r24	; 0x07
    3bf4:	98 87       	std	Y+8, r25	; 0x08
		}
		
		if(mouse.y)
    3bf6:	89 85       	ldd	r24, Y+9	; 0x09
    3bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bfa:	00 97       	sbiw	r24, 0x00	; 0
    3bfc:	09 f4       	brne	.+2      	; 0x3c00 <keyboardMouseJoystickHandler+0xc0>
    3bfe:	f0 c0       	rjmp	.+480    	; 0x3de0 <keyboardMouseJoystickHandler+0x2a0>
		{
			mouse.y /= MOUSE_RESOLUTION;
    3c00:	89 85       	ldd	r24, Y+9	; 0x09
    3c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c04:	2e e6       	ldi	r18, 0x6E	; 110
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	b9 01       	movw	r22, r18
    3c0a:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <__divmodhi4>
    3c0e:	9b 01       	movw	r18, r22
    3c10:	c9 01       	movw	r24, r18
    3c12:	89 87       	std	Y+9, r24	; 0x09
    3c14:	9a 87       	std	Y+10, r25	; 0x0a
    3c16:	e4 c0       	rjmp	.+456    	; 0x3de0 <keyboardMouseJoystickHandler+0x2a0>
	else 
	{
		// Otherwise it must be a digital joystick.
		
		//int16_xy deadzone = {this_joystick->x_deadzone,this_joystick->y_deadzone};
		int16_xy * deadzone = (int16_xy *) &(this_joystick->x_deadzone);
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1c:	42 96       	adiw	r24, 0x12	; 18
    3c1e:	8c 83       	std	Y+4, r24	; 0x04
    3c20:	9d 83       	std	Y+5, r25	; 0x05
		
		int16_xy out;
		SimpleJoystickAdj( center[name], deadzone, &raw, &out );
    3c22:	8b 89       	ldd	r24, Y+19	; 0x13
    3c24:	88 2f       	mov	r24, r24
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	88 0f       	add	r24, r24
    3c2a:	99 1f       	adc	r25, r25
    3c2c:	8e 5a       	subi	r24, 0xAE	; 174
    3c2e:	9f 4d       	sbci	r25, 0xDF	; 223
    3c30:	fc 01       	movw	r30, r24
    3c32:	80 81       	ld	r24, Z
    3c34:	91 81       	ldd	r25, Z+1	; 0x01
    3c36:	9e 01       	movw	r18, r28
    3c38:	21 5f       	subi	r18, 0xF1	; 241
    3c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3c:	ae 01       	movw	r20, r28
    3c3e:	45 5f       	subi	r20, 0xF5	; 245
    3c40:	5f 4f       	sbci	r21, 0xFF	; 255
    3c42:	6c 81       	ldd	r22, Y+4	; 0x04
    3c44:	7d 81       	ldd	r23, Y+5	; 0x05
    3c46:	bf d3       	rcall	.+1918   	; 0x43c6 <SimpleJoystickAdj>
		
		// Check the X axis:
		switch (state_x[name]) {
    3c48:	8b 89       	ldd	r24, Y+19	; 0x13
    3c4a:	88 2f       	mov	r24, r24
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	8b 5a       	subi	r24, 0xAB	; 171
    3c50:	98 4d       	sbci	r25, 0xD8	; 216
    3c52:	fc 01       	movw	r30, r24
    3c54:	80 81       	ld	r24, Z
    3c56:	88 2f       	mov	r24, r24
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	83 30       	cpi	r24, 0x03	; 3
    3c5c:	91 05       	cpc	r25, r1
    3c5e:	09 f4       	brne	.+2      	; 0x3c62 <keyboardMouseJoystickHandler+0x122>
    3c60:	3b c0       	rjmp	.+118    	; 0x3cd8 <keyboardMouseJoystickHandler+0x198>
    3c62:	84 30       	cpi	r24, 0x04	; 4
    3c64:	91 05       	cpc	r25, r1
    3c66:	21 f0       	breq	.+8      	; 0x3c70 <keyboardMouseJoystickHandler+0x130>
    3c68:	82 30       	cpi	r24, 0x02	; 2
    3c6a:	91 05       	cpc	r25, r1
    3c6c:	21 f1       	breq	.+72     	; 0x3cb6 <keyboardMouseJoystickHandler+0x176>
    3c6e:	46 c0       	rjmp	.+140    	; 0x3cfc <keyboardMouseJoystickHandler+0x1bc>
			case JBSTATE_IDLE:
				// Do we need to enter the left state?
				if( out.x<0 )	
    3c70:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c72:	98 89       	ldd	r25, Y+16	; 0x10
    3c74:	99 23       	and	r25, r25
    3c76:	6c f4       	brge	.+26     	; 0x3c92 <keyboardMouseJoystickHandler+0x152>
				{
					state_x[name] = JBSTATE_LEFT;
    3c78:	8b 89       	ldd	r24, Y+19	; 0x13
    3c7a:	88 2f       	mov	r24, r24
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	8b 5a       	subi	r24, 0xAB	; 171
    3c80:	98 4d       	sbci	r25, 0xD8	; 216
    3c82:	22 e0       	ldi	r18, 0x02	; 2
    3c84:	fc 01       	movw	r30, r24
    3c86:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_LEFT, BUTTON_PRESSED);
    3c88:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8a:	8e 5f       	subi	r24, 0xFE	; 254
    3c8c:	61 e0       	ldi	r22, 0x01	; 1
    3c8e:	31 d1       	rcall	.+610    	; 0x3ef2 <changeButtonState>
				else if( out.x>0 )
				{
					state_x[name] = JBSTATE_RIGHT;
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
				}
				break;
    3c90:	3e c0       	rjmp	.+124    	; 0x3d0e <keyboardMouseJoystickHandler+0x1ce>
				{
					state_x[name] = JBSTATE_LEFT;
					changeButtonState(joystick_button_base + JBSTATE_LEFT, BUTTON_PRESSED);
				}
				// Do we need to enter the right state?
				else if( out.x>0 )
    3c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c94:	98 89       	ldd	r25, Y+16	; 0x10
    3c96:	18 16       	cp	r1, r24
    3c98:	19 06       	cpc	r1, r25
    3c9a:	cc f5       	brge	.+114    	; 0x3d0e <keyboardMouseJoystickHandler+0x1ce>
				{
					state_x[name] = JBSTATE_RIGHT;
    3c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c9e:	88 2f       	mov	r24, r24
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	8b 5a       	subi	r24, 0xAB	; 171
    3ca4:	98 4d       	sbci	r25, 0xD8	; 216
    3ca6:	23 e0       	ldi	r18, 0x03	; 3
    3ca8:	fc 01       	movw	r30, r24
    3caa:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	8d 5f       	subi	r24, 0xFD	; 253
    3cb0:	61 e0       	ldi	r22, 0x01	; 1
    3cb2:	1f d1       	rcall	.+574    	; 0x3ef2 <changeButtonState>
				}
				break;
    3cb4:	2c c0       	rjmp	.+88     	; 0x3d0e <keyboardMouseJoystickHandler+0x1ce>
			case JBSTATE_LEFT:
				// Do we need to leave the left state?
				//if (x > this_joystick->x_min) {
				if( out.x>=0 )
    3cb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cb8:	98 89       	ldd	r25, Y+16	; 0x10
    3cba:	99 23       	and	r25, r25
    3cbc:	54 f1       	brlt	.+84     	; 0x3d12 <keyboardMouseJoystickHandler+0x1d2>
				{
					state_x[name] = JBSTATE_IDLE;
    3cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc0:	88 2f       	mov	r24, r24
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	8b 5a       	subi	r24, 0xAB	; 171
    3cc6:	98 4d       	sbci	r25, 0xD8	; 216
    3cc8:	24 e0       	ldi	r18, 0x04	; 4
    3cca:	fc 01       	movw	r30, r24
    3ccc:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_LEFT, BUTTON_RELEASED);
    3cce:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd0:	8e 5f       	subi	r24, 0xFE	; 254
    3cd2:	60 e0       	ldi	r22, 0x00	; 0
    3cd4:	0e d1       	rcall	.+540    	; 0x3ef2 <changeButtonState>
				}
				break;
    3cd6:	1d c0       	rjmp	.+58     	; 0x3d12 <keyboardMouseJoystickHandler+0x1d2>
			case JBSTATE_RIGHT:
				// Do we need to leave the right state?
				if( out.x<=0 )
    3cd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cda:	98 89       	ldd	r25, Y+16	; 0x10
    3cdc:	18 16       	cp	r1, r24
    3cde:	19 06       	cpc	r1, r25
    3ce0:	d4 f0       	brlt	.+52     	; 0x3d16 <keyboardMouseJoystickHandler+0x1d6>
				{
					state_x[name] = JBSTATE_IDLE;
    3ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce4:	88 2f       	mov	r24, r24
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	8b 5a       	subi	r24, 0xAB	; 171
    3cea:	98 4d       	sbci	r25, 0xD8	; 216
    3cec:	24 e0       	ldi	r18, 0x04	; 4
    3cee:	fc 01       	movw	r30, r24
    3cf0:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_RELEASED);
    3cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf4:	8d 5f       	subi	r24, 0xFD	; 253
    3cf6:	60 e0       	ldi	r22, 0x00	; 0
    3cf8:	fc d0       	rcall	.+504    	; 0x3ef2 <changeButtonState>
				}
				break;
    3cfa:	0d c0       	rjmp	.+26     	; 0x3d16 <keyboardMouseJoystickHandler+0x1d6>
			default:
				state_x[name] = JBSTATE_IDLE;
    3cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    3cfe:	88 2f       	mov	r24, r24
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	8b 5a       	subi	r24, 0xAB	; 171
    3d04:	98 4d       	sbci	r25, 0xD8	; 216
    3d06:	24 e0       	ldi	r18, 0x04	; 4
    3d08:	fc 01       	movw	r30, r24
    3d0a:	20 83       	st	Z, r18
				break;
    3d0c:	05 c0       	rjmp	.+10     	; 0x3d18 <keyboardMouseJoystickHandler+0x1d8>
				else if( out.x>0 )
				{
					state_x[name] = JBSTATE_RIGHT;
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
				}
				break;
    3d0e:	00 00       	nop
    3d10:	03 c0       	rjmp	.+6      	; 0x3d18 <keyboardMouseJoystickHandler+0x1d8>
				if( out.x>=0 )
				{
					state_x[name] = JBSTATE_IDLE;
					changeButtonState(joystick_button_base + JBSTATE_LEFT, BUTTON_RELEASED);
				}
				break;
    3d12:	00 00       	nop
    3d14:	01 c0       	rjmp	.+2      	; 0x3d18 <keyboardMouseJoystickHandler+0x1d8>
				if( out.x<=0 )
				{
					state_x[name] = JBSTATE_IDLE;
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_RELEASED);
				}
				break;
    3d16:	00 00       	nop
				state_x[name] = JBSTATE_IDLE;
				break;
		};

		// Check the Y axis:
		switch (state_y[name]) {
    3d18:	8b 89       	ldd	r24, Y+19	; 0x13
    3d1a:	88 2f       	mov	r24, r24
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	89 5a       	subi	r24, 0xA9	; 169
    3d20:	98 4d       	sbci	r25, 0xD8	; 216
    3d22:	fc 01       	movw	r30, r24
    3d24:	80 81       	ld	r24, Z
    3d26:	88 2f       	mov	r24, r24
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	81 30       	cpi	r24, 0x01	; 1
    3d2c:	91 05       	cpc	r25, r1
    3d2e:	b9 f1       	breq	.+110    	; 0x3d9e <keyboardMouseJoystickHandler+0x25e>
    3d30:	84 30       	cpi	r24, 0x04	; 4
    3d32:	91 05       	cpc	r25, r1
    3d34:	19 f0       	breq	.+6      	; 0x3d3c <keyboardMouseJoystickHandler+0x1fc>
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	11 f1       	breq	.+68     	; 0x3d7e <keyboardMouseJoystickHandler+0x23e>
    3d3a:	43 c0       	rjmp	.+134    	; 0x3dc2 <keyboardMouseJoystickHandler+0x282>
			case JBSTATE_IDLE:
				// Do we need to enter the up state?
				if( out.y<0 )
    3d3c:	89 89       	ldd	r24, Y+17	; 0x11
    3d3e:	9a 89       	ldd	r25, Y+18	; 0x12
    3d40:	99 23       	and	r25, r25
    3d42:	5c f4       	brge	.+22     	; 0x3d5a <keyboardMouseJoystickHandler+0x21a>
				{
					state_y[name] = JBSTATE_UP;
    3d44:	8b 89       	ldd	r24, Y+19	; 0x13
    3d46:	88 2f       	mov	r24, r24
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	89 5a       	subi	r24, 0xA9	; 169
    3d4c:	98 4d       	sbci	r25, 0xD8	; 216
    3d4e:	fc 01       	movw	r30, r24
    3d50:	10 82       	st	Z, r1
					changeButtonState(joystick_button_base + JBSTATE_UP, BUTTON_PRESSED);
    3d52:	61 e0       	ldi	r22, 0x01	; 1
    3d54:	8b 81       	ldd	r24, Y+3	; 0x03
    3d56:	cd d0       	rcall	.+410    	; 0x3ef2 <changeButtonState>
				else if( out.y>0 )
				{
					state_y[name] = JBSTATE_DOWN;
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
				}
				break;
    3d58:	3e c0       	rjmp	.+124    	; 0x3dd6 <keyboardMouseJoystickHandler+0x296>
				{
					state_y[name] = JBSTATE_UP;
					changeButtonState(joystick_button_base + JBSTATE_UP, BUTTON_PRESSED);
				}
				// Do we need to enter the down state?
				else if( out.y>0 )
    3d5a:	89 89       	ldd	r24, Y+17	; 0x11
    3d5c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d5e:	18 16       	cp	r1, r24
    3d60:	19 06       	cpc	r1, r25
    3d62:	cc f5       	brge	.+114    	; 0x3dd6 <keyboardMouseJoystickHandler+0x296>
				{
					state_y[name] = JBSTATE_DOWN;
    3d64:	8b 89       	ldd	r24, Y+19	; 0x13
    3d66:	88 2f       	mov	r24, r24
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	89 5a       	subi	r24, 0xA9	; 169
    3d6c:	98 4d       	sbci	r25, 0xD8	; 216
    3d6e:	21 e0       	ldi	r18, 0x01	; 1
    3d70:	fc 01       	movw	r30, r24
    3d72:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
    3d74:	8b 81       	ldd	r24, Y+3	; 0x03
    3d76:	8f 5f       	subi	r24, 0xFF	; 255
    3d78:	61 e0       	ldi	r22, 0x01	; 1
    3d7a:	bb d0       	rcall	.+374    	; 0x3ef2 <changeButtonState>
				}
				break;
    3d7c:	2c c0       	rjmp	.+88     	; 0x3dd6 <keyboardMouseJoystickHandler+0x296>
			case JBSTATE_UP:
				// Do we need to leave the up state?
				if( out.y>=0 )
    3d7e:	89 89       	ldd	r24, Y+17	; 0x11
    3d80:	9a 89       	ldd	r25, Y+18	; 0x12
    3d82:	99 23       	and	r25, r25
    3d84:	54 f1       	brlt	.+84     	; 0x3dda <keyboardMouseJoystickHandler+0x29a>
				{
					state_y[name] = JBSTATE_IDLE;
    3d86:	8b 89       	ldd	r24, Y+19	; 0x13
    3d88:	88 2f       	mov	r24, r24
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	89 5a       	subi	r24, 0xA9	; 169
    3d8e:	98 4d       	sbci	r25, 0xD8	; 216
    3d90:	24 e0       	ldi	r18, 0x04	; 4
    3d92:	fc 01       	movw	r30, r24
    3d94:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_UP, BUTTON_RELEASED);
    3d96:	60 e0       	ldi	r22, 0x00	; 0
    3d98:	8b 81       	ldd	r24, Y+3	; 0x03
    3d9a:	ab d0       	rcall	.+342    	; 0x3ef2 <changeButtonState>
				}
				break;
    3d9c:	1e c0       	rjmp	.+60     	; 0x3dda <keyboardMouseJoystickHandler+0x29a>
			case JBSTATE_DOWN:
				// Do we need to leave the down state?
				if( out.y<=0 )
    3d9e:	89 89       	ldd	r24, Y+17	; 0x11
    3da0:	9a 89       	ldd	r25, Y+18	; 0x12
    3da2:	18 16       	cp	r1, r24
    3da4:	19 06       	cpc	r1, r25
    3da6:	dc f0       	brlt	.+54     	; 0x3dde <keyboardMouseJoystickHandler+0x29e>
				{
					state_y[name] = JBSTATE_IDLE;
    3da8:	8b 89       	ldd	r24, Y+19	; 0x13
    3daa:	88 2f       	mov	r24, r24
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	89 5a       	subi	r24, 0xA9	; 169
    3db0:	98 4d       	sbci	r25, 0xD8	; 216
    3db2:	24 e0       	ldi	r18, 0x04	; 4
    3db4:	fc 01       	movw	r30, r24
    3db6:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_RELEASED);
    3db8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dba:	8f 5f       	subi	r24, 0xFF	; 255
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	99 d0       	rcall	.+306    	; 0x3ef2 <changeButtonState>
				}
				break;
    3dc0:	0e c0       	rjmp	.+28     	; 0x3dde <keyboardMouseJoystickHandler+0x29e>
			default:
				state_y[name] = JBSTATE_IDLE;
    3dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    3dc4:	88 2f       	mov	r24, r24
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	89 5a       	subi	r24, 0xA9	; 169
    3dca:	98 4d       	sbci	r25, 0xD8	; 216
    3dcc:	24 e0       	ldi	r18, 0x04	; 4
    3dce:	fc 01       	movw	r30, r24
    3dd0:	20 83       	st	Z, r18
				break;
    3dd2:	00 00       	nop
    3dd4:	05 c0       	rjmp	.+10     	; 0x3de0 <keyboardMouseJoystickHandler+0x2a0>
				else if( out.y>0 )
				{
					state_y[name] = JBSTATE_DOWN;
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
				}
				break;
    3dd6:	00 00       	nop
    3dd8:	03 c0       	rjmp	.+6      	; 0x3de0 <keyboardMouseJoystickHandler+0x2a0>
				if( out.y>=0 )
				{
					state_y[name] = JBSTATE_IDLE;
					changeButtonState(joystick_button_base + JBSTATE_UP, BUTTON_RELEASED);
				}
				break;
    3dda:	00 00       	nop
    3ddc:	01 c0       	rjmp	.+2      	; 0x3de0 <keyboardMouseJoystickHandler+0x2a0>
				if( out.y<=0 )
				{
					state_y[name] = JBSTATE_IDLE;
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_RELEASED);
				}
				break;
    3dde:	00 00       	nop
				break;
		};
	}

	// Do we need to notify the host of a mouse change?
	if (mouse.x != 0 || mouse.y != 0 || mouse_buttons != last_mouse_buttons) {
    3de0:	8f 81       	ldd	r24, Y+7	; 0x07
    3de2:	98 85       	ldd	r25, Y+8	; 0x08
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	59 f4       	brne	.+22     	; 0x3dfe <keyboardMouseJoystickHandler+0x2be>
    3de8:	89 85       	ldd	r24, Y+9	; 0x09
    3dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dec:	00 97       	sbiw	r24, 0x00	; 0
    3dee:	39 f4       	brne	.+14     	; 0x3dfe <keyboardMouseJoystickHandler+0x2be>
    3df0:	90 91 4c 27 	lds	r25, 0x274C
    3df4:	80 91 59 27 	lds	r24, 0x2759
    3df8:	98 17       	cp	r25, r24
    3dfa:	09 f4       	brne	.+2      	; 0x3dfe <keyboardMouseJoystickHandler+0x2be>
    3dfc:	74 c0       	rjmp	.+232    	; 0x3ee6 <keyboardMouseJoystickHandler+0x3a6>
		
		#if DEBUG
			//Write raw and adjusted X,Y values to USB serial port
			PrintXY(raw.x,raw.y);
    3dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e02:	9c 01       	movw	r18, r24
    3e04:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e06:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e08:	b9 01       	movw	r22, r18
    3e0a:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <PrintXY>
			sendUSBString("->", false);
    3e0e:	60 e0       	ldi	r22, 0x00	; 0
    3e10:	8b e1       	ldi	r24, 0x1B	; 27
    3e12:	91 e2       	ldi	r25, 0x21	; 33
    3e14:	0e 94 9e 29 	call	0x533c	; 0x533c <sendUSBString>
			PrintXY(mouse.x,mouse.y);
    3e18:	29 85       	ldd	r18, Y+9	; 0x09
    3e1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    3e1e:	98 85       	ldd	r25, Y+8	; 0x08
    3e20:	b9 01       	movw	r22, r18
    3e22:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <PrintXY>
			sendUSBLine("");
    3e26:	8e e1       	ldi	r24, 0x1E	; 30
    3e28:	91 e2       	ldi	r25, 0x21	; 33
    3e2a:	0e 94 c5 29 	call	0x538a	; 0x538a <sendUSBLine>
		#endif	
		
		// Is it time to send a mouse report?
		if (checkTimeout(&mouse_timeout)) {
    3e2e:	8d e4       	ldi	r24, 0x4D	; 77
    3e30:	97 e2       	ldi	r25, 0x27	; 39
    3e32:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    3e36:	88 23       	and	r24, r24
    3e38:	09 f4       	brne	.+2      	; 0x3e3c <keyboardMouseJoystickHandler+0x2fc>
    3e3a:	55 c0       	rjmp	.+170    	; 0x3ee6 <keyboardMouseJoystickHandler+0x3a6>
			// Restart the timeout:
			startTimeout(&mouse_timeout, MOUSE_REPORT_INTERVAL_MS);
    3e3c:	44 e1       	ldi	r20, 0x14	; 20
    3e3e:	50 e0       	ldi	r21, 0x00	; 0
    3e40:	60 e0       	ldi	r22, 0x00	; 0
    3e42:	70 e0       	ldi	r23, 0x00	; 0
    3e44:	8d e4       	ldi	r24, 0x4D	; 77
    3e46:	97 e2       	ldi	r25, 0x27	; 39
    3e48:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
			
			// Record the mouse button presses:
			last_mouse_buttons = mouse_buttons;
    3e4c:	80 91 4c 27 	lds	r24, 0x274C
    3e50:	80 93 59 27 	sts	0x2759, r24
			sendBTChar(mouseTmp);
			sendBTChar(0x00); // Wheel position; unused
#else			
			// Send the report. The format is
			// A1,03,buttons,XmXl,YlXh,YhYm,wheel
			sendBTString("BC:KR=A1,03,");
    3e54:	8f e1       	ldi	r24, 0x1F	; 31
    3e56:	91 e2       	ldi	r25, 0x21	; 33
    3e58:	0e 94 4b 40 	call	0x8096	; 0x8096 <sendBTString>
			sendBTHexPair(mouse_buttons);
    3e5c:	80 91 4c 27 	lds	r24, 0x274C
    3e60:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
			sendBTChar(',');			
    3e64:	8c e2       	ldi	r24, 0x2C	; 44
    3e66:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
			mouseTmp = mouse.x & 0xFF;
    3e6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3e6c:	98 85       	ldd	r25, Y+8	; 0x08
    3e6e:	8e 83       	std	Y+6, r24	; 0x06
			sendBTHexPair(mouseTmp);
    3e70:	8e 81       	ldd	r24, Y+6	; 0x06
    3e72:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
			sendBTChar(',');
    3e76:	8c e2       	ldi	r24, 0x2C	; 44
    3e78:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
			mouseTmp = ((mouse.x >> 8) & 0x0F) | ((mouse.y & 0x0F) << 4);
    3e7c:	8f 81       	ldd	r24, Y+7	; 0x07
    3e7e:	98 85       	ldd	r25, Y+8	; 0x08
    3e80:	89 2f       	mov	r24, r25
    3e82:	99 0f       	add	r25, r25
    3e84:	99 0b       	sbc	r25, r25
    3e86:	28 2f       	mov	r18, r24
    3e88:	2f 70       	andi	r18, 0x0F	; 15
    3e8a:	89 85       	ldd	r24, Y+9	; 0x09
    3e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8e:	82 95       	swap	r24
    3e90:	92 95       	swap	r25
    3e92:	90 7f       	andi	r25, 0xF0	; 240
    3e94:	98 27       	eor	r25, r24
    3e96:	80 7f       	andi	r24, 0xF0	; 240
    3e98:	98 27       	eor	r25, r24
    3e9a:	82 2b       	or	r24, r18
    3e9c:	8e 83       	std	Y+6, r24	; 0x06
			sendBTHexPair(mouseTmp);
    3e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    3ea0:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
			sendBTChar(',');
    3ea4:	8c e2       	ldi	r24, 0x2C	; 44
    3ea6:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
			mouseTmp = (mouse.y >> 4) & 0xFF;
    3eaa:	89 85       	ldd	r24, Y+9	; 0x09
    3eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eae:	95 95       	asr	r25
    3eb0:	87 95       	ror	r24
    3eb2:	95 95       	asr	r25
    3eb4:	87 95       	ror	r24
    3eb6:	95 95       	asr	r25
    3eb8:	87 95       	ror	r24
    3eba:	95 95       	asr	r25
    3ebc:	87 95       	ror	r24
    3ebe:	8e 83       	std	Y+6, r24	; 0x06
			sendBTHexPair(mouseTmp);
    3ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ec2:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
			sendBTChar(',');
    3ec6:	8c e2       	ldi	r24, 0x2C	; 44
    3ec8:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
			sendBTHexPair(0x00); // Wheel position; unused
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
			sendBTChar('\r');
    3ed2:	8d e0       	ldi	r24, 0x0D	; 13
    3ed4:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
			sendBTChar('\n');
    3ed8:	8a e0       	ldi	r24, 0x0A	; 10
    3eda:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
#endif
			// Reset mouse x and y:
			mouse.x = 0;
    3ede:	1f 82       	std	Y+7, r1	; 0x07
    3ee0:	18 86       	std	Y+8, r1	; 0x08
			mouse.y = 0;
    3ee2:	19 86       	std	Y+9, r1	; 0x09
    3ee4:	1a 86       	std	Y+10, r1	; 0x0a
		}		
	}
}
    3ee6:	67 96       	adiw	r28, 0x17	; 23
    3ee8:	cd bf       	out	0x3d, r28	; 61
    3eea:	de bf       	out	0x3e, r29	; 62
    3eec:	df 91       	pop	r29
    3eee:	cf 91       	pop	r28
    3ef0:	08 95       	ret

00003ef2 <changeButtonState>:

// Similar to keyboadMouseButtonHandler, but will handle
// both "enum ButtonName" and "enum JoystickButtonName".
void changeButtonState(uint8_t name, enum ButtonState state) {
    3ef2:	ef 92       	push	r14
    3ef4:	ff 92       	push	r15
    3ef6:	0f 93       	push	r16
    3ef8:	1f 93       	push	r17
    3efa:	cf 93       	push	r28
    3efc:	df 93       	push	r29
    3efe:	cd b7       	in	r28, 0x3d	; 61
    3f00:	de b7       	in	r29, 0x3e	; 62
    3f02:	2f 97       	sbiw	r28, 0x0f	; 15
    3f04:	cd bf       	out	0x3d, r28	; 61
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	8e 87       	std	Y+14, r24	; 0x0e
    3f0a:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t scan_codes[MAX_SCANCODES]; 
	uint8_t modifiers = 0;
    3f0c:	19 82       	std	Y+1, r1	; 0x01
	struct ButtonConfiguration *this_button;
	struct HIDReport *this_joystick_button;
	uint8_t i;
	
	// Clear the mouse buttons:
	mouse_buttons = 0;
    3f0e:	10 92 4c 27 	sts	0x274C, r1
	
	if (state == BUTTON_PRESSED) {
    3f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f14:	81 30       	cpi	r24, 0x01	; 1
    3f16:	31 f5       	brne	.+76     	; 0x3f64 <changeButtonState+0x72>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    3f18:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f1a:	28 2f       	mov	r18, r24
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	a0 e0       	ldi	r26, 0x00	; 0
    3f24:	b0 e0       	ldi	r27, 0x00	; 0
    3f26:	7c 01       	movw	r14, r24
    3f28:	8d 01       	movw	r16, r26
    3f2a:	04 c0       	rjmp	.+8      	; 0x3f34 <changeButtonState+0x42>
    3f2c:	ee 0c       	add	r14, r14
    3f2e:	ff 1c       	adc	r15, r15
    3f30:	00 1f       	adc	r16, r16
    3f32:	11 1f       	adc	r17, r17
    3f34:	2a 95       	dec	r18
    3f36:	d2 f7       	brpl	.-12     	; 0x3f2c <changeButtonState+0x3a>
    3f38:	a8 01       	movw	r20, r16
    3f3a:	97 01       	movw	r18, r14
    3f3c:	80 91 48 27 	lds	r24, 0x2748
    3f40:	90 91 49 27 	lds	r25, 0x2749
    3f44:	a0 91 4a 27 	lds	r26, 0x274A
    3f48:	b0 91 4b 27 	lds	r27, 0x274B
    3f4c:	82 2b       	or	r24, r18
    3f4e:	93 2b       	or	r25, r19
    3f50:	a4 2b       	or	r26, r20
    3f52:	b5 2b       	or	r27, r21
    3f54:	80 93 48 27 	sts	0x2748, r24
    3f58:	90 93 49 27 	sts	0x2749, r25
    3f5c:	a0 93 4a 27 	sts	0x274A, r26
    3f60:	b0 93 4b 27 	sts	0x274B, r27
	}

	if (state == BUTTON_RELEASED) {
    3f64:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f66:	88 23       	and	r24, r24
    3f68:	41 f5       	brne	.+80     	; 0x3fba <changeButtonState+0xc8>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    3f6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f6c:	28 2f       	mov	r18, r24
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	a0 e0       	ldi	r26, 0x00	; 0
    3f76:	b0 e0       	ldi	r27, 0x00	; 0
    3f78:	04 c0       	rjmp	.+8      	; 0x3f82 <changeButtonState+0x90>
    3f7a:	88 0f       	add	r24, r24
    3f7c:	99 1f       	adc	r25, r25
    3f7e:	aa 1f       	adc	r26, r26
    3f80:	bb 1f       	adc	r27, r27
    3f82:	2a 95       	dec	r18
    3f84:	d2 f7       	brpl	.-12     	; 0x3f7a <changeButtonState+0x88>
    3f86:	9c 01       	movw	r18, r24
    3f88:	ad 01       	movw	r20, r26
    3f8a:	20 95       	com	r18
    3f8c:	30 95       	com	r19
    3f8e:	40 95       	com	r20
    3f90:	50 95       	com	r21
    3f92:	80 91 48 27 	lds	r24, 0x2748
    3f96:	90 91 49 27 	lds	r25, 0x2749
    3f9a:	a0 91 4a 27 	lds	r26, 0x274A
    3f9e:	b0 91 4b 27 	lds	r27, 0x274B
    3fa2:	82 23       	and	r24, r18
    3fa4:	93 23       	and	r25, r19
    3fa6:	a4 23       	and	r26, r20
    3fa8:	b5 23       	and	r27, r21
    3faa:	80 93 48 27 	sts	0x2748, r24
    3fae:	90 93 49 27 	sts	0x2749, r25
    3fb2:	a0 93 4a 27 	sts	0x274A, r26
    3fb6:	b0 93 4b 27 	sts	0x274B, r27
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
    3fba:	1d 82       	std	Y+5, r1	; 0x05
    3fbc:	1a 82       	std	Y+2, r1	; 0x02
    3fbe:	75 c0       	rjmp	.+234    	; 0x40aa <changeButtonState+0x1b8>
		// Is this button pressed?
		if (pressed_buttons & (1ul<<i)) {
    3fc0:	80 91 48 27 	lds	r24, 0x2748
    3fc4:	90 91 49 27 	lds	r25, 0x2749
    3fc8:	a0 91 4a 27 	lds	r26, 0x274A
    3fcc:	b0 91 4b 27 	lds	r27, 0x274B
    3fd0:	2d 81       	ldd	r18, Y+5	; 0x05
    3fd2:	22 2f       	mov	r18, r18
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	02 2e       	mov	r0, r18
    3fd8:	04 c0       	rjmp	.+8      	; 0x3fe2 <changeButtonState+0xf0>
    3fda:	b6 95       	lsr	r27
    3fdc:	a7 95       	ror	r26
    3fde:	97 95       	ror	r25
    3fe0:	87 95       	ror	r24
    3fe2:	0a 94       	dec	r0
    3fe4:	d2 f7       	brpl	.-12     	; 0x3fda <changeButtonState+0xe8>
    3fe6:	81 70       	andi	r24, 0x01	; 1
    3fe8:	99 27       	eor	r25, r25
    3fea:	aa 27       	eor	r26, r26
    3fec:	bb 27       	eor	r27, r27
    3fee:	00 97       	sbiw	r24, 0x00	; 0
    3ff0:	a1 05       	cpc	r26, r1
    3ff2:	b1 05       	cpc	r27, r1
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <changeButtonState+0x106>
    3ff6:	56 c0       	rjmp	.+172    	; 0x40a4 <changeButtonState+0x1b2>
			// Get information about this button:
			this_button = &(my_cc->button_configs[i]);
    3ff8:	40 91 46 27 	lds	r20, 0x2746
    3ffc:	50 91 47 27 	lds	r21, 0x2747
    4000:	8d 81       	ldd	r24, Y+5	; 0x05
    4002:	28 2f       	mov	r18, r24
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	c9 01       	movw	r24, r18
    4008:	88 0f       	add	r24, r24
    400a:	99 1f       	adc	r25, r25
    400c:	88 0f       	add	r24, r24
    400e:	99 1f       	adc	r25, r25
    4010:	88 0f       	add	r24, r24
    4012:	99 1f       	adc	r25, r25
    4014:	82 0f       	add	r24, r18
    4016:	93 1f       	adc	r25, r19
    4018:	01 96       	adiw	r24, 0x01	; 1
    401a:	84 0f       	add	r24, r20
    401c:	95 1f       	adc	r25, r21
    401e:	8e 83       	std	Y+6, r24	; 0x06
    4020:	9f 83       	std	Y+7, r25	; 0x07
			
			// Is it a keyboard button?
			if (this_button->keyboard_and_mouse.input_type == INPUT_TYPE_KEYBOARD) {
    4022:	8e 81       	ldd	r24, Y+6	; 0x06
    4024:	9f 81       	ldd	r25, Y+7	; 0x07
    4026:	fc 01       	movw	r30, r24
    4028:	81 81       	ldd	r24, Z+1	; 0x01
    402a:	88 70       	andi	r24, 0x08	; 8
    402c:	88 23       	and	r24, r24
    402e:	79 f5       	brne	.+94     	; 0x408e <changeButtonState+0x19c>
				// Does this button have a scancode associated with it?
				if (this_button->button_down.scan_code != 0) {
    4030:	8e 81       	ldd	r24, Y+6	; 0x06
    4032:	9f 81       	ldd	r25, Y+7	; 0x07
    4034:	fc 01       	movw	r30, r24
    4036:	85 81       	ldd	r24, Z+5	; 0x05
    4038:	88 23       	and	r24, r24
    403a:	09 f1       	breq	.+66     	; 0x407e <changeButtonState+0x18c>
					// Is this a new scancode for the list?
					if (memchr(&scan_codes, this_button->button_down.scan_code, count) == NULL) {
    403c:	8a 81       	ldd	r24, Y+2	; 0x02
    403e:	48 2f       	mov	r20, r24
    4040:	50 e0       	ldi	r21, 0x00	; 0
    4042:	8e 81       	ldd	r24, Y+6	; 0x06
    4044:	9f 81       	ldd	r25, Y+7	; 0x07
    4046:	fc 01       	movw	r30, r24
    4048:	85 81       	ldd	r24, Z+5	; 0x05
    404a:	28 2f       	mov	r18, r24
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	ce 01       	movw	r24, r28
    4050:	08 96       	adiw	r24, 0x08	; 8
    4052:	b9 01       	movw	r22, r18
    4054:	0e 94 69 49 	call	0x92d2	; 0x92d2 <memchr>
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	89 f4       	brne	.+34     	; 0x407e <changeButtonState+0x18c>
						// Then add it to the hid report:
						scan_codes[count] = this_button->button_down.scan_code;
    405c:	8a 81       	ldd	r24, Y+2	; 0x02
    405e:	88 2f       	mov	r24, r24
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	2e 81       	ldd	r18, Y+6	; 0x06
    4064:	3f 81       	ldd	r19, Y+7	; 0x07
    4066:	f9 01       	movw	r30, r18
    4068:	45 81       	ldd	r20, Z+5	; 0x05
    406a:	9e 01       	movw	r18, r28
    406c:	28 5f       	subi	r18, 0xF8	; 248
    406e:	3f 4f       	sbci	r19, 0xFF	; 255
    4070:	82 0f       	add	r24, r18
    4072:	93 1f       	adc	r25, r19
    4074:	fc 01       	movw	r30, r24
    4076:	40 83       	st	Z, r20
			
						// Increment the count:
						count++;
    4078:	8a 81       	ldd	r24, Y+2	; 0x02
    407a:	8f 5f       	subi	r24, 0xFF	; 255
    407c:	8a 83       	std	Y+2, r24	; 0x02
					}					
				}
			
				// OR any modifiers for this button:
				modifiers |= this_button->button_down.modifier;
    407e:	8e 81       	ldd	r24, Y+6	; 0x06
    4080:	9f 81       	ldd	r25, Y+7	; 0x07
    4082:	fc 01       	movw	r30, r24
    4084:	84 81       	ldd	r24, Z+4	; 0x04
    4086:	99 81       	ldd	r25, Y+1	; 0x01
    4088:	89 2b       	or	r24, r25
    408a:	89 83       	std	Y+1, r24	; 0x01
    408c:	0b c0       	rjmp	.+22     	; 0x40a4 <changeButtonState+0x1b2>
			}
			// Otherwise this must be a mouse button.
			else {
				// OR any mouse buttons together:
				mouse_buttons |= this_button->keyboard_and_mouse.mouse_buttons;
    408e:	8e 81       	ldd	r24, Y+6	; 0x06
    4090:	9f 81       	ldd	r25, Y+7	; 0x07
    4092:	fc 01       	movw	r30, r24
    4094:	81 81       	ldd	r24, Z+1	; 0x01
    4096:	87 70       	andi	r24, 0x07	; 7
    4098:	98 2f       	mov	r25, r24
    409a:	80 91 4c 27 	lds	r24, 0x274C
    409e:	89 2b       	or	r24, r25
    40a0:	80 93 4c 27 	sts	0x274C, r24
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
    40a4:	8d 81       	ldd	r24, Y+5	; 0x05
    40a6:	8f 5f       	subi	r24, 0xFF	; 255
    40a8:	8d 83       	std	Y+5, r24	; 0x05
    40aa:	8d 81       	ldd	r24, Y+5	; 0x05
    40ac:	80 31       	cpi	r24, 0x10	; 16
    40ae:	20 f4       	brcc	.+8      	; 0x40b8 <changeButtonState+0x1c6>
    40b0:	8a 81       	ldd	r24, Y+2	; 0x02
    40b2:	86 30       	cpi	r24, 0x06	; 6
    40b4:	08 f4       	brcc	.+2      	; 0x40b8 <changeButtonState+0x1c6>
    40b6:	84 cf       	rjmp	.-248    	; 0x3fc0 <changeButtonState+0xce>
			}				
		}
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
    40b8:	80 e1       	ldi	r24, 0x10	; 16
    40ba:	8d 83       	std	Y+5, r24	; 0x05
    40bc:	b7 c0       	rjmp	.+366    	; 0x422c <changeButtonState+0x33a>
		// Is this joystick direction pressed?
		if (pressed_buttons & (1ul<<i)) {
    40be:	80 91 48 27 	lds	r24, 0x2748
    40c2:	90 91 49 27 	lds	r25, 0x2749
    40c6:	a0 91 4a 27 	lds	r26, 0x274A
    40ca:	b0 91 4b 27 	lds	r27, 0x274B
    40ce:	2d 81       	ldd	r18, Y+5	; 0x05
    40d0:	22 2f       	mov	r18, r18
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	02 2e       	mov	r0, r18
    40d6:	04 c0       	rjmp	.+8      	; 0x40e0 <changeButtonState+0x1ee>
    40d8:	b6 95       	lsr	r27
    40da:	a7 95       	ror	r26
    40dc:	97 95       	ror	r25
    40de:	87 95       	ror	r24
    40e0:	0a 94       	dec	r0
    40e2:	d2 f7       	brpl	.-12     	; 0x40d8 <changeButtonState+0x1e6>
    40e4:	81 70       	andi	r24, 0x01	; 1
    40e6:	99 27       	eor	r25, r25
    40e8:	aa 27       	eor	r26, r26
    40ea:	bb 27       	eor	r27, r27
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	a1 05       	cpc	r26, r1
    40f0:	b1 05       	cpc	r27, r1
    40f2:	09 f4       	brne	.+2      	; 0x40f6 <changeButtonState+0x204>
    40f4:	98 c0       	rjmp	.+304    	; 0x4226 <changeButtonState+0x334>
			// Get information about this joystick direction:
			switch (i) {
    40f6:	8d 81       	ldd	r24, Y+5	; 0x05
    40f8:	88 2f       	mov	r24, r24
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	83 31       	cpi	r24, 0x13	; 19
    40fe:	91 05       	cpc	r25, r1
    4100:	b1 f1       	breq	.+108    	; 0x416e <changeButtonState+0x27c>
    4102:	84 31       	cpi	r24, 0x14	; 20
    4104:	91 05       	cpc	r25, r1
    4106:	54 f4       	brge	.+20     	; 0x411c <changeButtonState+0x22a>
    4108:	81 31       	cpi	r24, 0x11	; 17
    410a:	91 05       	cpc	r25, r1
    410c:	f1 f0       	breq	.+60     	; 0x414a <changeButtonState+0x258>
    410e:	82 31       	cpi	r24, 0x12	; 18
    4110:	91 05       	cpc	r25, r1
    4112:	24 f5       	brge	.+72     	; 0x415c <changeButtonState+0x26a>
    4114:	80 31       	cpi	r24, 0x10	; 16
    4116:	91 05       	cpc	r25, r1
    4118:	79 f0       	breq	.+30     	; 0x4138 <changeButtonState+0x246>
    411a:	56 c0       	rjmp	.+172    	; 0x41c8 <changeButtonState+0x2d6>
    411c:	85 31       	cpi	r24, 0x15	; 21
    411e:	91 05       	cpc	r25, r1
    4120:	c1 f1       	breq	.+112    	; 0x4192 <changeButtonState+0x2a0>
    4122:	85 31       	cpi	r24, 0x15	; 21
    4124:	91 05       	cpc	r25, r1
    4126:	64 f1       	brlt	.+88     	; 0x4180 <changeButtonState+0x28e>
    4128:	86 31       	cpi	r24, 0x16	; 22
    412a:	91 05       	cpc	r25, r1
    412c:	d9 f1       	breq	.+118    	; 0x41a4 <changeButtonState+0x2b2>
    412e:	87 31       	cpi	r24, 0x17	; 23
    4130:	91 05       	cpc	r25, r1
    4132:	09 f4       	brne	.+2      	; 0x4136 <changeButtonState+0x244>
    4134:	40 c0       	rjmp	.+128    	; 0x41b6 <changeButtonState+0x2c4>
    4136:	48 c0       	rjmp	.+144    	; 0x41c8 <changeButtonState+0x2d6>
				case B_JOYSTICK_LEFT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_up);
    4138:	80 91 46 27 	lds	r24, 0x2746
    413c:	90 91 47 27 	lds	r25, 0x2747
    4140:	8d 56       	subi	r24, 0x6D	; 109
    4142:	9f 4f       	sbci	r25, 0xFF	; 255
    4144:	8b 83       	std	Y+3, r24	; 0x03
    4146:	9c 83       	std	Y+4, r25	; 0x04
					break;
    4148:	40 c0       	rjmp	.+128    	; 0x41ca <changeButtonState+0x2d8>
				case B_JOYSTICK_LEFT_DOWN:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_down);
    414a:	80 91 46 27 	lds	r24, 0x2746
    414e:	90 91 47 27 	lds	r25, 0x2747
    4152:	8b 56       	subi	r24, 0x6B	; 107
    4154:	9f 4f       	sbci	r25, 0xFF	; 255
    4156:	8b 83       	std	Y+3, r24	; 0x03
    4158:	9c 83       	std	Y+4, r25	; 0x04
					break;
    415a:	37 c0       	rjmp	.+110    	; 0x41ca <changeButtonState+0x2d8>
				case B_JOYSTICK_LEFT_LEFT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_left);
    415c:	80 91 46 27 	lds	r24, 0x2746
    4160:	90 91 47 27 	lds	r25, 0x2747
    4164:	89 56       	subi	r24, 0x69	; 105
    4166:	9f 4f       	sbci	r25, 0xFF	; 255
    4168:	8b 83       	std	Y+3, r24	; 0x03
    416a:	9c 83       	std	Y+4, r25	; 0x04
					break;
    416c:	2e c0       	rjmp	.+92     	; 0x41ca <changeButtonState+0x2d8>
				case B_JOYSTICK_LEFT_RIGHT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_right);
    416e:	80 91 46 27 	lds	r24, 0x2746
    4172:	90 91 47 27 	lds	r25, 0x2747
    4176:	87 56       	subi	r24, 0x67	; 103
    4178:	9f 4f       	sbci	r25, 0xFF	; 255
    417a:	8b 83       	std	Y+3, r24	; 0x03
    417c:	9c 83       	std	Y+4, r25	; 0x04
					break;
    417e:	25 c0       	rjmp	.+74     	; 0x41ca <changeButtonState+0x2d8>
				case B_JOYSTICK_RIGHT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_up);
    4180:	80 91 46 27 	lds	r24, 0x2746
    4184:	90 91 47 27 	lds	r25, 0x2747
    4188:	87 55       	subi	r24, 0x57	; 87
    418a:	9f 4f       	sbci	r25, 0xFF	; 255
    418c:	8b 83       	std	Y+3, r24	; 0x03
    418e:	9c 83       	std	Y+4, r25	; 0x04
					break;
    4190:	1c c0       	rjmp	.+56     	; 0x41ca <changeButtonState+0x2d8>
				case B_JOYSTICK_RIGHT_DOWN:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_down);
    4192:	80 91 46 27 	lds	r24, 0x2746
    4196:	90 91 47 27 	lds	r25, 0x2747
    419a:	85 55       	subi	r24, 0x55	; 85
    419c:	9f 4f       	sbci	r25, 0xFF	; 255
    419e:	8b 83       	std	Y+3, r24	; 0x03
    41a0:	9c 83       	std	Y+4, r25	; 0x04
					break;
    41a2:	13 c0       	rjmp	.+38     	; 0x41ca <changeButtonState+0x2d8>
				case B_JOYSTICK_RIGHT_LEFT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_left);
    41a4:	80 91 46 27 	lds	r24, 0x2746
    41a8:	90 91 47 27 	lds	r25, 0x2747
    41ac:	83 55       	subi	r24, 0x53	; 83
    41ae:	9f 4f       	sbci	r25, 0xFF	; 255
    41b0:	8b 83       	std	Y+3, r24	; 0x03
    41b2:	9c 83       	std	Y+4, r25	; 0x04
					break;
    41b4:	0a c0       	rjmp	.+20     	; 0x41ca <changeButtonState+0x2d8>
				case B_JOYSTICK_RIGHT_RIGHT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_right);
    41b6:	80 91 46 27 	lds	r24, 0x2746
    41ba:	90 91 47 27 	lds	r25, 0x2747
    41be:	81 55       	subi	r24, 0x51	; 81
    41c0:	9f 4f       	sbci	r25, 0xFF	; 255
    41c2:	8b 83       	std	Y+3, r24	; 0x03
    41c4:	9c 83       	std	Y+4, r25	; 0x04
					break;
    41c6:	01 c0       	rjmp	.+2      	; 0x41ca <changeButtonState+0x2d8>
				default:
					continue;
    41c8:	2e c0       	rjmp	.+92     	; 0x4226 <changeButtonState+0x334>
			};
			
			// Is there a button press associated with this direction?
			if (this_joystick_button->scan_code != 0) {
    41ca:	8b 81       	ldd	r24, Y+3	; 0x03
    41cc:	9c 81       	ldd	r25, Y+4	; 0x04
    41ce:	fc 01       	movw	r30, r24
    41d0:	81 81       	ldd	r24, Z+1	; 0x01
    41d2:	88 23       	and	r24, r24
    41d4:	09 f1       	breq	.+66     	; 0x4218 <changeButtonState+0x326>
				// Is this a new scancode for the list?
				if (memchr(scan_codes, this_joystick_button->scan_code, count) == NULL) {
    41d6:	8a 81       	ldd	r24, Y+2	; 0x02
    41d8:	48 2f       	mov	r20, r24
    41da:	50 e0       	ldi	r21, 0x00	; 0
    41dc:	8b 81       	ldd	r24, Y+3	; 0x03
    41de:	9c 81       	ldd	r25, Y+4	; 0x04
    41e0:	fc 01       	movw	r30, r24
    41e2:	81 81       	ldd	r24, Z+1	; 0x01
    41e4:	28 2f       	mov	r18, r24
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	ce 01       	movw	r24, r28
    41ea:	08 96       	adiw	r24, 0x08	; 8
    41ec:	b9 01       	movw	r22, r18
    41ee:	0e 94 69 49 	call	0x92d2	; 0x92d2 <memchr>
    41f2:	00 97       	sbiw	r24, 0x00	; 0
    41f4:	89 f4       	brne	.+34     	; 0x4218 <changeButtonState+0x326>
					// Then add it to the hid report:
					scan_codes[count] = this_joystick_button->scan_code;
    41f6:	8a 81       	ldd	r24, Y+2	; 0x02
    41f8:	88 2f       	mov	r24, r24
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	2b 81       	ldd	r18, Y+3	; 0x03
    41fe:	3c 81       	ldd	r19, Y+4	; 0x04
    4200:	f9 01       	movw	r30, r18
    4202:	41 81       	ldd	r20, Z+1	; 0x01
    4204:	9e 01       	movw	r18, r28
    4206:	28 5f       	subi	r18, 0xF8	; 248
    4208:	3f 4f       	sbci	r19, 0xFF	; 255
    420a:	82 0f       	add	r24, r18
    420c:	93 1f       	adc	r25, r19
    420e:	fc 01       	movw	r30, r24
    4210:	40 83       	st	Z, r20
					
					// Increment the count:
					count++;
    4212:	8a 81       	ldd	r24, Y+2	; 0x02
    4214:	8f 5f       	subi	r24, 0xFF	; 255
    4216:	8a 83       	std	Y+2, r24	; 0x02
				}					
			}
			
			// OR any modifiers for this button:
			modifiers |= this_joystick_button->modifier;
    4218:	8b 81       	ldd	r24, Y+3	; 0x03
    421a:	9c 81       	ldd	r25, Y+4	; 0x04
    421c:	fc 01       	movw	r30, r24
    421e:	80 81       	ld	r24, Z
    4220:	99 81       	ldd	r25, Y+1	; 0x01
    4222:	89 2b       	or	r24, r25
    4224:	89 83       	std	Y+1, r24	; 0x01
			}				
		}
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
    4226:	8d 81       	ldd	r24, Y+5	; 0x05
    4228:	8f 5f       	subi	r24, 0xFF	; 255
    422a:	8d 83       	std	Y+5, r24	; 0x05
    422c:	8d 81       	ldd	r24, Y+5	; 0x05
    422e:	88 31       	cpi	r24, 0x18	; 24
    4230:	20 f4       	brcc	.+8      	; 0x423a <changeButtonState+0x348>
    4232:	8a 81       	ldd	r24, Y+2	; 0x02
    4234:	86 30       	cpi	r24, 0x06	; 6
    4236:	08 f4       	brcc	.+2      	; 0x423a <changeButtonState+0x348>
    4238:	42 cf       	rjmp	.-380    	; 0x40be <changeButtonState+0x1cc>
			sendBTChar(0);
		}
	}
	
#else
	sendBTString("BC:KR=A1,01,00,");
    423a:	8c e2       	ldi	r24, 0x2C	; 44
    423c:	91 e2       	ldi	r25, 0x21	; 33
    423e:	0e 94 4b 40 	call	0x8096	; 0x8096 <sendBTString>
	// Send the modifiers:
	sendBTHexPair(modifiers);
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    4248:	1d 82       	std	Y+5, r1	; 0x05
    424a:	1a c0       	rjmp	.+52     	; 0x4280 <changeButtonState+0x38e>
		sendBTChar(',');
    424c:	8c e2       	ldi	r24, 0x2C	; 44
    424e:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
		if (i < count) {
    4252:	9d 81       	ldd	r25, Y+5	; 0x05
    4254:	8a 81       	ldd	r24, Y+2	; 0x02
    4256:	98 17       	cp	r25, r24
    4258:	68 f4       	brcc	.+26     	; 0x4274 <changeButtonState+0x382>
			sendBTHexPair(scan_codes[i]);
    425a:	8d 81       	ldd	r24, Y+5	; 0x05
    425c:	88 2f       	mov	r24, r24
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	9e 01       	movw	r18, r28
    4262:	28 5f       	subi	r18, 0xF8	; 248
    4264:	3f 4f       	sbci	r19, 0xFF	; 255
    4266:	82 0f       	add	r24, r18
    4268:	93 1f       	adc	r25, r19
    426a:	fc 01       	movw	r30, r24
    426c:	80 81       	ld	r24, Z
    426e:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
    4272:	03 c0       	rjmp	.+6      	; 0x427a <changeButtonState+0x388>
		}
		// Otherwise send the no-keys-pressed event:
		else {
			// Send the no-keys-pressed event:
			sendBTHexPair(0);
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	0e 94 06 40 	call	0x800c	; 0x800c <sendBTHexPair>
#else
	sendBTString("BC:KR=A1,01,00,");
	// Send the modifiers:
	sendBTHexPair(modifiers);
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    427a:	8d 81       	ldd	r24, Y+5	; 0x05
    427c:	8f 5f       	subi	r24, 0xFF	; 255
    427e:	8d 83       	std	Y+5, r24	; 0x05
    4280:	8d 81       	ldd	r24, Y+5	; 0x05
    4282:	86 30       	cpi	r24, 0x06	; 6
    4284:	18 f3       	brcs	.-58     	; 0x424c <changeButtonState+0x35a>
			// Send the no-keys-pressed event:
			sendBTHexPair(0);
		}
	
	}
	sendBTChar('\r');
    4286:	8d e0       	ldi	r24, 0x0D	; 13
    4288:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
	sendBTChar('\n');
    428c:	8a e0       	ldi	r24, 0x0A	; 10
    428e:	0e 94 38 40 	call	0x8070	; 0x8070 <sendBTChar>
#endif	
}
    4292:	2f 96       	adiw	r28, 0x0f	; 15
    4294:	cd bf       	out	0x3d, r28	; 61
    4296:	de bf       	out	0x3e, r29	; 62
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	ef 90       	pop	r14
    42a4:	08 95       	ret

000042a6 <setupDbg>:
};

unsigned char recvDBGChar(void)
{
	return usart_getchar(DBG_SERIAL);
};
    42a6:	1f 93       	push	r17
    42a8:	cf 93       	push	r28
    42aa:	df 93       	push	r29
    42ac:	cd b7       	in	r28, 0x3d	; 61
    42ae:	de b7       	in	r29, 0x3e	; 62
    42b0:	60 97       	sbiw	r28, 0x10	; 16
    42b2:	cd bf       	out	0x3d, r28	; 61
    42b4:	de bf       	out	0x3e, r29	; 62
    42b6:	87 e0       	ldi	r24, 0x07	; 7
    42b8:	ec e3       	ldi	r30, 0x3C	; 60
    42ba:	f1 e2       	ldi	r31, 0x21	; 33
    42bc:	de 01       	movw	r26, r28
    42be:	1a 96       	adiw	r26, 0x0a	; 10
    42c0:	01 90       	ld	r0, Z+
    42c2:	0d 92       	st	X+, r0
    42c4:	8a 95       	dec	r24
    42c6:	e1 f7       	brne	.-8      	; 0x42c0 <setupDbg+0x1a>
    42c8:	60 e1       	ldi	r22, 0x10	; 16
    42ca:	84 e0       	ldi	r24, 0x04	; 4
    42cc:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
    42d0:	81 ed       	ldi	r24, 0xD1	; 209
    42d2:	91 e0       	ldi	r25, 0x01	; 1
    42d4:	89 83       	std	Y+1, r24	; 0x01
    42d6:	9a 83       	std	Y+2, r25	; 0x02
    42d8:	89 81       	ldd	r24, Y+1	; 0x01
    42da:	9a 81       	ldd	r25, Y+2	; 0x02
    42dc:	fc 01       	movw	r30, r24
    42de:	14 91       	lpm	r17, Z
    42e0:	1b 83       	std	Y+3, r17	; 0x03
    42e2:	8b 81       	ldd	r24, Y+3	; 0x03
    42e4:	88 2f       	mov	r24, r24
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	3c d0       	rcall	.+120    	; 0x4362 <sendDBGString>
    42ea:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
    42ee:	ce 01       	movw	r24, r28
    42f0:	0a 96       	adiw	r24, 0x0a	; 10
    42f2:	bc 01       	movw	r22, r24
    42f4:	80 ea       	ldi	r24, 0xA0	; 160
    42f6:	99 e0       	ldi	r25, 0x09	; 9
    42f8:	0e 94 07 39 	call	0x720e	; 0x720e <usart_init_rs232>
    42fc:	88 23       	and	r24, r24
    42fe:	71 f0       	breq	.+28     	; 0x431c <setupDbg+0x76>
    4300:	88 ec       	ldi	r24, 0xC8	; 200
    4302:	91 e0       	ldi	r25, 0x01	; 1
    4304:	8c 83       	std	Y+4, r24	; 0x04
    4306:	9d 83       	std	Y+5, r25	; 0x05
    4308:	8c 81       	ldd	r24, Y+4	; 0x04
    430a:	9d 81       	ldd	r25, Y+5	; 0x05
    430c:	fc 01       	movw	r30, r24
    430e:	14 91       	lpm	r17, Z
    4310:	1e 83       	std	Y+6, r17	; 0x06
    4312:	8e 81       	ldd	r24, Y+6	; 0x06
    4314:	88 2f       	mov	r24, r24
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	43 d0       	rcall	.+134    	; 0x43a0 <sendDBGLine>
    431a:	0d c0       	rjmp	.+26     	; 0x4336 <setupDbg+0x90>
    431c:	8d ec       	ldi	r24, 0xCD	; 205
    431e:	91 e0       	ldi	r25, 0x01	; 1
    4320:	8f 83       	std	Y+7, r24	; 0x07
    4322:	98 87       	std	Y+8, r25	; 0x08
    4324:	8f 81       	ldd	r24, Y+7	; 0x07
    4326:	98 85       	ldd	r25, Y+8	; 0x08
    4328:	fc 01       	movw	r30, r24
    432a:	14 91       	lpm	r17, Z
    432c:	19 87       	std	Y+9, r17	; 0x09
    432e:	89 85       	ldd	r24, Y+9	; 0x09
    4330:	88 2f       	mov	r24, r24
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	35 d0       	rcall	.+106    	; 0x43a0 <sendDBGLine>
    4336:	60 96       	adiw	r28, 0x10	; 16
    4338:	cd bf       	out	0x3d, r28	; 61
    433a:	de bf       	out	0x3e, r29	; 62
    433c:	df 91       	pop	r29
    433e:	cf 91       	pop	r28
    4340:	1f 91       	pop	r17
    4342:	08 95       	ret

00004344 <sendDBGChar>:
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	1f 92       	push	r1
    434a:	cd b7       	in	r28, 0x3d	; 61
    434c:	de b7       	in	r29, 0x3e	; 62
    434e:	89 83       	std	Y+1, r24	; 0x01
    4350:	69 81       	ldd	r22, Y+1	; 0x01
    4352:	80 ea       	ldi	r24, 0xA0	; 160
    4354:	99 e0       	ldi	r25, 0x09	; 9
    4356:	0e 94 4d 39 	call	0x729a	; 0x729a <usart_putchar>
    435a:	0f 90       	pop	r0
    435c:	df 91       	pop	r29
    435e:	cf 91       	pop	r28
    4360:	08 95       	ret

00004362 <sendDBGString>:

// write out a simple '\0' terminated string
void sendDBGString(const char *string)
{
    4362:	cf 93       	push	r28
    4364:	df 93       	push	r29
    4366:	00 d0       	rcall	.+0      	; 0x4368 <sendDBGString+0x6>
    4368:	cd b7       	in	r28, 0x3d	; 61
    436a:	de b7       	in	r29, 0x3e	; 62
    436c:	89 83       	std	Y+1, r24	; 0x01
    436e:	9a 83       	std	Y+2, r25	; 0x02
	while(*string != 0)
    4370:	0c c0       	rjmp	.+24     	; 0x438a <sendDBGString+0x28>
	sendDBGChar(*string++);
    4372:	89 81       	ldd	r24, Y+1	; 0x01
    4374:	9a 81       	ldd	r25, Y+2	; 0x02
    4376:	fc 01       	movw	r30, r24
    4378:	80 81       	ld	r24, Z
    437a:	28 2f       	mov	r18, r24
    437c:	89 81       	ldd	r24, Y+1	; 0x01
    437e:	9a 81       	ldd	r25, Y+2	; 0x02
    4380:	01 96       	adiw	r24, 0x01	; 1
    4382:	89 83       	std	Y+1, r24	; 0x01
    4384:	9a 83       	std	Y+2, r25	; 0x02
    4386:	82 2f       	mov	r24, r18
    4388:	dd df       	rcall	.-70     	; 0x4344 <sendDBGChar>
};

// write out a simple '\0' terminated string
void sendDBGString(const char *string)
{
	while(*string != 0)
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	9a 81       	ldd	r25, Y+2	; 0x02
    438e:	fc 01       	movw	r30, r24
    4390:	80 81       	ld	r24, Z
    4392:	88 23       	and	r24, r24
    4394:	71 f7       	brne	.-36     	; 0x4372 <sendDBGString+0x10>
	sendDBGChar(*string++);
};
    4396:	0f 90       	pop	r0
    4398:	0f 90       	pop	r0
    439a:	df 91       	pop	r29
    439c:	cf 91       	pop	r28
    439e:	08 95       	ret

000043a0 <sendDBGLine>:

// write out a simple '\0' terminated string and print "\n\r" at end
void sendDBGLine(const char *string)
{
    43a0:	cf 93       	push	r28
    43a2:	df 93       	push	r29
    43a4:	00 d0       	rcall	.+0      	; 0x43a6 <sendDBGLine+0x6>
    43a6:	cd b7       	in	r28, 0x3d	; 61
    43a8:	de b7       	in	r29, 0x3e	; 62
    43aa:	89 83       	std	Y+1, r24	; 0x01
    43ac:	9a 83       	std	Y+2, r25	; 0x02
	sendDBGString(string);
    43ae:	89 81       	ldd	r24, Y+1	; 0x01
    43b0:	9a 81       	ldd	r25, Y+2	; 0x02
    43b2:	d7 df       	rcall	.-82     	; 0x4362 <sendDBGString>
	sendDBGChar('\r');
    43b4:	8d e0       	ldi	r24, 0x0D	; 13
    43b6:	c6 df       	rcall	.-116    	; 0x4344 <sendDBGChar>
	sendDBGChar('\n');
    43b8:	8a e0       	ldi	r24, 0x0A	; 10
    43ba:	c4 df       	rcall	.-120    	; 0x4344 <sendDBGChar>
    43bc:	0f 90       	pop	r0
    43be:	0f 90       	pop	r0
    43c0:	df 91       	pop	r29
    43c2:	cf 91       	pop	r28
    43c4:	08 95       	ret

000043c6 <SimpleJoystickAdj>:


//Center calibration, Unsigned to Signed conversion, and axis flipping
//compare AnalogJoystickAdj
void SimpleJoystickAdj( const uint16_xy * center, const int16_xy * deadzone, const uint16_xy * raw, int16_xy * out )
{
    43c6:	cf 93       	push	r28
    43c8:	df 93       	push	r29
    43ca:	cd b7       	in	r28, 0x3d	; 61
    43cc:	de b7       	in	r29, 0x3e	; 62
    43ce:	2c 97       	sbiw	r28, 0x0c	; 12
    43d0:	cd bf       	out	0x3d, r28	; 61
    43d2:	de bf       	out	0x3e, r29	; 62
    43d4:	8d 83       	std	Y+5, r24	; 0x05
    43d6:	9e 83       	std	Y+6, r25	; 0x06
    43d8:	6f 83       	std	Y+7, r22	; 0x07
    43da:	78 87       	std	Y+8, r23	; 0x08
    43dc:	49 87       	std	Y+9, r20	; 0x09
    43de:	5a 87       	std	Y+10, r21	; 0x0a
    43e0:	2b 87       	std	Y+11, r18	; 0x0b
    43e2:	3c 87       	std	Y+12, r19	; 0x0c
	int16_t x_tmp = raw->x;
    43e4:	89 85       	ldd	r24, Y+9	; 0x09
    43e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e8:	fc 01       	movw	r30, r24
    43ea:	80 81       	ld	r24, Z
    43ec:	91 81       	ldd	r25, Z+1	; 0x01
    43ee:	89 83       	std	Y+1, r24	; 0x01
    43f0:	9a 83       	std	Y+2, r25	; 0x02
	int16_t y_tmp = raw->y;
    43f2:	89 85       	ldd	r24, Y+9	; 0x09
    43f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f6:	fc 01       	movw	r30, r24
    43f8:	82 81       	ldd	r24, Z+2	; 0x02
    43fa:	93 81       	ldd	r25, Z+3	; 0x03
    43fc:	8b 83       	std	Y+3, r24	; 0x03
    43fe:	9c 83       	std	Y+4, r25	; 0x04
	
	// Correct for the center position:
	x_tmp -= center->x; //calibration and unsigned to signed conversion
    4400:	29 81       	ldd	r18, Y+1	; 0x01
    4402:	3a 81       	ldd	r19, Y+2	; 0x02
    4404:	8d 81       	ldd	r24, Y+5	; 0x05
    4406:	9e 81       	ldd	r25, Y+6	; 0x06
    4408:	fc 01       	movw	r30, r24
    440a:	80 81       	ld	r24, Z
    440c:	91 81       	ldd	r25, Z+1	; 0x01
    440e:	a9 01       	movw	r20, r18
    4410:	48 1b       	sub	r20, r24
    4412:	59 0b       	sbc	r21, r25
    4414:	ca 01       	movw	r24, r20
    4416:	89 83       	std	Y+1, r24	; 0x01
    4418:	9a 83       	std	Y+2, r25	; 0x02
	y_tmp -= center->y; //calibration and unsigned to signed conversion
    441a:	2b 81       	ldd	r18, Y+3	; 0x03
    441c:	3c 81       	ldd	r19, Y+4	; 0x04
    441e:	8d 81       	ldd	r24, Y+5	; 0x05
    4420:	9e 81       	ldd	r25, Y+6	; 0x06
    4422:	fc 01       	movw	r30, r24
    4424:	82 81       	ldd	r24, Z+2	; 0x02
    4426:	93 81       	ldd	r25, Z+3	; 0x03
    4428:	a9 01       	movw	r20, r18
    442a:	48 1b       	sub	r20, r24
    442c:	59 0b       	sbc	r21, r25
    442e:	ca 01       	movw	r24, r20
    4430:	8b 83       	std	Y+3, r24	; 0x03
    4432:	9c 83       	std	Y+4, r25	; 0x04
	
	//gamepadJoystickHandler() flips axis with min/max pairing for scaling
	//we use simple flipping here:
	x_tmp = -x_tmp;
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	9a 81       	ldd	r25, Y+2	; 0x02
    4438:	91 95       	neg	r25
    443a:	81 95       	neg	r24
    443c:	91 09       	sbc	r25, r1
    443e:	89 83       	std	Y+1, r24	; 0x01
    4440:	9a 83       	std	Y+2, r25	; 0x02
	y_tmp = -y_tmp;
    4442:	8b 81       	ldd	r24, Y+3	; 0x03
    4444:	9c 81       	ldd	r25, Y+4	; 0x04
    4446:	91 95       	neg	r25
    4448:	81 95       	neg	r24
    444a:	91 09       	sbc	r25, r1
    444c:	8b 83       	std	Y+3, r24	; 0x03
    444e:	9c 83       	std	Y+4, r25	; 0x04
	
	//This deadzone code looks at each axis independently - digital behavior joysticks
	//AnalogJoystickAdj looks at both axises together - analog behavior joysticks
	if(NABS(x_tmp) > -(deadzone->x))
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	9a 81       	ldd	r25, Y+2	; 0x02
    4454:	99 23       	and	r25, r25
    4456:	1c f4       	brge	.+6      	; 0x445e <SimpleJoystickAdj+0x98>
    4458:	91 95       	neg	r25
    445a:	81 95       	neg	r24
    445c:	91 09       	sbc	r25, r1
    445e:	22 27       	eor	r18, r18
    4460:	33 27       	eor	r19, r19
    4462:	28 1b       	sub	r18, r24
    4464:	39 0b       	sbc	r19, r25
    4466:	8f 81       	ldd	r24, Y+7	; 0x07
    4468:	98 85       	ldd	r25, Y+8	; 0x08
    446a:	fc 01       	movw	r30, r24
    446c:	80 81       	ld	r24, Z
    446e:	91 81       	ldd	r25, Z+1	; 0x01
    4470:	91 95       	neg	r25
    4472:	81 95       	neg	r24
    4474:	91 09       	sbc	r25, r1
    4476:	82 17       	cp	r24, r18
    4478:	93 07       	cpc	r25, r19
    447a:	14 f4       	brge	.+4      	; 0x4480 <SimpleJoystickAdj+0xba>
	{
		x_tmp=0;
    447c:	19 82       	std	Y+1, r1	; 0x01
    447e:	1a 82       	std	Y+2, r1	; 0x02
	}
			
	if(NABS(y_tmp) > -(deadzone->y))
    4480:	8b 81       	ldd	r24, Y+3	; 0x03
    4482:	9c 81       	ldd	r25, Y+4	; 0x04
    4484:	99 23       	and	r25, r25
    4486:	1c f4       	brge	.+6      	; 0x448e <SimpleJoystickAdj+0xc8>
    4488:	91 95       	neg	r25
    448a:	81 95       	neg	r24
    448c:	91 09       	sbc	r25, r1
    448e:	22 27       	eor	r18, r18
    4490:	33 27       	eor	r19, r19
    4492:	28 1b       	sub	r18, r24
    4494:	39 0b       	sbc	r19, r25
    4496:	8f 81       	ldd	r24, Y+7	; 0x07
    4498:	98 85       	ldd	r25, Y+8	; 0x08
    449a:	fc 01       	movw	r30, r24
    449c:	82 81       	ldd	r24, Z+2	; 0x02
    449e:	93 81       	ldd	r25, Z+3	; 0x03
    44a0:	91 95       	neg	r25
    44a2:	81 95       	neg	r24
    44a4:	91 09       	sbc	r25, r1
    44a6:	82 17       	cp	r24, r18
    44a8:	93 07       	cpc	r25, r19
    44aa:	14 f4       	brge	.+4      	; 0x44b0 <SimpleJoystickAdj+0xea>
	{
		y_tmp=0;
    44ac:	1b 82       	std	Y+3, r1	; 0x03
    44ae:	1c 82       	std	Y+4, r1	; 0x04
	}	
	
	out->x = x_tmp;
    44b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    44b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    44b4:	29 81       	ldd	r18, Y+1	; 0x01
    44b6:	3a 81       	ldd	r19, Y+2	; 0x02
    44b8:	fc 01       	movw	r30, r24
    44ba:	20 83       	st	Z, r18
    44bc:	31 83       	std	Z+1, r19	; 0x01
	out->y = y_tmp;
    44be:	8b 85       	ldd	r24, Y+11	; 0x0b
    44c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    44c2:	2b 81       	ldd	r18, Y+3	; 0x03
    44c4:	3c 81       	ldd	r19, Y+4	; 0x04
    44c6:	fc 01       	movw	r30, r24
    44c8:	22 83       	std	Z+2, r18	; 0x02
    44ca:	33 83       	std	Z+3, r19	; 0x03
}
    44cc:	2c 96       	adiw	r28, 0x0c	; 12
    44ce:	cd bf       	out	0x3d, r28	; 61
    44d0:	de bf       	out	0x3e, r29	; 62
    44d2:	df 91       	pop	r29
    44d4:	cf 91       	pop	r28
    44d6:	08 95       	ret

000044d8 <AnalogJoystickAdj>:
//map from ADC range [0,4095] to joystick range [-127,+127]
//Joystick orientations:
//left:- , right:+
//up:- , down:+
void AnalogJoystickAdj( const uint16_xy * center, JoystickConfiguration *this_joystick_cfg, const uint16_xy * raw, int8_xy * out )
{
    44d8:	cf 93       	push	r28
    44da:	df 93       	push	r29
    44dc:	cd b7       	in	r28, 0x3d	; 61
    44de:	de b7       	in	r29, 0x3e	; 62
    44e0:	2c 97       	sbiw	r28, 0x0c	; 12
    44e2:	cd bf       	out	0x3d, r28	; 61
    44e4:	de bf       	out	0x3e, r29	; 62
    44e6:	8d 83       	std	Y+5, r24	; 0x05
    44e8:	9e 83       	std	Y+6, r25	; 0x06
    44ea:	6f 83       	std	Y+7, r22	; 0x07
    44ec:	78 87       	std	Y+8, r23	; 0x08
    44ee:	49 87       	std	Y+9, r20	; 0x09
    44f0:	5a 87       	std	Y+10, r21	; 0x0a
    44f2:	2b 87       	std	Y+11, r18	; 0x0b
    44f4:	3c 87       	std	Y+12, r19	; 0x0c
	int16_t x_tmp = raw->x;
    44f6:	89 85       	ldd	r24, Y+9	; 0x09
    44f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    44fa:	fc 01       	movw	r30, r24
    44fc:	80 81       	ld	r24, Z
    44fe:	91 81       	ldd	r25, Z+1	; 0x01
    4500:	89 83       	std	Y+1, r24	; 0x01
    4502:	9a 83       	std	Y+2, r25	; 0x02
	int16_t y_tmp = raw->y;
    4504:	89 85       	ldd	r24, Y+9	; 0x09
    4506:	9a 85       	ldd	r25, Y+10	; 0x0a
    4508:	fc 01       	movw	r30, r24
    450a:	82 81       	ldd	r24, Z+2	; 0x02
    450c:	93 81       	ldd	r25, Z+3	; 0x03
    450e:	8b 83       	std	Y+3, r24	; 0x03
    4510:	9c 83       	std	Y+4, r25	; 0x04
	}
	*/	
	
	//Implementation #3
	// Correct for the center position:
	x_tmp -= center->x; //calibration and unsigned to signed conversion
    4512:	29 81       	ldd	r18, Y+1	; 0x01
    4514:	3a 81       	ldd	r19, Y+2	; 0x02
    4516:	8d 81       	ldd	r24, Y+5	; 0x05
    4518:	9e 81       	ldd	r25, Y+6	; 0x06
    451a:	fc 01       	movw	r30, r24
    451c:	80 81       	ld	r24, Z
    451e:	91 81       	ldd	r25, Z+1	; 0x01
    4520:	a9 01       	movw	r20, r18
    4522:	48 1b       	sub	r20, r24
    4524:	59 0b       	sbc	r21, r25
    4526:	ca 01       	movw	r24, r20
    4528:	89 83       	std	Y+1, r24	; 0x01
    452a:	9a 83       	std	Y+2, r25	; 0x02
	y_tmp -= center->y; //calibration and unsigned to signed conversion
    452c:	2b 81       	ldd	r18, Y+3	; 0x03
    452e:	3c 81       	ldd	r19, Y+4	; 0x04
    4530:	8d 81       	ldd	r24, Y+5	; 0x05
    4532:	9e 81       	ldd	r25, Y+6	; 0x06
    4534:	fc 01       	movw	r30, r24
    4536:	82 81       	ldd	r24, Z+2	; 0x02
    4538:	93 81       	ldd	r25, Z+3	; 0x03
    453a:	a9 01       	movw	r20, r18
    453c:	48 1b       	sub	r20, r24
    453e:	59 0b       	sbc	r21, r25
    4540:	ca 01       	movw	r24, r20
    4542:	8b 83       	std	Y+3, r24	; 0x03
    4544:	9c 83       	std	Y+4, r25	; 0x04
	*/
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
    4546:	89 81       	ldd	r24, Y+1	; 0x01
    4548:	9a 81       	ldd	r25, Y+2	; 0x02
    454a:	99 23       	and	r25, r25
    454c:	1c f4       	brge	.+6      	; 0x4554 <AnalogJoystickAdj+0x7c>
    454e:	91 95       	neg	r25
    4550:	81 95       	neg	r24
    4552:	91 09       	sbc	r25, r1
    4554:	22 27       	eor	r18, r18
    4556:	33 27       	eor	r19, r19
    4558:	28 1b       	sub	r18, r24
    455a:	39 0b       	sbc	r19, r25
    455c:	8f 81       	ldd	r24, Y+7	; 0x07
    455e:	98 85       	ldd	r25, Y+8	; 0x08
    4560:	fc 01       	movw	r30, r24
    4562:	82 89       	ldd	r24, Z+18	; 0x12
    4564:	93 89       	ldd	r25, Z+19	; 0x13
    4566:	91 95       	neg	r25
    4568:	81 95       	neg	r24
    456a:	91 09       	sbc	r25, r1
	}
	*/
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
    456c:	82 17       	cp	r24, r18
    456e:	93 07       	cpc	r25, r19
    4570:	dc f4       	brge	.+54     	; 0x45a8 <AnalogJoystickAdj+0xd0>
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
		(NABS(y_tmp) > -(this_joystick_cfg->y_deadzone))
    4572:	8b 81       	ldd	r24, Y+3	; 0x03
    4574:	9c 81       	ldd	r25, Y+4	; 0x04
    4576:	99 23       	and	r25, r25
    4578:	1c f4       	brge	.+6      	; 0x4580 <AnalogJoystickAdj+0xa8>
    457a:	91 95       	neg	r25
    457c:	81 95       	neg	r24
    457e:	91 09       	sbc	r25, r1
    4580:	22 27       	eor	r18, r18
    4582:	33 27       	eor	r19, r19
    4584:	28 1b       	sub	r18, r24
    4586:	39 0b       	sbc	r19, r25
    4588:	8f 81       	ldd	r24, Y+7	; 0x07
    458a:	98 85       	ldd	r25, Y+8	; 0x08
    458c:	fc 01       	movw	r30, r24
    458e:	84 89       	ldd	r24, Z+20	; 0x14
    4590:	95 89       	ldd	r25, Z+21	; 0x15
    4592:	91 95       	neg	r25
    4594:	81 95       	neg	r24
    4596:	91 09       	sbc	r25, r1
	*/
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
    4598:	82 17       	cp	r24, r18
    459a:	93 07       	cpc	r25, r19
    459c:	2c f4       	brge	.+10     	; 0x45a8 <AnalogJoystickAdj+0xd0>
		(NABS(y_tmp) > -(this_joystick_cfg->y_deadzone))
	)
	{
		x_tmp=0;
    459e:	19 82       	std	Y+1, r1	; 0x01
    45a0:	1a 82       	std	Y+2, r1	; 0x02
		y_tmp=0;
    45a2:	1b 82       	std	Y+3, r1	; 0x03
    45a4:	1c 82       	std	Y+4, r1	; 0x04
    45a6:	88 c0       	rjmp	.+272    	; 0x46b8 <AnalogJoystickAdj+0x1e0>
	}
	else
	{
		if(x_tmp>0)
    45a8:	89 81       	ldd	r24, Y+1	; 0x01
    45aa:	9a 81       	ldd	r25, Y+2	; 0x02
    45ac:	18 16       	cp	r1, r24
    45ae:	19 06       	cpc	r1, r25
    45b0:	04 f5       	brge	.+64     	; 0x45f2 <AnalogJoystickAdj+0x11a>
		{
			x_tmp = ( (int32_t)GAMEPAD_X_MIN*x_tmp ) / (this_joystick_cfg->x_max); //min/max is (-)/(+)
    45b2:	89 81       	ldd	r24, Y+1	; 0x01
    45b4:	9a 81       	ldd	r25, Y+2	; 0x02
    45b6:	9c 01       	movw	r18, r24
    45b8:	44 27       	eor	r20, r20
    45ba:	37 fd       	sbrc	r19, 7
    45bc:	40 95       	com	r20
    45be:	54 2f       	mov	r21, r20
    45c0:	81 e8       	ldi	r24, 0x81	; 129
    45c2:	9f ef       	ldi	r25, 0xFF	; 255
    45c4:	dc 01       	movw	r26, r24
    45c6:	0e 94 45 49 	call	0x928a	; 0x928a <__mulohisi3>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	2f 81       	ldd	r18, Y+7	; 0x07
    45d0:	38 85       	ldd	r19, Y+8	; 0x08
    45d2:	f9 01       	movw	r30, r18
    45d4:	24 85       	ldd	r18, Z+12	; 0x0c
    45d6:	35 85       	ldd	r19, Z+13	; 0x0d
    45d8:	44 27       	eor	r20, r20
    45da:	37 fd       	sbrc	r19, 7
    45dc:	40 95       	com	r20
    45de:	54 2f       	mov	r21, r20
    45e0:	bc 01       	movw	r22, r24
    45e2:	cd 01       	movw	r24, r26
    45e4:	0e 94 1e 49 	call	0x923c	; 0x923c <__divmodsi4>
    45e8:	da 01       	movw	r26, r20
    45ea:	c9 01       	movw	r24, r18
    45ec:	89 83       	std	Y+1, r24	; 0x01
    45ee:	9a 83       	std	Y+2, r25	; 0x02
    45f0:	1f c0       	rjmp	.+62     	; 0x4630 <AnalogJoystickAdj+0x158>
		}
		else
		{
			x_tmp = ( (int32_t)GAMEPAD_X_MAX*x_tmp ) / (this_joystick_cfg->x_min); //max/min is (+)/(-)
    45f2:	89 81       	ldd	r24, Y+1	; 0x01
    45f4:	9a 81       	ldd	r25, Y+2	; 0x02
    45f6:	9c 01       	movw	r18, r24
    45f8:	44 27       	eor	r20, r20
    45fa:	37 fd       	sbrc	r19, 7
    45fc:	40 95       	com	r20
    45fe:	54 2f       	mov	r21, r20
    4600:	8f e7       	ldi	r24, 0x7F	; 127
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	dc 01       	movw	r26, r24
    4606:	0e 94 39 49 	call	0x9272	; 0x9272 <__muluhisi3>
    460a:	dc 01       	movw	r26, r24
    460c:	cb 01       	movw	r24, r22
    460e:	2f 81       	ldd	r18, Y+7	; 0x07
    4610:	38 85       	ldd	r19, Y+8	; 0x08
    4612:	f9 01       	movw	r30, r18
    4614:	22 85       	ldd	r18, Z+10	; 0x0a
    4616:	33 85       	ldd	r19, Z+11	; 0x0b
    4618:	44 27       	eor	r20, r20
    461a:	37 fd       	sbrc	r19, 7
    461c:	40 95       	com	r20
    461e:	54 2f       	mov	r21, r20
    4620:	bc 01       	movw	r22, r24
    4622:	cd 01       	movw	r24, r26
    4624:	0e 94 1e 49 	call	0x923c	; 0x923c <__divmodsi4>
    4628:	da 01       	movw	r26, r20
    462a:	c9 01       	movw	r24, r18
    462c:	89 83       	std	Y+1, r24	; 0x01
    462e:	9a 83       	std	Y+2, r25	; 0x02
		}
		if(y_tmp>0)
    4630:	8b 81       	ldd	r24, Y+3	; 0x03
    4632:	9c 81       	ldd	r25, Y+4	; 0x04
    4634:	18 16       	cp	r1, r24
    4636:	19 06       	cpc	r1, r25
    4638:	04 f5       	brge	.+64     	; 0x467a <AnalogJoystickAdj+0x1a2>
		{
			y_tmp = ( (int32_t)GAMEPAD_Y_MIN*y_tmp ) / (this_joystick_cfg->y_max); //min/max is (-)/(+)
    463a:	8b 81       	ldd	r24, Y+3	; 0x03
    463c:	9c 81       	ldd	r25, Y+4	; 0x04
    463e:	9c 01       	movw	r18, r24
    4640:	44 27       	eor	r20, r20
    4642:	37 fd       	sbrc	r19, 7
    4644:	40 95       	com	r20
    4646:	54 2f       	mov	r21, r20
    4648:	81 e8       	ldi	r24, 0x81	; 129
    464a:	9f ef       	ldi	r25, 0xFF	; 255
    464c:	dc 01       	movw	r26, r24
    464e:	0e 94 45 49 	call	0x928a	; 0x928a <__mulohisi3>
    4652:	dc 01       	movw	r26, r24
    4654:	cb 01       	movw	r24, r22
    4656:	2f 81       	ldd	r18, Y+7	; 0x07
    4658:	38 85       	ldd	r19, Y+8	; 0x08
    465a:	f9 01       	movw	r30, r18
    465c:	20 89       	ldd	r18, Z+16	; 0x10
    465e:	31 89       	ldd	r19, Z+17	; 0x11
    4660:	44 27       	eor	r20, r20
    4662:	37 fd       	sbrc	r19, 7
    4664:	40 95       	com	r20
    4666:	54 2f       	mov	r21, r20
    4668:	bc 01       	movw	r22, r24
    466a:	cd 01       	movw	r24, r26
    466c:	0e 94 1e 49 	call	0x923c	; 0x923c <__divmodsi4>
    4670:	da 01       	movw	r26, r20
    4672:	c9 01       	movw	r24, r18
    4674:	8b 83       	std	Y+3, r24	; 0x03
    4676:	9c 83       	std	Y+4, r25	; 0x04
    4678:	1f c0       	rjmp	.+62     	; 0x46b8 <AnalogJoystickAdj+0x1e0>
		}
		else
		{
			y_tmp = ( (int32_t)GAMEPAD_Y_MAX*y_tmp ) / (this_joystick_cfg->y_min); //max/min is (+)/(-)
    467a:	8b 81       	ldd	r24, Y+3	; 0x03
    467c:	9c 81       	ldd	r25, Y+4	; 0x04
    467e:	9c 01       	movw	r18, r24
    4680:	44 27       	eor	r20, r20
    4682:	37 fd       	sbrc	r19, 7
    4684:	40 95       	com	r20
    4686:	54 2f       	mov	r21, r20
    4688:	8f e7       	ldi	r24, 0x7F	; 127
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	dc 01       	movw	r26, r24
    468e:	0e 94 39 49 	call	0x9272	; 0x9272 <__muluhisi3>
    4692:	dc 01       	movw	r26, r24
    4694:	cb 01       	movw	r24, r22
    4696:	2f 81       	ldd	r18, Y+7	; 0x07
    4698:	38 85       	ldd	r19, Y+8	; 0x08
    469a:	f9 01       	movw	r30, r18
    469c:	26 85       	ldd	r18, Z+14	; 0x0e
    469e:	37 85       	ldd	r19, Z+15	; 0x0f
    46a0:	44 27       	eor	r20, r20
    46a2:	37 fd       	sbrc	r19, 7
    46a4:	40 95       	com	r20
    46a6:	54 2f       	mov	r21, r20
    46a8:	bc 01       	movw	r22, r24
    46aa:	cd 01       	movw	r24, r26
    46ac:	0e 94 1e 49 	call	0x923c	; 0x923c <__divmodsi4>
    46b0:	da 01       	movw	r26, r20
    46b2:	c9 01       	movw	r24, r18
    46b4:	8b 83       	std	Y+3, r24	; 0x03
    46b6:	9c 83       	std	Y+4, r25	; 0x04
	// Adjust for sensitivity:
	//x /= GAMEPAD_RESOLUTION;
	//y /= GAMEPAD_RESOLUTION;
	
	// Gamepad range is [-127,127]. Fix if out of bounds:
	if (x_tmp > GAMEPAD_X_MAX) {
    46b8:	89 81       	ldd	r24, Y+1	; 0x01
    46ba:	9a 81       	ldd	r25, Y+2	; 0x02
    46bc:	80 38       	cpi	r24, 0x80	; 128
    46be:	91 05       	cpc	r25, r1
    46c0:	2c f0       	brlt	.+10     	; 0x46cc <AnalogJoystickAdj+0x1f4>
		x_tmp = GAMEPAD_X_MAX;
    46c2:	8f e7       	ldi	r24, 0x7F	; 127
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	89 83       	std	Y+1, r24	; 0x01
    46c8:	9a 83       	std	Y+2, r25	; 0x02
    46ca:	0a c0       	rjmp	.+20     	; 0x46e0 <AnalogJoystickAdj+0x208>
	}
	else if (x_tmp < GAMEPAD_X_MIN) {
    46cc:	89 81       	ldd	r24, Y+1	; 0x01
    46ce:	9a 81       	ldd	r25, Y+2	; 0x02
    46d0:	81 38       	cpi	r24, 0x81	; 129
    46d2:	ff ef       	ldi	r31, 0xFF	; 255
    46d4:	9f 07       	cpc	r25, r31
    46d6:	24 f4       	brge	.+8      	; 0x46e0 <AnalogJoystickAdj+0x208>
		x_tmp = GAMEPAD_X_MIN;
    46d8:	81 e8       	ldi	r24, 0x81	; 129
    46da:	9f ef       	ldi	r25, 0xFF	; 255
    46dc:	89 83       	std	Y+1, r24	; 0x01
    46de:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	if (y_tmp > GAMEPAD_Y_MAX) {
    46e0:	8b 81       	ldd	r24, Y+3	; 0x03
    46e2:	9c 81       	ldd	r25, Y+4	; 0x04
    46e4:	80 38       	cpi	r24, 0x80	; 128
    46e6:	91 05       	cpc	r25, r1
    46e8:	2c f0       	brlt	.+10     	; 0x46f4 <AnalogJoystickAdj+0x21c>
		y_tmp = GAMEPAD_Y_MAX;
    46ea:	8f e7       	ldi	r24, 0x7F	; 127
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	8b 83       	std	Y+3, r24	; 0x03
    46f0:	9c 83       	std	Y+4, r25	; 0x04
    46f2:	0a c0       	rjmp	.+20     	; 0x4708 <AnalogJoystickAdj+0x230>
	}
	else if (y_tmp < GAMEPAD_Y_MIN) {
    46f4:	8b 81       	ldd	r24, Y+3	; 0x03
    46f6:	9c 81       	ldd	r25, Y+4	; 0x04
    46f8:	81 38       	cpi	r24, 0x81	; 129
    46fa:	2f ef       	ldi	r18, 0xFF	; 255
    46fc:	92 07       	cpc	r25, r18
    46fe:	24 f4       	brge	.+8      	; 0x4708 <AnalogJoystickAdj+0x230>
		y_tmp = GAMEPAD_Y_MIN;
    4700:	81 e8       	ldi	r24, 0x81	; 129
    4702:	9f ef       	ldi	r25, 0xFF	; 255
    4704:	8b 83       	std	Y+3, r24	; 0x03
    4706:	9c 83       	std	Y+4, r25	; 0x04
	}	
	
	out->x = (int8_t)x_tmp;
    4708:	29 81       	ldd	r18, Y+1	; 0x01
    470a:	8b 85       	ldd	r24, Y+11	; 0x0b
    470c:	9c 85       	ldd	r25, Y+12	; 0x0c
    470e:	fc 01       	movw	r30, r24
    4710:	20 83       	st	Z, r18
	out->y = (int8_t)y_tmp;
    4712:	2b 81       	ldd	r18, Y+3	; 0x03
    4714:	8b 85       	ldd	r24, Y+11	; 0x0b
    4716:	9c 85       	ldd	r25, Y+12	; 0x0c
    4718:	fc 01       	movw	r30, r24
    471a:	21 83       	std	Z+1, r18	; 0x01
}
    471c:	2c 96       	adiw	r28, 0x0c	; 12
    471e:	cd bf       	out	0x3d, r28	; 61
    4720:	de bf       	out	0x3e, r29	; 62
    4722:	df 91       	pop	r29
    4724:	cf 91       	pop	r28
    4726:	08 95       	ret

00004728 <MouseJoystickAdj>:
//map from ADC range [0,4095] to mouse range [-2048,+2047]
//Joystick orientations:
//left:- , right:+
//up:- , down:+
void MouseJoystickAdj( const uint16_xy * center, JoystickConfiguration *this_joystick_cfg, const uint16_xy * raw, int16_xy * out )
{
    4728:	cf 93       	push	r28
    472a:	df 93       	push	r29
    472c:	cd b7       	in	r28, 0x3d	; 61
    472e:	de b7       	in	r29, 0x3e	; 62
    4730:	2c 97       	sbiw	r28, 0x0c	; 12
    4732:	cd bf       	out	0x3d, r28	; 61
    4734:	de bf       	out	0x3e, r29	; 62
    4736:	8d 83       	std	Y+5, r24	; 0x05
    4738:	9e 83       	std	Y+6, r25	; 0x06
    473a:	6f 83       	std	Y+7, r22	; 0x07
    473c:	78 87       	std	Y+8, r23	; 0x08
    473e:	49 87       	std	Y+9, r20	; 0x09
    4740:	5a 87       	std	Y+10, r21	; 0x0a
    4742:	2b 87       	std	Y+11, r18	; 0x0b
    4744:	3c 87       	std	Y+12, r19	; 0x0c
	int16_t x_tmp = raw->x;
    4746:	89 85       	ldd	r24, Y+9	; 0x09
    4748:	9a 85       	ldd	r25, Y+10	; 0x0a
    474a:	fc 01       	movw	r30, r24
    474c:	80 81       	ld	r24, Z
    474e:	91 81       	ldd	r25, Z+1	; 0x01
    4750:	89 83       	std	Y+1, r24	; 0x01
    4752:	9a 83       	std	Y+2, r25	; 0x02
	int16_t y_tmp = raw->y;
    4754:	89 85       	ldd	r24, Y+9	; 0x09
    4756:	9a 85       	ldd	r25, Y+10	; 0x0a
    4758:	fc 01       	movw	r30, r24
    475a:	82 81       	ldd	r24, Z+2	; 0x02
    475c:	93 81       	ldd	r25, Z+3	; 0x03
    475e:	8b 83       	std	Y+3, r24	; 0x03
    4760:	9c 83       	std	Y+4, r25	; 0x04
	
	//Implementation #3
	// Correct for the center position:
	x_tmp -= center->x; //calibration and unsigned to signed conversion
    4762:	29 81       	ldd	r18, Y+1	; 0x01
    4764:	3a 81       	ldd	r19, Y+2	; 0x02
    4766:	8d 81       	ldd	r24, Y+5	; 0x05
    4768:	9e 81       	ldd	r25, Y+6	; 0x06
    476a:	fc 01       	movw	r30, r24
    476c:	80 81       	ld	r24, Z
    476e:	91 81       	ldd	r25, Z+1	; 0x01
    4770:	a9 01       	movw	r20, r18
    4772:	48 1b       	sub	r20, r24
    4774:	59 0b       	sbc	r21, r25
    4776:	ca 01       	movw	r24, r20
    4778:	89 83       	std	Y+1, r24	; 0x01
    477a:	9a 83       	std	Y+2, r25	; 0x02
	y_tmp -= center->y; //calibration and unsigned to signed conversion
    477c:	2b 81       	ldd	r18, Y+3	; 0x03
    477e:	3c 81       	ldd	r19, Y+4	; 0x04
    4780:	8d 81       	ldd	r24, Y+5	; 0x05
    4782:	9e 81       	ldd	r25, Y+6	; 0x06
    4784:	fc 01       	movw	r30, r24
    4786:	82 81       	ldd	r24, Z+2	; 0x02
    4788:	93 81       	ldd	r25, Z+3	; 0x03
    478a:	a9 01       	movw	r20, r18
    478c:	48 1b       	sub	r20, r24
    478e:	59 0b       	sbc	r21, r25
    4790:	ca 01       	movw	r24, r20
    4792:	8b 83       	std	Y+3, r24	; 0x03
    4794:	9c 83       	std	Y+4, r25	; 0x04
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
    4796:	89 81       	ldd	r24, Y+1	; 0x01
    4798:	9a 81       	ldd	r25, Y+2	; 0x02
    479a:	99 23       	and	r25, r25
    479c:	1c f4       	brge	.+6      	; 0x47a4 <MouseJoystickAdj+0x7c>
    479e:	91 95       	neg	r25
    47a0:	81 95       	neg	r24
    47a2:	91 09       	sbc	r25, r1
    47a4:	22 27       	eor	r18, r18
    47a6:	33 27       	eor	r19, r19
    47a8:	28 1b       	sub	r18, r24
    47aa:	39 0b       	sbc	r19, r25
    47ac:	8f 81       	ldd	r24, Y+7	; 0x07
    47ae:	98 85       	ldd	r25, Y+8	; 0x08
    47b0:	fc 01       	movw	r30, r24
    47b2:	82 89       	ldd	r24, Z+18	; 0x12
    47b4:	93 89       	ldd	r25, Z+19	; 0x13
    47b6:	91 95       	neg	r25
    47b8:	81 95       	neg	r24
    47ba:	91 09       	sbc	r25, r1
	x_tmp -= center->x; //calibration and unsigned to signed conversion
	y_tmp -= center->y; //calibration and unsigned to signed conversion
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
    47bc:	82 17       	cp	r24, r18
    47be:	93 07       	cpc	r25, r19
    47c0:	dc f4       	brge	.+54     	; 0x47f8 <MouseJoystickAdj+0xd0>
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
		(NABS(y_tmp) > -(this_joystick_cfg->y_deadzone))
    47c2:	8b 81       	ldd	r24, Y+3	; 0x03
    47c4:	9c 81       	ldd	r25, Y+4	; 0x04
    47c6:	99 23       	and	r25, r25
    47c8:	1c f4       	brge	.+6      	; 0x47d0 <MouseJoystickAdj+0xa8>
    47ca:	91 95       	neg	r25
    47cc:	81 95       	neg	r24
    47ce:	91 09       	sbc	r25, r1
    47d0:	22 27       	eor	r18, r18
    47d2:	33 27       	eor	r19, r19
    47d4:	28 1b       	sub	r18, r24
    47d6:	39 0b       	sbc	r19, r25
    47d8:	8f 81       	ldd	r24, Y+7	; 0x07
    47da:	98 85       	ldd	r25, Y+8	; 0x08
    47dc:	fc 01       	movw	r30, r24
    47de:	84 89       	ldd	r24, Z+20	; 0x14
    47e0:	95 89       	ldd	r25, Z+21	; 0x15
    47e2:	91 95       	neg	r25
    47e4:	81 95       	neg	r24
    47e6:	91 09       	sbc	r25, r1
	y_tmp -= center->y; //calibration and unsigned to signed conversion
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
    47e8:	82 17       	cp	r24, r18
    47ea:	93 07       	cpc	r25, r19
    47ec:	2c f4       	brge	.+10     	; 0x47f8 <MouseJoystickAdj+0xd0>
		(NABS(y_tmp) > -(this_joystick_cfg->y_deadzone))
	)
	{
		x_tmp=0;
    47ee:	19 82       	std	Y+1, r1	; 0x01
    47f0:	1a 82       	std	Y+2, r1	; 0x02
		y_tmp=0;
    47f2:	1b 82       	std	Y+3, r1	; 0x03
    47f4:	1c 82       	std	Y+4, r1	; 0x04
    47f6:	0e c0       	rjmp	.+28     	; 0x4814 <MouseJoystickAdj+0xec>
		else
		{
			y_tmp = ( (int32_t)MOUSE_Y_MAX*y_tmp ) / (this_joystick_cfg->y_min); //max/min is (+)/(-)
		}
		*/
		x_tmp = -x_tmp;
    47f8:	89 81       	ldd	r24, Y+1	; 0x01
    47fa:	9a 81       	ldd	r25, Y+2	; 0x02
    47fc:	91 95       	neg	r25
    47fe:	81 95       	neg	r24
    4800:	91 09       	sbc	r25, r1
    4802:	89 83       	std	Y+1, r24	; 0x01
    4804:	9a 83       	std	Y+2, r25	; 0x02
		y_tmp = -y_tmp;
    4806:	8b 81       	ldd	r24, Y+3	; 0x03
    4808:	9c 81       	ldd	r25, Y+4	; 0x04
    480a:	91 95       	neg	r25
    480c:	81 95       	neg	r24
    480e:	91 09       	sbc	r25, r1
    4810:	8b 83       	std	Y+3, r24	; 0x03
    4812:	9c 83       	std	Y+4, r25	; 0x04
	// Adjust for sensitivity:
	//x /= MOUSE_RESOLUTION;
	//y /= MOUSE_RESOLUTION;
	
	// Gamepad range is [-2048,2047]. Fix if out of bounds:
	if (x_tmp > MOUSE_X_MAX) {
    4814:	89 81       	ldd	r24, Y+1	; 0x01
    4816:	9a 81       	ldd	r25, Y+2	; 0x02
    4818:	81 15       	cp	r24, r1
    481a:	f8 e0       	ldi	r31, 0x08	; 8
    481c:	9f 07       	cpc	r25, r31
    481e:	2c f0       	brlt	.+10     	; 0x482a <MouseJoystickAdj+0x102>
		x_tmp = MOUSE_X_MAX;
    4820:	8f ef       	ldi	r24, 0xFF	; 255
    4822:	97 e0       	ldi	r25, 0x07	; 7
    4824:	89 83       	std	Y+1, r24	; 0x01
    4826:	9a 83       	std	Y+2, r25	; 0x02
    4828:	0a c0       	rjmp	.+20     	; 0x483e <MouseJoystickAdj+0x116>
	}
	else if (x_tmp < MOUSE_X_MIN) {
    482a:	89 81       	ldd	r24, Y+1	; 0x01
    482c:	9a 81       	ldd	r25, Y+2	; 0x02
    482e:	81 15       	cp	r24, r1
    4830:	28 ef       	ldi	r18, 0xF8	; 248
    4832:	92 07       	cpc	r25, r18
    4834:	24 f4       	brge	.+8      	; 0x483e <MouseJoystickAdj+0x116>
		x_tmp = MOUSE_X_MIN;
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	98 ef       	ldi	r25, 0xF8	; 248
    483a:	89 83       	std	Y+1, r24	; 0x01
    483c:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	if (y_tmp > MOUSE_Y_MAX) {
    483e:	8b 81       	ldd	r24, Y+3	; 0x03
    4840:	9c 81       	ldd	r25, Y+4	; 0x04
    4842:	81 15       	cp	r24, r1
    4844:	48 e0       	ldi	r20, 0x08	; 8
    4846:	94 07       	cpc	r25, r20
    4848:	2c f0       	brlt	.+10     	; 0x4854 <MouseJoystickAdj+0x12c>
		y_tmp = MOUSE_Y_MAX;
    484a:	8f ef       	ldi	r24, 0xFF	; 255
    484c:	97 e0       	ldi	r25, 0x07	; 7
    484e:	8b 83       	std	Y+3, r24	; 0x03
    4850:	9c 83       	std	Y+4, r25	; 0x04
    4852:	0a c0       	rjmp	.+20     	; 0x4868 <MouseJoystickAdj+0x140>
	}
	else if (y_tmp < MOUSE_Y_MIN) {
    4854:	8b 81       	ldd	r24, Y+3	; 0x03
    4856:	9c 81       	ldd	r25, Y+4	; 0x04
    4858:	81 15       	cp	r24, r1
    485a:	58 ef       	ldi	r21, 0xF8	; 248
    485c:	95 07       	cpc	r25, r21
    485e:	24 f4       	brge	.+8      	; 0x4868 <MouseJoystickAdj+0x140>
		y_tmp = MOUSE_Y_MIN;
    4860:	80 e0       	ldi	r24, 0x00	; 0
    4862:	98 ef       	ldi	r25, 0xF8	; 248
    4864:	8b 83       	std	Y+3, r24	; 0x03
    4866:	9c 83       	std	Y+4, r25	; 0x04
	}	
	
	out->x = (int16_t)x_tmp;
    4868:	8b 85       	ldd	r24, Y+11	; 0x0b
    486a:	9c 85       	ldd	r25, Y+12	; 0x0c
    486c:	29 81       	ldd	r18, Y+1	; 0x01
    486e:	3a 81       	ldd	r19, Y+2	; 0x02
    4870:	fc 01       	movw	r30, r24
    4872:	20 83       	st	Z, r18
    4874:	31 83       	std	Z+1, r19	; 0x01
	out->y = (int16_t)y_tmp;
    4876:	8b 85       	ldd	r24, Y+11	; 0x0b
    4878:	9c 85       	ldd	r25, Y+12	; 0x0c
    487a:	2b 81       	ldd	r18, Y+3	; 0x03
    487c:	3c 81       	ldd	r19, Y+4	; 0x04
    487e:	fc 01       	movw	r30, r24
    4880:	22 83       	std	Z+2, r18	; 0x02
    4882:	33 83       	std	Z+3, r19	; 0x03
}
    4884:	2c 96       	adiw	r28, 0x0c	; 12
    4886:	cd bf       	out	0x3d, r28	; 61
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	df 91       	pop	r29
    488c:	cf 91       	pop	r28
    488e:	08 95       	ret

00004890 <sleep_set_mode>:
    4890:	cf 93       	push	r28
    4892:	df 93       	push	r29
    4894:	1f 92       	push	r1
    4896:	cd b7       	in	r28, 0x3d	; 61
    4898:	de b7       	in	r29, 0x3e	; 62
    489a:	89 83       	std	Y+1, r24	; 0x01
    489c:	88 e4       	ldi	r24, 0x48	; 72
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	28 e4       	ldi	r18, 0x48	; 72
    48a2:	30 e0       	ldi	r19, 0x00	; 0
    48a4:	f9 01       	movw	r30, r18
    48a6:	20 81       	ld	r18, Z
    48a8:	32 2f       	mov	r19, r18
    48aa:	31 7f       	andi	r19, 0xF1	; 241
    48ac:	29 81       	ldd	r18, Y+1	; 0x01
    48ae:	23 2b       	or	r18, r19
    48b0:	fc 01       	movw	r30, r24
    48b2:	20 83       	st	Z, r18
    48b4:	0f 90       	pop	r0
    48b6:	df 91       	pop	r29
    48b8:	cf 91       	pop	r28
    48ba:	08 95       	ret

000048bc <ioport_get_pin_level>:
    48bc:	cf 93       	push	r28
    48be:	df 93       	push	r29
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	28 97       	sbiw	r28, 0x08	; 8
    48c6:	cd bf       	out	0x3d, r28	; 61
    48c8:	de bf       	out	0x3e, r29	; 62
    48ca:	88 87       	std	Y+8, r24	; 0x08
    48cc:	88 85       	ldd	r24, Y+8	; 0x08
    48ce:	89 83       	std	Y+1, r24	; 0x01
    48d0:	89 81       	ldd	r24, Y+1	; 0x01
    48d2:	8a 83       	std	Y+2, r24	; 0x02
    48d4:	8a 81       	ldd	r24, Y+2	; 0x02
    48d6:	8b 83       	std	Y+3, r24	; 0x03
    48d8:	8b 81       	ldd	r24, Y+3	; 0x03
    48da:	86 95       	lsr	r24
    48dc:	86 95       	lsr	r24
    48de:	86 95       	lsr	r24
    48e0:	8c 83       	std	Y+4, r24	; 0x04
    48e2:	8c 81       	ldd	r24, Y+4	; 0x04
    48e4:	88 2f       	mov	r24, r24
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	88 0f       	add	r24, r24
    48ea:	99 1f       	adc	r25, r25
    48ec:	82 95       	swap	r24
    48ee:	92 95       	swap	r25
    48f0:	90 7f       	andi	r25, 0xF0	; 240
    48f2:	98 27       	eor	r25, r24
    48f4:	80 7f       	andi	r24, 0xF0	; 240
    48f6:	98 27       	eor	r25, r24
    48f8:	9a 5f       	subi	r25, 0xFA	; 250
    48fa:	8d 83       	std	Y+5, r24	; 0x05
    48fc:	9e 83       	std	Y+6, r25	; 0x06
    48fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4900:	9e 81       	ldd	r25, Y+6	; 0x06
    4902:	fc 01       	movw	r30, r24
    4904:	40 85       	ldd	r20, Z+8	; 0x08
    4906:	89 81       	ldd	r24, Y+1	; 0x01
    4908:	8f 83       	std	Y+7, r24	; 0x07
    490a:	8f 81       	ldd	r24, Y+7	; 0x07
    490c:	88 2f       	mov	r24, r24
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	9c 01       	movw	r18, r24
    4912:	27 70       	andi	r18, 0x07	; 7
    4914:	33 27       	eor	r19, r19
    4916:	81 e0       	ldi	r24, 0x01	; 1
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	02 2e       	mov	r0, r18
    491c:	02 c0       	rjmp	.+4      	; 0x4922 <ioport_get_pin_level+0x66>
    491e:	88 0f       	add	r24, r24
    4920:	99 1f       	adc	r25, r25
    4922:	0a 94       	dec	r0
    4924:	e2 f7       	brpl	.-8      	; 0x491e <ioport_get_pin_level+0x62>
    4926:	94 2f       	mov	r25, r20
    4928:	98 23       	and	r25, r24
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	99 23       	and	r25, r25
    492e:	09 f4       	brne	.+2      	; 0x4932 <ioport_get_pin_level+0x76>
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	28 96       	adiw	r28, 0x08	; 8
    4934:	cd bf       	out	0x3d, r28	; 61
    4936:	de bf       	out	0x3e, r29	; 62
    4938:	df 91       	pop	r29
    493a:	cf 91       	pop	r28
    493c:	08 95       	ret

0000493e <reset_do_soft_reset>:
{
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
    4946:	61 e0       	ldi	r22, 0x01	; 1
    4948:	89 e7       	ldi	r24, 0x79	; 121
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <ccp_write_io>

	while (1) {
		/* Intentionally empty. */
	}
    4950:	ff cf       	rjmp	.-2      	; 0x4950 <reset_do_soft_reset+0x12>

00004952 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    4952:	61 50       	subi	r22, 0x01	; 1
    4954:	71 09       	sbc	r23, r1
    4956:	81 09       	sbc	r24, r1
    4958:	91 09       	sbc	r25, r1
    495a:	d9 f7       	brne	.-10     	; 0x4952 <__portable_avr_delay_cycles>
}
    495c:	08 95       	ret

0000495e <powerOff>:
extern struct GlobalHeader global_header;  // The current global header.

bool Wakeup(uint16_t timeout_ms);

void powerOff(bool powerOffSoftware) 
{
    495e:	cf 93       	push	r28
    4960:	df 93       	push	r29
    4962:	1f 92       	push	r1
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
    4968:	89 83       	std	Y+1, r24	; 0x01
	WatchdogPet();
    496a:	02 d6       	rcall	.+3076   	; 0x5570 <WatchdogPet>
	WatchDogEnable(false);
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	2b d6       	rcall	.+3158   	; 0x55c6 <WatchDogEnable>
	turnBTOff();
    4970:	0e 94 ad 40 	call	0x815a	; 0x815a <turnBTOff>
	
	delay_ms(20);
    4974:	6a ea       	ldi	r22, 0xAA	; 170
    4976:	70 ea       	ldi	r23, 0xA0	; 160
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	ea df       	rcall	.-44     	; 0x4952 <__portable_avr_delay_cycles>
	cpu_irq_enable();	
    497e:	78 94       	sei

	sleep_set_mode(SLEEP_MODE_PWR_DOWN);
    4980:	84 e0       	ldi	r24, 0x04	; 4
    4982:	86 df       	rcall	.-244    	; 0x4890 <sleep_set_mode>
	sleep_enable();
    4984:	88 e4       	ldi	r24, 0x48	; 72
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	28 e4       	ldi	r18, 0x48	; 72
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	f9 01       	movw	r30, r18
    498e:	20 81       	ld	r18, Z
    4990:	21 60       	ori	r18, 0x01	; 1
    4992:	fc 01       	movw	r30, r24
    4994:	20 83       	st	Z, r18
    4996:	01 c0       	rjmp	.+2      	; 0x499a <powerOff+0x3c>
			
			if( Wakeup(STARTUP_HOLD_TIME_MS) )
			{
				break; //don't reenter sleep
			}
	}
    4998:	00 00       	nop
	sleep_set_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	
	while(1)
	{
			sleep_enter();
    499a:	88 95       	sleep
			
			//EXECUTION STARTS HERE AFTER START_PIN EXTERNAL INTERRUPT ISR
			
			if( Wakeup(STARTUP_HOLD_TIME_MS) )
    499c:	80 ed       	ldi	r24, 0xD0	; 208
    499e:	97 e0       	ldi	r25, 0x07	; 7
    49a0:	11 d0       	rcall	.+34     	; 0x49c4 <Wakeup>
    49a2:	88 23       	and	r24, r24
    49a4:	c9 f3       	breq	.-14     	; 0x4998 <powerOff+0x3a>
			{
				break; //don't reenter sleep
    49a6:	00 00       	nop
			}
	}
	
	sleep_disable();
    49a8:	88 e4       	ldi	r24, 0x48	; 72
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	28 e4       	ldi	r18, 0x48	; 72
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	f9 01       	movw	r30, r18
    49b2:	20 81       	ld	r18, Z
    49b4:	2e 7f       	andi	r18, 0xFE	; 254
    49b6:	fc 01       	movw	r30, r24
    49b8:	20 83       	st	Z, r18
	reset_do_soft_reset();
    49ba:	c1 df       	rcall	.-126    	; 0x493e <reset_do_soft_reset>
}
    49bc:	0f 90       	pop	r0
    49be:	df 91       	pop	r29
    49c0:	cf 91       	pop	r28
    49c2:	08 95       	ret

000049c4 <Wakeup>:

bool Wakeup(uint16_t timeout_ms)
{
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	cd b7       	in	r28, 0x3d	; 61
    49ca:	de b7       	in	r29, 0x3e	; 62
    49cc:	2b 97       	sbiw	r28, 0x0b	; 11
    49ce:	cd bf       	out	0x3d, r28	; 61
    49d0:	de bf       	out	0x3e, r29	; 62
    49d2:	8a 87       	std	Y+10, r24	; 0x0a
    49d4:	9b 87       	std	Y+11, r25	; 0x0b
	
	cfgsel_t which_cfg;
	struct Timeout t;
	startTimeout( &t, timeout_ms );
    49d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    49d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    49da:	cc 01       	movw	r24, r24
    49dc:	a0 e0       	ldi	r26, 0x00	; 0
    49de:	b0 e0       	ldi	r27, 0x00	; 0
    49e0:	9e 01       	movw	r18, r28
    49e2:	2e 5f       	subi	r18, 0xFE	; 254
    49e4:	3f 4f       	sbci	r19, 0xFF	; 255
    49e6:	ac 01       	movw	r20, r24
    49e8:	bd 01       	movw	r22, r26
    49ea:	c9 01       	movw	r24, r18
    49ec:	39 d2       	rcall	.+1138   	; 0x4e60 <startTimeout>
	which_cfg = whichConfiguration();
    49ee:	0e 94 80 11 	call	0x2300	; 0x2300 <whichConfiguration>
    49f2:	89 83       	std	Y+1, r24	; 0x01

	while( ! checkTimeout(&t) )
    49f4:	0a c0       	rjmp	.+20     	; 0x4a0a <Wakeup+0x46>
	{
		if( ! buttonActivated(B_START) )
    49f6:	88 e0       	ldi	r24, 0x08	; 8
    49f8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    49fc:	98 2f       	mov	r25, r24
    49fe:	81 e0       	ldi	r24, 0x01	; 1
    4a00:	89 27       	eor	r24, r25
    4a02:	88 23       	and	r24, r24
    4a04:	11 f0       	breq	.+4      	; 0x4a0a <Wakeup+0x46>
		{
			return false;
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	0c c0       	rjmp	.+24     	; 0x4a22 <Wakeup+0x5e>
	cfgsel_t which_cfg;
	struct Timeout t;
	startTimeout( &t, timeout_ms );
	which_cfg = whichConfiguration();

	while( ! checkTimeout(&t) )
    4a0a:	ce 01       	movw	r24, r28
    4a0c:	02 96       	adiw	r24, 0x02	; 2
    4a0e:	50 d2       	rcall	.+1184   	; 0x4eb0 <checkTimeout>
    4a10:	98 2f       	mov	r25, r24
    4a12:	81 e0       	ldi	r24, 0x01	; 1
    4a14:	89 27       	eor	r24, r25
    4a16:	88 23       	and	r24, r24
    4a18:	71 f7       	brne	.-36     	; 0x49f6 <Wakeup+0x32>
		if( ! buttonActivated(B_START) )
		{
			return false;
		}
	}
	loadConfiguration(which_cfg);
    4a1a:	89 81       	ldd	r24, Y+1	; 0x01
    4a1c:	0e 94 ae 10 	call	0x215c	; 0x215c <loadConfiguration>
	return true;
    4a20:	81 e0       	ldi	r24, 0x01	; 1
}
    4a22:	2b 96       	adiw	r28, 0x0b	; 11
    4a24:	cd bf       	out	0x3d, r28	; 61
    4a26:	de bf       	out	0x3e, r29	; 62
    4a28:	df 91       	pop	r29
    4a2a:	cf 91       	pop	r28
    4a2c:	08 95       	ret

00004a2e <checkForStartUp>:

// Start Button must be held down for timeout_ms
// Returns True for Startup
// Returns False for PowerOff
bool checkForStartUp(uint16_t timeout_ms) {
    4a2e:	cf 92       	push	r12
    4a30:	df 92       	push	r13
    4a32:	ef 92       	push	r14
    4a34:	ff 92       	push	r15
    4a36:	cf 93       	push	r28
    4a38:	df 93       	push	r29
    4a3a:	cd b7       	in	r28, 0x3d	; 61
    4a3c:	de b7       	in	r29, 0x3e	; 62
    4a3e:	27 97       	sbiw	r28, 0x07	; 7
    4a40:	cd bf       	out	0x3d, r28	; 61
    4a42:	de bf       	out	0x3e, r29	; 62
    4a44:	8e 83       	std	Y+6, r24	; 0x06
    4a46:	9f 83       	std	Y+7, r25	; 0x07
	// Loop and Monitor START_PIN to make sure it's pressed.
	// Return value when timeout has been reached. 
	WatchdogPet();	
    4a48:	93 d5       	rcall	.+2854   	; 0x5570 <WatchdogPet>
	WatchDogEnable(false);
    4a4a:	80 e0       	ldi	r24, 0x00	; 0
    4a4c:	bc d5       	rcall	.+2936   	; 0x55c6 <WatchDogEnable>
	uint32_t count = getSystemTime();
    4a4e:	c5 d1       	rcall	.+906    	; 0x4dda <getSystemTime>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	89 83       	std	Y+1, r24	; 0x01
    4a56:	9a 83       	std	Y+2, r25	; 0x02
    4a58:	ab 83       	std	Y+3, r26	; 0x03
    4a5a:	bc 83       	std	Y+4, r27	; 0x04

	while (ioport_get_pin_level(START_PIN)); 
    4a5c:	00 00       	nop
    4a5e:	8a e2       	ldi	r24, 0x2A	; 42
    4a60:	2d df       	rcall	.-422    	; 0x48bc <ioport_get_pin_level>
    4a62:	88 23       	and	r24, r24
    4a64:	e1 f7       	brne	.-8      	; 0x4a5e <checkForStartUp+0x30>
	{
		delay_ms(10);		
    4a66:	65 e5       	ldi	r22, 0x55	; 85
    4a68:	70 ed       	ldi	r23, 0xD0	; 208
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	71 df       	rcall	.-286    	; 0x4952 <__portable_avr_delay_cycles>
	} 
	
	bool turn_on = (count + timeout_ms) > getSystemTime();
    4a70:	8e 81       	ldd	r24, Y+6	; 0x06
    4a72:	9f 81       	ldd	r25, Y+7	; 0x07
    4a74:	9c 01       	movw	r18, r24
    4a76:	40 e0       	ldi	r20, 0x00	; 0
    4a78:	50 e0       	ldi	r21, 0x00	; 0
    4a7a:	89 81       	ldd	r24, Y+1	; 0x01
    4a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a7e:	ab 81       	ldd	r26, Y+3	; 0x03
    4a80:	bc 81       	ldd	r27, Y+4	; 0x04
    4a82:	69 01       	movw	r12, r18
    4a84:	7a 01       	movw	r14, r20
    4a86:	c8 0e       	add	r12, r24
    4a88:	d9 1e       	adc	r13, r25
    4a8a:	ea 1e       	adc	r14, r26
    4a8c:	fb 1e       	adc	r15, r27
    4a8e:	a5 d1       	rcall	.+842    	; 0x4dda <getSystemTime>
    4a90:	dc 01       	movw	r26, r24
    4a92:	cb 01       	movw	r24, r22
    4a94:	21 e0       	ldi	r18, 0x01	; 1
    4a96:	8c 15       	cp	r24, r12
    4a98:	9d 05       	cpc	r25, r13
    4a9a:	ae 05       	cpc	r26, r14
    4a9c:	bf 05       	cpc	r27, r15
    4a9e:	08 f0       	brcs	.+2      	; 0x4aa2 <checkForStartUp+0x74>
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	2d 83       	std	Y+5, r18	; 0x05

	WatchDogEnable(true); 
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	8f d5       	rcall	.+2846   	; 0x55c6 <WatchDogEnable>
	WatchdogPet();
    4aa8:	63 d5       	rcall	.+2758   	; 0x5570 <WatchdogPet>
	return turn_on;
    4aaa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4aac:	27 96       	adiw	r28, 0x07	; 7
    4aae:	cd bf       	out	0x3d, r28	; 61
    4ab0:	de bf       	out	0x3e, r29	; 62
    4ab2:	df 91       	pop	r29
    4ab4:	cf 91       	pop	r28
    4ab6:	ff 90       	pop	r15
    4ab8:	ef 90       	pop	r14
    4aba:	df 90       	pop	r13
    4abc:	cf 90       	pop	r12
    4abe:	08 95       	ret

00004ac0 <powerOn>:

// Parameter is taken from the Global EEPROM Header
// Returns when Start button held long enough
// Else puts the Controller to sleep
bool powerOn(bool powerOffSoftware) {
    4ac0:	cf 93       	push	r28
    4ac2:	df 93       	push	r29
    4ac4:	1f 92       	push	r1
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	89 83       	std	Y+1, r24	; 0x01
	
	// Otherwise we go to sleep
	if (!checkForStartUp(STARTUP_HOLD_TIME_MS))
    4acc:	80 ed       	ldi	r24, 0xD0	; 208
    4ace:	97 e0       	ldi	r25, 0x07	; 7
    4ad0:	ae df       	rcall	.-164    	; 0x4a2e <checkForStartUp>
    4ad2:	98 2f       	mov	r25, r24
    4ad4:	81 e0       	ldi	r24, 0x01	; 1
    4ad6:	89 27       	eor	r24, r25
    4ad8:	88 23       	and	r24, r24
    4ada:	11 f0       	breq	.+4      	; 0x4ae0 <powerOn+0x20>
	{
		// Startup is NOT going to happen
		// Go back to sleep
		powerOff(powerOffSoftware);
    4adc:	89 81       	ldd	r24, Y+1	; 0x01
    4ade:	3f df       	rcall	.-386    	; 0x495e <powerOff>
		
	}
	return true;
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
}
    4ae2:	0f 90       	pop	r0
    4ae4:	df 91       	pop	r29
    4ae6:	cf 91       	pop	r28
    4ae8:	08 95       	ret

00004aea <tc_write_cc_buffer>:
 * \param channel_index CC Channel
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
    4aea:	cf 93       	push	r28
    4aec:	df 93       	push	r29
    4aee:	cd b7       	in	r28, 0x3d	; 61
    4af0:	de b7       	in	r29, 0x3e	; 62
    4af2:	25 97       	sbiw	r28, 0x05	; 5
    4af4:	cd bf       	out	0x3d, r28	; 61
    4af6:	de bf       	out	0x3e, r29	; 62
    4af8:	89 83       	std	Y+1, r24	; 0x01
    4afa:	9a 83       	std	Y+2, r25	; 0x02
    4afc:	6b 83       	std	Y+3, r22	; 0x03
    4afe:	4c 83       	std	Y+4, r20	; 0x04
    4b00:	5d 83       	std	Y+5, r21	; 0x05
	if (tc_is_tc0(void *tc)) {
    4b02:	89 81       	ldd	r24, Y+1	; 0x01
    4b04:	9a 81       	ldd	r25, Y+2	; 0x02
    4b06:	80 74       	andi	r24, 0x40	; 64
    4b08:	99 27       	eor	r25, r25
    4b0a:	00 97       	sbiw	r24, 0x00	; 0
    4b0c:	a9 f5       	brne	.+106    	; 0x4b78 <tc_write_cc_buffer+0x8e>
		switch (channel_index) {
    4b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b10:	88 2f       	mov	r24, r24
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	82 30       	cpi	r24, 0x02	; 2
    4b16:	91 05       	cpc	r25, r1
    4b18:	b1 f0       	breq	.+44     	; 0x4b46 <tc_write_cc_buffer+0x5c>
    4b1a:	83 30       	cpi	r24, 0x03	; 3
    4b1c:	91 05       	cpc	r25, r1
    4b1e:	24 f4       	brge	.+8      	; 0x4b28 <tc_write_cc_buffer+0x3e>
    4b20:	81 30       	cpi	r24, 0x01	; 1
    4b22:	91 05       	cpc	r25, r1
    4b24:	41 f0       	breq	.+16     	; 0x4b36 <tc_write_cc_buffer+0x4c>
    4b26:	49 c0       	rjmp	.+146    	; 0x4bba <tc_write_cc_buffer+0xd0>
    4b28:	83 30       	cpi	r24, 0x03	; 3
    4b2a:	91 05       	cpc	r25, r1
    4b2c:	a1 f0       	breq	.+40     	; 0x4b56 <tc_write_cc_buffer+0x6c>
    4b2e:	84 30       	cpi	r24, 0x04	; 4
    4b30:	91 05       	cpc	r25, r1
    4b32:	c9 f0       	breq	.+50     	; 0x4b66 <tc_write_cc_buffer+0x7c>
    4b34:	42 c0       	rjmp	.+132    	; 0x4bba <tc_write_cc_buffer+0xd0>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    4b36:	89 81       	ldd	r24, Y+1	; 0x01
    4b38:	9a 81       	ldd	r25, Y+2	; 0x02
    4b3a:	2c 81       	ldd	r18, Y+4	; 0x04
    4b3c:	3d 81       	ldd	r19, Y+5	; 0x05
    4b3e:	fc 01       	movw	r30, r24
    4b40:	20 af       	std	Z+56, r18	; 0x38
    4b42:	31 af       	std	Z+57, r19	; 0x39
			break;
    4b44:	3a c0       	rjmp	.+116    	; 0x4bba <tc_write_cc_buffer+0xd0>
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    4b46:	89 81       	ldd	r24, Y+1	; 0x01
    4b48:	9a 81       	ldd	r25, Y+2	; 0x02
    4b4a:	2c 81       	ldd	r18, Y+4	; 0x04
    4b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    4b4e:	fc 01       	movw	r30, r24
    4b50:	22 af       	std	Z+58, r18	; 0x3a
    4b52:	33 af       	std	Z+59, r19	; 0x3b
			break;
    4b54:	32 c0       	rjmp	.+100    	; 0x4bba <tc_write_cc_buffer+0xd0>
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    4b56:	89 81       	ldd	r24, Y+1	; 0x01
    4b58:	9a 81       	ldd	r25, Y+2	; 0x02
    4b5a:	2c 81       	ldd	r18, Y+4	; 0x04
    4b5c:	3d 81       	ldd	r19, Y+5	; 0x05
    4b5e:	fc 01       	movw	r30, r24
    4b60:	24 af       	std	Z+60, r18	; 0x3c
    4b62:	35 af       	std	Z+61, r19	; 0x3d
			break;
    4b64:	2a c0       	rjmp	.+84     	; 0x4bba <tc_write_cc_buffer+0xd0>
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    4b66:	89 81       	ldd	r24, Y+1	; 0x01
    4b68:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6a:	2c 81       	ldd	r18, Y+4	; 0x04
    4b6c:	3d 81       	ldd	r19, Y+5	; 0x05
    4b6e:	fc 01       	movw	r30, r24
    4b70:	26 af       	std	Z+62, r18	; 0x3e
    4b72:	37 af       	std	Z+63, r19	; 0x3f
			break;
    4b74:	00 00       	nop
    4b76:	21 c0       	rjmp	.+66     	; 0x4bba <tc_write_cc_buffer+0xd0>
		}
	} else if (tc_is_tc1(void *tc)) {
    4b78:	89 81       	ldd	r24, Y+1	; 0x01
    4b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b7c:	80 74       	andi	r24, 0x40	; 64
    4b7e:	99 27       	eor	r25, r25
    4b80:	00 97       	sbiw	r24, 0x00	; 0
    4b82:	d9 f0       	breq	.+54     	; 0x4bba <tc_write_cc_buffer+0xd0>
			switch (channel_index) {
    4b84:	8b 81       	ldd	r24, Y+3	; 0x03
    4b86:	88 2f       	mov	r24, r24
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	81 30       	cpi	r24, 0x01	; 1
    4b8c:	91 05       	cpc	r25, r1
    4b8e:	21 f0       	breq	.+8      	; 0x4b98 <tc_write_cc_buffer+0xae>
    4b90:	82 30       	cpi	r24, 0x02	; 2
    4b92:	91 05       	cpc	r25, r1
    4b94:	49 f0       	breq	.+18     	; 0x4ba8 <tc_write_cc_buffer+0xbe>
    4b96:	10 c0       	rjmp	.+32     	; 0x4bb8 <tc_write_cc_buffer+0xce>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b9c:	2c 81       	ldd	r18, Y+4	; 0x04
    4b9e:	3d 81       	ldd	r19, Y+5	; 0x05
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	20 af       	std	Z+56, r18	; 0x38
    4ba4:	31 af       	std	Z+57, r19	; 0x39
				break;
    4ba6:	09 c0       	rjmp	.+18     	; 0x4bba <tc_write_cc_buffer+0xd0>
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    4ba8:	89 81       	ldd	r24, Y+1	; 0x01
    4baa:	9a 81       	ldd	r25, Y+2	; 0x02
    4bac:	2c 81       	ldd	r18, Y+4	; 0x04
    4bae:	3d 81       	ldd	r19, Y+5	; 0x05
    4bb0:	fc 01       	movw	r30, r24
    4bb2:	22 af       	std	Z+58, r18	; 0x3a
    4bb4:	33 af       	std	Z+59, r19	; 0x3b
				break;
    4bb6:	01 c0       	rjmp	.+2      	; 0x4bba <tc_write_cc_buffer+0xd0>
			default:
				return;
    4bb8:	00 00       	nop
			}
		}
}
    4bba:	25 96       	adiw	r28, 0x05	; 5
    4bbc:	cd bf       	out	0x3d, r28	; 61
    4bbe:	de bf       	out	0x3e, r29	; 62
    4bc0:	df 91       	pop	r29
    4bc2:	cf 91       	pop	r28
    4bc4:	08 95       	ret

00004bc6 <pwm_set_duty_cycle_percent>:
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
    4bc6:	cf 93       	push	r28
    4bc8:	df 93       	push	r29
    4bca:	00 d0       	rcall	.+0      	; 0x4bcc <pwm_set_duty_cycle_percent+0x6>
    4bcc:	1f 92       	push	r1
    4bce:	cd b7       	in	r28, 0x3d	; 61
    4bd0:	de b7       	in	r29, 0x3e	; 62
    4bd2:	89 83       	std	Y+1, r24	; 0x01
    4bd4:	9a 83       	std	Y+2, r25	; 0x02
    4bd6:	6b 83       	std	Y+3, r22	; 0x03
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    4bd8:	89 81       	ldd	r24, Y+1	; 0x01
    4bda:	9a 81       	ldd	r25, Y+2	; 0x02
    4bdc:	fc 01       	movw	r30, r24
    4bde:	85 81       	ldd	r24, Z+5	; 0x05
    4be0:	96 81       	ldd	r25, Z+6	; 0x06
    4be2:	9c 01       	movw	r18, r24
    4be4:	40 e0       	ldi	r20, 0x00	; 0
    4be6:	50 e0       	ldi	r21, 0x00	; 0
			(uint32_t)duty_cycle_scale) / 100));
    4be8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bea:	88 2f       	mov	r24, r24
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	a0 e0       	ldi	r26, 0x00	; 0
    4bf0:	b0 e0       	ldi	r27, 0x00	; 0
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    4bf2:	bc 01       	movw	r22, r24
    4bf4:	cd 01       	movw	r24, r26
    4bf6:	0e 94 da 48 	call	0x91b4	; 0x91b4 <__mulsi3>
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	cb 01       	movw	r24, r22
			(uint32_t)duty_cycle_scale) / 100));
    4bfe:	24 e6       	ldi	r18, 0x64	; 100
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	40 e0       	ldi	r20, 0x00	; 0
    4c04:	50 e0       	ldi	r21, 0x00	; 0
    4c06:	bc 01       	movw	r22, r24
    4c08:	cd 01       	movw	r24, r26
    4c0a:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
    4c0e:	da 01       	movw	r26, r20
    4c10:	c9 01       	movw	r24, r18
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    4c12:	9c 01       	movw	r18, r24
    4c14:	89 81       	ldd	r24, Y+1	; 0x01
    4c16:	9a 81       	ldd	r25, Y+2	; 0x02
    4c18:	fc 01       	movw	r30, r24
    4c1a:	62 81       	ldd	r22, Z+2	; 0x02
    4c1c:	89 81       	ldd	r24, Y+1	; 0x01
    4c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c20:	fc 01       	movw	r30, r24
    4c22:	80 81       	ld	r24, Z
    4c24:	91 81       	ldd	r25, Z+1	; 0x01
    4c26:	a9 01       	movw	r20, r18
    4c28:	60 df       	rcall	.-320    	; 0x4aea <tc_write_cc_buffer>
			(uint16_t)(((uint32_t)config->period *
			(uint32_t)duty_cycle_scale) / 100));
}
    4c2a:	23 96       	adiw	r28, 0x03	; 3
    4c2c:	cd bf       	out	0x3d, r28	; 61
    4c2e:	de bf       	out	0x3e, r29	; 62
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	08 95       	ret

00004c36 <setupLEDs>:
static struct pwm_config pwm_cfg[3];

static bool swapBlueGreen = false;  // Default = 0/false behavior is Green on D0 and Blue on D1, 

void setupLEDs(bool swapBlueForGreen)
{
    4c36:	cf 93       	push	r28
    4c38:	df 93       	push	r29
    4c3a:	1f 92       	push	r1
    4c3c:	cd b7       	in	r28, 0x3d	; 61
    4c3e:	de b7       	in	r29, 0x3e	; 62
    4c40:	89 83       	std	Y+1, r24	; 0x01
	swapBlueGreen = swapBlueForGreen;
    4c42:	89 81       	ldd	r24, Y+1	; 0x01
    4c44:	80 93 6f 27 	sts	0x276F, r24
	/* Set up all 3 PWM channels with 500 Hz frequency. */
	pwm_init(&pwm_cfg[RED_CFG],   RED_PWM_PORT,   RED_PWM_CHANNEL,   500);
    4c48:	24 ef       	ldi	r18, 0xF4	; 244
    4c4a:	31 e0       	ldi	r19, 0x01	; 1
    4c4c:	42 e0       	ldi	r20, 0x02	; 2
    4c4e:	66 e0       	ldi	r22, 0x06	; 6
    4c50:	8a e5       	ldi	r24, 0x5A	; 90
    4c52:	97 e2       	ldi	r25, 0x27	; 39
    4c54:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <pwm_init>
	pwm_init(&pwm_cfg[GREEN_CFG], GREEN_PWM_PORT, GREEN_PWM_CHANNEL, 500);
    4c58:	24 ef       	ldi	r18, 0xF4	; 244
    4c5a:	31 e0       	ldi	r19, 0x01	; 1
    4c5c:	41 e0       	ldi	r20, 0x01	; 1
    4c5e:	62 e0       	ldi	r22, 0x02	; 2
    4c60:	81 e6       	ldi	r24, 0x61	; 97
    4c62:	97 e2       	ldi	r25, 0x27	; 39
    4c64:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <pwm_init>
	pwm_init(&pwm_cfg[BLUE_CFG],  BLUE_PWM_PORT,  BLUE_PWM_CHANNEL,  500);
    4c68:	24 ef       	ldi	r18, 0xF4	; 244
    4c6a:	31 e0       	ldi	r19, 0x01	; 1
    4c6c:	42 e0       	ldi	r20, 0x02	; 2
    4c6e:	62 e0       	ldi	r22, 0x02	; 2
    4c70:	88 e6       	ldi	r24, 0x68	; 104
    4c72:	97 e2       	ldi	r25, 0x27	; 39
    4c74:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <pwm_init>

	/* Start all 3 PWM channels with initial value of off.
	This is the only location that will need to reference them
	as active low (100% == off) */
	pwm_start(&pwm_cfg[RED_CFG], 100);
    4c78:	64 e6       	ldi	r22, 0x64	; 100
    4c7a:	8a e5       	ldi	r24, 0x5A	; 90
    4c7c:	97 e2       	ldi	r25, 0x27	; 39
    4c7e:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <pwm_start>
	pwm_start(&pwm_cfg[GREEN_CFG], 100);
    4c82:	64 e6       	ldi	r22, 0x64	; 100
    4c84:	81 e6       	ldi	r24, 0x61	; 97
    4c86:	97 e2       	ldi	r25, 0x27	; 39
    4c88:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <pwm_start>
	pwm_start(&pwm_cfg[BLUE_CFG], 100);
    4c8c:	64 e6       	ldi	r22, 0x64	; 100
    4c8e:	88 e6       	ldi	r24, 0x68	; 104
    4c90:	97 e2       	ldi	r25, 0x27	; 39
    4c92:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <pwm_start>
}
    4c96:	0f 90       	pop	r0
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	08 95       	ret

00004c9e <setRedLEDValue>:

void setRedLEDValue(uint8_t percent)
{
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	1f 92       	push	r1
    4ca4:	cd b7       	in	r28, 0x3d	; 61
    4ca6:	de b7       	in	r29, 0x3e	; 62
    4ca8:	89 83       	std	Y+1, r24	; 0x01
	if (percent > 100) {
    4caa:	89 81       	ldd	r24, Y+1	; 0x01
    4cac:	85 36       	cpi	r24, 0x65	; 101
    4cae:	10 f0       	brcs	.+4      	; 0x4cb4 <setRedLEDValue+0x16>
		percent = 100;
    4cb0:	84 e6       	ldi	r24, 0x64	; 100
    4cb2:	89 83       	std	Y+1, r24	; 0x01
	}
	pwm_set_duty_cycle_percent(&pwm_cfg[RED_CFG], 100 - percent);
    4cb4:	94 e6       	ldi	r25, 0x64	; 100
    4cb6:	89 81       	ldd	r24, Y+1	; 0x01
    4cb8:	29 2f       	mov	r18, r25
    4cba:	28 1b       	sub	r18, r24
    4cbc:	82 2f       	mov	r24, r18
    4cbe:	68 2f       	mov	r22, r24
    4cc0:	8a e5       	ldi	r24, 0x5A	; 90
    4cc2:	97 e2       	ldi	r25, 0x27	; 39
    4cc4:	80 df       	rcall	.-256    	; 0x4bc6 <pwm_set_duty_cycle_percent>
}
    4cc6:	0f 90       	pop	r0
    4cc8:	df 91       	pop	r29
    4cca:	cf 91       	pop	r28
    4ccc:	08 95       	ret

00004cce <setGreenLEDValue>:

void setGreenLEDValue(uint8_t percent)
{
    4cce:	cf 93       	push	r28
    4cd0:	df 93       	push	r29
    4cd2:	1f 92       	push	r1
    4cd4:	cd b7       	in	r28, 0x3d	; 61
    4cd6:	de b7       	in	r29, 0x3e	; 62
    4cd8:	89 83       	std	Y+1, r24	; 0x01
	if (percent > 100) {
    4cda:	89 81       	ldd	r24, Y+1	; 0x01
    4cdc:	85 36       	cpi	r24, 0x65	; 101
    4cde:	10 f0       	brcs	.+4      	; 0x4ce4 <setGreenLEDValue+0x16>
		percent = 100;
    4ce0:	84 e6       	ldi	r24, 0x64	; 100
    4ce2:	89 83       	std	Y+1, r24	; 0x01
	}
	pwm_set_duty_cycle_percent(&pwm_cfg[ swapBlueGreen ? BLUE_CFG : GREEN_CFG], 100 - percent);
    4ce4:	94 e6       	ldi	r25, 0x64	; 100
    4ce6:	89 81       	ldd	r24, Y+1	; 0x01
    4ce8:	49 2f       	mov	r20, r25
    4cea:	48 1b       	sub	r20, r24
    4cec:	80 91 6f 27 	lds	r24, 0x276F
    4cf0:	88 23       	and	r24, r24
    4cf2:	19 f0       	breq	.+6      	; 0x4cfa <setGreenLEDValue+0x2c>
    4cf4:	22 e0       	ldi	r18, 0x02	; 2
    4cf6:	30 e0       	ldi	r19, 0x00	; 0
    4cf8:	02 c0       	rjmp	.+4      	; 0x4cfe <setGreenLEDValue+0x30>
    4cfa:	21 e0       	ldi	r18, 0x01	; 1
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	c9 01       	movw	r24, r18
    4d00:	88 0f       	add	r24, r24
    4d02:	99 1f       	adc	r25, r25
    4d04:	88 0f       	add	r24, r24
    4d06:	99 1f       	adc	r25, r25
    4d08:	88 0f       	add	r24, r24
    4d0a:	99 1f       	adc	r25, r25
    4d0c:	82 1b       	sub	r24, r18
    4d0e:	93 0b       	sbc	r25, r19
    4d10:	86 5a       	subi	r24, 0xA6	; 166
    4d12:	98 4d       	sbci	r25, 0xD8	; 216
    4d14:	64 2f       	mov	r22, r20
    4d16:	57 df       	rcall	.-338    	; 0x4bc6 <pwm_set_duty_cycle_percent>
}
    4d18:	0f 90       	pop	r0
    4d1a:	df 91       	pop	r29
    4d1c:	cf 91       	pop	r28
    4d1e:	08 95       	ret

00004d20 <setBlueLEDValue>:

void setBlueLEDValue(uint8_t percent)
{
    4d20:	cf 93       	push	r28
    4d22:	df 93       	push	r29
    4d24:	1f 92       	push	r1
    4d26:	cd b7       	in	r28, 0x3d	; 61
    4d28:	de b7       	in	r29, 0x3e	; 62
    4d2a:	89 83       	std	Y+1, r24	; 0x01
	if (percent > 100) {
    4d2c:	89 81       	ldd	r24, Y+1	; 0x01
    4d2e:	85 36       	cpi	r24, 0x65	; 101
    4d30:	10 f0       	brcs	.+4      	; 0x4d36 <setBlueLEDValue+0x16>
		percent = 100;
    4d32:	84 e6       	ldi	r24, 0x64	; 100
    4d34:	89 83       	std	Y+1, r24	; 0x01
	}
	pwm_set_duty_cycle_percent(&pwm_cfg[ swapBlueGreen ? GREEN_CFG : BLUE_CFG ], 100 - percent);
    4d36:	94 e6       	ldi	r25, 0x64	; 100
    4d38:	89 81       	ldd	r24, Y+1	; 0x01
    4d3a:	49 2f       	mov	r20, r25
    4d3c:	48 1b       	sub	r20, r24
    4d3e:	80 91 6f 27 	lds	r24, 0x276F
    4d42:	88 23       	and	r24, r24
    4d44:	19 f0       	breq	.+6      	; 0x4d4c <setBlueLEDValue+0x2c>
    4d46:	21 e0       	ldi	r18, 0x01	; 1
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	02 c0       	rjmp	.+4      	; 0x4d50 <setBlueLEDValue+0x30>
    4d4c:	22 e0       	ldi	r18, 0x02	; 2
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	c9 01       	movw	r24, r18
    4d52:	88 0f       	add	r24, r24
    4d54:	99 1f       	adc	r25, r25
    4d56:	88 0f       	add	r24, r24
    4d58:	99 1f       	adc	r25, r25
    4d5a:	88 0f       	add	r24, r24
    4d5c:	99 1f       	adc	r25, r25
    4d5e:	82 1b       	sub	r24, r18
    4d60:	93 0b       	sbc	r25, r19
    4d62:	86 5a       	subi	r24, 0xA6	; 166
    4d64:	98 4d       	sbci	r25, 0xD8	; 216
    4d66:	64 2f       	mov	r22, r20
    4d68:	2e df       	rcall	.-420    	; 0x4bc6 <pwm_set_duty_cycle_percent>
}
    4d6a:	0f 90       	pop	r0
    4d6c:	df 91       	pop	r29
    4d6e:	cf 91       	pop	r28
    4d70:	08 95       	ret

00004d72 <setLEDValue>:

void setLEDValue(uint8_t r, uint8_t g, uint8_t b)
{
    4d72:	cf 93       	push	r28
    4d74:	df 93       	push	r29
    4d76:	00 d0       	rcall	.+0      	; 0x4d78 <setLEDValue+0x6>
    4d78:	1f 92       	push	r1
    4d7a:	cd b7       	in	r28, 0x3d	; 61
    4d7c:	de b7       	in	r29, 0x3e	; 62
    4d7e:	89 83       	std	Y+1, r24	; 0x01
    4d80:	6a 83       	std	Y+2, r22	; 0x02
    4d82:	4b 83       	std	Y+3, r20	; 0x03
	setRedLEDValue(r);
    4d84:	89 81       	ldd	r24, Y+1	; 0x01
    4d86:	8b df       	rcall	.-234    	; 0x4c9e <setRedLEDValue>
	setGreenLEDValue(g);
    4d88:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8a:	a1 df       	rcall	.-190    	; 0x4cce <setGreenLEDValue>
	setBlueLEDValue(b);
    4d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d8e:	c8 df       	rcall	.-112    	; 0x4d20 <setBlueLEDValue>
    4d90:	23 96       	adiw	r28, 0x03	; 3
    4d92:	cd bf       	out	0x3d, r28	; 61
    4d94:	de bf       	out	0x3e, r29	; 62
    4d96:	df 91       	pop	r29
    4d98:	cf 91       	pop	r28
    4d9a:	08 95       	ret

00004d9c <cpu_irq_save>:
	// Set the system time:
	system_time = sys_time;
	
	// Restore the state of the interrupts:
	cpu_irq_restore(irq_state);
}
    4d9c:	cf 93       	push	r28
    4d9e:	df 93       	push	r29
    4da0:	1f 92       	push	r1
    4da2:	cd b7       	in	r28, 0x3d	; 61
    4da4:	de b7       	in	r29, 0x3e	; 62
    4da6:	8f e3       	ldi	r24, 0x3F	; 63
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	fc 01       	movw	r30, r24
    4dac:	80 81       	ld	r24, Z
    4dae:	89 83       	std	Y+1, r24	; 0x01
    4db0:	f8 94       	cli
    4db2:	89 81       	ldd	r24, Y+1	; 0x01
    4db4:	0f 90       	pop	r0
    4db6:	df 91       	pop	r29
    4db8:	cf 91       	pop	r28
    4dba:	08 95       	ret

00004dbc <cpu_irq_restore>:
    4dbc:	cf 93       	push	r28
    4dbe:	df 93       	push	r29
    4dc0:	1f 92       	push	r1
    4dc2:	cd b7       	in	r28, 0x3d	; 61
    4dc4:	de b7       	in	r29, 0x3e	; 62
    4dc6:	89 83       	std	Y+1, r24	; 0x01
    4dc8:	8f e3       	ldi	r24, 0x3F	; 63
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	29 81       	ldd	r18, Y+1	; 0x01
    4dce:	fc 01       	movw	r30, r24
    4dd0:	20 83       	st	Z, r18
    4dd2:	0f 90       	pop	r0
    4dd4:	df 91       	pop	r29
    4dd6:	cf 91       	pop	r28
    4dd8:	08 95       	ret

00004dda <getSystemTime>:
    4dda:	cf 93       	push	r28
    4ddc:	df 93       	push	r29
    4dde:	cd b7       	in	r28, 0x3d	; 61
    4de0:	de b7       	in	r29, 0x3e	; 62
    4de2:	25 97       	sbiw	r28, 0x05	; 5
    4de4:	cd bf       	out	0x3d, r28	; 61
    4de6:	de bf       	out	0x3e, r29	; 62
    4de8:	d9 df       	rcall	.-78     	; 0x4d9c <cpu_irq_save>
    4dea:	89 83       	std	Y+1, r24	; 0x01
    4dec:	80 91 72 27 	lds	r24, 0x2772
    4df0:	90 91 73 27 	lds	r25, 0x2773
    4df4:	a0 91 74 27 	lds	r26, 0x2774
    4df8:	b0 91 75 27 	lds	r27, 0x2775
    4dfc:	8a 83       	std	Y+2, r24	; 0x02
    4dfe:	9b 83       	std	Y+3, r25	; 0x03
    4e00:	ac 83       	std	Y+4, r26	; 0x04
    4e02:	bd 83       	std	Y+5, r27	; 0x05
    4e04:	89 81       	ldd	r24, Y+1	; 0x01
    4e06:	da df       	rcall	.-76     	; 0x4dbc <cpu_irq_restore>
    4e08:	8a 81       	ldd	r24, Y+2	; 0x02
    4e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e0c:	ac 81       	ldd	r26, Y+4	; 0x04
    4e0e:	bd 81       	ldd	r27, Y+5	; 0x05
    4e10:	bc 01       	movw	r22, r24
    4e12:	cd 01       	movw	r24, r26
    4e14:	25 96       	adiw	r28, 0x05	; 5
    4e16:	cd bf       	out	0x3d, r28	; 61
    4e18:	de bf       	out	0x3e, r29	; 62
    4e1a:	df 91       	pop	r29
    4e1c:	cf 91       	pop	r28
    4e1e:	08 95       	ret

00004e20 <tickSystemTime>:
    4e20:	cf 93       	push	r28
    4e22:	df 93       	push	r29
    4e24:	1f 92       	push	r1
    4e26:	cd b7       	in	r28, 0x3d	; 61
    4e28:	de b7       	in	r29, 0x3e	; 62
    4e2a:	b8 df       	rcall	.-144    	; 0x4d9c <cpu_irq_save>
    4e2c:	89 83       	std	Y+1, r24	; 0x01
    4e2e:	80 91 72 27 	lds	r24, 0x2772
    4e32:	90 91 73 27 	lds	r25, 0x2773
    4e36:	a0 91 74 27 	lds	r26, 0x2774
    4e3a:	b0 91 75 27 	lds	r27, 0x2775
    4e3e:	01 96       	adiw	r24, 0x01	; 1
    4e40:	a1 1d       	adc	r26, r1
    4e42:	b1 1d       	adc	r27, r1
    4e44:	80 93 72 27 	sts	0x2772, r24
    4e48:	90 93 73 27 	sts	0x2773, r25
    4e4c:	a0 93 74 27 	sts	0x2774, r26
    4e50:	b0 93 75 27 	sts	0x2775, r27
    4e54:	89 81       	ldd	r24, Y+1	; 0x01
    4e56:	b2 df       	rcall	.-156    	; 0x4dbc <cpu_irq_restore>
    4e58:	0f 90       	pop	r0
    4e5a:	df 91       	pop	r29
    4e5c:	cf 91       	pop	r28
    4e5e:	08 95       	ret

00004e60 <startTimeout>:

// Initialize the Timeout Struct with the current System Tick Count and the Milliseconds delay
void startTimeout(struct Timeout* to, uint32_t ms) {
    4e60:	cf 93       	push	r28
    4e62:	df 93       	push	r29
    4e64:	cd b7       	in	r28, 0x3d	; 61
    4e66:	de b7       	in	r29, 0x3e	; 62
    4e68:	26 97       	sbiw	r28, 0x06	; 6
    4e6a:	cd bf       	out	0x3d, r28	; 61
    4e6c:	de bf       	out	0x3e, r29	; 62
    4e6e:	89 83       	std	Y+1, r24	; 0x01
    4e70:	9a 83       	std	Y+2, r25	; 0x02
    4e72:	4b 83       	std	Y+3, r20	; 0x03
    4e74:	5c 83       	std	Y+4, r21	; 0x04
    4e76:	6d 83       	std	Y+5, r22	; 0x05
    4e78:	7e 83       	std	Y+6, r23	; 0x06
	to->start = getSystemTime();
    4e7a:	af df       	rcall	.-162    	; 0x4dda <getSystemTime>
    4e7c:	dc 01       	movw	r26, r24
    4e7e:	cb 01       	movw	r24, r22
    4e80:	29 81       	ldd	r18, Y+1	; 0x01
    4e82:	3a 81       	ldd	r19, Y+2	; 0x02
    4e84:	f9 01       	movw	r30, r18
    4e86:	80 83       	st	Z, r24
    4e88:	91 83       	std	Z+1, r25	; 0x01
    4e8a:	a2 83       	std	Z+2, r26	; 0x02
    4e8c:	b3 83       	std	Z+3, r27	; 0x03
	to->delay = ms;
    4e8e:	29 81       	ldd	r18, Y+1	; 0x01
    4e90:	3a 81       	ldd	r19, Y+2	; 0x02
    4e92:	8b 81       	ldd	r24, Y+3	; 0x03
    4e94:	9c 81       	ldd	r25, Y+4	; 0x04
    4e96:	ad 81       	ldd	r26, Y+5	; 0x05
    4e98:	be 81       	ldd	r27, Y+6	; 0x06
    4e9a:	f9 01       	movw	r30, r18
    4e9c:	84 83       	std	Z+4, r24	; 0x04
    4e9e:	95 83       	std	Z+5, r25	; 0x05
    4ea0:	a6 83       	std	Z+6, r26	; 0x06
    4ea2:	b7 83       	std	Z+7, r27	; 0x07
}
    4ea4:	26 96       	adiw	r28, 0x06	; 6
    4ea6:	cd bf       	out	0x3d, r28	; 61
    4ea8:	de bf       	out	0x3e, r29	; 62
    4eaa:	df 91       	pop	r29
    4eac:	cf 91       	pop	r28
    4eae:	08 95       	ret

00004eb0 <checkTimeout>:

// True if not Cancelled AND Current System Tick Count >= Delay Count
// False if Cancelled OR Current System Tick Count < Delay
bool checkTimeout(struct Timeout* to) {
    4eb0:	cf 93       	push	r28
    4eb2:	df 93       	push	r29
    4eb4:	00 d0       	rcall	.+0      	; 0x4eb6 <checkTimeout+0x6>
    4eb6:	cd b7       	in	r28, 0x3d	; 61
    4eb8:	de b7       	in	r29, 0x3e	; 62
    4eba:	89 83       	std	Y+1, r24	; 0x01
    4ebc:	9a 83       	std	Y+2, r25	; 0x02
	return (to->delay != 0) && ((getSystemTime() - to->start) >= to->delay);
    4ebe:	89 81       	ldd	r24, Y+1	; 0x01
    4ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ec2:	fc 01       	movw	r30, r24
    4ec4:	84 81       	ldd	r24, Z+4	; 0x04
    4ec6:	95 81       	ldd	r25, Z+5	; 0x05
    4ec8:	a6 81       	ldd	r26, Z+6	; 0x06
    4eca:	b7 81       	ldd	r27, Z+7	; 0x07
    4ecc:	00 97       	sbiw	r24, 0x00	; 0
    4ece:	a1 05       	cpc	r26, r1
    4ed0:	b1 05       	cpc	r27, r1
    4ed2:	e9 f0       	breq	.+58     	; 0x4f0e <checkTimeout+0x5e>
    4ed4:	82 df       	rcall	.-252    	; 0x4dda <getSystemTime>
    4ed6:	9b 01       	movw	r18, r22
    4ed8:	ac 01       	movw	r20, r24
    4eda:	89 81       	ldd	r24, Y+1	; 0x01
    4edc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ede:	fc 01       	movw	r30, r24
    4ee0:	80 81       	ld	r24, Z
    4ee2:	91 81       	ldd	r25, Z+1	; 0x01
    4ee4:	a2 81       	ldd	r26, Z+2	; 0x02
    4ee6:	b3 81       	ldd	r27, Z+3	; 0x03
    4ee8:	28 1b       	sub	r18, r24
    4eea:	39 0b       	sbc	r19, r25
    4eec:	4a 0b       	sbc	r20, r26
    4eee:	5b 0b       	sbc	r21, r27
    4ef0:	89 81       	ldd	r24, Y+1	; 0x01
    4ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	84 81       	ldd	r24, Z+4	; 0x04
    4ef8:	95 81       	ldd	r25, Z+5	; 0x05
    4efa:	a6 81       	ldd	r26, Z+6	; 0x06
    4efc:	b7 81       	ldd	r27, Z+7	; 0x07
    4efe:	28 17       	cp	r18, r24
    4f00:	39 07       	cpc	r19, r25
    4f02:	4a 07       	cpc	r20, r26
    4f04:	5b 07       	cpc	r21, r27
    4f06:	18 f0       	brcs	.+6      	; 0x4f0e <checkTimeout+0x5e>
    4f08:	81 e0       	ldi	r24, 0x01	; 1
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	02 c0       	rjmp	.+4      	; 0x4f12 <checkTimeout+0x62>
    4f0e:	80 e0       	ldi	r24, 0x00	; 0
    4f10:	90 e0       	ldi	r25, 0x00	; 0
    4f12:	81 70       	andi	r24, 0x01	; 1
}
    4f14:	0f 90       	pop	r0
    4f16:	0f 90       	pop	r0
    4f18:	df 91       	pop	r29
    4f1a:	cf 91       	pop	r28
    4f1c:	08 95       	ret

00004f1e <cancelTimeout>:

// Set the Delay to 0 to cancel the timeout.
void cancelTimeout(struct Timeout* to) {
    4f1e:	cf 93       	push	r28
    4f20:	df 93       	push	r29
    4f22:	00 d0       	rcall	.+0      	; 0x4f24 <cancelTimeout+0x6>
    4f24:	cd b7       	in	r28, 0x3d	; 61
    4f26:	de b7       	in	r29, 0x3e	; 62
    4f28:	89 83       	std	Y+1, r24	; 0x01
    4f2a:	9a 83       	std	Y+2, r25	; 0x02
	to->delay = 0;
    4f2c:	89 81       	ldd	r24, Y+1	; 0x01
    4f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f30:	fc 01       	movw	r30, r24
    4f32:	14 82       	std	Z+4, r1	; 0x04
    4f34:	15 82       	std	Z+5, r1	; 0x05
    4f36:	16 82       	std	Z+6, r1	; 0x06
    4f38:	17 82       	std	Z+7, r1	; 0x07
    4f3a:	0f 90       	pop	r0
    4f3c:	0f 90       	pop	r0
    4f3e:	df 91       	pop	r29
    4f40:	cf 91       	pop	r28
    4f42:	08 95       	ret

00004f44 <tc_set_overflow_interrupt_level>:
 * \param level Overflow interrupt level
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
    4f44:	cf 93       	push	r28
    4f46:	df 93       	push	r29
    4f48:	00 d0       	rcall	.+0      	; 0x4f4a <tc_set_overflow_interrupt_level+0x6>
    4f4a:	1f 92       	push	r1
    4f4c:	cd b7       	in	r28, 0x3d	; 61
    4f4e:	de b7       	in	r29, 0x3e	; 62
    4f50:	89 83       	std	Y+1, r24	; 0x01
    4f52:	9a 83       	std	Y+2, r25	; 0x02
    4f54:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    4f56:	89 81       	ldd	r24, Y+1	; 0x01
    4f58:	9a 81       	ldd	r25, Y+2	; 0x02
    4f5a:	fc 01       	movw	r30, r24
    4f5c:	86 81       	ldd	r24, Z+6	; 0x06
    4f5e:	28 2f       	mov	r18, r24
    4f60:	2c 7f       	andi	r18, 0xFC	; 252
    4f62:	89 81       	ldd	r24, Y+1	; 0x01
    4f64:	9a 81       	ldd	r25, Y+2	; 0x02
    4f66:	fc 01       	movw	r30, r24
    4f68:	26 83       	std	Z+6, r18	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    4f6a:	89 81       	ldd	r24, Y+1	; 0x01
    4f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f6e:	fc 01       	movw	r30, r24
    4f70:	96 81       	ldd	r25, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    4f72:	8b 81       	ldd	r24, Y+3	; 0x03
    4f74:	29 2f       	mov	r18, r25
    4f76:	28 2b       	or	r18, r24
    4f78:	89 81       	ldd	r24, Y+1	; 0x01
    4f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f7c:	fc 01       	movw	r30, r24
    4f7e:	26 83       	std	Z+6, r18	; 0x06
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
}
    4f80:	23 96       	adiw	r28, 0x03	; 3
    4f82:	cd bf       	out	0x3d, r28	; 61
    4f84:	de bf       	out	0x3e, r29	; 62
    4f86:	df 91       	pop	r29
    4f88:	cf 91       	pop	r28
    4f8a:	08 95       	ret

00004f8c <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    4f8c:	cf 93       	push	r28
    4f8e:	df 93       	push	r29
    4f90:	00 d0       	rcall	.+0      	; 0x4f92 <tc_write_clock_source+0x6>
    4f92:	1f 92       	push	r1
    4f94:	cd b7       	in	r28, 0x3d	; 61
    4f96:	de b7       	in	r29, 0x3e	; 62
    4f98:	89 83       	std	Y+1, r24	; 0x01
    4f9a:	9a 83       	std	Y+2, r25	; 0x02
    4f9c:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    4f9e:	89 81       	ldd	r24, Y+1	; 0x01
    4fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa2:	fc 01       	movw	r30, r24
    4fa4:	80 81       	ld	r24, Z
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    4fa6:	98 2f       	mov	r25, r24
    4fa8:	90 7f       	andi	r25, 0xF0	; 240
    4faa:	8b 81       	ldd	r24, Y+3	; 0x03
    4fac:	89 2b       	or	r24, r25
    4fae:	28 2f       	mov	r18, r24
    4fb0:	89 81       	ldd	r24, Y+1	; 0x01
    4fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb4:	fc 01       	movw	r30, r24
    4fb6:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
    4fb8:	23 96       	adiw	r28, 0x03	; 3
    4fba:	cd bf       	out	0x3d, r28	; 61
    4fbc:	de bf       	out	0x3e, r29	; 62
    4fbe:	df 91       	pop	r29
    4fc0:	cf 91       	pop	r28
    4fc2:	08 95       	ret

00004fc4 <tc_set_direction>:
 *
 * \param tc Pointer to TC module.
 * \param dir Timer direction :
 */
static inline void tc_set_direction(volatile void *tc, enum tc_dir_t dir)
{
    4fc4:	cf 93       	push	r28
    4fc6:	df 93       	push	r29
    4fc8:	00 d0       	rcall	.+0      	; 0x4fca <tc_set_direction+0x6>
    4fca:	1f 92       	push	r1
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	89 83       	std	Y+1, r24	; 0x01
    4fd2:	9a 83       	std	Y+2, r25	; 0x02
    4fd4:	6b 83       	std	Y+3, r22	; 0x03
	if (dir == TC_UP) {
    4fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    4fd8:	88 23       	and	r24, r24
    4fda:	59 f4       	brne	.+22     	; 0x4ff2 <tc_set_direction+0x2e>
		((TC0_t *)tc)->CTRLFCLR |= ~TC0_DIR_bm;
    4fdc:	89 81       	ldd	r24, Y+1	; 0x01
    4fde:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe0:	fc 01       	movw	r30, r24
    4fe2:	80 85       	ldd	r24, Z+8	; 0x08
    4fe4:	8e 6f       	ori	r24, 0xFE	; 254
    4fe6:	28 2f       	mov	r18, r24
    4fe8:	89 81       	ldd	r24, Y+1	; 0x01
    4fea:	9a 81       	ldd	r25, Y+2	; 0x02
    4fec:	fc 01       	movw	r30, r24
    4fee:	20 87       	std	Z+8, r18	; 0x08
    4ff0:	0a c0       	rjmp	.+20     	; 0x5006 <tc_set_direction+0x42>
	} else {
		((TC0_t *)tc)->CTRLFSET |= TC0_DIR_bm;
    4ff2:	89 81       	ldd	r24, Y+1	; 0x01
    4ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ff6:	fc 01       	movw	r30, r24
    4ff8:	81 85       	ldd	r24, Z+9	; 0x09
    4ffa:	28 2f       	mov	r18, r24
    4ffc:	21 60       	ori	r18, 0x01	; 1
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	9a 81       	ldd	r25, Y+2	; 0x02
    5002:	fc 01       	movw	r30, r24
    5004:	21 87       	std	Z+9, r18	; 0x09
	}
}
    5006:	23 96       	adiw	r28, 0x03	; 3
    5008:	cd bf       	out	0x3d, r28	; 61
    500a:	de bf       	out	0x3e, r29	; 62
    500c:	df 91       	pop	r29
    500e:	cf 91       	pop	r28
    5010:	08 95       	ret

00005012 <tc_write_count>:
 *
 * \param tc Pointer to TC module.
 * \param cnt_value Counter value :
 */
static inline void tc_write_count(volatile void *tc, uint16_t cnt_value)
{
    5012:	cf 93       	push	r28
    5014:	df 93       	push	r29
    5016:	00 d0       	rcall	.+0      	; 0x5018 <tc_write_count+0x6>
    5018:	00 d0       	rcall	.+0      	; 0x501a <tc_write_count+0x8>
    501a:	cd b7       	in	r28, 0x3d	; 61
    501c:	de b7       	in	r29, 0x3e	; 62
    501e:	89 83       	std	Y+1, r24	; 0x01
    5020:	9a 83       	std	Y+2, r25	; 0x02
    5022:	6b 83       	std	Y+3, r22	; 0x03
    5024:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->CNT = cnt_value;
    5026:	89 81       	ldd	r24, Y+1	; 0x01
    5028:	9a 81       	ldd	r25, Y+2	; 0x02
    502a:	2b 81       	ldd	r18, Y+3	; 0x03
    502c:	3c 81       	ldd	r19, Y+4	; 0x04
    502e:	fc 01       	movw	r30, r24
    5030:	20 a3       	std	Z+32, r18	; 0x20
    5032:	31 a3       	std	Z+33, r19	; 0x21
}
    5034:	24 96       	adiw	r28, 0x04	; 4
    5036:	cd bf       	out	0x3d, r28	; 61
    5038:	de bf       	out	0x3e, r29	; 62
    503a:	df 91       	pop	r29
    503c:	cf 91       	pop	r28
    503e:	08 95       	ret

00005040 <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
    5040:	cf 93       	push	r28
    5042:	df 93       	push	r29
    5044:	00 d0       	rcall	.+0      	; 0x5046 <tc_write_period+0x6>
    5046:	00 d0       	rcall	.+0      	; 0x5048 <tc_write_period+0x8>
    5048:	cd b7       	in	r28, 0x3d	; 61
    504a:	de b7       	in	r29, 0x3e	; 62
    504c:	89 83       	std	Y+1, r24	; 0x01
    504e:	9a 83       	std	Y+2, r25	; 0x02
    5050:	6b 83       	std	Y+3, r22	; 0x03
    5052:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
    5054:	89 81       	ldd	r24, Y+1	; 0x01
    5056:	9a 81       	ldd	r25, Y+2	; 0x02
    5058:	2b 81       	ldd	r18, Y+3	; 0x03
    505a:	3c 81       	ldd	r19, Y+4	; 0x04
    505c:	fc 01       	movw	r30, r24
    505e:	26 a3       	std	Z+38, r18	; 0x26
    5060:	37 a3       	std	Z+39, r19	; 0x27
}
    5062:	24 96       	adiw	r28, 0x04	; 4
    5064:	cd bf       	out	0x3d, r28	; 61
    5066:	de bf       	out	0x3e, r29	; 62
    5068:	df 91       	pop	r29
    506a:	cf 91       	pop	r28
    506c:	08 95       	ret

0000506e <tc_clear_overflow>:
 *
 * \param tc Pointer to TC module.
 * \note  OVFIF is cleared
 */
static inline void tc_clear_overflow(volatile void *tc)
{
    506e:	cf 93       	push	r28
    5070:	df 93       	push	r29
    5072:	00 d0       	rcall	.+0      	; 0x5074 <tc_clear_overflow+0x6>
    5074:	cd b7       	in	r28, 0x3d	; 61
    5076:	de b7       	in	r29, 0x3e	; 62
    5078:	89 83       	std	Y+1, r24	; 0x01
    507a:	9a 83       	std	Y+2, r25	; 0x02
	((TC0_t *)tc)->INTFLAGS |= TC0_OVFIF_bm;
    507c:	89 81       	ldd	r24, Y+1	; 0x01
    507e:	9a 81       	ldd	r25, Y+2	; 0x02
    5080:	fc 01       	movw	r30, r24
    5082:	84 85       	ldd	r24, Z+12	; 0x0c
    5084:	28 2f       	mov	r18, r24
    5086:	21 60       	ori	r18, 0x01	; 1
    5088:	89 81       	ldd	r24, Y+1	; 0x01
    508a:	9a 81       	ldd	r25, Y+2	; 0x02
    508c:	fc 01       	movw	r30, r24
    508e:	24 87       	std	Z+12, r18	; 0x0c
}
    5090:	0f 90       	pop	r0
    5092:	0f 90       	pop	r0
    5094:	df 91       	pop	r29
    5096:	cf 91       	pop	r28
    5098:	08 95       	ret

0000509a <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
    509a:	cf 93       	push	r28
    509c:	df 93       	push	r29
    509e:	00 d0       	rcall	.+0      	; 0x50a0 <tc_set_wgm+0x6>
    50a0:	1f 92       	push	r1
    50a2:	cd b7       	in	r28, 0x3d	; 61
    50a4:	de b7       	in	r29, 0x3e	; 62
    50a6:	89 83       	std	Y+1, r24	; 0x01
    50a8:	9a 83       	std	Y+2, r25	; 0x02
    50aa:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    50ac:	89 81       	ldd	r24, Y+1	; 0x01
    50ae:	9a 81       	ldd	r25, Y+2	; 0x02
    50b0:	fc 01       	movw	r30, r24
    50b2:	81 81       	ldd	r24, Z+1	; 0x01
    50b4:	98 2f       	mov	r25, r24
    50b6:	98 7f       	andi	r25, 0xF8	; 248
    50b8:	8b 81       	ldd	r24, Y+3	; 0x03
    50ba:	89 2b       	or	r24, r25
    50bc:	28 2f       	mov	r18, r24
    50be:	89 81       	ldd	r24, Y+1	; 0x01
    50c0:	9a 81       	ldd	r25, Y+2	; 0x02
    50c2:	fc 01       	movw	r30, r24
    50c4:	21 83       	std	Z+1, r18	; 0x01
}
    50c6:	23 96       	adiw	r28, 0x03	; 3
    50c8:	cd bf       	out	0x3d, r28	; 61
    50ca:	de bf       	out	0x3e, r29	; 62
    50cc:	df 91       	pop	r29
    50ce:	cf 91       	pop	r28
    50d0:	08 95       	ret

000050d2 <setupSysTick>:
 */

#include <asf.h>
#include "systick.h"

void setupSysTick(tc_callback_t tick) {
    50d2:	cf 93       	push	r28
    50d4:	df 93       	push	r29
    50d6:	00 d0       	rcall	.+0      	; 0x50d8 <setupSysTick+0x6>
    50d8:	cd b7       	in	r28, 0x3d	; 61
    50da:	de b7       	in	r29, 0x3e	; 62
    50dc:	89 83       	std	Y+1, r24	; 0x01
    50de:	9a 83       	std	Y+2, r25	; 0x02
	
	// Make sure systick is enabled before trying to making changes:
	enableSysTick();
    50e0:	28 d0       	rcall	.+80     	; 0x5132 <enableSysTick>
	
	// Set the counting direction:
	tc_set_direction(SYSTICK_TIMER, TC_UP);
    50e2:	60 e0       	ldi	r22, 0x00	; 0
    50e4:	80 e4       	ldi	r24, 0x40	; 64
    50e6:	98 e0       	ldi	r25, 0x08	; 8
    50e8:	6d df       	rcall	.-294    	; 0x4fc4 <tc_set_direction>
	
	// Set the waveform type:
	tc_set_wgm(SYSTICK_TIMER, TC_WG_NORMAL);
    50ea:	60 e0       	ldi	r22, 0x00	; 0
    50ec:	80 e4       	ldi	r24, 0x40	; 64
    50ee:	98 e0       	ldi	r25, 0x08	; 8
    50f0:	d4 df       	rcall	.-88     	; 0x509a <tc_set_wgm>
	
	// Reset the counter:
	tc_write_count(SYSTICK_TIMER, 0);
    50f2:	60 e0       	ldi	r22, 0x00	; 0
    50f4:	70 e0       	ldi	r23, 0x00	; 0
    50f6:	80 e4       	ldi	r24, 0x40	; 64
    50f8:	98 e0       	ldi	r25, 0x08	; 8
    50fa:	8b df       	rcall	.-234    	; 0x5012 <tc_write_count>
	
	// Set the period:
	tc_write_period(SYSTICK_TIMER, F_CPU/SYSTICK_FREQUENCY);
    50fc:	60 e0       	ldi	r22, 0x00	; 0
    50fe:	7d e7       	ldi	r23, 0x7D	; 125
    5100:	80 e4       	ldi	r24, 0x40	; 64
    5102:	98 e0       	ldi	r25, 0x08	; 8
    5104:	9d df       	rcall	.-198    	; 0x5040 <tc_write_period>

	// Clear the overflow flag:
	clearSysTickFlag();
    5106:	2b d0       	rcall	.+86     	; 0x515e <clearSysTickFlag>
	
	// Set the callback:
	tc_set_overflow_interrupt_callback(SYSTICK_TIMER, tick);
    5108:	89 81       	ldd	r24, Y+1	; 0x01
    510a:	9a 81       	ldd	r25, Y+2	; 0x02
    510c:	bc 01       	movw	r22, r24
    510e:	80 e4       	ldi	r24, 0x40	; 64
    5110:	98 e0       	ldi	r25, 0x08	; 8
    5112:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <tc_set_overflow_interrupt_callback>
	
	// Set the interrupt priority:
	tc_set_overflow_interrupt_level(SYSTICK_TIMER, TC_INT_LVL_LO);
    5116:	61 e0       	ldi	r22, 0x01	; 1
    5118:	80 e4       	ldi	r24, 0x40	; 64
    511a:	98 e0       	ldi	r25, 0x08	; 8
    511c:	13 df       	rcall	.-474    	; 0x4f44 <tc_set_overflow_interrupt_level>

	// Select the clock source (starts counting):
	tc_write_clock_source(SYSTICK_TIMER, TC_CLKSEL_DIV1_gc);
    511e:	61 e0       	ldi	r22, 0x01	; 1
    5120:	80 e4       	ldi	r24, 0x40	; 64
    5122:	98 e0       	ldi	r25, 0x08	; 8
    5124:	33 df       	rcall	.-410    	; 0x4f8c <tc_write_clock_source>

	// Leave it to be enabled later:
	disableSysTick();
    5126:	10 d0       	rcall	.+32     	; 0x5148 <disableSysTick>
}
    5128:	0f 90       	pop	r0
    512a:	0f 90       	pop	r0
    512c:	df 91       	pop	r29
    512e:	cf 91       	pop	r28
    5130:	08 95       	ret

00005132 <enableSysTick>:

void enableSysTick(void) {
    5132:	cf 93       	push	r28
    5134:	df 93       	push	r29
    5136:	cd b7       	in	r28, 0x3d	; 61
    5138:	de b7       	in	r29, 0x3e	; 62
	tc_enable(SYSTICK_TIMER);
    513a:	80 e4       	ldi	r24, 0x40	; 64
    513c:	98 e0       	ldi	r25, 0x08	; 8
    513e:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <tc_enable>
}
    5142:	df 91       	pop	r29
    5144:	cf 91       	pop	r28
    5146:	08 95       	ret

00005148 <disableSysTick>:

void disableSysTick(void) {
    5148:	cf 93       	push	r28
    514a:	df 93       	push	r29
    514c:	cd b7       	in	r28, 0x3d	; 61
    514e:	de b7       	in	r29, 0x3e	; 62
	tc_disable(SYSTICK_TIMER);
    5150:	80 e4       	ldi	r24, 0x40	; 64
    5152:	98 e0       	ldi	r25, 0x08	; 8
    5154:	0e 94 69 37 	call	0x6ed2	; 0x6ed2 <tc_disable>
}
    5158:	df 91       	pop	r29
    515a:	cf 91       	pop	r28
    515c:	08 95       	ret

0000515e <clearSysTickFlag>:

void clearSysTickFlag(void) {
    515e:	cf 93       	push	r28
    5160:	df 93       	push	r29
    5162:	cd b7       	in	r28, 0x3d	; 61
    5164:	de b7       	in	r29, 0x3e	; 62
	tc_clear_overflow(SYSTICK_TIMER);
    5166:	80 e4       	ldi	r24, 0x40	; 64
    5168:	98 e0       	ldi	r25, 0x08	; 8
    516a:	81 df       	rcall	.-254    	; 0x506e <tc_clear_overflow>
}
    516c:	df 91       	pop	r29
    516e:	cf 91       	pop	r28
    5170:	08 95       	ret

00005172 <cpu_irq_save>:
}

bool USBPluggedIn(void)
{
	return ioport_get_pin_level(USB_5V_PIN);
}
    5172:	cf 93       	push	r28
    5174:	df 93       	push	r29
    5176:	1f 92       	push	r1
    5178:	cd b7       	in	r28, 0x3d	; 61
    517a:	de b7       	in	r29, 0x3e	; 62
    517c:	8f e3       	ldi	r24, 0x3F	; 63
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	fc 01       	movw	r30, r24
    5182:	80 81       	ld	r24, Z
    5184:	89 83       	std	Y+1, r24	; 0x01
    5186:	f8 94       	cli
    5188:	89 81       	ldd	r24, Y+1	; 0x01
    518a:	0f 90       	pop	r0
    518c:	df 91       	pop	r29
    518e:	cf 91       	pop	r28
    5190:	08 95       	ret

00005192 <cpu_irq_restore>:
    5192:	cf 93       	push	r28
    5194:	df 93       	push	r29
    5196:	1f 92       	push	r1
    5198:	cd b7       	in	r28, 0x3d	; 61
    519a:	de b7       	in	r29, 0x3e	; 62
    519c:	89 83       	std	Y+1, r24	; 0x01
    519e:	8f e3       	ldi	r24, 0x3F	; 63
    51a0:	90 e0       	ldi	r25, 0x00	; 0
    51a2:	29 81       	ldd	r18, Y+1	; 0x01
    51a4:	fc 01       	movw	r30, r24
    51a6:	20 83       	st	Z, r18
    51a8:	0f 90       	pop	r0
    51aa:	df 91       	pop	r29
    51ac:	cf 91       	pop	r28
    51ae:	08 95       	ret

000051b0 <reset_do_soft_reset>:
    51b0:	cf 93       	push	r28
    51b2:	df 93       	push	r29
    51b4:	cd b7       	in	r28, 0x3d	; 61
    51b6:	de b7       	in	r29, 0x3e	; 62
    51b8:	61 e0       	ldi	r22, 0x01	; 1
    51ba:	89 e7       	ldi	r24, 0x79	; 121
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	9d d5       	rcall	.+2874   	; 0x5cfa <ccp_write_io>
    51c0:	ff cf       	rjmp	.-2      	; 0x51c0 <reset_do_soft_reset+0x10>

000051c2 <usart_set_rx_interrupt_level>:
    51c2:	cf 93       	push	r28
    51c4:	df 93       	push	r29
    51c6:	00 d0       	rcall	.+0      	; 0x51c8 <usart_set_rx_interrupt_level+0x6>
    51c8:	1f 92       	push	r1
    51ca:	cd b7       	in	r28, 0x3d	; 61
    51cc:	de b7       	in	r29, 0x3e	; 62
    51ce:	89 83       	std	Y+1, r24	; 0x01
    51d0:	9a 83       	std	Y+2, r25	; 0x02
    51d2:	6b 83       	std	Y+3, r22	; 0x03
    51d4:	89 81       	ldd	r24, Y+1	; 0x01
    51d6:	9a 81       	ldd	r25, Y+2	; 0x02
    51d8:	fc 01       	movw	r30, r24
    51da:	83 81       	ldd	r24, Z+3	; 0x03
    51dc:	28 2f       	mov	r18, r24
    51de:	2f 7c       	andi	r18, 0xCF	; 207
    51e0:	8b 81       	ldd	r24, Y+3	; 0x03
    51e2:	88 2f       	mov	r24, r24
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	82 95       	swap	r24
    51e8:	92 95       	swap	r25
    51ea:	90 7f       	andi	r25, 0xF0	; 240
    51ec:	98 27       	eor	r25, r24
    51ee:	80 7f       	andi	r24, 0xF0	; 240
    51f0:	98 27       	eor	r25, r24
    51f2:	82 2b       	or	r24, r18
    51f4:	28 2f       	mov	r18, r24
    51f6:	89 81       	ldd	r24, Y+1	; 0x01
    51f8:	9a 81       	ldd	r25, Y+2	; 0x02
    51fa:	fc 01       	movw	r30, r24
    51fc:	23 83       	std	Z+3, r18	; 0x03
    51fe:	23 96       	adiw	r28, 0x03	; 3
    5200:	cd bf       	out	0x3d, r28	; 61
    5202:	de bf       	out	0x3e, r29	; 62
    5204:	df 91       	pop	r29
    5206:	cf 91       	pop	r28
    5208:	08 95       	ret

0000520a <usart_set_dre_interrupt_level>:
    520a:	cf 93       	push	r28
    520c:	df 93       	push	r29
    520e:	00 d0       	rcall	.+0      	; 0x5210 <usart_set_dre_interrupt_level+0x6>
    5210:	1f 92       	push	r1
    5212:	cd b7       	in	r28, 0x3d	; 61
    5214:	de b7       	in	r29, 0x3e	; 62
    5216:	89 83       	std	Y+1, r24	; 0x01
    5218:	9a 83       	std	Y+2, r25	; 0x02
    521a:	6b 83       	std	Y+3, r22	; 0x03
    521c:	89 81       	ldd	r24, Y+1	; 0x01
    521e:	9a 81       	ldd	r25, Y+2	; 0x02
    5220:	fc 01       	movw	r30, r24
    5222:	83 81       	ldd	r24, Z+3	; 0x03
    5224:	98 2f       	mov	r25, r24
    5226:	9c 7f       	andi	r25, 0xFC	; 252
    5228:	8b 81       	ldd	r24, Y+3	; 0x03
    522a:	89 2b       	or	r24, r25
    522c:	28 2f       	mov	r18, r24
    522e:	89 81       	ldd	r24, Y+1	; 0x01
    5230:	9a 81       	ldd	r25, Y+2	; 0x02
    5232:	fc 01       	movw	r30, r24
    5234:	23 83       	std	Z+3, r18	; 0x03
    5236:	23 96       	adiw	r28, 0x03	; 3
    5238:	cd bf       	out	0x3d, r28	; 61
    523a:	de bf       	out	0x3e, r29	; 62
    523c:	df 91       	pop	r29
    523e:	cf 91       	pop	r28
    5240:	08 95       	ret

00005242 <usart_clear_rx_complete>:
    5242:	cf 93       	push	r28
    5244:	df 93       	push	r29
    5246:	00 d0       	rcall	.+0      	; 0x5248 <usart_clear_rx_complete+0x6>
    5248:	cd b7       	in	r28, 0x3d	; 61
    524a:	de b7       	in	r29, 0x3e	; 62
    524c:	89 83       	std	Y+1, r24	; 0x01
    524e:	9a 83       	std	Y+2, r25	; 0x02
    5250:	89 81       	ldd	r24, Y+1	; 0x01
    5252:	9a 81       	ldd	r25, Y+2	; 0x02
    5254:	20 e8       	ldi	r18, 0x80	; 128
    5256:	fc 01       	movw	r30, r24
    5258:	21 83       	std	Z+1, r18	; 0x01
    525a:	0f 90       	pop	r0
    525c:	0f 90       	pop	r0
    525e:	df 91       	pop	r29
    5260:	cf 91       	pop	r28
    5262:	08 95       	ret

00005264 <usart_put>:
    5264:	cf 93       	push	r28
    5266:	df 93       	push	r29
    5268:	00 d0       	rcall	.+0      	; 0x526a <usart_put+0x6>
    526a:	1f 92       	push	r1
    526c:	cd b7       	in	r28, 0x3d	; 61
    526e:	de b7       	in	r29, 0x3e	; 62
    5270:	89 83       	std	Y+1, r24	; 0x01
    5272:	9a 83       	std	Y+2, r25	; 0x02
    5274:	6b 83       	std	Y+3, r22	; 0x03
    5276:	89 81       	ldd	r24, Y+1	; 0x01
    5278:	9a 81       	ldd	r25, Y+2	; 0x02
    527a:	2b 81       	ldd	r18, Y+3	; 0x03
    527c:	fc 01       	movw	r30, r24
    527e:	20 83       	st	Z, r18
    5280:	23 96       	adiw	r28, 0x03	; 3
    5282:	cd bf       	out	0x3d, r28	; 61
    5284:	de bf       	out	0x3e, r29	; 62
    5286:	df 91       	pop	r29
    5288:	cf 91       	pop	r28
    528a:	08 95       	ret

0000528c <usart_get>:
    528c:	cf 93       	push	r28
    528e:	df 93       	push	r29
    5290:	00 d0       	rcall	.+0      	; 0x5292 <usart_get+0x6>
    5292:	cd b7       	in	r28, 0x3d	; 61
    5294:	de b7       	in	r29, 0x3e	; 62
    5296:	89 83       	std	Y+1, r24	; 0x01
    5298:	9a 83       	std	Y+2, r25	; 0x02
    529a:	89 81       	ldd	r24, Y+1	; 0x01
    529c:	9a 81       	ldd	r25, Y+2	; 0x02
    529e:	fc 01       	movw	r30, r24
    52a0:	80 81       	ld	r24, Z
    52a2:	0f 90       	pop	r0
    52a4:	0f 90       	pop	r0
    52a6:	df 91       	pop	r29
    52a8:	cf 91       	pop	r28
    52aa:	08 95       	ret

000052ac <setupUsb>:
    52ac:	cf 93       	push	r28
    52ae:	df 93       	push	r29
    52b0:	cd b7       	in	r28, 0x3d	; 61
    52b2:	de b7       	in	r29, 0x3e	; 62
    52b4:	60 e1       	ldi	r22, 0x10	; 16
    52b6:	83 e0       	ldi	r24, 0x03	; 3
    52b8:	81 d2       	rcall	.+1282   	; 0x57bc <sysclk_enable_module>
    52ba:	83 e4       	ldi	r24, 0x43	; 67
    52bc:	91 e2       	ldi	r25, 0x21	; 33
    52be:	51 d8       	rcall	.-3934   	; 0x4362 <sendDBGString>
    52c0:	57 d1       	rcall	.+686    	; 0x5570 <WatchdogPet>
    52c2:	62 e7       	ldi	r22, 0x72	; 114
    52c4:	70 e2       	ldi	r23, 0x20	; 32
    52c6:	80 ea       	ldi	r24, 0xA0	; 160
    52c8:	98 e0       	ldi	r25, 0x08	; 8
    52ca:	0e 94 07 39 	call	0x720e	; 0x720e <usart_init_rs232>
    52ce:	88 23       	and	r24, r24
    52d0:	21 f0       	breq	.+8      	; 0x52da <setupUsb+0x2e>
    52d2:	83 e5       	ldi	r24, 0x53	; 83
    52d4:	91 e2       	ldi	r25, 0x21	; 33
    52d6:	64 d8       	rcall	.-3896   	; 0x43a0 <sendDBGLine>
    52d8:	03 c0       	rjmp	.+6      	; 0x52e0 <setupUsb+0x34>
    52da:	88 e5       	ldi	r24, 0x58	; 88
    52dc:	91 e2       	ldi	r25, 0x21	; 33
    52de:	60 d8       	rcall	.-3904   	; 0x43a0 <sendDBGLine>
    52e0:	40 e4       	ldi	r20, 0x40	; 64
    52e2:	66 e7       	ldi	r22, 0x76	; 118
    52e4:	77 e2       	ldi	r23, 0x27	; 39
    52e6:	86 eb       	ldi	r24, 0xB6	; 182
    52e8:	97 e2       	ldi	r25, 0x27	; 39
    52ea:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <initCB>
    52ee:	40 e2       	ldi	r20, 0x20	; 32
    52f0:	6c eb       	ldi	r22, 0xBC	; 188
    52f2:	77 e2       	ldi	r23, 0x27	; 39
    52f4:	8c ed       	ldi	r24, 0xDC	; 220
    52f6:	97 e2       	ldi	r25, 0x27	; 39
    52f8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <initCB>
    52fc:	61 e0       	ldi	r22, 0x01	; 1
    52fe:	80 ea       	ldi	r24, 0xA0	; 160
    5300:	98 e0       	ldi	r25, 0x08	; 8
    5302:	5f df       	rcall	.-322    	; 0x51c2 <usart_set_rx_interrupt_level>
    5304:	df 91       	pop	r29
    5306:	cf 91       	pop	r28
    5308:	08 95       	ret

0000530a <sendUSBChar>:
    530a:	cf 93       	push	r28
    530c:	df 93       	push	r29
    530e:	1f 92       	push	r1
    5310:	cd b7       	in	r28, 0x3d	; 61
    5312:	de b7       	in	r29, 0x3e	; 62
    5314:	89 83       	std	Y+1, r24	; 0x01
    5316:	00 00       	nop
    5318:	69 81       	ldd	r22, Y+1	; 0x01
    531a:	8c ed       	ldi	r24, 0xDC	; 220
    531c:	97 e2       	ldi	r25, 0x27	; 39
    531e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <addByteToCB>
    5322:	98 2f       	mov	r25, r24
    5324:	81 e0       	ldi	r24, 0x01	; 1
    5326:	89 27       	eor	r24, r25
    5328:	88 23       	and	r24, r24
    532a:	b1 f7       	brne	.-20     	; 0x5318 <sendUSBChar+0xe>
    532c:	61 e0       	ldi	r22, 0x01	; 1
    532e:	80 ea       	ldi	r24, 0xA0	; 160
    5330:	98 e0       	ldi	r25, 0x08	; 8
    5332:	6b df       	rcall	.-298    	; 0x520a <usart_set_dre_interrupt_level>
    5334:	0f 90       	pop	r0
    5336:	df 91       	pop	r29
    5338:	cf 91       	pop	r28
    533a:	08 95       	ret

0000533c <sendUSBString>:
    533c:	cf 93       	push	r28
    533e:	df 93       	push	r29
    5340:	00 d0       	rcall	.+0      	; 0x5342 <sendUSBString+0x6>
    5342:	1f 92       	push	r1
    5344:	cd b7       	in	r28, 0x3d	; 61
    5346:	de b7       	in	r29, 0x3e	; 62
    5348:	89 83       	std	Y+1, r24	; 0x01
    534a:	9a 83       	std	Y+2, r25	; 0x02
    534c:	6b 83       	std	Y+3, r22	; 0x03
    534e:	0c c0       	rjmp	.+24     	; 0x5368 <sendUSBString+0x2c>
    5350:	89 81       	ldd	r24, Y+1	; 0x01
    5352:	9a 81       	ldd	r25, Y+2	; 0x02
    5354:	fc 01       	movw	r30, r24
    5356:	80 81       	ld	r24, Z
    5358:	28 2f       	mov	r18, r24
    535a:	89 81       	ldd	r24, Y+1	; 0x01
    535c:	9a 81       	ldd	r25, Y+2	; 0x02
    535e:	01 96       	adiw	r24, 0x01	; 1
    5360:	89 83       	std	Y+1, r24	; 0x01
    5362:	9a 83       	std	Y+2, r25	; 0x02
    5364:	82 2f       	mov	r24, r18
    5366:	d1 df       	rcall	.-94     	; 0x530a <sendUSBChar>
    5368:	89 81       	ldd	r24, Y+1	; 0x01
    536a:	9a 81       	ldd	r25, Y+2	; 0x02
    536c:	fc 01       	movw	r30, r24
    536e:	80 81       	ld	r24, Z
    5370:	88 23       	and	r24, r24
    5372:	71 f7       	brne	.-36     	; 0x5350 <sendUSBString+0x14>
    5374:	8b 81       	ldd	r24, Y+3	; 0x03
    5376:	88 23       	and	r24, r24
    5378:	11 f0       	breq	.+4      	; 0x537e <sendUSBString+0x42>
    537a:	80 e0       	ldi	r24, 0x00	; 0
    537c:	c6 df       	rcall	.-116    	; 0x530a <sendUSBChar>
    537e:	23 96       	adiw	r28, 0x03	; 3
    5380:	cd bf       	out	0x3d, r28	; 61
    5382:	de bf       	out	0x3e, r29	; 62
    5384:	df 91       	pop	r29
    5386:	cf 91       	pop	r28
    5388:	08 95       	ret

0000538a <sendUSBLine>:
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	00 d0       	rcall	.+0      	; 0x5390 <sendUSBLine+0x6>
    5390:	cd b7       	in	r28, 0x3d	; 61
    5392:	de b7       	in	r29, 0x3e	; 62
    5394:	89 83       	std	Y+1, r24	; 0x01
    5396:	9a 83       	std	Y+2, r25	; 0x02
    5398:	89 81       	ldd	r24, Y+1	; 0x01
    539a:	9a 81       	ldd	r25, Y+2	; 0x02
    539c:	60 e0       	ldi	r22, 0x00	; 0
    539e:	ce df       	rcall	.-100    	; 0x533c <sendUSBString>
    53a0:	8d e0       	ldi	r24, 0x0D	; 13
    53a2:	b3 df       	rcall	.-154    	; 0x530a <sendUSBChar>
    53a4:	8a e0       	ldi	r24, 0x0A	; 10
    53a6:	b1 df       	rcall	.-158    	; 0x530a <sendUSBChar>
    53a8:	0f 90       	pop	r0
    53aa:	0f 90       	pop	r0
    53ac:	df 91       	pop	r29
    53ae:	cf 91       	pop	r28
    53b0:	08 95       	ret

000053b2 <recvUSBString>:
    53b2:	cf 93       	push	r28
    53b4:	df 93       	push	r29
    53b6:	00 d0       	rcall	.+0      	; 0x53b8 <recvUSBString+0x6>
    53b8:	1f 92       	push	r1
    53ba:	cd b7       	in	r28, 0x3d	; 61
    53bc:	de b7       	in	r29, 0x3e	; 62
    53be:	89 83       	std	Y+1, r24	; 0x01
    53c0:	9a 83       	std	Y+2, r25	; 0x02
    53c2:	6b 83       	std	Y+3, r22	; 0x03
    53c4:	89 81       	ldd	r24, Y+1	; 0x01
    53c6:	9a 81       	ldd	r25, Y+2	; 0x02
    53c8:	4b 81       	ldd	r20, Y+3	; 0x03
    53ca:	bc 01       	movw	r22, r24
    53cc:	86 eb       	ldi	r24, 0xB6	; 182
    53ce:	97 e2       	ldi	r25, 0x27	; 39
    53d0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <readStringFromCB>
    53d4:	23 96       	adiw	r28, 0x03	; 3
    53d6:	cd bf       	out	0x3d, r28	; 61
    53d8:	de bf       	out	0x3e, r29	; 62
    53da:	df 91       	pop	r29
    53dc:	cf 91       	pop	r28
    53de:	08 95       	ret

000053e0 <__vector_25>:

ISR(USB_SERIAL_RX_INT) {
    53e0:	1f 92       	push	r1
    53e2:	0f 92       	push	r0
    53e4:	00 90 3f 00 	lds	r0, 0x003F
    53e8:	0f 92       	push	r0
    53ea:	11 24       	eor	r1, r1
    53ec:	00 90 3b 00 	lds	r0, 0x003B
    53f0:	0f 92       	push	r0
    53f2:	2f 93       	push	r18
    53f4:	3f 93       	push	r19
    53f6:	4f 93       	push	r20
    53f8:	5f 93       	push	r21
    53fa:	6f 93       	push	r22
    53fc:	7f 93       	push	r23
    53fe:	8f 93       	push	r24
    5400:	9f 93       	push	r25
    5402:	af 93       	push	r26
    5404:	bf 93       	push	r27
    5406:	ef 93       	push	r30
    5408:	ff 93       	push	r31
    540a:	cf 93       	push	r28
    540c:	df 93       	push	r29
    540e:	00 d0       	rcall	.+0      	; 0x5410 <__vector_25+0x30>
    5410:	cd b7       	in	r28, 0x3d	; 61
    5412:	de b7       	in	r29, 0x3e	; 62
	char c;
	
	irqflags_t flags;
	flags = cpu_irq_save();	
    5414:	ae de       	rcall	.-676    	; 0x5172 <cpu_irq_save>
    5416:	89 83       	std	Y+1, r24	; 0x01
	
	c = usart_get(USB_SERIAL);
    5418:	80 ea       	ldi	r24, 0xA0	; 160
    541a:	98 e0       	ldi	r25, 0x08	; 8
    541c:	37 df       	rcall	.-402    	; 0x528c <usart_get>
    541e:	8a 83       	std	Y+2, r24	; 0x02
	
	// Insta-reset if this is the break character for
	// entering the bootloader: (Really shouldn't be
	// in the usb code, but it's the quickest)
	if (c == 0x1B) {
    5420:	8a 81       	ldd	r24, Y+2	; 0x02
    5422:	8b 31       	cpi	r24, 0x1B	; 27
    5424:	09 f4       	brne	.+2      	; 0x5428 <__vector_25+0x48>
		reset_do_soft_reset();
    5426:	c4 de       	rcall	.-632    	; 0x51b0 <reset_do_soft_reset>
	}
	
	// Add the byte to the buffer. (If it is not full):
	addByteToCB(&rxCB, c);
    5428:	8a 81       	ldd	r24, Y+2	; 0x02
    542a:	68 2f       	mov	r22, r24
    542c:	86 eb       	ldi	r24, 0xB6	; 182
    542e:	97 e2       	ldi	r25, 0x27	; 39
    5430:	0e 94 1b 0b 	call	0x1636	; 0x1636 <addByteToCB>
	
	// Clear the interrupt flag:
	usart_clear_rx_complete(USB_SERIAL);
    5434:	80 ea       	ldi	r24, 0xA0	; 160
    5436:	98 e0       	ldi	r25, 0x08	; 8
    5438:	04 df       	rcall	.-504    	; 0x5242 <usart_clear_rx_complete>
	
	cpu_irq_restore(flags);
    543a:	89 81       	ldd	r24, Y+1	; 0x01
    543c:	aa de       	rcall	.-684    	; 0x5192 <cpu_irq_restore>
}
    543e:	0f 90       	pop	r0
    5440:	0f 90       	pop	r0
    5442:	df 91       	pop	r29
    5444:	cf 91       	pop	r28
    5446:	ff 91       	pop	r31
    5448:	ef 91       	pop	r30
    544a:	bf 91       	pop	r27
    544c:	af 91       	pop	r26
    544e:	9f 91       	pop	r25
    5450:	8f 91       	pop	r24
    5452:	7f 91       	pop	r23
    5454:	6f 91       	pop	r22
    5456:	5f 91       	pop	r21
    5458:	4f 91       	pop	r20
    545a:	3f 91       	pop	r19
    545c:	2f 91       	pop	r18
    545e:	0f 90       	pop	r0
    5460:	00 92 3b 00 	sts	0x003B, r0
    5464:	0f 90       	pop	r0
    5466:	00 92 3f 00 	sts	0x003F, r0
    546a:	0f 90       	pop	r0
    546c:	1f 90       	pop	r1
    546e:	18 95       	reti

00005470 <__vector_26>:

ISR(USB_SERIAL_DRE_INT) {
    5470:	1f 92       	push	r1
    5472:	0f 92       	push	r0
    5474:	00 90 3f 00 	lds	r0, 0x003F
    5478:	0f 92       	push	r0
    547a:	11 24       	eor	r1, r1
    547c:	00 90 3b 00 	lds	r0, 0x003B
    5480:	0f 92       	push	r0
    5482:	2f 93       	push	r18
    5484:	3f 93       	push	r19
    5486:	4f 93       	push	r20
    5488:	5f 93       	push	r21
    548a:	6f 93       	push	r22
    548c:	7f 93       	push	r23
    548e:	8f 93       	push	r24
    5490:	9f 93       	push	r25
    5492:	af 93       	push	r26
    5494:	bf 93       	push	r27
    5496:	ef 93       	push	r30
    5498:	ff 93       	push	r31
    549a:	cf 93       	push	r28
    549c:	df 93       	push	r29
    549e:	1f 92       	push	r1
    54a0:	cd b7       	in	r28, 0x3d	; 61
    54a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	
	// Is there any data to send out?
	if (readByteFromCB(&txCB, &temp)) {
    54a4:	ce 01       	movw	r24, r28
    54a6:	01 96       	adiw	r24, 0x01	; 1
    54a8:	bc 01       	movw	r22, r24
    54aa:	8c ed       	ldi	r24, 0xDC	; 220
    54ac:	97 e2       	ldi	r25, 0x27	; 39
    54ae:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <readByteFromCB>
    54b2:	88 23       	and	r24, r24
    54b4:	31 f0       	breq	.+12     	; 0x54c2 <__vector_26+0x52>
		// Then send it:
		usart_put(USB_SERIAL, temp);
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	68 2f       	mov	r22, r24
    54ba:	80 ea       	ldi	r24, 0xA0	; 160
    54bc:	98 e0       	ldi	r25, 0x08	; 8
    54be:	d2 de       	rcall	.-604    	; 0x5264 <usart_put>
    54c0:	04 c0       	rjmp	.+8      	; 0x54ca <__vector_26+0x5a>
	}
	else {
		// Disable the interrupt if there is no more data:
		usart_set_dre_interrupt_level(USB_SERIAL, USART_INT_LVL_OFF);
    54c2:	60 e0       	ldi	r22, 0x00	; 0
    54c4:	80 ea       	ldi	r24, 0xA0	; 160
    54c6:	98 e0       	ldi	r25, 0x08	; 8
    54c8:	a0 de       	rcall	.-704    	; 0x520a <usart_set_dre_interrupt_level>
	}
}
    54ca:	0f 90       	pop	r0
    54cc:	df 91       	pop	r29
    54ce:	cf 91       	pop	r28
    54d0:	ff 91       	pop	r31
    54d2:	ef 91       	pop	r30
    54d4:	bf 91       	pop	r27
    54d6:	af 91       	pop	r26
    54d8:	9f 91       	pop	r25
    54da:	8f 91       	pop	r24
    54dc:	7f 91       	pop	r23
    54de:	6f 91       	pop	r22
    54e0:	5f 91       	pop	r21
    54e2:	4f 91       	pop	r20
    54e4:	3f 91       	pop	r19
    54e6:	2f 91       	pop	r18
    54e8:	0f 90       	pop	r0
    54ea:	00 92 3b 00 	sts	0x003B, r0
    54ee:	0f 90       	pop	r0
    54f0:	00 92 3f 00 	sts	0x003F, r0
    54f4:	0f 90       	pop	r0
    54f6:	1f 90       	pop	r1
    54f8:	18 95       	reti

000054fa <PrintXY>:
//#if DEBUG

#include <stdlib.h>

void PrintXY(int16_t x, int16_t y)
{
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
    54fe:	cd b7       	in	r28, 0x3d	; 61
    5500:	de b7       	in	r29, 0x3e	; 62
    5502:	2c 97       	sbiw	r28, 0x0c	; 12
    5504:	cd bf       	out	0x3d, r28	; 61
    5506:	de bf       	out	0x3e, r29	; 62
    5508:	89 87       	std	Y+9, r24	; 0x09
    550a:	9a 87       	std	Y+10, r25	; 0x0a
    550c:	6b 87       	std	Y+11, r22	; 0x0b
    550e:	7c 87       	std	Y+12, r23	; 0x0c
	//string size (NULL char inclusive) for signed 16-bit integer (6+1); rounded up +1 for byte alignment
	#define STR_SIZE_16B 8
	unsigned char numStr[STR_SIZE_16B];
	sendUSBChar( '(' );
    5510:	88 e2       	ldi	r24, 0x28	; 40
    5512:	fb de       	rcall	.-522    	; 0x530a <sendUSBChar>
	sendUSBString( itoa(x, numStr, 10), false );
    5514:	89 85       	ldd	r24, Y+9	; 0x09
    5516:	9a 85       	ldd	r25, Y+10	; 0x0a
    5518:	4a e0       	ldi	r20, 0x0A	; 10
    551a:	50 e0       	ldi	r21, 0x00	; 0
    551c:	9e 01       	movw	r18, r28
    551e:	2f 5f       	subi	r18, 0xFF	; 255
    5520:	3f 4f       	sbci	r19, 0xFF	; 255
    5522:	b9 01       	movw	r22, r18
    5524:	0e 94 91 49 	call	0x9322	; 0x9322 <itoa>
    5528:	60 e0       	ldi	r22, 0x00	; 0
    552a:	08 df       	rcall	.-496    	; 0x533c <sendUSBString>
	sendUSBChar( ',' );
    552c:	8c e2       	ldi	r24, 0x2C	; 44
    552e:	ed de       	rcall	.-550    	; 0x530a <sendUSBChar>
	sendUSBString( itoa(y, numStr, 10), false );
    5530:	8b 85       	ldd	r24, Y+11	; 0x0b
    5532:	9c 85       	ldd	r25, Y+12	; 0x0c
    5534:	4a e0       	ldi	r20, 0x0A	; 10
    5536:	50 e0       	ldi	r21, 0x00	; 0
    5538:	9e 01       	movw	r18, r28
    553a:	2f 5f       	subi	r18, 0xFF	; 255
    553c:	3f 4f       	sbci	r19, 0xFF	; 255
    553e:	b9 01       	movw	r22, r18
    5540:	0e 94 91 49 	call	0x9322	; 0x9322 <itoa>
    5544:	60 e0       	ldi	r22, 0x00	; 0
    5546:	fa de       	rcall	.-524    	; 0x533c <sendUSBString>
	sendUSBChar( ')' );
    5548:	89 e2       	ldi	r24, 0x29	; 41
    554a:	df de       	rcall	.-578    	; 0x530a <sendUSBChar>
}
    554c:	2c 96       	adiw	r28, 0x0c	; 12
    554e:	cd bf       	out	0x3d, r28	; 61
    5550:	de bf       	out	0x3e, r29	; 62
    5552:	df 91       	pop	r29
    5554:	cf 91       	pop	r28
    5556:	08 95       	ret

00005558 <WatchdogInit>:
* Normally the application code will call WatchdogValidate() much more
* frequently than once per 8 seconds and the validate function will check all
* subsystems for continuing operation.
*/
void WatchdogInit(void)
{
    5558:	cf 93       	push	r28
    555a:	df 93       	push	r29
    555c:	cd b7       	in	r28, 0x3d	; 61
    555e:	de b7       	in	r29, 0x3e	; 62
	// Setup prescaler
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
    5560:	8a e0       	ldi	r24, 0x0A	; 10
    5562:	0e 94 38 3b 	call	0x7670	; 0x7670 <wdt_set_timeout_period>
	#if NO_WATCHDOG != 1
	/* Now enable the watchdog */
	wdt_enable();
    5566:	0e 94 6f 3b 	call	0x76de	; 0x76de <wdt_enable>
	#else
	#ifndef DEBUG
	#error "Watchdog must be enabled in release build. Don't define NO_WATCHDOG"
	#endif
	#endif
}
    556a:	df 91       	pop	r29
    556c:	cf 91       	pop	r28
    556e:	08 95       	ret

00005570 <WatchdogPet>:
/**
* Reset the hardware watchdog so it does not timeout and restart the
* processor.
*/
void WatchdogPet(void)
{
    5570:	cf 93       	push	r28
    5572:	df 93       	push	r29
    5574:	cd b7       	in	r28, 0x3d	; 61
    5576:	de b7       	in	r29, 0x3e	; 62
	sendDBGString(".");
    5578:	8c e5       	ldi	r24, 0x5C	; 92
    557a:	91 e2       	ldi	r25, 0x21	; 33
    557c:	0e 94 b1 21 	call	0x4362	; 0x4362 <sendDBGString>
	wdt_reset();
    5580:	a8 95       	wdr
}
    5582:	df 91       	pop	r29
    5584:	cf 91       	pop	r28
    5586:	08 95       	ret

00005588 <WatchdogValidate>:
* restart. If one of the subsystems has failed, allow the watchdog to timeout
* and force a restart.
* @note This function is called once per second from the system timer.
*/
void WatchdogValidate(void)
{
    5588:	cf 93       	push	r28
    558a:	df 93       	push	r29
    558c:	1f 92       	push	r1
    558e:	cd b7       	in	r28, 0x3d	; 61
    5590:	de b7       	in	r29, 0x3e	; 62
	bool systemStalled = false;
    5592:	19 82       	std	Y+1, r1	; 0x01

	/* Main loop still running? */
	if (mainLoopWatchdog == 0)
    5594:	80 91 7b 20 	lds	r24, 0x207B
    5598:	90 91 7c 20 	lds	r25, 0x207C
    559c:	00 97       	sbiw	r24, 0x00	; 0
    559e:	49 f0       	breq	.+18     	; 0x55b2 <WatchdogValidate+0x2a>
		// sendDBGLine("TASK_MAIN watchdog task timeout");
		// systemStalled = true;
	}
	else
	{
		mainLoopWatchdog--;
    55a0:	80 91 7b 20 	lds	r24, 0x207B
    55a4:	90 91 7c 20 	lds	r25, 0x207C
    55a8:	01 97       	sbiw	r24, 0x01	; 1
    55aa:	80 93 7b 20 	sts	0x207B, r24
    55ae:	90 93 7c 20 	sts	0x207C, r25
	}

	if (!systemStalled)
    55b2:	99 81       	ldd	r25, Y+1	; 0x01
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	89 27       	eor	r24, r25
    55b8:	88 23       	and	r24, r24
    55ba:	09 f0       	breq	.+2      	; 0x55be <WatchdogValidate+0x36>
	{
		WatchdogPet();
    55bc:	d9 df       	rcall	.-78     	; 0x5570 <WatchdogPet>
	}
}
    55be:	0f 90       	pop	r0
    55c0:	df 91       	pop	r29
    55c2:	cf 91       	pop	r28
    55c4:	08 95       	ret

000055c6 <WatchDogEnable>:

void WatchDogEnable(bool enable)
{
    55c6:	cf 93       	push	r28
    55c8:	df 93       	push	r29
    55ca:	1f 92       	push	r1
    55cc:	cd b7       	in	r28, 0x3d	; 61
    55ce:	de b7       	in	r29, 0x3e	; 62
    55d0:	89 83       	std	Y+1, r24	; 0x01
	if (enable)
    55d2:	89 81       	ldd	r24, Y+1	; 0x01
    55d4:	88 23       	and	r24, r24
    55d6:	19 f0       	breq	.+6      	; 0x55de <WatchDogEnable+0x18>
	{
		wdt_enable();
    55d8:	0e 94 6f 3b 	call	0x76de	; 0x76de <wdt_enable>
    55dc:	02 c0       	rjmp	.+4      	; 0x55e2 <WatchDogEnable+0x1c>
	}		
	else
	{
		wdt_disable();
    55de:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <wdt_disable>
	}			
}
    55e2:	0f 90       	pop	r0
    55e4:	df 91       	pop	r29
    55e6:	cf 91       	pop	r28
    55e8:	08 95       	ret

000055ea <WatchdogTaskRunning>:
* The function is called by each task in the system that could conceivably
* fail independently.
* @param task The task that is calling to confirm that it is still running.
*/
void WatchdogTaskRunning(taskDef task)
{
    55ea:	cf 93       	push	r28
    55ec:	df 93       	push	r29
    55ee:	1f 92       	push	r1
    55f0:	cd b7       	in	r28, 0x3d	; 61
    55f2:	de b7       	in	r29, 0x3e	; 62
    55f4:	89 83       	std	Y+1, r24	; 0x01
	switch (task)
    55f6:	89 81       	ldd	r24, Y+1	; 0x01
    55f8:	88 2f       	mov	r24, r24
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	00 97       	sbiw	r24, 0x00	; 0
    55fe:	21 f0       	breq	.+8      	; 0x5608 <WatchdogTaskRunning+0x1e>
    5600:	82 30       	cpi	r24, 0x02	; 2
    5602:	91 05       	cpc	r25, r1
    5604:	41 f0       	breq	.+16     	; 0x5616 <WatchdogTaskRunning+0x2c>
    5606:	0e c0       	rjmp	.+28     	; 0x5624 <WatchdogTaskRunning+0x3a>
	{
		case TASK_MAIN:
		mainLoopWatchdog = MAIN_LOOP_WATCHDOG_RESET;
    5608:	84 e6       	ldi	r24, 0x64	; 100
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	80 93 7b 20 	sts	0x207B, r24
    5610:	90 93 7c 20 	sts	0x207C, r25
		break;
    5614:	07 c0       	rjmp	.+14     	; 0x5624 <WatchdogTaskRunning+0x3a>
		case TASK_MODEM:
		modemResponseWatchdog = MODEM_RESPONSE_WATCHDOG_RESET;
    5616:	84 e6       	ldi	r24, 0x64	; 100
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	80 93 79 20 	sts	0x2079, r24
    561e:	90 93 7a 20 	sts	0x207A, r25
		break;
    5622:	00 00       	nop
	}
}
    5624:	0f 90       	pop	r0
    5626:	df 91       	pop	r29
    5628:	cf 91       	pop	r28
    562a:	08 95       	ret

0000562c <cpu_irq_save>:
    562c:	cf 93       	push	r28
    562e:	df 93       	push	r29
    5630:	1f 92       	push	r1
    5632:	cd b7       	in	r28, 0x3d	; 61
    5634:	de b7       	in	r29, 0x3e	; 62
    5636:	8f e3       	ldi	r24, 0x3F	; 63
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	fc 01       	movw	r30, r24
    563c:	80 81       	ld	r24, Z
    563e:	89 83       	std	Y+1, r24	; 0x01
    5640:	f8 94       	cli
    5642:	89 81       	ldd	r24, Y+1	; 0x01
    5644:	0f 90       	pop	r0
    5646:	df 91       	pop	r29
    5648:	cf 91       	pop	r28
    564a:	08 95       	ret

0000564c <cpu_irq_restore>:
    564c:	cf 93       	push	r28
    564e:	df 93       	push	r29
    5650:	1f 92       	push	r1
    5652:	cd b7       	in	r28, 0x3d	; 61
    5654:	de b7       	in	r29, 0x3e	; 62
    5656:	89 83       	std	Y+1, r24	; 0x01
    5658:	8f e3       	ldi	r24, 0x3F	; 63
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	29 81       	ldd	r18, Y+1	; 0x01
    565e:	fc 01       	movw	r30, r24
    5660:	20 83       	st	Z, r18
    5662:	0f 90       	pop	r0
    5664:	df 91       	pop	r29
    5666:	cf 91       	pop	r28
    5668:	08 95       	ret

0000566a <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    566a:	cf 93       	push	r28
    566c:	df 93       	push	r29
    566e:	00 d0       	rcall	.+0      	; 0x5670 <osc_enable_internal+0x6>
    5670:	cd b7       	in	r28, 0x3d	; 61
    5672:	de b7       	in	r29, 0x3e	; 62
    5674:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    5676:	da df       	rcall	.-76     	; 0x562c <cpu_irq_save>
    5678:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    567a:	80 e5       	ldi	r24, 0x50	; 80
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	20 e5       	ldi	r18, 0x50	; 80
    5680:	30 e0       	ldi	r19, 0x00	; 0
    5682:	f9 01       	movw	r30, r18
    5684:	30 81       	ld	r19, Z
    5686:	2a 81       	ldd	r18, Y+2	; 0x02
    5688:	23 2b       	or	r18, r19
    568a:	fc 01       	movw	r30, r24
    568c:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    568e:	89 81       	ldd	r24, Y+1	; 0x01
    5690:	dd df       	rcall	.-70     	; 0x564c <cpu_irq_restore>
}
    5692:	0f 90       	pop	r0
    5694:	0f 90       	pop	r0
    5696:	df 91       	pop	r29
    5698:	cf 91       	pop	r28
    569a:	08 95       	ret

0000569c <osc_enable_external>:
	cpu_irq_restore(flags);
}
#else

static inline void osc_enable_external(uint8_t id)
{
    569c:	cf 93       	push	r28
    569e:	df 93       	push	r29
    56a0:	1f 92       	push	r1
    56a2:	cd b7       	in	r28, 0x3d	; 61
    56a4:	de b7       	in	r29, 0x3e	; 62
    56a6:	89 83       	std	Y+1, r24	; 0x01
	Assert(false); // No external oscillator on the selected board
}
    56a8:	0f 90       	pop	r0
    56aa:	df 91       	pop	r29
    56ac:	cf 91       	pop	r28
    56ae:	08 95       	ret

000056b0 <osc_disable>:
#endif

static inline void osc_disable(uint8_t id)
{
    56b0:	cf 93       	push	r28
    56b2:	df 93       	push	r29
    56b4:	00 d0       	rcall	.+0      	; 0x56b6 <osc_disable+0x6>
    56b6:	cd b7       	in	r28, 0x3d	; 61
    56b8:	de b7       	in	r29, 0x3e	; 62
    56ba:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    56bc:	b7 df       	rcall	.-146    	; 0x562c <cpu_irq_save>
    56be:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    56c0:	80 e5       	ldi	r24, 0x50	; 80
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	20 e5       	ldi	r18, 0x50	; 80
    56c6:	30 e0       	ldi	r19, 0x00	; 0
    56c8:	f9 01       	movw	r30, r18
    56ca:	20 81       	ld	r18, Z
    56cc:	32 2f       	mov	r19, r18
    56ce:	2a 81       	ldd	r18, Y+2	; 0x02
    56d0:	20 95       	com	r18
    56d2:	23 23       	and	r18, r19
    56d4:	fc 01       	movw	r30, r24
    56d6:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    56d8:	89 81       	ldd	r24, Y+1	; 0x01
    56da:	b8 df       	rcall	.-144    	; 0x564c <cpu_irq_restore>
}
    56dc:	0f 90       	pop	r0
    56de:	0f 90       	pop	r0
    56e0:	df 91       	pop	r29
    56e2:	cf 91       	pop	r28
    56e4:	08 95       	ret

000056e6 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    56e6:	cf 93       	push	r28
    56e8:	df 93       	push	r29
    56ea:	1f 92       	push	r1
    56ec:	cd b7       	in	r28, 0x3d	; 61
    56ee:	de b7       	in	r29, 0x3e	; 62
    56f0:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    56f2:	89 81       	ldd	r24, Y+1	; 0x01
    56f4:	88 30       	cpi	r24, 0x08	; 8
    56f6:	19 f0       	breq	.+6      	; 0x56fe <osc_enable+0x18>
		osc_enable_internal(id);
    56f8:	89 81       	ldd	r24, Y+1	; 0x01
    56fa:	b7 df       	rcall	.-146    	; 0x566a <osc_enable_internal>
    56fc:	02 c0       	rjmp	.+4      	; 0x5702 <osc_enable+0x1c>
	} else {
		osc_enable_external(id);
    56fe:	89 81       	ldd	r24, Y+1	; 0x01
    5700:	cd df       	rcall	.-102    	; 0x569c <osc_enable_external>
	}
}
    5702:	0f 90       	pop	r0
    5704:	df 91       	pop	r29
    5706:	cf 91       	pop	r28
    5708:	08 95       	ret

0000570a <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    570a:	cf 93       	push	r28
    570c:	df 93       	push	r29
    570e:	1f 92       	push	r1
    5710:	cd b7       	in	r28, 0x3d	; 61
    5712:	de b7       	in	r29, 0x3e	; 62
    5714:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    5716:	80 e5       	ldi	r24, 0x50	; 80
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	fc 01       	movw	r30, r24
    571c:	91 81       	ldd	r25, Z+1	; 0x01
    571e:	89 81       	ldd	r24, Y+1	; 0x01
    5720:	98 23       	and	r25, r24
    5722:	81 e0       	ldi	r24, 0x01	; 1
    5724:	99 23       	and	r25, r25
    5726:	09 f4       	brne	.+2      	; 0x572a <osc_is_ready+0x20>
    5728:	80 e0       	ldi	r24, 0x00	; 0
}
    572a:	0f 90       	pop	r0
    572c:	df 91       	pop	r29
    572e:	cf 91       	pop	r28
    5730:	08 95       	ret

00005732 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	1f 92       	push	r1
    5738:	cd b7       	in	r28, 0x3d	; 61
    573a:	de b7       	in	r29, 0x3e	; 62
    573c:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    573e:	00 00       	nop
    5740:	89 81       	ldd	r24, Y+1	; 0x01
    5742:	e3 df       	rcall	.-58     	; 0x570a <osc_is_ready>
    5744:	98 2f       	mov	r25, r24
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	89 27       	eor	r24, r25
    574a:	88 23       	and	r24, r24
    574c:	c9 f7       	brne	.-14     	; 0x5740 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    574e:	0f 90       	pop	r0
    5750:	df 91       	pop	r29
    5752:	cf 91       	pop	r28
    5754:	08 95       	ret

00005756 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    5756:	cf 93       	push	r28
    5758:	df 93       	push	r29
    575a:	00 d0       	rcall	.+0      	; 0x575c <sysclk_init+0x6>
    575c:	00 d0       	rcall	.+0      	; 0x575e <sysclk_init+0x8>
    575e:	cd b7       	in	r28, 0x3d	; 61
    5760:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    5762:	80 e7       	ldi	r24, 0x70	; 112
    5764:	90 e0       	ldi	r25, 0x00	; 0
    5766:	89 83       	std	Y+1, r24	; 0x01
    5768:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t i;
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
#endif
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    576a:	1b 82       	std	Y+3, r1	; 0x03
    576c:	0d c0       	rjmp	.+26     	; 0x5788 <sysclk_init+0x32>
		*(reg++) = 0xff;
    576e:	89 81       	ldd	r24, Y+1	; 0x01
    5770:	9a 81       	ldd	r25, Y+2	; 0x02
    5772:	2f ef       	ldi	r18, 0xFF	; 255
    5774:	fc 01       	movw	r30, r24
    5776:	20 83       	st	Z, r18
    5778:	89 81       	ldd	r24, Y+1	; 0x01
    577a:	9a 81       	ldd	r25, Y+2	; 0x02
    577c:	01 96       	adiw	r24, 0x01	; 1
    577e:	89 83       	std	Y+1, r24	; 0x01
    5780:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t i;
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
#endif
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    5782:	8b 81       	ldd	r24, Y+3	; 0x03
    5784:	8f 5f       	subi	r24, 0xFF	; 255
    5786:	8b 83       	std	Y+3, r24	; 0x03
    5788:	8b 81       	ldd	r24, Y+3	; 0x03
    578a:	87 30       	cpi	r24, 0x07	; 7
    578c:	80 f3       	brcs	.-32     	; 0x576e <sysclk_init+0x18>
	/*
	 * Switch to the selected initial system clock source, unless
	 * the default internal 2 MHz oscillator is selected.
	 */
	if (CONFIG_SYSCLK_SOURCE != SYSCLK_SRC_RC2MHZ) {
		bool need_rc2mhz = false;
    578e:	1c 82       	std	Y+4, r1	; 0x04

		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    5790:	82 e0       	ldi	r24, 0x02	; 2
    5792:	a9 df       	rcall	.-174    	; 0x56e6 <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
    5794:	82 e0       	ldi	r24, 0x02	; 2
    5796:	cd df       	rcall	.-102    	; 0x5732 <osc_wait_ready>
			break;
    5798:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    579a:	61 e0       	ldi	r22, 0x01	; 1
    579c:	80 e4       	ldi	r24, 0x40	; 64
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	ac d2       	rcall	.+1368   	; 0x5cfa <ccp_write_io>
				|| CONFIG_OSC_AUTOCAL_REF_OSC == OSC_ID_RC2MHZ) {
			need_rc2mhz = true;
		}
#endif

		if (!need_rc2mhz) {
    57a2:	9c 81       	ldd	r25, Y+4	; 0x04
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	89 27       	eor	r24, r25
    57a8:	88 23       	and	r24, r24
    57aa:	11 f0       	breq	.+4      	; 0x57b0 <sysclk_init+0x5a>
			osc_disable(OSC_ID_RC2MHZ);
    57ac:	81 e0       	ldi	r24, 0x01	; 1
    57ae:	80 df       	rcall	.-256    	; 0x56b0 <osc_disable>
		}
	}
}
    57b0:	24 96       	adiw	r28, 0x04	; 4
    57b2:	cd bf       	out	0x3d, r28	; 61
    57b4:	de bf       	out	0x3e, r29	; 62
    57b6:	df 91       	pop	r29
    57b8:	cf 91       	pop	r28
    57ba:	08 95       	ret

000057bc <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    57bc:	cf 93       	push	r28
    57be:	df 93       	push	r29
    57c0:	00 d0       	rcall	.+0      	; 0x57c2 <sysclk_enable_module+0x6>
    57c2:	1f 92       	push	r1
    57c4:	cd b7       	in	r28, 0x3d	; 61
    57c6:	de b7       	in	r29, 0x3e	; 62
    57c8:	8a 83       	std	Y+2, r24	; 0x02
    57ca:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    57cc:	2f df       	rcall	.-418    	; 0x562c <cpu_irq_save>
    57ce:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    57d0:	8a 81       	ldd	r24, Y+2	; 0x02
    57d2:	88 2f       	mov	r24, r24
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	80 59       	subi	r24, 0x90	; 144
    57d8:	9f 4f       	sbci	r25, 0xFF	; 255
    57da:	2a 81       	ldd	r18, Y+2	; 0x02
    57dc:	22 2f       	mov	r18, r18
    57de:	30 e0       	ldi	r19, 0x00	; 0
    57e0:	20 59       	subi	r18, 0x90	; 144
    57e2:	3f 4f       	sbci	r19, 0xFF	; 255
    57e4:	f9 01       	movw	r30, r18
    57e6:	20 81       	ld	r18, Z
    57e8:	32 2f       	mov	r19, r18
    57ea:	2b 81       	ldd	r18, Y+3	; 0x03
    57ec:	20 95       	com	r18
    57ee:	23 23       	and	r18, r19
    57f0:	fc 01       	movw	r30, r24
    57f2:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    57f4:	89 81       	ldd	r24, Y+1	; 0x01
    57f6:	2a df       	rcall	.-428    	; 0x564c <cpu_irq_restore>
}
    57f8:	23 96       	adiw	r28, 0x03	; 3
    57fa:	cd bf       	out	0x3d, r28	; 61
    57fc:	de bf       	out	0x3e, r29	; 62
    57fe:	df 91       	pop	r29
    5800:	cf 91       	pop	r28
    5802:	08 95       	ret

00005804 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    5804:	cf 93       	push	r28
    5806:	df 93       	push	r29
    5808:	00 d0       	rcall	.+0      	; 0x580a <sysclk_disable_module+0x6>
    580a:	1f 92       	push	r1
    580c:	cd b7       	in	r28, 0x3d	; 61
    580e:	de b7       	in	r29, 0x3e	; 62
    5810:	8a 83       	std	Y+2, r24	; 0x02
    5812:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    5814:	0b df       	rcall	.-490    	; 0x562c <cpu_irq_save>
    5816:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) |= id;
    5818:	8a 81       	ldd	r24, Y+2	; 0x02
    581a:	88 2f       	mov	r24, r24
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	80 59       	subi	r24, 0x90	; 144
    5820:	9f 4f       	sbci	r25, 0xFF	; 255
    5822:	2a 81       	ldd	r18, Y+2	; 0x02
    5824:	22 2f       	mov	r18, r18
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	20 59       	subi	r18, 0x90	; 144
    582a:	3f 4f       	sbci	r19, 0xFF	; 255
    582c:	f9 01       	movw	r30, r18
    582e:	30 81       	ld	r19, Z
    5830:	2b 81       	ldd	r18, Y+3	; 0x03
    5832:	23 2b       	or	r18, r19
    5834:	fc 01       	movw	r30, r24
    5836:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    5838:	89 81       	ldd	r24, Y+1	; 0x01
    583a:	08 df       	rcall	.-496    	; 0x564c <cpu_irq_restore>
}
    583c:	23 96       	adiw	r28, 0x03	; 3
    583e:	cd bf       	out	0x3d, r28	; 61
    5840:	de bf       	out	0x3e, r29	; 62
    5842:	df 91       	pop	r29
    5844:	cf 91       	pop	r28
    5846:	08 95       	ret

00005848 <cpu_irq_save>:
    5848:	cf 93       	push	r28
    584a:	df 93       	push	r29
    584c:	1f 92       	push	r1
    584e:	cd b7       	in	r28, 0x3d	; 61
    5850:	de b7       	in	r29, 0x3e	; 62
    5852:	8f e3       	ldi	r24, 0x3F	; 63
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	fc 01       	movw	r30, r24
    5858:	80 81       	ld	r24, Z
    585a:	89 83       	std	Y+1, r24	; 0x01
    585c:	f8 94       	cli
    585e:	89 81       	ldd	r24, Y+1	; 0x01
    5860:	0f 90       	pop	r0
    5862:	df 91       	pop	r29
    5864:	cf 91       	pop	r28
    5866:	08 95       	ret

00005868 <cpu_irq_restore>:
    5868:	cf 93       	push	r28
    586a:	df 93       	push	r29
    586c:	1f 92       	push	r1
    586e:	cd b7       	in	r28, 0x3d	; 61
    5870:	de b7       	in	r29, 0x3e	; 62
    5872:	89 83       	std	Y+1, r24	; 0x01
    5874:	8f e3       	ldi	r24, 0x3F	; 63
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	29 81       	ldd	r18, Y+1	; 0x01
    587a:	fc 01       	movw	r30, r24
    587c:	20 83       	st	Z, r18
    587e:	0f 90       	pop	r0
    5880:	df 91       	pop	r29
    5882:	cf 91       	pop	r28
    5884:	08 95       	ret

00005886 <sleepmgr_lock_mode>:
    5886:	cf 93       	push	r28
    5888:	df 93       	push	r29
    588a:	00 d0       	rcall	.+0      	; 0x588c <sleepmgr_lock_mode+0x6>
    588c:	cd b7       	in	r28, 0x3d	; 61
    588e:	de b7       	in	r29, 0x3e	; 62
    5890:	8a 83       	std	Y+2, r24	; 0x02
    5892:	da df       	rcall	.-76     	; 0x5848 <cpu_irq_save>
    5894:	89 83       	std	Y+1, r24	; 0x01
    5896:	8a 81       	ldd	r24, Y+2	; 0x02
    5898:	88 2f       	mov	r24, r24
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	9c 01       	movw	r18, r24
    589e:	29 5b       	subi	r18, 0xB9	; 185
    58a0:	37 4d       	sbci	r19, 0xD7	; 215
    58a2:	f9 01       	movw	r30, r18
    58a4:	20 81       	ld	r18, Z
    58a6:	2f 5f       	subi	r18, 0xFF	; 255
    58a8:	89 5b       	subi	r24, 0xB9	; 185
    58aa:	97 4d       	sbci	r25, 0xD7	; 215
    58ac:	fc 01       	movw	r30, r24
    58ae:	20 83       	st	Z, r18
    58b0:	89 81       	ldd	r24, Y+1	; 0x01
    58b2:	da df       	rcall	.-76     	; 0x5868 <cpu_irq_restore>
    58b4:	0f 90       	pop	r0
    58b6:	0f 90       	pop	r0
    58b8:	df 91       	pop	r29
    58ba:	cf 91       	pop	r28
    58bc:	08 95       	ret

000058be <adc_enable_clock>:
 * \param adc Pointer to ADC module.
 */
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
    58be:	cf 93       	push	r28
    58c0:	df 93       	push	r29
    58c2:	00 d0       	rcall	.+0      	; 0x58c4 <adc_enable_clock+0x6>
    58c4:	cd b7       	in	r28, 0x3d	; 61
    58c6:	de b7       	in	r29, 0x3e	; 62
    58c8:	89 83       	std	Y+1, r24	; 0x01
    58ca:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    58cc:	89 81       	ldd	r24, Y+1	; 0x01
    58ce:	9a 81       	ldd	r25, Y+2	; 0x02
    58d0:	81 15       	cp	r24, r1
    58d2:	22 e0       	ldi	r18, 0x02	; 2
    58d4:	92 07       	cpc	r25, r18
    58d6:	71 f4       	brne	.+28     	; 0x58f4 <adc_enable_clock+0x36>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    58d8:	90 91 e2 27 	lds	r25, 0x27E2
    58dc:	81 e0       	ldi	r24, 0x01	; 1
    58de:	99 23       	and	r25, r25
    58e0:	09 f0       	breq	.+2      	; 0x58e4 <adc_enable_clock+0x26>
    58e2:	80 e0       	ldi	r24, 0x00	; 0
    58e4:	9f 5f       	subi	r25, 0xFF	; 255
    58e6:	90 93 e2 27 	sts	0x27E2, r25
    58ea:	88 23       	and	r24, r24
    58ec:	19 f0       	breq	.+6      	; 0x58f4 <adc_enable_clock+0x36>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    58ee:	62 e0       	ldi	r22, 0x02	; 2
    58f0:	81 e0       	ldi	r24, 0x01	; 1
    58f2:	64 df       	rcall	.-312    	; 0x57bc <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
    58f4:	0f 90       	pop	r0
    58f6:	0f 90       	pop	r0
    58f8:	df 91       	pop	r29
    58fa:	cf 91       	pop	r28
    58fc:	08 95       	ret

000058fe <adc_disable_clock>:
 * \param adc Pointer to ADC module
 */
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
    58fe:	cf 93       	push	r28
    5900:	df 93       	push	r29
    5902:	00 d0       	rcall	.+0      	; 0x5904 <adc_disable_clock+0x6>
    5904:	cd b7       	in	r28, 0x3d	; 61
    5906:	de b7       	in	r29, 0x3e	; 62
    5908:	89 83       	std	Y+1, r24	; 0x01
    590a:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    590c:	89 81       	ldd	r24, Y+1	; 0x01
    590e:	9a 81       	ldd	r25, Y+2	; 0x02
    5910:	81 15       	cp	r24, r1
    5912:	22 e0       	ldi	r18, 0x02	; 2
    5914:	92 07       	cpc	r25, r18
    5916:	61 f4       	brne	.+24     	; 0x5930 <adc_disable_clock+0x32>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    5918:	80 91 e2 27 	lds	r24, 0x27E2
    591c:	81 50       	subi	r24, 0x01	; 1
    591e:	80 93 e2 27 	sts	0x27E2, r24
    5922:	80 91 e2 27 	lds	r24, 0x27E2
    5926:	88 23       	and	r24, r24
    5928:	19 f4       	brne	.+6      	; 0x5930 <adc_disable_clock+0x32>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    592a:	62 e0       	ldi	r22, 0x02	; 2
    592c:	81 e0       	ldi	r24, 0x01	; 1
    592e:	6a df       	rcall	.-300    	; 0x5804 <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
    5930:	0f 90       	pop	r0
    5932:	0f 90       	pop	r0
    5934:	df 91       	pop	r29
    5936:	cf 91       	pop	r28
    5938:	08 95       	ret

0000593a <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    593a:	cf 93       	push	r28
    593c:	df 93       	push	r29
    593e:	00 d0       	rcall	.+0      	; 0x5940 <adc_enable+0x6>
    5940:	1f 92       	push	r1
    5942:	cd b7       	in	r28, 0x3d	; 61
    5944:	de b7       	in	r29, 0x3e	; 62
    5946:	8a 83       	std	Y+2, r24	; 0x02
    5948:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
    594a:	7e df       	rcall	.-260    	; 0x5848 <cpu_irq_save>
    594c:	89 83       	std	Y+1, r24	; 0x01
	adc_enable_clock(adc);
    594e:	8a 81       	ldd	r24, Y+2	; 0x02
    5950:	9b 81       	ldd	r25, Y+3	; 0x03
    5952:	b5 df       	rcall	.-150    	; 0x58be <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    5954:	8a 81       	ldd	r24, Y+2	; 0x02
    5956:	9b 81       	ldd	r25, Y+3	; 0x03
    5958:	fc 01       	movw	r30, r24
    595a:	80 81       	ld	r24, Z
    595c:	28 2f       	mov	r18, r24
    595e:	21 60       	ori	r18, 0x01	; 1
    5960:	8a 81       	ldd	r24, Y+2	; 0x02
    5962:	9b 81       	ldd	r25, Y+3	; 0x03
    5964:	fc 01       	movw	r30, r24
    5966:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    5968:	89 81       	ldd	r24, Y+1	; 0x01
    596a:	7e df       	rcall	.-260    	; 0x5868 <cpu_irq_restore>

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	8b df       	rcall	.-234    	; 0x5886 <sleepmgr_lock_mode>
}
    5970:	23 96       	adiw	r28, 0x03	; 3
    5972:	cd bf       	out	0x3d, r28	; 61
    5974:	de bf       	out	0x3e, r29	; 62
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	08 95       	ret

0000597c <cpu_irq_save>:
    597c:	cf 93       	push	r28
    597e:	df 93       	push	r29
    5980:	1f 92       	push	r1
    5982:	cd b7       	in	r28, 0x3d	; 61
    5984:	de b7       	in	r29, 0x3e	; 62
    5986:	8f e3       	ldi	r24, 0x3F	; 63
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	fc 01       	movw	r30, r24
    598c:	80 81       	ld	r24, Z
    598e:	89 83       	std	Y+1, r24	; 0x01
    5990:	f8 94       	cli
    5992:	89 81       	ldd	r24, Y+1	; 0x01
    5994:	0f 90       	pop	r0
    5996:	df 91       	pop	r29
    5998:	cf 91       	pop	r28
    599a:	08 95       	ret

0000599c <cpu_irq_restore>:
    599c:	cf 93       	push	r28
    599e:	df 93       	push	r29
    59a0:	1f 92       	push	r1
    59a2:	cd b7       	in	r28, 0x3d	; 61
    59a4:	de b7       	in	r29, 0x3e	; 62
    59a6:	89 83       	std	Y+1, r24	; 0x01
    59a8:	8f e3       	ldi	r24, 0x3F	; 63
    59aa:	90 e0       	ldi	r25, 0x00	; 0
    59ac:	29 81       	ldd	r18, Y+1	; 0x01
    59ae:	fc 01       	movw	r30, r24
    59b0:	20 83       	st	Z, r18
    59b2:	0f 90       	pop	r0
    59b4:	df 91       	pop	r29
    59b6:	cf 91       	pop	r28
    59b8:	08 95       	ret

000059ba <nvm_read_production_signature_row>:
    59ba:	cf 93       	push	r28
    59bc:	df 93       	push	r29
    59be:	1f 92       	push	r1
    59c0:	cd b7       	in	r28, 0x3d	; 61
    59c2:	de b7       	in	r29, 0x3e	; 62
    59c4:	89 83       	std	Y+1, r24	; 0x01
    59c6:	89 81       	ldd	r24, Y+1	; 0x01
    59c8:	88 2f       	mov	r24, r24
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	bc 01       	movw	r22, r24
    59ce:	82 e0       	ldi	r24, 0x02	; 2
    59d0:	2d d3       	rcall	.+1626   	; 0x602c <nvm_read_byte>
    59d2:	0f 90       	pop	r0
    59d4:	df 91       	pop	r29
    59d6:	cf 91       	pop	r28
    59d8:	08 95       	ret

000059da <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
    59da:	cf 93       	push	r28
    59dc:	df 93       	push	r29
    59de:	00 d0       	rcall	.+0      	; 0x59e0 <adc_get_calibration_data+0x6>
    59e0:	1f 92       	push	r1
    59e2:	cd b7       	in	r28, 0x3d	; 61
    59e4:	de b7       	in	r29, 0x3e	; 62
    59e6:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
    59e8:	8b 81       	ldd	r24, Y+3	; 0x03
    59ea:	88 2f       	mov	r24, r24
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	00 97       	sbiw	r24, 0x00	; 0
    59f0:	21 f0       	breq	.+8      	; 0x59fa <adc_get_calibration_data+0x20>
    59f2:	82 30       	cpi	r24, 0x02	; 2
    59f4:	91 05       	cpc	r25, r1
    59f6:	c1 f0       	breq	.+48     	; 0x5a28 <adc_get_calibration_data+0x4e>
    59f8:	2e c0       	rjmp	.+92     	; 0x5a56 <adc_get_calibration_data+0x7c>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    59fa:	81 e2       	ldi	r24, 0x21	; 33
    59fc:	de df       	rcall	.-68     	; 0x59ba <nvm_read_production_signature_row>
    59fe:	88 2f       	mov	r24, r24
    5a00:	90 e0       	ldi	r25, 0x00	; 0
    5a02:	89 83       	std	Y+1, r24	; 0x01
    5a04:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    5a06:	89 81       	ldd	r24, Y+1	; 0x01
    5a08:	9a 81       	ldd	r25, Y+2	; 0x02
    5a0a:	98 2f       	mov	r25, r24
    5a0c:	88 27       	eor	r24, r24
    5a0e:	89 83       	std	Y+1, r24	; 0x01
    5a10:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
    5a12:	80 e2       	ldi	r24, 0x20	; 32
    5a14:	d2 df       	rcall	.-92     	; 0x59ba <nvm_read_production_signature_row>
    5a16:	88 2f       	mov	r24, r24
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	29 81       	ldd	r18, Y+1	; 0x01
    5a1c:	3a 81       	ldd	r19, Y+2	; 0x02
    5a1e:	82 2b       	or	r24, r18
    5a20:	93 2b       	or	r25, r19
    5a22:	89 83       	std	Y+1, r24	; 0x01
    5a24:	9a 83       	std	Y+2, r25	; 0x02
		break;
    5a26:	19 c0       	rjmp	.+50     	; 0x5a5a <adc_get_calibration_data+0x80>
		break;
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
    5a28:	8f e2       	ldi	r24, 0x2F	; 47
    5a2a:	c7 df       	rcall	.-114    	; 0x59ba <nvm_read_production_signature_row>
    5a2c:	88 2f       	mov	r24, r24
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	89 83       	std	Y+1, r24	; 0x01
    5a32:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    5a34:	89 81       	ldd	r24, Y+1	; 0x01
    5a36:	9a 81       	ldd	r25, Y+2	; 0x02
    5a38:	98 2f       	mov	r25, r24
    5a3a:	88 27       	eor	r24, r24
    5a3c:	89 83       	std	Y+1, r24	; 0x01
    5a3e:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(TEMPSENSE0);
    5a40:	8e e2       	ldi	r24, 0x2E	; 46
    5a42:	bb df       	rcall	.-138    	; 0x59ba <nvm_read_production_signature_row>
    5a44:	88 2f       	mov	r24, r24
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	29 81       	ldd	r18, Y+1	; 0x01
    5a4a:	3a 81       	ldd	r19, Y+2	; 0x02
    5a4c:	82 2b       	or	r24, r18
    5a4e:	93 2b       	or	r25, r19
    5a50:	89 83       	std	Y+1, r24	; 0x01
    5a52:	9a 83       	std	Y+2, r25	; 0x02
		break;
    5a54:	02 c0       	rjmp	.+4      	; 0x5a5a <adc_get_calibration_data+0x80>
#endif

	default:
		Assert(0);
		data = 0;
    5a56:	19 82       	std	Y+1, r1	; 0x01
    5a58:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
    5a5a:	89 81       	ldd	r24, Y+1	; 0x01
    5a5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5a5e:	23 96       	adiw	r28, 0x03	; 3
    5a60:	cd bf       	out	0x3d, r28	; 61
    5a62:	de bf       	out	0x3e, r29	; 62
    5a64:	df 91       	pop	r29
    5a66:	cf 91       	pop	r28
    5a68:	08 95       	ret

00005a6a <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    5a6a:	cf 93       	push	r28
    5a6c:	df 93       	push	r29
    5a6e:	cd b7       	in	r28, 0x3d	; 61
    5a70:	de b7       	in	r29, 0x3e	; 62
    5a72:	28 97       	sbiw	r28, 0x08	; 8
    5a74:	cd bf       	out	0x3d, r28	; 61
    5a76:	de bf       	out	0x3e, r29	; 62
    5a78:	8d 83       	std	Y+5, r24	; 0x05
    5a7a:	9e 83       	std	Y+6, r25	; 0x06
    5a7c:	6f 83       	std	Y+7, r22	; 0x07
    5a7e:	78 87       	std	Y+8, r23	; 0x08
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    5a80:	8d 81       	ldd	r24, Y+5	; 0x05
    5a82:	9e 81       	ldd	r25, Y+6	; 0x06
    5a84:	81 15       	cp	r24, r1
    5a86:	22 e0       	ldi	r18, 0x02	; 2
    5a88:	92 07       	cpc	r25, r18
    5a8a:	09 f0       	breq	.+2      	; 0x5a8e <adc_write_configuration+0x24>
    5a8c:	50 c0       	rjmp	.+160    	; 0x5b2e <adc_write_configuration+0xc4>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
    5a8e:	80 e0       	ldi	r24, 0x00	; 0
    5a90:	a4 df       	rcall	.-184    	; 0x59da <adc_get_calibration_data>
    5a92:	89 83       	std	Y+1, r24	; 0x01
    5a94:	9a 83       	std	Y+2, r25	; 0x02
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
    5a96:	72 df       	rcall	.-284    	; 0x597c <cpu_irq_save>
    5a98:	8b 83       	std	Y+3, r24	; 0x03
	adc_enable_clock(adc);
    5a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    5a9e:	0f df       	rcall	.-482    	; 0x58be <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    5aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    5aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    5aa4:	fc 01       	movw	r30, r24
    5aa6:	80 81       	ld	r24, Z
    5aa8:	81 70       	andi	r24, 0x01	; 1
    5aaa:	8c 83       	std	Y+4, r24	; 0x04

	adc->CTRLA = ADC_FLUSH_bm;
    5aac:	8d 81       	ldd	r24, Y+5	; 0x05
    5aae:	9e 81       	ldd	r25, Y+6	; 0x06
    5ab0:	22 e0       	ldi	r18, 0x02	; 2
    5ab2:	fc 01       	movw	r30, r24
    5ab4:	20 83       	st	Z, r18
	adc->CAL = cal;
    5ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    5aba:	29 81       	ldd	r18, Y+1	; 0x01
    5abc:	3a 81       	ldd	r19, Y+2	; 0x02
    5abe:	fc 01       	movw	r30, r24
    5ac0:	24 87       	std	Z+12, r18	; 0x0c
    5ac2:	35 87       	std	Z+13, r19	; 0x0d
	adc->CMP = conf->cmp;
    5ac4:	8f 81       	ldd	r24, Y+7	; 0x07
    5ac6:	98 85       	ldd	r25, Y+8	; 0x08
    5ac8:	fc 01       	movw	r30, r24
    5aca:	24 81       	ldd	r18, Z+4	; 0x04
    5acc:	35 81       	ldd	r19, Z+5	; 0x05
    5ace:	8d 81       	ldd	r24, Y+5	; 0x05
    5ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ad2:	fc 01       	movw	r30, r24
    5ad4:	20 8f       	std	Z+24, r18	; 0x18
    5ad6:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    5ad8:	8f 81       	ldd	r24, Y+7	; 0x07
    5ada:	98 85       	ldd	r25, Y+8	; 0x08
    5adc:	fc 01       	movw	r30, r24
    5ade:	21 81       	ldd	r18, Z+1	; 0x01
    5ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ae4:	fc 01       	movw	r30, r24
    5ae6:	22 83       	std	Z+2, r18	; 0x02
	adc->PRESCALER = conf->prescaler;
    5ae8:	8f 81       	ldd	r24, Y+7	; 0x07
    5aea:	98 85       	ldd	r25, Y+8	; 0x08
    5aec:	fc 01       	movw	r30, r24
    5aee:	23 81       	ldd	r18, Z+3	; 0x03
    5af0:	8d 81       	ldd	r24, Y+5	; 0x05
    5af2:	9e 81       	ldd	r25, Y+6	; 0x06
    5af4:	fc 01       	movw	r30, r24
    5af6:	24 83       	std	Z+4, r18	; 0x04
	adc->EVCTRL = conf->evctrl;
    5af8:	8f 81       	ldd	r24, Y+7	; 0x07
    5afa:	98 85       	ldd	r25, Y+8	; 0x08
    5afc:	fc 01       	movw	r30, r24
    5afe:	22 81       	ldd	r18, Z+2	; 0x02
    5b00:	8d 81       	ldd	r24, Y+5	; 0x05
    5b02:	9e 81       	ldd	r25, Y+6	; 0x06
    5b04:	fc 01       	movw	r30, r24
    5b06:	23 83       	std	Z+3, r18	; 0x03
	adc->CTRLB = conf->ctrlb;
    5b08:	8f 81       	ldd	r24, Y+7	; 0x07
    5b0a:	98 85       	ldd	r25, Y+8	; 0x08
    5b0c:	fc 01       	movw	r30, r24
    5b0e:	20 81       	ld	r18, Z
    5b10:	8d 81       	ldd	r24, Y+5	; 0x05
    5b12:	9e 81       	ldd	r25, Y+6	; 0x06
    5b14:	fc 01       	movw	r30, r24
    5b16:	21 83       	std	Z+1, r18	; 0x01

	adc->CTRLA = enable;
    5b18:	8d 81       	ldd	r24, Y+5	; 0x05
    5b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b1c:	2c 81       	ldd	r18, Y+4	; 0x04
    5b1e:	fc 01       	movw	r30, r24
    5b20:	20 83       	st	Z, r18

	adc_disable_clock(adc);
    5b22:	8d 81       	ldd	r24, Y+5	; 0x05
    5b24:	9e 81       	ldd	r25, Y+6	; 0x06
    5b26:	eb de       	rcall	.-554    	; 0x58fe <adc_disable_clock>

	cpu_irq_restore(flags);
    5b28:	8b 81       	ldd	r24, Y+3	; 0x03
    5b2a:	38 df       	rcall	.-400    	; 0x599c <cpu_irq_restore>
    5b2c:	01 c0       	rjmp	.+2      	; 0x5b30 <adc_write_configuration+0xc6>
	} else
#endif

	{
		Assert(0);
		return;
    5b2e:	00 00       	nop
	adc->CTRLA = enable;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
    5b30:	28 96       	adiw	r28, 0x08	; 8
    5b32:	cd bf       	out	0x3d, r28	; 61
    5b34:	de bf       	out	0x3e, r29	; 62
    5b36:	df 91       	pop	r29
    5b38:	cf 91       	pop	r28
    5b3a:	08 95       	ret

00005b3c <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    5b3c:	cf 93       	push	r28
    5b3e:	df 93       	push	r29
    5b40:	cd b7       	in	r28, 0x3d	; 61
    5b42:	de b7       	in	r29, 0x3e	; 62
    5b44:	25 97       	sbiw	r28, 0x05	; 5
    5b46:	cd bf       	out	0x3d, r28	; 61
    5b48:	de bf       	out	0x3e, r29	; 62
    5b4a:	8a 83       	std	Y+2, r24	; 0x02
    5b4c:	9b 83       	std	Y+3, r25	; 0x03
    5b4e:	6c 83       	std	Y+4, r22	; 0x04
    5b50:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags = cpu_irq_save();
    5b52:	14 df       	rcall	.-472    	; 0x597c <cpu_irq_save>
    5b54:	89 83       	std	Y+1, r24	; 0x01

	adc_enable_clock(adc);
    5b56:	8a 81       	ldd	r24, Y+2	; 0x02
    5b58:	9b 81       	ldd	r25, Y+3	; 0x03
    5b5a:	b1 de       	rcall	.-670    	; 0x58be <adc_enable_clock>

	conf->cmp = adc->CMP;
    5b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5b60:	fc 01       	movw	r30, r24
    5b62:	20 8d       	ldd	r18, Z+24	; 0x18
    5b64:	31 8d       	ldd	r19, Z+25	; 0x19
    5b66:	8c 81       	ldd	r24, Y+4	; 0x04
    5b68:	9d 81       	ldd	r25, Y+5	; 0x05
    5b6a:	fc 01       	movw	r30, r24
    5b6c:	24 83       	std	Z+4, r18	; 0x04
    5b6e:	35 83       	std	Z+5, r19	; 0x05
	conf->refctrl = adc->REFCTRL;
    5b70:	8a 81       	ldd	r24, Y+2	; 0x02
    5b72:	9b 81       	ldd	r25, Y+3	; 0x03
    5b74:	fc 01       	movw	r30, r24
    5b76:	22 81       	ldd	r18, Z+2	; 0x02
    5b78:	8c 81       	ldd	r24, Y+4	; 0x04
    5b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    5b7c:	fc 01       	movw	r30, r24
    5b7e:	21 83       	std	Z+1, r18	; 0x01
	conf->prescaler = adc->PRESCALER;
    5b80:	8a 81       	ldd	r24, Y+2	; 0x02
    5b82:	9b 81       	ldd	r25, Y+3	; 0x03
    5b84:	fc 01       	movw	r30, r24
    5b86:	24 81       	ldd	r18, Z+4	; 0x04
    5b88:	8c 81       	ldd	r24, Y+4	; 0x04
    5b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    5b8c:	fc 01       	movw	r30, r24
    5b8e:	23 83       	std	Z+3, r18	; 0x03
	conf->evctrl = adc->EVCTRL;
    5b90:	8a 81       	ldd	r24, Y+2	; 0x02
    5b92:	9b 81       	ldd	r25, Y+3	; 0x03
    5b94:	fc 01       	movw	r30, r24
    5b96:	23 81       	ldd	r18, Z+3	; 0x03
    5b98:	8c 81       	ldd	r24, Y+4	; 0x04
    5b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    5b9c:	fc 01       	movw	r30, r24
    5b9e:	22 83       	std	Z+2, r18	; 0x02
	conf->ctrlb = adc->CTRLB;
    5ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ba4:	fc 01       	movw	r30, r24
    5ba6:	21 81       	ldd	r18, Z+1	; 0x01
    5ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    5baa:	9d 81       	ldd	r25, Y+5	; 0x05
    5bac:	fc 01       	movw	r30, r24
    5bae:	20 83       	st	Z, r18

	adc_disable_clock(adc);
    5bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    5bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    5bb4:	a4 de       	rcall	.-696    	; 0x58fe <adc_disable_clock>

	cpu_irq_restore(flags);
    5bb6:	89 81       	ldd	r24, Y+1	; 0x01
    5bb8:	f1 de       	rcall	.-542    	; 0x599c <cpu_irq_restore>
}
    5bba:	25 96       	adiw	r28, 0x05	; 5
    5bbc:	cd bf       	out	0x3d, r28	; 61
    5bbe:	de bf       	out	0x3e, r29	; 62
    5bc0:	df 91       	pop	r29
    5bc2:	cf 91       	pop	r28
    5bc4:	08 95       	ret

00005bc6 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    5bc6:	cf 93       	push	r28
    5bc8:	df 93       	push	r29
    5bca:	cd b7       	in	r28, 0x3d	; 61
    5bcc:	de b7       	in	r29, 0x3e	; 62
    5bce:	2c 97       	sbiw	r28, 0x0c	; 12
    5bd0:	cd bf       	out	0x3d, r28	; 61
    5bd2:	de bf       	out	0x3e, r29	; 62
    5bd4:	88 87       	std	Y+8, r24	; 0x08
    5bd6:	99 87       	std	Y+9, r25	; 0x09
    5bd8:	6a 87       	std	Y+10, r22	; 0x0a
    5bda:	4b 87       	std	Y+11, r20	; 0x0b
    5bdc:	5c 87       	std	Y+12, r21	; 0x0c
    5bde:	88 85       	ldd	r24, Y+8	; 0x08
    5be0:	99 85       	ldd	r25, Y+9	; 0x09
    5be2:	8c 83       	std	Y+4, r24	; 0x04
    5be4:	9d 83       	std	Y+5, r25	; 0x05
    5be6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5be8:	8f 83       	std	Y+7, r24	; 0x07
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    5bea:	1e 82       	std	Y+6, r1	; 0x06
	if (!(ch_mask & 0x01)) {
		index++;
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    5bec:	8c 81       	ldd	r24, Y+4	; 0x04
    5bee:	9d 81       	ldd	r25, Y+5	; 0x05
    5bf0:	9c 01       	movw	r18, r24
    5bf2:	20 5e       	subi	r18, 0xE0	; 224
    5bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    5bf8:	88 2f       	mov	r24, r24
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	88 0f       	add	r24, r24
    5bfe:	99 1f       	adc	r25, r25
    5c00:	88 0f       	add	r24, r24
    5c02:	99 1f       	adc	r25, r25
    5c04:	88 0f       	add	r24, r24
    5c06:	99 1f       	adc	r25, r25
    5c08:	82 0f       	add	r24, r18
    5c0a:	93 1f       	adc	r25, r19
	ADC_CH_tmpfix_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    5c0c:	89 83       	std	Y+1, r24	; 0x01
    5c0e:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    5c10:	b5 de       	rcall	.-662    	; 0x597c <cpu_irq_save>
    5c12:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    5c14:	88 85       	ldd	r24, Y+8	; 0x08
    5c16:	99 85       	ldd	r25, Y+9	; 0x09
    5c18:	52 de       	rcall	.-860    	; 0x58be <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    5c1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c1e:	fc 01       	movw	r30, r24
    5c20:	20 81       	ld	r18, Z
    5c22:	89 81       	ldd	r24, Y+1	; 0x01
    5c24:	9a 81       	ldd	r25, Y+2	; 0x02
    5c26:	fc 01       	movw	r30, r24
    5c28:	20 83       	st	Z, r18
	adc_ch->INTCTRL = ch_conf->intctrl;
    5c2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c2e:	fc 01       	movw	r30, r24
    5c30:	22 81       	ldd	r18, Z+2	; 0x02
    5c32:	89 81       	ldd	r24, Y+1	; 0x01
    5c34:	9a 81       	ldd	r25, Y+2	; 0x02
    5c36:	fc 01       	movw	r30, r24
    5c38:	22 83       	std	Z+2, r18	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    5c3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c3e:	fc 01       	movw	r30, r24
    5c40:	21 81       	ldd	r18, Z+1	; 0x01
    5c42:	89 81       	ldd	r24, Y+1	; 0x01
    5c44:	9a 81       	ldd	r25, Y+2	; 0x02
    5c46:	fc 01       	movw	r30, r24
    5c48:	21 83       	std	Z+1, r18	; 0x01
	adc_disable_clock(adc);
    5c4a:	88 85       	ldd	r24, Y+8	; 0x08
    5c4c:	99 85       	ldd	r25, Y+9	; 0x09
    5c4e:	57 de       	rcall	.-850    	; 0x58fe <adc_disable_clock>

	cpu_irq_restore(flags);
    5c50:	8b 81       	ldd	r24, Y+3	; 0x03
    5c52:	a4 de       	rcall	.-696    	; 0x599c <cpu_irq_restore>
}
    5c54:	2c 96       	adiw	r28, 0x0c	; 12
    5c56:	cd bf       	out	0x3d, r28	; 61
    5c58:	de bf       	out	0x3e, r29	; 62
    5c5a:	df 91       	pop	r29
    5c5c:	cf 91       	pop	r28
    5c5e:	08 95       	ret

00005c60 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    5c60:	cf 93       	push	r28
    5c62:	df 93       	push	r29
    5c64:	cd b7       	in	r28, 0x3d	; 61
    5c66:	de b7       	in	r29, 0x3e	; 62
    5c68:	2c 97       	sbiw	r28, 0x0c	; 12
    5c6a:	cd bf       	out	0x3d, r28	; 61
    5c6c:	de bf       	out	0x3e, r29	; 62
    5c6e:	88 87       	std	Y+8, r24	; 0x08
    5c70:	99 87       	std	Y+9, r25	; 0x09
    5c72:	6a 87       	std	Y+10, r22	; 0x0a
    5c74:	4b 87       	std	Y+11, r20	; 0x0b
    5c76:	5c 87       	std	Y+12, r21	; 0x0c
    5c78:	88 85       	ldd	r24, Y+8	; 0x08
    5c7a:	99 85       	ldd	r25, Y+9	; 0x09
    5c7c:	8c 83       	std	Y+4, r24	; 0x04
    5c7e:	9d 83       	std	Y+5, r25	; 0x05
    5c80:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c82:	8f 83       	std	Y+7, r24	; 0x07
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    5c84:	1e 82       	std	Y+6, r1	; 0x06
	if (!(ch_mask & 0x01)) {
		index++;
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    5c86:	8c 81       	ldd	r24, Y+4	; 0x04
    5c88:	9d 81       	ldd	r25, Y+5	; 0x05
    5c8a:	9c 01       	movw	r18, r24
    5c8c:	20 5e       	subi	r18, 0xE0	; 224
    5c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c90:	8e 81       	ldd	r24, Y+6	; 0x06
    5c92:	88 2f       	mov	r24, r24
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	88 0f       	add	r24, r24
    5c98:	99 1f       	adc	r25, r25
    5c9a:	88 0f       	add	r24, r24
    5c9c:	99 1f       	adc	r25, r25
    5c9e:	88 0f       	add	r24, r24
    5ca0:	99 1f       	adc	r25, r25
    5ca2:	82 0f       	add	r24, r18
    5ca4:	93 1f       	adc	r25, r19
	ADC_CH_tmpfix_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    5ca6:	89 83       	std	Y+1, r24	; 0x01
    5ca8:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    5caa:	68 de       	rcall	.-816    	; 0x597c <cpu_irq_save>
    5cac:	8b 83       	std	Y+3, r24	; 0x03

	adc_enable_clock(adc);
    5cae:	88 85       	ldd	r24, Y+8	; 0x08
    5cb0:	99 85       	ldd	r25, Y+9	; 0x09
    5cb2:	05 de       	rcall	.-1014   	; 0x58be <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    5cb4:	89 81       	ldd	r24, Y+1	; 0x01
    5cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    5cb8:	fc 01       	movw	r30, r24
    5cba:	20 81       	ld	r18, Z
    5cbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    5cbe:	9c 85       	ldd	r25, Y+12	; 0x0c
    5cc0:	fc 01       	movw	r30, r24
    5cc2:	20 83       	st	Z, r18
	ch_conf->intctrl = adc_ch->INTCTRL;
    5cc4:	89 81       	ldd	r24, Y+1	; 0x01
    5cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    5cc8:	fc 01       	movw	r30, r24
    5cca:	22 81       	ldd	r18, Z+2	; 0x02
    5ccc:	8b 85       	ldd	r24, Y+11	; 0x0b
    5cce:	9c 85       	ldd	r25, Y+12	; 0x0c
    5cd0:	fc 01       	movw	r30, r24
    5cd2:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    5cd4:	89 81       	ldd	r24, Y+1	; 0x01
    5cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    5cd8:	fc 01       	movw	r30, r24
    5cda:	21 81       	ldd	r18, Z+1	; 0x01
    5cdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    5cde:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ce0:	fc 01       	movw	r30, r24
    5ce2:	21 83       	std	Z+1, r18	; 0x01
	adc_disable_clock(adc);
    5ce4:	88 85       	ldd	r24, Y+8	; 0x08
    5ce6:	99 85       	ldd	r25, Y+9	; 0x09
    5ce8:	0a de       	rcall	.-1004   	; 0x58fe <adc_disable_clock>

	cpu_irq_restore(flags);
    5cea:	8b 81       	ldd	r24, Y+3	; 0x03
    5cec:	57 de       	rcall	.-850    	; 0x599c <cpu_irq_restore>
}
    5cee:	2c 96       	adiw	r28, 0x0c	; 12
    5cf0:	cd bf       	out	0x3d, r28	; 61
    5cf2:	de bf       	out	0x3e, r29	; 62
    5cf4:	df 91       	pop	r29
    5cf6:	cf 91       	pop	r28
    5cf8:	08 95       	ret

00005cfa <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    5cfa:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    5cfc:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    5cfe:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    5d00:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    5d02:	60 83       	st	Z, r22
	ret                             // Return to caller
    5d04:	08 95       	ret

00005d06 <nvm_wait_until_ready>:

	// Set data, which triggers loading of EEPROM page buffer
	NVM.DATA0 = value;

	NVM.CMD = old_cmd;
}
    5d06:	cf 93       	push	r28
    5d08:	df 93       	push	r29
    5d0a:	cd b7       	in	r28, 0x3d	; 61
    5d0c:	de b7       	in	r29, 0x3e	; 62
    5d0e:	80 ec       	ldi	r24, 0xC0	; 192
    5d10:	91 e0       	ldi	r25, 0x01	; 1
    5d12:	fc 01       	movw	r30, r24
    5d14:	87 85       	ldd	r24, Z+15	; 0x0f
    5d16:	88 23       	and	r24, r24
    5d18:	d4 f3       	brlt	.-12     	; 0x5d0e <nvm_wait_until_ready+0x8>
    5d1a:	df 91       	pop	r29
    5d1c:	cf 91       	pop	r28
    5d1e:	08 95       	ret

00005d20 <nvm_exec>:
    5d20:	cf 93       	push	r28
    5d22:	df 93       	push	r29
    5d24:	cd b7       	in	r28, 0x3d	; 61
    5d26:	de b7       	in	r29, 0x3e	; 62
    5d28:	61 e0       	ldi	r22, 0x01	; 1
    5d2a:	8b ec       	ldi	r24, 0xCB	; 203
    5d2c:	91 e0       	ldi	r25, 0x01	; 1
    5d2e:	e5 df       	rcall	.-54     	; 0x5cfa <ccp_write_io>
    5d30:	df 91       	pop	r29
    5d32:	cf 91       	pop	r28
    5d34:	08 95       	ret

00005d36 <nvm_issue_command>:
    5d36:	cf 93       	push	r28
    5d38:	df 93       	push	r29
    5d3a:	00 d0       	rcall	.+0      	; 0x5d3c <nvm_issue_command+0x6>
    5d3c:	cd b7       	in	r28, 0x3d	; 61
    5d3e:	de b7       	in	r29, 0x3e	; 62
    5d40:	8a 83       	std	Y+2, r24	; 0x02
    5d42:	80 ec       	ldi	r24, 0xC0	; 192
    5d44:	91 e0       	ldi	r25, 0x01	; 1
    5d46:	fc 01       	movw	r30, r24
    5d48:	82 85       	ldd	r24, Z+10	; 0x0a
    5d4a:	89 83       	std	Y+1, r24	; 0x01
    5d4c:	80 ec       	ldi	r24, 0xC0	; 192
    5d4e:	91 e0       	ldi	r25, 0x01	; 1
    5d50:	2a 81       	ldd	r18, Y+2	; 0x02
    5d52:	fc 01       	movw	r30, r24
    5d54:	22 87       	std	Z+10, r18	; 0x0a
    5d56:	61 e0       	ldi	r22, 0x01	; 1
    5d58:	8b ec       	ldi	r24, 0xCB	; 203
    5d5a:	91 e0       	ldi	r25, 0x01	; 1
    5d5c:	ce df       	rcall	.-100    	; 0x5cfa <ccp_write_io>
    5d5e:	80 ec       	ldi	r24, 0xC0	; 192
    5d60:	91 e0       	ldi	r25, 0x01	; 1
    5d62:	29 81       	ldd	r18, Y+1	; 0x01
    5d64:	fc 01       	movw	r30, r24
    5d66:	22 87       	std	Z+10, r18	; 0x0a
    5d68:	0f 90       	pop	r0
    5d6a:	0f 90       	pop	r0
    5d6c:	df 91       	pop	r29
    5d6e:	cf 91       	pop	r28
    5d70:	08 95       	ret

00005d72 <eeprom_enable_mapping>:
    5d72:	cf 93       	push	r28
    5d74:	df 93       	push	r29
    5d76:	cd b7       	in	r28, 0x3d	; 61
    5d78:	de b7       	in	r29, 0x3e	; 62
    5d7a:	8c ec       	ldi	r24, 0xCC	; 204
    5d7c:	91 e0       	ldi	r25, 0x01	; 1
    5d7e:	2c ec       	ldi	r18, 0xCC	; 204
    5d80:	31 e0       	ldi	r19, 0x01	; 1
    5d82:	f9 01       	movw	r30, r18
    5d84:	20 81       	ld	r18, Z
    5d86:	28 60       	ori	r18, 0x08	; 8
    5d88:	fc 01       	movw	r30, r24
    5d8a:	20 83       	st	Z, r18
    5d8c:	df 91       	pop	r29
    5d8e:	cf 91       	pop	r28
    5d90:	08 95       	ret

00005d92 <eeprom_disable_mapping>:
    5d92:	cf 93       	push	r28
    5d94:	df 93       	push	r29
    5d96:	cd b7       	in	r28, 0x3d	; 61
    5d98:	de b7       	in	r29, 0x3e	; 62
    5d9a:	8c ec       	ldi	r24, 0xCC	; 204
    5d9c:	91 e0       	ldi	r25, 0x01	; 1
    5d9e:	2c ec       	ldi	r18, 0xCC	; 204
    5da0:	31 e0       	ldi	r19, 0x01	; 1
    5da2:	f9 01       	movw	r30, r18
    5da4:	20 81       	ld	r18, Z
    5da6:	27 7f       	andi	r18, 0xF7	; 247
    5da8:	fc 01       	movw	r30, r24
    5daa:	20 83       	st	Z, r18
    5dac:	df 91       	pop	r29
    5dae:	cf 91       	pop	r28
    5db0:	08 95       	ret

00005db2 <nvm_eeprom_read_buffer>:
    5db2:	cf 93       	push	r28
    5db4:	df 93       	push	r29
    5db6:	cd b7       	in	r28, 0x3d	; 61
    5db8:	de b7       	in	r29, 0x3e	; 62
    5dba:	26 97       	sbiw	r28, 0x06	; 6
    5dbc:	cd bf       	out	0x3d, r28	; 61
    5dbe:	de bf       	out	0x3e, r29	; 62
    5dc0:	89 83       	std	Y+1, r24	; 0x01
    5dc2:	9a 83       	std	Y+2, r25	; 0x02
    5dc4:	6b 83       	std	Y+3, r22	; 0x03
    5dc6:	7c 83       	std	Y+4, r23	; 0x04
    5dc8:	4d 83       	std	Y+5, r20	; 0x05
    5dca:	5e 83       	std	Y+6, r21	; 0x06
    5dcc:	9c df       	rcall	.-200    	; 0x5d06 <nvm_wait_until_ready>
    5dce:	d1 df       	rcall	.-94     	; 0x5d72 <eeprom_enable_mapping>
    5dd0:	89 81       	ldd	r24, Y+1	; 0x01
    5dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    5dd4:	90 5f       	subi	r25, 0xF0	; 240
    5dd6:	9c 01       	movw	r18, r24
    5dd8:	4d 81       	ldd	r20, Y+5	; 0x05
    5dda:	5e 81       	ldd	r21, Y+6	; 0x06
    5ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    5dde:	9c 81       	ldd	r25, Y+4	; 0x04
    5de0:	b9 01       	movw	r22, r18
    5de2:	0e 94 76 49 	call	0x92ec	; 0x92ec <memcpy>
    5de6:	d5 df       	rcall	.-86     	; 0x5d92 <eeprom_disable_mapping>
    5de8:	26 96       	adiw	r28, 0x06	; 6
    5dea:	cd bf       	out	0x3d, r28	; 61
    5dec:	de bf       	out	0x3e, r29	; 62
    5dee:	df 91       	pop	r29
    5df0:	cf 91       	pop	r28
    5df2:	08 95       	ret

00005df4 <nvm_eeprom_write_byte>:
    5df4:	cf 93       	push	r28
    5df6:	df 93       	push	r29
    5df8:	00 d0       	rcall	.+0      	; 0x5dfa <nvm_eeprom_write_byte+0x6>
    5dfa:	00 d0       	rcall	.+0      	; 0x5dfc <nvm_eeprom_write_byte+0x8>
    5dfc:	cd b7       	in	r28, 0x3d	; 61
    5dfe:	de b7       	in	r29, 0x3e	; 62
    5e00:	8a 83       	std	Y+2, r24	; 0x02
    5e02:	9b 83       	std	Y+3, r25	; 0x03
    5e04:	6c 83       	std	Y+4, r22	; 0x04
    5e06:	80 ec       	ldi	r24, 0xC0	; 192
    5e08:	91 e0       	ldi	r25, 0x01	; 1
    5e0a:	fc 01       	movw	r30, r24
    5e0c:	82 85       	ldd	r24, Z+10	; 0x0a
    5e0e:	89 83       	std	Y+1, r24	; 0x01
    5e10:	87 d0       	rcall	.+270    	; 0x5f20 <nvm_eeprom_flush_buffer>
    5e12:	79 df       	rcall	.-270    	; 0x5d06 <nvm_wait_until_ready>
    5e14:	80 ec       	ldi	r24, 0xC0	; 192
    5e16:	91 e0       	ldi	r25, 0x01	; 1
    5e18:	23 e3       	ldi	r18, 0x33	; 51
    5e1a:	fc 01       	movw	r30, r24
    5e1c:	22 87       	std	Z+10, r18	; 0x0a
    5e1e:	80 ec       	ldi	r24, 0xC0	; 192
    5e20:	91 e0       	ldi	r25, 0x01	; 1
    5e22:	fc 01       	movw	r30, r24
    5e24:	12 82       	std	Z+2, r1	; 0x02
    5e26:	80 ec       	ldi	r24, 0xC0	; 192
    5e28:	91 e0       	ldi	r25, 0x01	; 1
    5e2a:	2a 81       	ldd	r18, Y+2	; 0x02
    5e2c:	3b 81       	ldd	r19, Y+3	; 0x03
    5e2e:	23 2f       	mov	r18, r19
    5e30:	33 27       	eor	r19, r19
    5e32:	fc 01       	movw	r30, r24
    5e34:	21 83       	std	Z+1, r18	; 0x01
    5e36:	80 ec       	ldi	r24, 0xC0	; 192
    5e38:	91 e0       	ldi	r25, 0x01	; 1
    5e3a:	2a 81       	ldd	r18, Y+2	; 0x02
    5e3c:	fc 01       	movw	r30, r24
    5e3e:	20 83       	st	Z, r18
    5e40:	80 ec       	ldi	r24, 0xC0	; 192
    5e42:	91 e0       	ldi	r25, 0x01	; 1
    5e44:	2c 81       	ldd	r18, Y+4	; 0x04
    5e46:	fc 01       	movw	r30, r24
    5e48:	24 83       	std	Z+4, r18	; 0x04
    5e4a:	80 ec       	ldi	r24, 0xC0	; 192
    5e4c:	91 e0       	ldi	r25, 0x01	; 1
    5e4e:	25 e3       	ldi	r18, 0x35	; 53
    5e50:	fc 01       	movw	r30, r24
    5e52:	22 87       	std	Z+10, r18	; 0x0a
    5e54:	65 df       	rcall	.-310    	; 0x5d20 <nvm_exec>
    5e56:	80 ec       	ldi	r24, 0xC0	; 192
    5e58:	91 e0       	ldi	r25, 0x01	; 1
    5e5a:	29 81       	ldd	r18, Y+1	; 0x01
    5e5c:	fc 01       	movw	r30, r24
    5e5e:	22 87       	std	Z+10, r18	; 0x0a
    5e60:	24 96       	adiw	r28, 0x04	; 4
    5e62:	cd bf       	out	0x3d, r28	; 61
    5e64:	de bf       	out	0x3e, r29	; 62
    5e66:	df 91       	pop	r29
    5e68:	cf 91       	pop	r28
    5e6a:	08 95       	ret

00005e6c <nvm_eeprom_erase_and_write_buffer>:
    5e6c:	cf 93       	push	r28
    5e6e:	df 93       	push	r29
    5e70:	cd b7       	in	r28, 0x3d	; 61
    5e72:	de b7       	in	r29, 0x3e	; 62
    5e74:	26 97       	sbiw	r28, 0x06	; 6
    5e76:	cd bf       	out	0x3d, r28	; 61
    5e78:	de bf       	out	0x3e, r29	; 62
    5e7a:	89 83       	std	Y+1, r24	; 0x01
    5e7c:	9a 83       	std	Y+2, r25	; 0x02
    5e7e:	6b 83       	std	Y+3, r22	; 0x03
    5e80:	7c 83       	std	Y+4, r23	; 0x04
    5e82:	4d 83       	std	Y+5, r20	; 0x05
    5e84:	5e 83       	std	Y+6, r21	; 0x06
    5e86:	41 c0       	rjmp	.+130    	; 0x5f0a <nvm_eeprom_erase_and_write_buffer+0x9e>
    5e88:	89 81       	ldd	r24, Y+1	; 0x01
    5e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e8c:	8f 71       	andi	r24, 0x1F	; 31
    5e8e:	99 27       	eor	r25, r25
    5e90:	00 97       	sbiw	r24, 0x00	; 0
    5e92:	19 f5       	brne	.+70     	; 0x5eda <nvm_eeprom_erase_and_write_buffer+0x6e>
    5e94:	8d 81       	ldd	r24, Y+5	; 0x05
    5e96:	9e 81       	ldd	r25, Y+6	; 0x06
    5e98:	80 32       	cpi	r24, 0x20	; 32
    5e9a:	91 05       	cpc	r25, r1
    5e9c:	f0 f0       	brcs	.+60     	; 0x5eda <nvm_eeprom_erase_and_write_buffer+0x6e>
    5e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    5ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    5ea2:	56 d0       	rcall	.+172    	; 0x5f50 <nvm_eeprom_load_page_to_buffer>
    5ea4:	89 81       	ldd	r24, Y+1	; 0x01
    5ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ea8:	96 95       	lsr	r25
    5eaa:	87 95       	ror	r24
    5eac:	92 95       	swap	r25
    5eae:	82 95       	swap	r24
    5eb0:	8f 70       	andi	r24, 0x0F	; 15
    5eb2:	89 27       	eor	r24, r25
    5eb4:	9f 70       	andi	r25, 0x0F	; 15
    5eb6:	89 27       	eor	r24, r25
    5eb8:	8b d0       	rcall	.+278    	; 0x5fd0 <nvm_eeprom_atomic_write_page>
    5eba:	89 81       	ldd	r24, Y+1	; 0x01
    5ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    5ebe:	80 96       	adiw	r24, 0x20	; 32
    5ec0:	89 83       	std	Y+1, r24	; 0x01
    5ec2:	9a 83       	std	Y+2, r25	; 0x02
    5ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    5ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    5ec8:	80 96       	adiw	r24, 0x20	; 32
    5eca:	8b 83       	std	Y+3, r24	; 0x03
    5ecc:	9c 83       	std	Y+4, r25	; 0x04
    5ece:	8d 81       	ldd	r24, Y+5	; 0x05
    5ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ed2:	80 97       	sbiw	r24, 0x20	; 32
    5ed4:	8d 83       	std	Y+5, r24	; 0x05
    5ed6:	9e 83       	std	Y+6, r25	; 0x06
    5ed8:	18 c0       	rjmp	.+48     	; 0x5f0a <nvm_eeprom_erase_and_write_buffer+0x9e>
    5eda:	8b 81       	ldd	r24, Y+3	; 0x03
    5edc:	9c 81       	ldd	r25, Y+4	; 0x04
    5ede:	fc 01       	movw	r30, r24
    5ee0:	40 81       	ld	r20, Z
    5ee2:	89 81       	ldd	r24, Y+1	; 0x01
    5ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ee6:	29 81       	ldd	r18, Y+1	; 0x01
    5ee8:	3a 81       	ldd	r19, Y+2	; 0x02
    5eea:	2f 5f       	subi	r18, 0xFF	; 255
    5eec:	3f 4f       	sbci	r19, 0xFF	; 255
    5eee:	29 83       	std	Y+1, r18	; 0x01
    5ef0:	3a 83       	std	Y+2, r19	; 0x02
    5ef2:	64 2f       	mov	r22, r20
    5ef4:	7f df       	rcall	.-258    	; 0x5df4 <nvm_eeprom_write_byte>
    5ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    5efa:	01 96       	adiw	r24, 0x01	; 1
    5efc:	8b 83       	std	Y+3, r24	; 0x03
    5efe:	9c 83       	std	Y+4, r25	; 0x04
    5f00:	8d 81       	ldd	r24, Y+5	; 0x05
    5f02:	9e 81       	ldd	r25, Y+6	; 0x06
    5f04:	01 97       	sbiw	r24, 0x01	; 1
    5f06:	8d 83       	std	Y+5, r24	; 0x05
    5f08:	9e 83       	std	Y+6, r25	; 0x06
    5f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    5f0e:	00 97       	sbiw	r24, 0x00	; 0
    5f10:	09 f0       	breq	.+2      	; 0x5f14 <nvm_eeprom_erase_and_write_buffer+0xa8>
    5f12:	ba cf       	rjmp	.-140    	; 0x5e88 <nvm_eeprom_erase_and_write_buffer+0x1c>
    5f14:	26 96       	adiw	r28, 0x06	; 6
    5f16:	cd bf       	out	0x3d, r28	; 61
    5f18:	de bf       	out	0x3e, r29	; 62
    5f1a:	df 91       	pop	r29
    5f1c:	cf 91       	pop	r28
    5f1e:	08 95       	ret

00005f20 <nvm_eeprom_flush_buffer>:
    5f20:	cf 93       	push	r28
    5f22:	df 93       	push	r29
    5f24:	cd b7       	in	r28, 0x3d	; 61
    5f26:	de b7       	in	r29, 0x3e	; 62
    5f28:	ee de       	rcall	.-548    	; 0x5d06 <nvm_wait_until_ready>
    5f2a:	80 ec       	ldi	r24, 0xC0	; 192
    5f2c:	91 e0       	ldi	r25, 0x01	; 1
    5f2e:	fc 01       	movw	r30, r24
    5f30:	87 85       	ldd	r24, Z+15	; 0x0f
    5f32:	88 2f       	mov	r24, r24
    5f34:	90 e0       	ldi	r25, 0x00	; 0
    5f36:	82 70       	andi	r24, 0x02	; 2
    5f38:	99 27       	eor	r25, r25
    5f3a:	00 97       	sbiw	r24, 0x00	; 0
    5f3c:	31 f0       	breq	.+12     	; 0x5f4a <nvm_eeprom_flush_buffer+0x2a>
    5f3e:	80 ec       	ldi	r24, 0xC0	; 192
    5f40:	91 e0       	ldi	r25, 0x01	; 1
    5f42:	26 e3       	ldi	r18, 0x36	; 54
    5f44:	fc 01       	movw	r30, r24
    5f46:	22 87       	std	Z+10, r18	; 0x0a
    5f48:	eb de       	rcall	.-554    	; 0x5d20 <nvm_exec>
    5f4a:	df 91       	pop	r29
    5f4c:	cf 91       	pop	r28
    5f4e:	08 95       	ret

00005f50 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    5f50:	cf 93       	push	r28
    5f52:	df 93       	push	r29
    5f54:	00 d0       	rcall	.+0      	; 0x5f56 <nvm_eeprom_load_page_to_buffer+0x6>
    5f56:	00 d0       	rcall	.+0      	; 0x5f58 <nvm_eeprom_load_page_to_buffer+0x8>
    5f58:	cd b7       	in	r28, 0x3d	; 61
    5f5a:	de b7       	in	r29, 0x3e	; 62
    5f5c:	8b 83       	std	Y+3, r24	; 0x03
    5f5e:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t old_cmd;
	old_cmd = NVM.CMD;
    5f60:	80 ec       	ldi	r24, 0xC0	; 192
    5f62:	91 e0       	ldi	r25, 0x01	; 1
    5f64:	fc 01       	movw	r30, r24
    5f66:	82 85       	ldd	r24, Z+10	; 0x0a
    5f68:	8a 83       	std	Y+2, r24	; 0x02

	// Wait until NVM is ready
	nvm_wait_until_ready();
    5f6a:	cd de       	rcall	.-614    	; 0x5d06 <nvm_wait_until_ready>

	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5f6c:	80 ec       	ldi	r24, 0xC0	; 192
    5f6e:	91 e0       	ldi	r25, 0x01	; 1
    5f70:	23 e3       	ldi	r18, 0x33	; 51
    5f72:	fc 01       	movw	r30, r24
    5f74:	22 87       	std	Z+10, r18	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR2 = 0x00;
    5f76:	80 ec       	ldi	r24, 0xC0	; 192
    5f78:	91 e0       	ldi	r25, 0x01	; 1
    5f7a:	fc 01       	movw	r30, r24
    5f7c:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = 0x00;
    5f7e:	80 ec       	ldi	r24, 0xC0	; 192
    5f80:	91 e0       	ldi	r25, 0x01	; 1
    5f82:	fc 01       	movw	r30, r24
    5f84:	11 82       	std	Z+1, r1	; 0x01

	// Load multible bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    5f86:	19 82       	std	Y+1, r1	; 0x01
    5f88:	15 c0       	rjmp	.+42     	; 0x5fb4 <nvm_eeprom_load_page_to_buffer+0x64>
		NVM.ADDR0 = i;
    5f8a:	80 ec       	ldi	r24, 0xC0	; 192
    5f8c:	91 e0       	ldi	r25, 0x01	; 1
    5f8e:	29 81       	ldd	r18, Y+1	; 0x01
    5f90:	fc 01       	movw	r30, r24
    5f92:	20 83       	st	Z, r18
		NVM.DATA0 = *values;
    5f94:	80 ec       	ldi	r24, 0xC0	; 192
    5f96:	91 e0       	ldi	r25, 0x01	; 1
    5f98:	2b 81       	ldd	r18, Y+3	; 0x03
    5f9a:	3c 81       	ldd	r19, Y+4	; 0x04
    5f9c:	f9 01       	movw	r30, r18
    5f9e:	20 81       	ld	r18, Z
    5fa0:	fc 01       	movw	r30, r24
    5fa2:	24 83       	std	Z+4, r18	; 0x04
		++values;
    5fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    5fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    5fa8:	01 96       	adiw	r24, 0x01	; 1
    5faa:	8b 83       	std	Y+3, r24	; 0x03
    5fac:	9c 83       	std	Y+4, r25	; 0x04
	NVM.ADDR2 = 0x00;
	NVM.ADDR1 = 0x00;

	// Load multible bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    5fae:	89 81       	ldd	r24, Y+1	; 0x01
    5fb0:	8f 5f       	subi	r24, 0xFF	; 255
    5fb2:	89 83       	std	Y+1, r24	; 0x01
    5fb4:	89 81       	ldd	r24, Y+1	; 0x01
    5fb6:	80 32       	cpi	r24, 0x20	; 32
    5fb8:	40 f3       	brcs	.-48     	; 0x5f8a <nvm_eeprom_load_page_to_buffer+0x3a>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
	NVM.CMD = old_cmd;
    5fba:	80 ec       	ldi	r24, 0xC0	; 192
    5fbc:	91 e0       	ldi	r25, 0x01	; 1
    5fbe:	2a 81       	ldd	r18, Y+2	; 0x02
    5fc0:	fc 01       	movw	r30, r24
    5fc2:	22 87       	std	Z+10, r18	; 0x0a
}
    5fc4:	24 96       	adiw	r28, 0x04	; 4
    5fc6:	cd bf       	out	0x3d, r28	; 61
    5fc8:	de bf       	out	0x3e, r29	; 62
    5fca:	df 91       	pop	r29
    5fcc:	cf 91       	pop	r28
    5fce:	08 95       	ret

00005fd0 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    5fd0:	cf 93       	push	r28
    5fd2:	df 93       	push	r29
    5fd4:	00 d0       	rcall	.+0      	; 0x5fd6 <nvm_eeprom_atomic_write_page+0x6>
    5fd6:	1f 92       	push	r1
    5fd8:	cd b7       	in	r28, 0x3d	; 61
    5fda:	de b7       	in	r29, 0x3e	; 62
    5fdc:	8b 83       	std	Y+3, r24	; 0x03
	// Wait until NVM is ready
	nvm_wait_until_ready();
    5fde:	93 de       	rcall	.-730    	; 0x5d06 <nvm_wait_until_ready>

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    5fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    5fe2:	88 2f       	mov	r24, r24
    5fe4:	90 e0       	ldi	r25, 0x00	; 0
    5fe6:	88 0f       	add	r24, r24
    5fe8:	99 1f       	adc	r25, r25
    5fea:	82 95       	swap	r24
    5fec:	92 95       	swap	r25
    5fee:	90 7f       	andi	r25, 0xF0	; 240
    5ff0:	98 27       	eor	r25, r24
    5ff2:	80 7f       	andi	r24, 0xF0	; 240
    5ff4:	98 27       	eor	r25, r24
    5ff6:	89 83       	std	Y+1, r24	; 0x01
    5ff8:	9a 83       	std	Y+2, r25	; 0x02

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    5ffa:	80 ec       	ldi	r24, 0xC0	; 192
    5ffc:	91 e0       	ldi	r25, 0x01	; 1
    5ffe:	fc 01       	movw	r30, r24
    6000:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    6002:	80 ec       	ldi	r24, 0xC0	; 192
    6004:	91 e0       	ldi	r25, 0x01	; 1
    6006:	29 81       	ldd	r18, Y+1	; 0x01
    6008:	3a 81       	ldd	r19, Y+2	; 0x02
    600a:	23 2f       	mov	r18, r19
    600c:	33 27       	eor	r19, r19
    600e:	fc 01       	movw	r30, r24
    6010:	21 83       	std	Z+1, r18	; 0x01
	NVM.ADDR0 = address & 0xFF;
    6012:	80 ec       	ldi	r24, 0xC0	; 192
    6014:	91 e0       	ldi	r25, 0x01	; 1
    6016:	29 81       	ldd	r18, Y+1	; 0x01
    6018:	fc 01       	movw	r30, r24
    601a:	20 83       	st	Z, r18

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
    601c:	85 e3       	ldi	r24, 0x35	; 53
    601e:	8b de       	rcall	.-746    	; 0x5d36 <nvm_issue_command>
}
    6020:	23 96       	adiw	r28, 0x03	; 3
    6022:	cd bf       	out	0x3d, r28	; 61
    6024:	de bf       	out	0x3e, r29	; 62
    6026:	df 91       	pop	r29
    6028:	cf 91       	pop	r28
    602a:	08 95       	ret

0000602c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    602c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    6030:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    6032:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    6034:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    6038:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    603a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    603e:	08 95       	ret

00006040 <cpu_irq_save>:
    6040:	cf 93       	push	r28
    6042:	df 93       	push	r29
    6044:	1f 92       	push	r1
    6046:	cd b7       	in	r28, 0x3d	; 61
    6048:	de b7       	in	r29, 0x3e	; 62
    604a:	8f e3       	ldi	r24, 0x3F	; 63
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	fc 01       	movw	r30, r24
    6050:	80 81       	ld	r24, Z
    6052:	89 83       	std	Y+1, r24	; 0x01
    6054:	f8 94       	cli
    6056:	89 81       	ldd	r24, Y+1	; 0x01
    6058:	0f 90       	pop	r0
    605a:	df 91       	pop	r29
    605c:	cf 91       	pop	r28
    605e:	08 95       	ret

00006060 <cpu_irq_restore>:
    6060:	cf 93       	push	r28
    6062:	df 93       	push	r29
    6064:	1f 92       	push	r1
    6066:	cd b7       	in	r28, 0x3d	; 61
    6068:	de b7       	in	r29, 0x3e	; 62
    606a:	89 83       	std	Y+1, r24	; 0x01
    606c:	8f e3       	ldi	r24, 0x3F	; 63
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	29 81       	ldd	r18, Y+1	; 0x01
    6072:	fc 01       	movw	r30, r24
    6074:	20 83       	st	Z, r18
    6076:	0f 90       	pop	r0
    6078:	df 91       	pop	r29
    607a:	cf 91       	pop	r28
    607c:	08 95       	ret

0000607e <sleepmgr_lock_mode>:
    607e:	cf 93       	push	r28
    6080:	df 93       	push	r29
    6082:	00 d0       	rcall	.+0      	; 0x6084 <sleepmgr_lock_mode+0x6>
    6084:	cd b7       	in	r28, 0x3d	; 61
    6086:	de b7       	in	r29, 0x3e	; 62
    6088:	8a 83       	std	Y+2, r24	; 0x02
    608a:	da df       	rcall	.-76     	; 0x6040 <cpu_irq_save>
    608c:	89 83       	std	Y+1, r24	; 0x01
    608e:	8a 81       	ldd	r24, Y+2	; 0x02
    6090:	88 2f       	mov	r24, r24
    6092:	90 e0       	ldi	r25, 0x00	; 0
    6094:	9c 01       	movw	r18, r24
    6096:	29 5b       	subi	r18, 0xB9	; 185
    6098:	37 4d       	sbci	r19, 0xD7	; 215
    609a:	f9 01       	movw	r30, r18
    609c:	20 81       	ld	r18, Z
    609e:	2f 5f       	subi	r18, 0xFF	; 255
    60a0:	89 5b       	subi	r24, 0xB9	; 185
    60a2:	97 4d       	sbci	r25, 0xD7	; 215
    60a4:	fc 01       	movw	r30, r24
    60a6:	20 83       	st	Z, r18
    60a8:	89 81       	ldd	r24, Y+1	; 0x01
    60aa:	da df       	rcall	.-76     	; 0x6060 <cpu_irq_restore>
    60ac:	0f 90       	pop	r0
    60ae:	0f 90       	pop	r0
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	08 95       	ret

000060b6 <sleepmgr_unlock_mode>:
    60b6:	cf 93       	push	r28
    60b8:	df 93       	push	r29
    60ba:	00 d0       	rcall	.+0      	; 0x60bc <sleepmgr_unlock_mode+0x6>
    60bc:	cd b7       	in	r28, 0x3d	; 61
    60be:	de b7       	in	r29, 0x3e	; 62
    60c0:	8a 83       	std	Y+2, r24	; 0x02
    60c2:	be df       	rcall	.-132    	; 0x6040 <cpu_irq_save>
    60c4:	89 83       	std	Y+1, r24	; 0x01
    60c6:	8a 81       	ldd	r24, Y+2	; 0x02
    60c8:	88 2f       	mov	r24, r24
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	9c 01       	movw	r18, r24
    60ce:	29 5b       	subi	r18, 0xB9	; 185
    60d0:	37 4d       	sbci	r19, 0xD7	; 215
    60d2:	f9 01       	movw	r30, r18
    60d4:	20 81       	ld	r18, Z
    60d6:	21 50       	subi	r18, 0x01	; 1
    60d8:	89 5b       	subi	r24, 0xB9	; 185
    60da:	97 4d       	sbci	r25, 0xD7	; 215
    60dc:	fc 01       	movw	r30, r24
    60de:	20 83       	st	Z, r18
    60e0:	89 81       	ldd	r24, Y+1	; 0x01
    60e2:	be df       	rcall	.-132    	; 0x6060 <cpu_irq_restore>
    60e4:	0f 90       	pop	r0
    60e6:	0f 90       	pop	r0
    60e8:	df 91       	pop	r29
    60ea:	cf 91       	pop	r28
    60ec:	08 95       	ret

000060ee <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    60ee:	1f 92       	push	r1
    60f0:	0f 92       	push	r0
    60f2:	00 90 3f 00 	lds	r0, 0x003F
    60f6:	0f 92       	push	r0
    60f8:	11 24       	eor	r1, r1
    60fa:	00 90 3b 00 	lds	r0, 0x003B
    60fe:	0f 92       	push	r0
    6100:	2f 93       	push	r18
    6102:	3f 93       	push	r19
    6104:	4f 93       	push	r20
    6106:	5f 93       	push	r21
    6108:	6f 93       	push	r22
    610a:	7f 93       	push	r23
    610c:	8f 93       	push	r24
    610e:	9f 93       	push	r25
    6110:	af 93       	push	r26
    6112:	bf 93       	push	r27
    6114:	ef 93       	push	r30
    6116:	ff 93       	push	r31
    6118:	cf 93       	push	r28
    611a:	df 93       	push	r29
    611c:	cd b7       	in	r28, 0x3d	; 61
    611e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
    6120:	80 91 e3 27 	lds	r24, 0x27E3
    6124:	90 91 e4 27 	lds	r25, 0x27E4
    6128:	00 97       	sbiw	r24, 0x00	; 0
    612a:	31 f0       	breq	.+12     	; 0x6138 <__vector_14+0x4a>
		tc_tcc0_ovf_callback();
    612c:	80 91 e3 27 	lds	r24, 0x27E3
    6130:	90 91 e4 27 	lds	r25, 0x27E4
    6134:	fc 01       	movw	r30, r24
    6136:	09 95       	icall
	}
}
    6138:	df 91       	pop	r29
    613a:	cf 91       	pop	r28
    613c:	ff 91       	pop	r31
    613e:	ef 91       	pop	r30
    6140:	bf 91       	pop	r27
    6142:	af 91       	pop	r26
    6144:	9f 91       	pop	r25
    6146:	8f 91       	pop	r24
    6148:	7f 91       	pop	r23
    614a:	6f 91       	pop	r22
    614c:	5f 91       	pop	r21
    614e:	4f 91       	pop	r20
    6150:	3f 91       	pop	r19
    6152:	2f 91       	pop	r18
    6154:	0f 90       	pop	r0
    6156:	00 92 3b 00 	sts	0x003B, r0
    615a:	0f 90       	pop	r0
    615c:	00 92 3f 00 	sts	0x003F, r0
    6160:	0f 90       	pop	r0
    6162:	1f 90       	pop	r1
    6164:	18 95       	reti

00006166 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    6166:	1f 92       	push	r1
    6168:	0f 92       	push	r0
    616a:	00 90 3f 00 	lds	r0, 0x003F
    616e:	0f 92       	push	r0
    6170:	11 24       	eor	r1, r1
    6172:	00 90 3b 00 	lds	r0, 0x003B
    6176:	0f 92       	push	r0
    6178:	2f 93       	push	r18
    617a:	3f 93       	push	r19
    617c:	4f 93       	push	r20
    617e:	5f 93       	push	r21
    6180:	6f 93       	push	r22
    6182:	7f 93       	push	r23
    6184:	8f 93       	push	r24
    6186:	9f 93       	push	r25
    6188:	af 93       	push	r26
    618a:	bf 93       	push	r27
    618c:	ef 93       	push	r30
    618e:	ff 93       	push	r31
    6190:	cf 93       	push	r28
    6192:	df 93       	push	r29
    6194:	cd b7       	in	r28, 0x3d	; 61
    6196:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
    6198:	80 91 e5 27 	lds	r24, 0x27E5
    619c:	90 91 e6 27 	lds	r25, 0x27E6
    61a0:	00 97       	sbiw	r24, 0x00	; 0
    61a2:	31 f0       	breq	.+12     	; 0x61b0 <__vector_15+0x4a>
		tc_tcc0_err_callback();
    61a4:	80 91 e5 27 	lds	r24, 0x27E5
    61a8:	90 91 e6 27 	lds	r25, 0x27E6
    61ac:	fc 01       	movw	r30, r24
    61ae:	09 95       	icall
	}
}
    61b0:	df 91       	pop	r29
    61b2:	cf 91       	pop	r28
    61b4:	ff 91       	pop	r31
    61b6:	ef 91       	pop	r30
    61b8:	bf 91       	pop	r27
    61ba:	af 91       	pop	r26
    61bc:	9f 91       	pop	r25
    61be:	8f 91       	pop	r24
    61c0:	7f 91       	pop	r23
    61c2:	6f 91       	pop	r22
    61c4:	5f 91       	pop	r21
    61c6:	4f 91       	pop	r20
    61c8:	3f 91       	pop	r19
    61ca:	2f 91       	pop	r18
    61cc:	0f 90       	pop	r0
    61ce:	00 92 3b 00 	sts	0x003B, r0
    61d2:	0f 90       	pop	r0
    61d4:	00 92 3f 00 	sts	0x003F, r0
    61d8:	0f 90       	pop	r0
    61da:	1f 90       	pop	r1
    61dc:	18 95       	reti

000061de <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    61de:	1f 92       	push	r1
    61e0:	0f 92       	push	r0
    61e2:	00 90 3f 00 	lds	r0, 0x003F
    61e6:	0f 92       	push	r0
    61e8:	11 24       	eor	r1, r1
    61ea:	00 90 3b 00 	lds	r0, 0x003B
    61ee:	0f 92       	push	r0
    61f0:	2f 93       	push	r18
    61f2:	3f 93       	push	r19
    61f4:	4f 93       	push	r20
    61f6:	5f 93       	push	r21
    61f8:	6f 93       	push	r22
    61fa:	7f 93       	push	r23
    61fc:	8f 93       	push	r24
    61fe:	9f 93       	push	r25
    6200:	af 93       	push	r26
    6202:	bf 93       	push	r27
    6204:	ef 93       	push	r30
    6206:	ff 93       	push	r31
    6208:	cf 93       	push	r28
    620a:	df 93       	push	r29
    620c:	cd b7       	in	r28, 0x3d	; 61
    620e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
    6210:	80 91 e7 27 	lds	r24, 0x27E7
    6214:	90 91 e8 27 	lds	r25, 0x27E8
    6218:	00 97       	sbiw	r24, 0x00	; 0
    621a:	31 f0       	breq	.+12     	; 0x6228 <__vector_16+0x4a>
		tc_tcc0_cca_callback();
    621c:	80 91 e7 27 	lds	r24, 0x27E7
    6220:	90 91 e8 27 	lds	r25, 0x27E8
    6224:	fc 01       	movw	r30, r24
    6226:	09 95       	icall
	}
}
    6228:	df 91       	pop	r29
    622a:	cf 91       	pop	r28
    622c:	ff 91       	pop	r31
    622e:	ef 91       	pop	r30
    6230:	bf 91       	pop	r27
    6232:	af 91       	pop	r26
    6234:	9f 91       	pop	r25
    6236:	8f 91       	pop	r24
    6238:	7f 91       	pop	r23
    623a:	6f 91       	pop	r22
    623c:	5f 91       	pop	r21
    623e:	4f 91       	pop	r20
    6240:	3f 91       	pop	r19
    6242:	2f 91       	pop	r18
    6244:	0f 90       	pop	r0
    6246:	00 92 3b 00 	sts	0x003B, r0
    624a:	0f 90       	pop	r0
    624c:	00 92 3f 00 	sts	0x003F, r0
    6250:	0f 90       	pop	r0
    6252:	1f 90       	pop	r1
    6254:	18 95       	reti

00006256 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    6256:	1f 92       	push	r1
    6258:	0f 92       	push	r0
    625a:	00 90 3f 00 	lds	r0, 0x003F
    625e:	0f 92       	push	r0
    6260:	11 24       	eor	r1, r1
    6262:	00 90 3b 00 	lds	r0, 0x003B
    6266:	0f 92       	push	r0
    6268:	2f 93       	push	r18
    626a:	3f 93       	push	r19
    626c:	4f 93       	push	r20
    626e:	5f 93       	push	r21
    6270:	6f 93       	push	r22
    6272:	7f 93       	push	r23
    6274:	8f 93       	push	r24
    6276:	9f 93       	push	r25
    6278:	af 93       	push	r26
    627a:	bf 93       	push	r27
    627c:	ef 93       	push	r30
    627e:	ff 93       	push	r31
    6280:	cf 93       	push	r28
    6282:	df 93       	push	r29
    6284:	cd b7       	in	r28, 0x3d	; 61
    6286:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
    6288:	80 91 e9 27 	lds	r24, 0x27E9
    628c:	90 91 ea 27 	lds	r25, 0x27EA
    6290:	00 97       	sbiw	r24, 0x00	; 0
    6292:	31 f0       	breq	.+12     	; 0x62a0 <__vector_17+0x4a>
		tc_tcc0_ccb_callback();
    6294:	80 91 e9 27 	lds	r24, 0x27E9
    6298:	90 91 ea 27 	lds	r25, 0x27EA
    629c:	fc 01       	movw	r30, r24
    629e:	09 95       	icall
	}
}
    62a0:	df 91       	pop	r29
    62a2:	cf 91       	pop	r28
    62a4:	ff 91       	pop	r31
    62a6:	ef 91       	pop	r30
    62a8:	bf 91       	pop	r27
    62aa:	af 91       	pop	r26
    62ac:	9f 91       	pop	r25
    62ae:	8f 91       	pop	r24
    62b0:	7f 91       	pop	r23
    62b2:	6f 91       	pop	r22
    62b4:	5f 91       	pop	r21
    62b6:	4f 91       	pop	r20
    62b8:	3f 91       	pop	r19
    62ba:	2f 91       	pop	r18
    62bc:	0f 90       	pop	r0
    62be:	00 92 3b 00 	sts	0x003B, r0
    62c2:	0f 90       	pop	r0
    62c4:	00 92 3f 00 	sts	0x003F, r0
    62c8:	0f 90       	pop	r0
    62ca:	1f 90       	pop	r1
    62cc:	18 95       	reti

000062ce <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    62ce:	1f 92       	push	r1
    62d0:	0f 92       	push	r0
    62d2:	00 90 3f 00 	lds	r0, 0x003F
    62d6:	0f 92       	push	r0
    62d8:	11 24       	eor	r1, r1
    62da:	00 90 3b 00 	lds	r0, 0x003B
    62de:	0f 92       	push	r0
    62e0:	2f 93       	push	r18
    62e2:	3f 93       	push	r19
    62e4:	4f 93       	push	r20
    62e6:	5f 93       	push	r21
    62e8:	6f 93       	push	r22
    62ea:	7f 93       	push	r23
    62ec:	8f 93       	push	r24
    62ee:	9f 93       	push	r25
    62f0:	af 93       	push	r26
    62f2:	bf 93       	push	r27
    62f4:	ef 93       	push	r30
    62f6:	ff 93       	push	r31
    62f8:	cf 93       	push	r28
    62fa:	df 93       	push	r29
    62fc:	cd b7       	in	r28, 0x3d	; 61
    62fe:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
    6300:	80 91 eb 27 	lds	r24, 0x27EB
    6304:	90 91 ec 27 	lds	r25, 0x27EC
    6308:	00 97       	sbiw	r24, 0x00	; 0
    630a:	31 f0       	breq	.+12     	; 0x6318 <__vector_18+0x4a>
		tc_tcc0_ccc_callback();
    630c:	80 91 eb 27 	lds	r24, 0x27EB
    6310:	90 91 ec 27 	lds	r25, 0x27EC
    6314:	fc 01       	movw	r30, r24
    6316:	09 95       	icall
	}
}
    6318:	df 91       	pop	r29
    631a:	cf 91       	pop	r28
    631c:	ff 91       	pop	r31
    631e:	ef 91       	pop	r30
    6320:	bf 91       	pop	r27
    6322:	af 91       	pop	r26
    6324:	9f 91       	pop	r25
    6326:	8f 91       	pop	r24
    6328:	7f 91       	pop	r23
    632a:	6f 91       	pop	r22
    632c:	5f 91       	pop	r21
    632e:	4f 91       	pop	r20
    6330:	3f 91       	pop	r19
    6332:	2f 91       	pop	r18
    6334:	0f 90       	pop	r0
    6336:	00 92 3b 00 	sts	0x003B, r0
    633a:	0f 90       	pop	r0
    633c:	00 92 3f 00 	sts	0x003F, r0
    6340:	0f 90       	pop	r0
    6342:	1f 90       	pop	r1
    6344:	18 95       	reti

00006346 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    6346:	1f 92       	push	r1
    6348:	0f 92       	push	r0
    634a:	00 90 3f 00 	lds	r0, 0x003F
    634e:	0f 92       	push	r0
    6350:	11 24       	eor	r1, r1
    6352:	00 90 3b 00 	lds	r0, 0x003B
    6356:	0f 92       	push	r0
    6358:	2f 93       	push	r18
    635a:	3f 93       	push	r19
    635c:	4f 93       	push	r20
    635e:	5f 93       	push	r21
    6360:	6f 93       	push	r22
    6362:	7f 93       	push	r23
    6364:	8f 93       	push	r24
    6366:	9f 93       	push	r25
    6368:	af 93       	push	r26
    636a:	bf 93       	push	r27
    636c:	ef 93       	push	r30
    636e:	ff 93       	push	r31
    6370:	cf 93       	push	r28
    6372:	df 93       	push	r29
    6374:	cd b7       	in	r28, 0x3d	; 61
    6376:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
    6378:	80 91 ed 27 	lds	r24, 0x27ED
    637c:	90 91 ee 27 	lds	r25, 0x27EE
    6380:	00 97       	sbiw	r24, 0x00	; 0
    6382:	31 f0       	breq	.+12     	; 0x6390 <__vector_19+0x4a>
		tc_tcc0_ccd_callback();
    6384:	80 91 ed 27 	lds	r24, 0x27ED
    6388:	90 91 ee 27 	lds	r25, 0x27EE
    638c:	fc 01       	movw	r30, r24
    638e:	09 95       	icall
	}
}
    6390:	df 91       	pop	r29
    6392:	cf 91       	pop	r28
    6394:	ff 91       	pop	r31
    6396:	ef 91       	pop	r30
    6398:	bf 91       	pop	r27
    639a:	af 91       	pop	r26
    639c:	9f 91       	pop	r25
    639e:	8f 91       	pop	r24
    63a0:	7f 91       	pop	r23
    63a2:	6f 91       	pop	r22
    63a4:	5f 91       	pop	r21
    63a6:	4f 91       	pop	r20
    63a8:	3f 91       	pop	r19
    63aa:	2f 91       	pop	r18
    63ac:	0f 90       	pop	r0
    63ae:	00 92 3b 00 	sts	0x003B, r0
    63b2:	0f 90       	pop	r0
    63b4:	00 92 3f 00 	sts	0x003F, r0
    63b8:	0f 90       	pop	r0
    63ba:	1f 90       	pop	r1
    63bc:	18 95       	reti

000063be <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    63be:	1f 92       	push	r1
    63c0:	0f 92       	push	r0
    63c2:	00 90 3f 00 	lds	r0, 0x003F
    63c6:	0f 92       	push	r0
    63c8:	11 24       	eor	r1, r1
    63ca:	00 90 3b 00 	lds	r0, 0x003B
    63ce:	0f 92       	push	r0
    63d0:	2f 93       	push	r18
    63d2:	3f 93       	push	r19
    63d4:	4f 93       	push	r20
    63d6:	5f 93       	push	r21
    63d8:	6f 93       	push	r22
    63da:	7f 93       	push	r23
    63dc:	8f 93       	push	r24
    63de:	9f 93       	push	r25
    63e0:	af 93       	push	r26
    63e2:	bf 93       	push	r27
    63e4:	ef 93       	push	r30
    63e6:	ff 93       	push	r31
    63e8:	cf 93       	push	r28
    63ea:	df 93       	push	r29
    63ec:	cd b7       	in	r28, 0x3d	; 61
    63ee:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
    63f0:	80 91 ef 27 	lds	r24, 0x27EF
    63f4:	90 91 f0 27 	lds	r25, 0x27F0
    63f8:	00 97       	sbiw	r24, 0x00	; 0
    63fa:	31 f0       	breq	.+12     	; 0x6408 <__vector_20+0x4a>
		tc_tcc1_ovf_callback();
    63fc:	80 91 ef 27 	lds	r24, 0x27EF
    6400:	90 91 f0 27 	lds	r25, 0x27F0
    6404:	fc 01       	movw	r30, r24
    6406:	09 95       	icall
	}
}
    6408:	df 91       	pop	r29
    640a:	cf 91       	pop	r28
    640c:	ff 91       	pop	r31
    640e:	ef 91       	pop	r30
    6410:	bf 91       	pop	r27
    6412:	af 91       	pop	r26
    6414:	9f 91       	pop	r25
    6416:	8f 91       	pop	r24
    6418:	7f 91       	pop	r23
    641a:	6f 91       	pop	r22
    641c:	5f 91       	pop	r21
    641e:	4f 91       	pop	r20
    6420:	3f 91       	pop	r19
    6422:	2f 91       	pop	r18
    6424:	0f 90       	pop	r0
    6426:	00 92 3b 00 	sts	0x003B, r0
    642a:	0f 90       	pop	r0
    642c:	00 92 3f 00 	sts	0x003F, r0
    6430:	0f 90       	pop	r0
    6432:	1f 90       	pop	r1
    6434:	18 95       	reti

00006436 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    6436:	1f 92       	push	r1
    6438:	0f 92       	push	r0
    643a:	00 90 3f 00 	lds	r0, 0x003F
    643e:	0f 92       	push	r0
    6440:	11 24       	eor	r1, r1
    6442:	00 90 3b 00 	lds	r0, 0x003B
    6446:	0f 92       	push	r0
    6448:	2f 93       	push	r18
    644a:	3f 93       	push	r19
    644c:	4f 93       	push	r20
    644e:	5f 93       	push	r21
    6450:	6f 93       	push	r22
    6452:	7f 93       	push	r23
    6454:	8f 93       	push	r24
    6456:	9f 93       	push	r25
    6458:	af 93       	push	r26
    645a:	bf 93       	push	r27
    645c:	ef 93       	push	r30
    645e:	ff 93       	push	r31
    6460:	cf 93       	push	r28
    6462:	df 93       	push	r29
    6464:	cd b7       	in	r28, 0x3d	; 61
    6466:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
    6468:	80 91 f1 27 	lds	r24, 0x27F1
    646c:	90 91 f2 27 	lds	r25, 0x27F2
    6470:	00 97       	sbiw	r24, 0x00	; 0
    6472:	31 f0       	breq	.+12     	; 0x6480 <__vector_21+0x4a>
		tc_tcc1_err_callback();
    6474:	80 91 f1 27 	lds	r24, 0x27F1
    6478:	90 91 f2 27 	lds	r25, 0x27F2
    647c:	fc 01       	movw	r30, r24
    647e:	09 95       	icall
	}
}
    6480:	df 91       	pop	r29
    6482:	cf 91       	pop	r28
    6484:	ff 91       	pop	r31
    6486:	ef 91       	pop	r30
    6488:	bf 91       	pop	r27
    648a:	af 91       	pop	r26
    648c:	9f 91       	pop	r25
    648e:	8f 91       	pop	r24
    6490:	7f 91       	pop	r23
    6492:	6f 91       	pop	r22
    6494:	5f 91       	pop	r21
    6496:	4f 91       	pop	r20
    6498:	3f 91       	pop	r19
    649a:	2f 91       	pop	r18
    649c:	0f 90       	pop	r0
    649e:	00 92 3b 00 	sts	0x003B, r0
    64a2:	0f 90       	pop	r0
    64a4:	00 92 3f 00 	sts	0x003F, r0
    64a8:	0f 90       	pop	r0
    64aa:	1f 90       	pop	r1
    64ac:	18 95       	reti

000064ae <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    64ae:	1f 92       	push	r1
    64b0:	0f 92       	push	r0
    64b2:	00 90 3f 00 	lds	r0, 0x003F
    64b6:	0f 92       	push	r0
    64b8:	11 24       	eor	r1, r1
    64ba:	00 90 3b 00 	lds	r0, 0x003B
    64be:	0f 92       	push	r0
    64c0:	2f 93       	push	r18
    64c2:	3f 93       	push	r19
    64c4:	4f 93       	push	r20
    64c6:	5f 93       	push	r21
    64c8:	6f 93       	push	r22
    64ca:	7f 93       	push	r23
    64cc:	8f 93       	push	r24
    64ce:	9f 93       	push	r25
    64d0:	af 93       	push	r26
    64d2:	bf 93       	push	r27
    64d4:	ef 93       	push	r30
    64d6:	ff 93       	push	r31
    64d8:	cf 93       	push	r28
    64da:	df 93       	push	r29
    64dc:	cd b7       	in	r28, 0x3d	; 61
    64de:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
    64e0:	80 91 f3 27 	lds	r24, 0x27F3
    64e4:	90 91 f4 27 	lds	r25, 0x27F4
    64e8:	00 97       	sbiw	r24, 0x00	; 0
    64ea:	31 f0       	breq	.+12     	; 0x64f8 <__vector_22+0x4a>
		tc_tcc1_cca_callback();
    64ec:	80 91 f3 27 	lds	r24, 0x27F3
    64f0:	90 91 f4 27 	lds	r25, 0x27F4
    64f4:	fc 01       	movw	r30, r24
    64f6:	09 95       	icall
	}
}
    64f8:	df 91       	pop	r29
    64fa:	cf 91       	pop	r28
    64fc:	ff 91       	pop	r31
    64fe:	ef 91       	pop	r30
    6500:	bf 91       	pop	r27
    6502:	af 91       	pop	r26
    6504:	9f 91       	pop	r25
    6506:	8f 91       	pop	r24
    6508:	7f 91       	pop	r23
    650a:	6f 91       	pop	r22
    650c:	5f 91       	pop	r21
    650e:	4f 91       	pop	r20
    6510:	3f 91       	pop	r19
    6512:	2f 91       	pop	r18
    6514:	0f 90       	pop	r0
    6516:	00 92 3b 00 	sts	0x003B, r0
    651a:	0f 90       	pop	r0
    651c:	00 92 3f 00 	sts	0x003F, r0
    6520:	0f 90       	pop	r0
    6522:	1f 90       	pop	r1
    6524:	18 95       	reti

00006526 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    6526:	1f 92       	push	r1
    6528:	0f 92       	push	r0
    652a:	00 90 3f 00 	lds	r0, 0x003F
    652e:	0f 92       	push	r0
    6530:	11 24       	eor	r1, r1
    6532:	00 90 3b 00 	lds	r0, 0x003B
    6536:	0f 92       	push	r0
    6538:	2f 93       	push	r18
    653a:	3f 93       	push	r19
    653c:	4f 93       	push	r20
    653e:	5f 93       	push	r21
    6540:	6f 93       	push	r22
    6542:	7f 93       	push	r23
    6544:	8f 93       	push	r24
    6546:	9f 93       	push	r25
    6548:	af 93       	push	r26
    654a:	bf 93       	push	r27
    654c:	ef 93       	push	r30
    654e:	ff 93       	push	r31
    6550:	cf 93       	push	r28
    6552:	df 93       	push	r29
    6554:	cd b7       	in	r28, 0x3d	; 61
    6556:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
    6558:	80 91 f5 27 	lds	r24, 0x27F5
    655c:	90 91 f6 27 	lds	r25, 0x27F6
    6560:	00 97       	sbiw	r24, 0x00	; 0
    6562:	31 f0       	breq	.+12     	; 0x6570 <__vector_23+0x4a>
		tc_tcc1_ccb_callback();
    6564:	80 91 f5 27 	lds	r24, 0x27F5
    6568:	90 91 f6 27 	lds	r25, 0x27F6
    656c:	fc 01       	movw	r30, r24
    656e:	09 95       	icall
	}
}
    6570:	df 91       	pop	r29
    6572:	cf 91       	pop	r28
    6574:	ff 91       	pop	r31
    6576:	ef 91       	pop	r30
    6578:	bf 91       	pop	r27
    657a:	af 91       	pop	r26
    657c:	9f 91       	pop	r25
    657e:	8f 91       	pop	r24
    6580:	7f 91       	pop	r23
    6582:	6f 91       	pop	r22
    6584:	5f 91       	pop	r21
    6586:	4f 91       	pop	r20
    6588:	3f 91       	pop	r19
    658a:	2f 91       	pop	r18
    658c:	0f 90       	pop	r0
    658e:	00 92 3b 00 	sts	0x003B, r0
    6592:	0f 90       	pop	r0
    6594:	00 92 3f 00 	sts	0x003F, r0
    6598:	0f 90       	pop	r0
    659a:	1f 90       	pop	r1
    659c:	18 95       	reti

0000659e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    659e:	1f 92       	push	r1
    65a0:	0f 92       	push	r0
    65a2:	00 90 3f 00 	lds	r0, 0x003F
    65a6:	0f 92       	push	r0
    65a8:	11 24       	eor	r1, r1
    65aa:	00 90 3b 00 	lds	r0, 0x003B
    65ae:	0f 92       	push	r0
    65b0:	2f 93       	push	r18
    65b2:	3f 93       	push	r19
    65b4:	4f 93       	push	r20
    65b6:	5f 93       	push	r21
    65b8:	6f 93       	push	r22
    65ba:	7f 93       	push	r23
    65bc:	8f 93       	push	r24
    65be:	9f 93       	push	r25
    65c0:	af 93       	push	r26
    65c2:	bf 93       	push	r27
    65c4:	ef 93       	push	r30
    65c6:	ff 93       	push	r31
    65c8:	cf 93       	push	r28
    65ca:	df 93       	push	r29
    65cc:	cd b7       	in	r28, 0x3d	; 61
    65ce:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
    65d0:	80 91 f7 27 	lds	r24, 0x27F7
    65d4:	90 91 f8 27 	lds	r25, 0x27F8
    65d8:	00 97       	sbiw	r24, 0x00	; 0
    65da:	31 f0       	breq	.+12     	; 0x65e8 <__vector_77+0x4a>
		tc_tcd0_ovf_callback();
    65dc:	80 91 f7 27 	lds	r24, 0x27F7
    65e0:	90 91 f8 27 	lds	r25, 0x27F8
    65e4:	fc 01       	movw	r30, r24
    65e6:	09 95       	icall
	}
}
    65e8:	df 91       	pop	r29
    65ea:	cf 91       	pop	r28
    65ec:	ff 91       	pop	r31
    65ee:	ef 91       	pop	r30
    65f0:	bf 91       	pop	r27
    65f2:	af 91       	pop	r26
    65f4:	9f 91       	pop	r25
    65f6:	8f 91       	pop	r24
    65f8:	7f 91       	pop	r23
    65fa:	6f 91       	pop	r22
    65fc:	5f 91       	pop	r21
    65fe:	4f 91       	pop	r20
    6600:	3f 91       	pop	r19
    6602:	2f 91       	pop	r18
    6604:	0f 90       	pop	r0
    6606:	00 92 3b 00 	sts	0x003B, r0
    660a:	0f 90       	pop	r0
    660c:	00 92 3f 00 	sts	0x003F, r0
    6610:	0f 90       	pop	r0
    6612:	1f 90       	pop	r1
    6614:	18 95       	reti

00006616 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    6616:	1f 92       	push	r1
    6618:	0f 92       	push	r0
    661a:	00 90 3f 00 	lds	r0, 0x003F
    661e:	0f 92       	push	r0
    6620:	11 24       	eor	r1, r1
    6622:	00 90 3b 00 	lds	r0, 0x003B
    6626:	0f 92       	push	r0
    6628:	2f 93       	push	r18
    662a:	3f 93       	push	r19
    662c:	4f 93       	push	r20
    662e:	5f 93       	push	r21
    6630:	6f 93       	push	r22
    6632:	7f 93       	push	r23
    6634:	8f 93       	push	r24
    6636:	9f 93       	push	r25
    6638:	af 93       	push	r26
    663a:	bf 93       	push	r27
    663c:	ef 93       	push	r30
    663e:	ff 93       	push	r31
    6640:	cf 93       	push	r28
    6642:	df 93       	push	r29
    6644:	cd b7       	in	r28, 0x3d	; 61
    6646:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    6648:	80 91 f9 27 	lds	r24, 0x27F9
    664c:	90 91 fa 27 	lds	r25, 0x27FA
    6650:	00 97       	sbiw	r24, 0x00	; 0
    6652:	31 f0       	breq	.+12     	; 0x6660 <__vector_78+0x4a>
		tc_tcd0_err_callback();
    6654:	80 91 f9 27 	lds	r24, 0x27F9
    6658:	90 91 fa 27 	lds	r25, 0x27FA
    665c:	fc 01       	movw	r30, r24
    665e:	09 95       	icall
	}
}
    6660:	df 91       	pop	r29
    6662:	cf 91       	pop	r28
    6664:	ff 91       	pop	r31
    6666:	ef 91       	pop	r30
    6668:	bf 91       	pop	r27
    666a:	af 91       	pop	r26
    666c:	9f 91       	pop	r25
    666e:	8f 91       	pop	r24
    6670:	7f 91       	pop	r23
    6672:	6f 91       	pop	r22
    6674:	5f 91       	pop	r21
    6676:	4f 91       	pop	r20
    6678:	3f 91       	pop	r19
    667a:	2f 91       	pop	r18
    667c:	0f 90       	pop	r0
    667e:	00 92 3b 00 	sts	0x003B, r0
    6682:	0f 90       	pop	r0
    6684:	00 92 3f 00 	sts	0x003F, r0
    6688:	0f 90       	pop	r0
    668a:	1f 90       	pop	r1
    668c:	18 95       	reti

0000668e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    668e:	1f 92       	push	r1
    6690:	0f 92       	push	r0
    6692:	00 90 3f 00 	lds	r0, 0x003F
    6696:	0f 92       	push	r0
    6698:	11 24       	eor	r1, r1
    669a:	00 90 3b 00 	lds	r0, 0x003B
    669e:	0f 92       	push	r0
    66a0:	2f 93       	push	r18
    66a2:	3f 93       	push	r19
    66a4:	4f 93       	push	r20
    66a6:	5f 93       	push	r21
    66a8:	6f 93       	push	r22
    66aa:	7f 93       	push	r23
    66ac:	8f 93       	push	r24
    66ae:	9f 93       	push	r25
    66b0:	af 93       	push	r26
    66b2:	bf 93       	push	r27
    66b4:	ef 93       	push	r30
    66b6:	ff 93       	push	r31
    66b8:	cf 93       	push	r28
    66ba:	df 93       	push	r29
    66bc:	cd b7       	in	r28, 0x3d	; 61
    66be:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    66c0:	80 91 fb 27 	lds	r24, 0x27FB
    66c4:	90 91 fc 27 	lds	r25, 0x27FC
    66c8:	00 97       	sbiw	r24, 0x00	; 0
    66ca:	31 f0       	breq	.+12     	; 0x66d8 <__vector_79+0x4a>
		tc_tcd0_cca_callback();
    66cc:	80 91 fb 27 	lds	r24, 0x27FB
    66d0:	90 91 fc 27 	lds	r25, 0x27FC
    66d4:	fc 01       	movw	r30, r24
    66d6:	09 95       	icall
	}
}
    66d8:	df 91       	pop	r29
    66da:	cf 91       	pop	r28
    66dc:	ff 91       	pop	r31
    66de:	ef 91       	pop	r30
    66e0:	bf 91       	pop	r27
    66e2:	af 91       	pop	r26
    66e4:	9f 91       	pop	r25
    66e6:	8f 91       	pop	r24
    66e8:	7f 91       	pop	r23
    66ea:	6f 91       	pop	r22
    66ec:	5f 91       	pop	r21
    66ee:	4f 91       	pop	r20
    66f0:	3f 91       	pop	r19
    66f2:	2f 91       	pop	r18
    66f4:	0f 90       	pop	r0
    66f6:	00 92 3b 00 	sts	0x003B, r0
    66fa:	0f 90       	pop	r0
    66fc:	00 92 3f 00 	sts	0x003F, r0
    6700:	0f 90       	pop	r0
    6702:	1f 90       	pop	r1
    6704:	18 95       	reti

00006706 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    6706:	1f 92       	push	r1
    6708:	0f 92       	push	r0
    670a:	00 90 3f 00 	lds	r0, 0x003F
    670e:	0f 92       	push	r0
    6710:	11 24       	eor	r1, r1
    6712:	00 90 3b 00 	lds	r0, 0x003B
    6716:	0f 92       	push	r0
    6718:	2f 93       	push	r18
    671a:	3f 93       	push	r19
    671c:	4f 93       	push	r20
    671e:	5f 93       	push	r21
    6720:	6f 93       	push	r22
    6722:	7f 93       	push	r23
    6724:	8f 93       	push	r24
    6726:	9f 93       	push	r25
    6728:	af 93       	push	r26
    672a:	bf 93       	push	r27
    672c:	ef 93       	push	r30
    672e:	ff 93       	push	r31
    6730:	cf 93       	push	r28
    6732:	df 93       	push	r29
    6734:	cd b7       	in	r28, 0x3d	; 61
    6736:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    6738:	80 91 fd 27 	lds	r24, 0x27FD
    673c:	90 91 fe 27 	lds	r25, 0x27FE
    6740:	00 97       	sbiw	r24, 0x00	; 0
    6742:	31 f0       	breq	.+12     	; 0x6750 <__vector_80+0x4a>
		tc_tcd0_ccb_callback();
    6744:	80 91 fd 27 	lds	r24, 0x27FD
    6748:	90 91 fe 27 	lds	r25, 0x27FE
    674c:	fc 01       	movw	r30, r24
    674e:	09 95       	icall
	}
}
    6750:	df 91       	pop	r29
    6752:	cf 91       	pop	r28
    6754:	ff 91       	pop	r31
    6756:	ef 91       	pop	r30
    6758:	bf 91       	pop	r27
    675a:	af 91       	pop	r26
    675c:	9f 91       	pop	r25
    675e:	8f 91       	pop	r24
    6760:	7f 91       	pop	r23
    6762:	6f 91       	pop	r22
    6764:	5f 91       	pop	r21
    6766:	4f 91       	pop	r20
    6768:	3f 91       	pop	r19
    676a:	2f 91       	pop	r18
    676c:	0f 90       	pop	r0
    676e:	00 92 3b 00 	sts	0x003B, r0
    6772:	0f 90       	pop	r0
    6774:	00 92 3f 00 	sts	0x003F, r0
    6778:	0f 90       	pop	r0
    677a:	1f 90       	pop	r1
    677c:	18 95       	reti

0000677e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    677e:	1f 92       	push	r1
    6780:	0f 92       	push	r0
    6782:	00 90 3f 00 	lds	r0, 0x003F
    6786:	0f 92       	push	r0
    6788:	11 24       	eor	r1, r1
    678a:	00 90 3b 00 	lds	r0, 0x003B
    678e:	0f 92       	push	r0
    6790:	2f 93       	push	r18
    6792:	3f 93       	push	r19
    6794:	4f 93       	push	r20
    6796:	5f 93       	push	r21
    6798:	6f 93       	push	r22
    679a:	7f 93       	push	r23
    679c:	8f 93       	push	r24
    679e:	9f 93       	push	r25
    67a0:	af 93       	push	r26
    67a2:	bf 93       	push	r27
    67a4:	ef 93       	push	r30
    67a6:	ff 93       	push	r31
    67a8:	cf 93       	push	r28
    67aa:	df 93       	push	r29
    67ac:	cd b7       	in	r28, 0x3d	; 61
    67ae:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    67b0:	80 91 ff 27 	lds	r24, 0x27FF
    67b4:	90 91 00 28 	lds	r25, 0x2800
    67b8:	00 97       	sbiw	r24, 0x00	; 0
    67ba:	31 f0       	breq	.+12     	; 0x67c8 <__vector_81+0x4a>
		tc_tcd0_ccc_callback();
    67bc:	80 91 ff 27 	lds	r24, 0x27FF
    67c0:	90 91 00 28 	lds	r25, 0x2800
    67c4:	fc 01       	movw	r30, r24
    67c6:	09 95       	icall
	}
}
    67c8:	df 91       	pop	r29
    67ca:	cf 91       	pop	r28
    67cc:	ff 91       	pop	r31
    67ce:	ef 91       	pop	r30
    67d0:	bf 91       	pop	r27
    67d2:	af 91       	pop	r26
    67d4:	9f 91       	pop	r25
    67d6:	8f 91       	pop	r24
    67d8:	7f 91       	pop	r23
    67da:	6f 91       	pop	r22
    67dc:	5f 91       	pop	r21
    67de:	4f 91       	pop	r20
    67e0:	3f 91       	pop	r19
    67e2:	2f 91       	pop	r18
    67e4:	0f 90       	pop	r0
    67e6:	00 92 3b 00 	sts	0x003B, r0
    67ea:	0f 90       	pop	r0
    67ec:	00 92 3f 00 	sts	0x003F, r0
    67f0:	0f 90       	pop	r0
    67f2:	1f 90       	pop	r1
    67f4:	18 95       	reti

000067f6 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    67f6:	1f 92       	push	r1
    67f8:	0f 92       	push	r0
    67fa:	00 90 3f 00 	lds	r0, 0x003F
    67fe:	0f 92       	push	r0
    6800:	11 24       	eor	r1, r1
    6802:	00 90 3b 00 	lds	r0, 0x003B
    6806:	0f 92       	push	r0
    6808:	2f 93       	push	r18
    680a:	3f 93       	push	r19
    680c:	4f 93       	push	r20
    680e:	5f 93       	push	r21
    6810:	6f 93       	push	r22
    6812:	7f 93       	push	r23
    6814:	8f 93       	push	r24
    6816:	9f 93       	push	r25
    6818:	af 93       	push	r26
    681a:	bf 93       	push	r27
    681c:	ef 93       	push	r30
    681e:	ff 93       	push	r31
    6820:	cf 93       	push	r28
    6822:	df 93       	push	r29
    6824:	cd b7       	in	r28, 0x3d	; 61
    6826:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    6828:	80 91 01 28 	lds	r24, 0x2801
    682c:	90 91 02 28 	lds	r25, 0x2802
    6830:	00 97       	sbiw	r24, 0x00	; 0
    6832:	31 f0       	breq	.+12     	; 0x6840 <__vector_82+0x4a>
		tc_tcd0_ccd_callback();
    6834:	80 91 01 28 	lds	r24, 0x2801
    6838:	90 91 02 28 	lds	r25, 0x2802
    683c:	fc 01       	movw	r30, r24
    683e:	09 95       	icall
	}
}
    6840:	df 91       	pop	r29
    6842:	cf 91       	pop	r28
    6844:	ff 91       	pop	r31
    6846:	ef 91       	pop	r30
    6848:	bf 91       	pop	r27
    684a:	af 91       	pop	r26
    684c:	9f 91       	pop	r25
    684e:	8f 91       	pop	r24
    6850:	7f 91       	pop	r23
    6852:	6f 91       	pop	r22
    6854:	5f 91       	pop	r21
    6856:	4f 91       	pop	r20
    6858:	3f 91       	pop	r19
    685a:	2f 91       	pop	r18
    685c:	0f 90       	pop	r0
    685e:	00 92 3b 00 	sts	0x003B, r0
    6862:	0f 90       	pop	r0
    6864:	00 92 3f 00 	sts	0x003F, r0
    6868:	0f 90       	pop	r0
    686a:	1f 90       	pop	r1
    686c:	18 95       	reti

0000686e <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    686e:	1f 92       	push	r1
    6870:	0f 92       	push	r0
    6872:	00 90 3f 00 	lds	r0, 0x003F
    6876:	0f 92       	push	r0
    6878:	11 24       	eor	r1, r1
    687a:	00 90 3b 00 	lds	r0, 0x003B
    687e:	0f 92       	push	r0
    6880:	2f 93       	push	r18
    6882:	3f 93       	push	r19
    6884:	4f 93       	push	r20
    6886:	5f 93       	push	r21
    6888:	6f 93       	push	r22
    688a:	7f 93       	push	r23
    688c:	8f 93       	push	r24
    688e:	9f 93       	push	r25
    6890:	af 93       	push	r26
    6892:	bf 93       	push	r27
    6894:	ef 93       	push	r30
    6896:	ff 93       	push	r31
    6898:	cf 93       	push	r28
    689a:	df 93       	push	r29
    689c:	cd b7       	in	r28, 0x3d	; 61
    689e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    68a0:	80 91 03 28 	lds	r24, 0x2803
    68a4:	90 91 04 28 	lds	r25, 0x2804
    68a8:	00 97       	sbiw	r24, 0x00	; 0
    68aa:	31 f0       	breq	.+12     	; 0x68b8 <__vector_47+0x4a>
		tc_tce0_ovf_callback();
    68ac:	80 91 03 28 	lds	r24, 0x2803
    68b0:	90 91 04 28 	lds	r25, 0x2804
    68b4:	fc 01       	movw	r30, r24
    68b6:	09 95       	icall
	}
}
    68b8:	df 91       	pop	r29
    68ba:	cf 91       	pop	r28
    68bc:	ff 91       	pop	r31
    68be:	ef 91       	pop	r30
    68c0:	bf 91       	pop	r27
    68c2:	af 91       	pop	r26
    68c4:	9f 91       	pop	r25
    68c6:	8f 91       	pop	r24
    68c8:	7f 91       	pop	r23
    68ca:	6f 91       	pop	r22
    68cc:	5f 91       	pop	r21
    68ce:	4f 91       	pop	r20
    68d0:	3f 91       	pop	r19
    68d2:	2f 91       	pop	r18
    68d4:	0f 90       	pop	r0
    68d6:	00 92 3b 00 	sts	0x003B, r0
    68da:	0f 90       	pop	r0
    68dc:	00 92 3f 00 	sts	0x003F, r0
    68e0:	0f 90       	pop	r0
    68e2:	1f 90       	pop	r1
    68e4:	18 95       	reti

000068e6 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    68e6:	1f 92       	push	r1
    68e8:	0f 92       	push	r0
    68ea:	00 90 3f 00 	lds	r0, 0x003F
    68ee:	0f 92       	push	r0
    68f0:	11 24       	eor	r1, r1
    68f2:	00 90 3b 00 	lds	r0, 0x003B
    68f6:	0f 92       	push	r0
    68f8:	2f 93       	push	r18
    68fa:	3f 93       	push	r19
    68fc:	4f 93       	push	r20
    68fe:	5f 93       	push	r21
    6900:	6f 93       	push	r22
    6902:	7f 93       	push	r23
    6904:	8f 93       	push	r24
    6906:	9f 93       	push	r25
    6908:	af 93       	push	r26
    690a:	bf 93       	push	r27
    690c:	ef 93       	push	r30
    690e:	ff 93       	push	r31
    6910:	cf 93       	push	r28
    6912:	df 93       	push	r29
    6914:	cd b7       	in	r28, 0x3d	; 61
    6916:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    6918:	80 91 05 28 	lds	r24, 0x2805
    691c:	90 91 06 28 	lds	r25, 0x2806
    6920:	00 97       	sbiw	r24, 0x00	; 0
    6922:	31 f0       	breq	.+12     	; 0x6930 <__vector_48+0x4a>
		tc_tce0_err_callback();
    6924:	80 91 05 28 	lds	r24, 0x2805
    6928:	90 91 06 28 	lds	r25, 0x2806
    692c:	fc 01       	movw	r30, r24
    692e:	09 95       	icall
	}
}
    6930:	df 91       	pop	r29
    6932:	cf 91       	pop	r28
    6934:	ff 91       	pop	r31
    6936:	ef 91       	pop	r30
    6938:	bf 91       	pop	r27
    693a:	af 91       	pop	r26
    693c:	9f 91       	pop	r25
    693e:	8f 91       	pop	r24
    6940:	7f 91       	pop	r23
    6942:	6f 91       	pop	r22
    6944:	5f 91       	pop	r21
    6946:	4f 91       	pop	r20
    6948:	3f 91       	pop	r19
    694a:	2f 91       	pop	r18
    694c:	0f 90       	pop	r0
    694e:	00 92 3b 00 	sts	0x003B, r0
    6952:	0f 90       	pop	r0
    6954:	00 92 3f 00 	sts	0x003F, r0
    6958:	0f 90       	pop	r0
    695a:	1f 90       	pop	r1
    695c:	18 95       	reti

0000695e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    695e:	1f 92       	push	r1
    6960:	0f 92       	push	r0
    6962:	00 90 3f 00 	lds	r0, 0x003F
    6966:	0f 92       	push	r0
    6968:	11 24       	eor	r1, r1
    696a:	00 90 3b 00 	lds	r0, 0x003B
    696e:	0f 92       	push	r0
    6970:	2f 93       	push	r18
    6972:	3f 93       	push	r19
    6974:	4f 93       	push	r20
    6976:	5f 93       	push	r21
    6978:	6f 93       	push	r22
    697a:	7f 93       	push	r23
    697c:	8f 93       	push	r24
    697e:	9f 93       	push	r25
    6980:	af 93       	push	r26
    6982:	bf 93       	push	r27
    6984:	ef 93       	push	r30
    6986:	ff 93       	push	r31
    6988:	cf 93       	push	r28
    698a:	df 93       	push	r29
    698c:	cd b7       	in	r28, 0x3d	; 61
    698e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    6990:	80 91 07 28 	lds	r24, 0x2807
    6994:	90 91 08 28 	lds	r25, 0x2808
    6998:	00 97       	sbiw	r24, 0x00	; 0
    699a:	31 f0       	breq	.+12     	; 0x69a8 <__vector_49+0x4a>
		tc_tce0_cca_callback();
    699c:	80 91 07 28 	lds	r24, 0x2807
    69a0:	90 91 08 28 	lds	r25, 0x2808
    69a4:	fc 01       	movw	r30, r24
    69a6:	09 95       	icall
	}
}
    69a8:	df 91       	pop	r29
    69aa:	cf 91       	pop	r28
    69ac:	ff 91       	pop	r31
    69ae:	ef 91       	pop	r30
    69b0:	bf 91       	pop	r27
    69b2:	af 91       	pop	r26
    69b4:	9f 91       	pop	r25
    69b6:	8f 91       	pop	r24
    69b8:	7f 91       	pop	r23
    69ba:	6f 91       	pop	r22
    69bc:	5f 91       	pop	r21
    69be:	4f 91       	pop	r20
    69c0:	3f 91       	pop	r19
    69c2:	2f 91       	pop	r18
    69c4:	0f 90       	pop	r0
    69c6:	00 92 3b 00 	sts	0x003B, r0
    69ca:	0f 90       	pop	r0
    69cc:	00 92 3f 00 	sts	0x003F, r0
    69d0:	0f 90       	pop	r0
    69d2:	1f 90       	pop	r1
    69d4:	18 95       	reti

000069d6 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    69d6:	1f 92       	push	r1
    69d8:	0f 92       	push	r0
    69da:	00 90 3f 00 	lds	r0, 0x003F
    69de:	0f 92       	push	r0
    69e0:	11 24       	eor	r1, r1
    69e2:	00 90 3b 00 	lds	r0, 0x003B
    69e6:	0f 92       	push	r0
    69e8:	2f 93       	push	r18
    69ea:	3f 93       	push	r19
    69ec:	4f 93       	push	r20
    69ee:	5f 93       	push	r21
    69f0:	6f 93       	push	r22
    69f2:	7f 93       	push	r23
    69f4:	8f 93       	push	r24
    69f6:	9f 93       	push	r25
    69f8:	af 93       	push	r26
    69fa:	bf 93       	push	r27
    69fc:	ef 93       	push	r30
    69fe:	ff 93       	push	r31
    6a00:	cf 93       	push	r28
    6a02:	df 93       	push	r29
    6a04:	cd b7       	in	r28, 0x3d	; 61
    6a06:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    6a08:	80 91 09 28 	lds	r24, 0x2809
    6a0c:	90 91 0a 28 	lds	r25, 0x280A
    6a10:	00 97       	sbiw	r24, 0x00	; 0
    6a12:	31 f0       	breq	.+12     	; 0x6a20 <__vector_50+0x4a>
		tc_tce0_ccb_callback();
    6a14:	80 91 09 28 	lds	r24, 0x2809
    6a18:	90 91 0a 28 	lds	r25, 0x280A
    6a1c:	fc 01       	movw	r30, r24
    6a1e:	09 95       	icall
	}
}
    6a20:	df 91       	pop	r29
    6a22:	cf 91       	pop	r28
    6a24:	ff 91       	pop	r31
    6a26:	ef 91       	pop	r30
    6a28:	bf 91       	pop	r27
    6a2a:	af 91       	pop	r26
    6a2c:	9f 91       	pop	r25
    6a2e:	8f 91       	pop	r24
    6a30:	7f 91       	pop	r23
    6a32:	6f 91       	pop	r22
    6a34:	5f 91       	pop	r21
    6a36:	4f 91       	pop	r20
    6a38:	3f 91       	pop	r19
    6a3a:	2f 91       	pop	r18
    6a3c:	0f 90       	pop	r0
    6a3e:	00 92 3b 00 	sts	0x003B, r0
    6a42:	0f 90       	pop	r0
    6a44:	00 92 3f 00 	sts	0x003F, r0
    6a48:	0f 90       	pop	r0
    6a4a:	1f 90       	pop	r1
    6a4c:	18 95       	reti

00006a4e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    6a4e:	1f 92       	push	r1
    6a50:	0f 92       	push	r0
    6a52:	00 90 3f 00 	lds	r0, 0x003F
    6a56:	0f 92       	push	r0
    6a58:	11 24       	eor	r1, r1
    6a5a:	00 90 3b 00 	lds	r0, 0x003B
    6a5e:	0f 92       	push	r0
    6a60:	2f 93       	push	r18
    6a62:	3f 93       	push	r19
    6a64:	4f 93       	push	r20
    6a66:	5f 93       	push	r21
    6a68:	6f 93       	push	r22
    6a6a:	7f 93       	push	r23
    6a6c:	8f 93       	push	r24
    6a6e:	9f 93       	push	r25
    6a70:	af 93       	push	r26
    6a72:	bf 93       	push	r27
    6a74:	ef 93       	push	r30
    6a76:	ff 93       	push	r31
    6a78:	cf 93       	push	r28
    6a7a:	df 93       	push	r29
    6a7c:	cd b7       	in	r28, 0x3d	; 61
    6a7e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    6a80:	80 91 0b 28 	lds	r24, 0x280B
    6a84:	90 91 0c 28 	lds	r25, 0x280C
    6a88:	00 97       	sbiw	r24, 0x00	; 0
    6a8a:	31 f0       	breq	.+12     	; 0x6a98 <__vector_51+0x4a>
		tc_tce0_ccc_callback();
    6a8c:	80 91 0b 28 	lds	r24, 0x280B
    6a90:	90 91 0c 28 	lds	r25, 0x280C
    6a94:	fc 01       	movw	r30, r24
    6a96:	09 95       	icall
	}
}
    6a98:	df 91       	pop	r29
    6a9a:	cf 91       	pop	r28
    6a9c:	ff 91       	pop	r31
    6a9e:	ef 91       	pop	r30
    6aa0:	bf 91       	pop	r27
    6aa2:	af 91       	pop	r26
    6aa4:	9f 91       	pop	r25
    6aa6:	8f 91       	pop	r24
    6aa8:	7f 91       	pop	r23
    6aaa:	6f 91       	pop	r22
    6aac:	5f 91       	pop	r21
    6aae:	4f 91       	pop	r20
    6ab0:	3f 91       	pop	r19
    6ab2:	2f 91       	pop	r18
    6ab4:	0f 90       	pop	r0
    6ab6:	00 92 3b 00 	sts	0x003B, r0
    6aba:	0f 90       	pop	r0
    6abc:	00 92 3f 00 	sts	0x003F, r0
    6ac0:	0f 90       	pop	r0
    6ac2:	1f 90       	pop	r1
    6ac4:	18 95       	reti

00006ac6 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    6ac6:	1f 92       	push	r1
    6ac8:	0f 92       	push	r0
    6aca:	00 90 3f 00 	lds	r0, 0x003F
    6ace:	0f 92       	push	r0
    6ad0:	11 24       	eor	r1, r1
    6ad2:	00 90 3b 00 	lds	r0, 0x003B
    6ad6:	0f 92       	push	r0
    6ad8:	2f 93       	push	r18
    6ada:	3f 93       	push	r19
    6adc:	4f 93       	push	r20
    6ade:	5f 93       	push	r21
    6ae0:	6f 93       	push	r22
    6ae2:	7f 93       	push	r23
    6ae4:	8f 93       	push	r24
    6ae6:	9f 93       	push	r25
    6ae8:	af 93       	push	r26
    6aea:	bf 93       	push	r27
    6aec:	ef 93       	push	r30
    6aee:	ff 93       	push	r31
    6af0:	cf 93       	push	r28
    6af2:	df 93       	push	r29
    6af4:	cd b7       	in	r28, 0x3d	; 61
    6af6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    6af8:	80 91 0d 28 	lds	r24, 0x280D
    6afc:	90 91 0e 28 	lds	r25, 0x280E
    6b00:	00 97       	sbiw	r24, 0x00	; 0
    6b02:	31 f0       	breq	.+12     	; 0x6b10 <__vector_52+0x4a>
		tc_tce0_ccd_callback();
    6b04:	80 91 0d 28 	lds	r24, 0x280D
    6b08:	90 91 0e 28 	lds	r25, 0x280E
    6b0c:	fc 01       	movw	r30, r24
    6b0e:	09 95       	icall
	}
}
    6b10:	df 91       	pop	r29
    6b12:	cf 91       	pop	r28
    6b14:	ff 91       	pop	r31
    6b16:	ef 91       	pop	r30
    6b18:	bf 91       	pop	r27
    6b1a:	af 91       	pop	r26
    6b1c:	9f 91       	pop	r25
    6b1e:	8f 91       	pop	r24
    6b20:	7f 91       	pop	r23
    6b22:	6f 91       	pop	r22
    6b24:	5f 91       	pop	r21
    6b26:	4f 91       	pop	r20
    6b28:	3f 91       	pop	r19
    6b2a:	2f 91       	pop	r18
    6b2c:	0f 90       	pop	r0
    6b2e:	00 92 3b 00 	sts	0x003B, r0
    6b32:	0f 90       	pop	r0
    6b34:	00 92 3f 00 	sts	0x003F, r0
    6b38:	0f 90       	pop	r0
    6b3a:	1f 90       	pop	r1
    6b3c:	18 95       	reti

00006b3e <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    6b3e:	1f 92       	push	r1
    6b40:	0f 92       	push	r0
    6b42:	00 90 3f 00 	lds	r0, 0x003F
    6b46:	0f 92       	push	r0
    6b48:	11 24       	eor	r1, r1
    6b4a:	00 90 3b 00 	lds	r0, 0x003B
    6b4e:	0f 92       	push	r0
    6b50:	2f 93       	push	r18
    6b52:	3f 93       	push	r19
    6b54:	4f 93       	push	r20
    6b56:	5f 93       	push	r21
    6b58:	6f 93       	push	r22
    6b5a:	7f 93       	push	r23
    6b5c:	8f 93       	push	r24
    6b5e:	9f 93       	push	r25
    6b60:	af 93       	push	r26
    6b62:	bf 93       	push	r27
    6b64:	ef 93       	push	r30
    6b66:	ff 93       	push	r31
    6b68:	cf 93       	push	r28
    6b6a:	df 93       	push	r29
    6b6c:	cd b7       	in	r28, 0x3d	; 61
    6b6e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    6b70:	80 91 0f 28 	lds	r24, 0x280F
    6b74:	90 91 10 28 	lds	r25, 0x2810
    6b78:	00 97       	sbiw	r24, 0x00	; 0
    6b7a:	31 f0       	breq	.+12     	; 0x6b88 <__vector_108+0x4a>
		tc_tcf0_ovf_callback();
    6b7c:	80 91 0f 28 	lds	r24, 0x280F
    6b80:	90 91 10 28 	lds	r25, 0x2810
    6b84:	fc 01       	movw	r30, r24
    6b86:	09 95       	icall
	}
}
    6b88:	df 91       	pop	r29
    6b8a:	cf 91       	pop	r28
    6b8c:	ff 91       	pop	r31
    6b8e:	ef 91       	pop	r30
    6b90:	bf 91       	pop	r27
    6b92:	af 91       	pop	r26
    6b94:	9f 91       	pop	r25
    6b96:	8f 91       	pop	r24
    6b98:	7f 91       	pop	r23
    6b9a:	6f 91       	pop	r22
    6b9c:	5f 91       	pop	r21
    6b9e:	4f 91       	pop	r20
    6ba0:	3f 91       	pop	r19
    6ba2:	2f 91       	pop	r18
    6ba4:	0f 90       	pop	r0
    6ba6:	00 92 3b 00 	sts	0x003B, r0
    6baa:	0f 90       	pop	r0
    6bac:	00 92 3f 00 	sts	0x003F, r0
    6bb0:	0f 90       	pop	r0
    6bb2:	1f 90       	pop	r1
    6bb4:	18 95       	reti

00006bb6 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    6bb6:	1f 92       	push	r1
    6bb8:	0f 92       	push	r0
    6bba:	00 90 3f 00 	lds	r0, 0x003F
    6bbe:	0f 92       	push	r0
    6bc0:	11 24       	eor	r1, r1
    6bc2:	00 90 3b 00 	lds	r0, 0x003B
    6bc6:	0f 92       	push	r0
    6bc8:	2f 93       	push	r18
    6bca:	3f 93       	push	r19
    6bcc:	4f 93       	push	r20
    6bce:	5f 93       	push	r21
    6bd0:	6f 93       	push	r22
    6bd2:	7f 93       	push	r23
    6bd4:	8f 93       	push	r24
    6bd6:	9f 93       	push	r25
    6bd8:	af 93       	push	r26
    6bda:	bf 93       	push	r27
    6bdc:	ef 93       	push	r30
    6bde:	ff 93       	push	r31
    6be0:	cf 93       	push	r28
    6be2:	df 93       	push	r29
    6be4:	cd b7       	in	r28, 0x3d	; 61
    6be6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    6be8:	80 91 11 28 	lds	r24, 0x2811
    6bec:	90 91 12 28 	lds	r25, 0x2812
    6bf0:	00 97       	sbiw	r24, 0x00	; 0
    6bf2:	31 f0       	breq	.+12     	; 0x6c00 <__vector_109+0x4a>
		tc_tcf0_err_callback();
    6bf4:	80 91 11 28 	lds	r24, 0x2811
    6bf8:	90 91 12 28 	lds	r25, 0x2812
    6bfc:	fc 01       	movw	r30, r24
    6bfe:	09 95       	icall
	}
}
    6c00:	df 91       	pop	r29
    6c02:	cf 91       	pop	r28
    6c04:	ff 91       	pop	r31
    6c06:	ef 91       	pop	r30
    6c08:	bf 91       	pop	r27
    6c0a:	af 91       	pop	r26
    6c0c:	9f 91       	pop	r25
    6c0e:	8f 91       	pop	r24
    6c10:	7f 91       	pop	r23
    6c12:	6f 91       	pop	r22
    6c14:	5f 91       	pop	r21
    6c16:	4f 91       	pop	r20
    6c18:	3f 91       	pop	r19
    6c1a:	2f 91       	pop	r18
    6c1c:	0f 90       	pop	r0
    6c1e:	00 92 3b 00 	sts	0x003B, r0
    6c22:	0f 90       	pop	r0
    6c24:	00 92 3f 00 	sts	0x003F, r0
    6c28:	0f 90       	pop	r0
    6c2a:	1f 90       	pop	r1
    6c2c:	18 95       	reti

00006c2e <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    6c2e:	1f 92       	push	r1
    6c30:	0f 92       	push	r0
    6c32:	00 90 3f 00 	lds	r0, 0x003F
    6c36:	0f 92       	push	r0
    6c38:	11 24       	eor	r1, r1
    6c3a:	00 90 3b 00 	lds	r0, 0x003B
    6c3e:	0f 92       	push	r0
    6c40:	2f 93       	push	r18
    6c42:	3f 93       	push	r19
    6c44:	4f 93       	push	r20
    6c46:	5f 93       	push	r21
    6c48:	6f 93       	push	r22
    6c4a:	7f 93       	push	r23
    6c4c:	8f 93       	push	r24
    6c4e:	9f 93       	push	r25
    6c50:	af 93       	push	r26
    6c52:	bf 93       	push	r27
    6c54:	ef 93       	push	r30
    6c56:	ff 93       	push	r31
    6c58:	cf 93       	push	r28
    6c5a:	df 93       	push	r29
    6c5c:	cd b7       	in	r28, 0x3d	; 61
    6c5e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    6c60:	80 91 13 28 	lds	r24, 0x2813
    6c64:	90 91 14 28 	lds	r25, 0x2814
    6c68:	00 97       	sbiw	r24, 0x00	; 0
    6c6a:	31 f0       	breq	.+12     	; 0x6c78 <__vector_110+0x4a>
		tc_tcf0_cca_callback();
    6c6c:	80 91 13 28 	lds	r24, 0x2813
    6c70:	90 91 14 28 	lds	r25, 0x2814
    6c74:	fc 01       	movw	r30, r24
    6c76:	09 95       	icall
	}
}
    6c78:	df 91       	pop	r29
    6c7a:	cf 91       	pop	r28
    6c7c:	ff 91       	pop	r31
    6c7e:	ef 91       	pop	r30
    6c80:	bf 91       	pop	r27
    6c82:	af 91       	pop	r26
    6c84:	9f 91       	pop	r25
    6c86:	8f 91       	pop	r24
    6c88:	7f 91       	pop	r23
    6c8a:	6f 91       	pop	r22
    6c8c:	5f 91       	pop	r21
    6c8e:	4f 91       	pop	r20
    6c90:	3f 91       	pop	r19
    6c92:	2f 91       	pop	r18
    6c94:	0f 90       	pop	r0
    6c96:	00 92 3b 00 	sts	0x003B, r0
    6c9a:	0f 90       	pop	r0
    6c9c:	00 92 3f 00 	sts	0x003F, r0
    6ca0:	0f 90       	pop	r0
    6ca2:	1f 90       	pop	r1
    6ca4:	18 95       	reti

00006ca6 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    6ca6:	1f 92       	push	r1
    6ca8:	0f 92       	push	r0
    6caa:	00 90 3f 00 	lds	r0, 0x003F
    6cae:	0f 92       	push	r0
    6cb0:	11 24       	eor	r1, r1
    6cb2:	00 90 3b 00 	lds	r0, 0x003B
    6cb6:	0f 92       	push	r0
    6cb8:	2f 93       	push	r18
    6cba:	3f 93       	push	r19
    6cbc:	4f 93       	push	r20
    6cbe:	5f 93       	push	r21
    6cc0:	6f 93       	push	r22
    6cc2:	7f 93       	push	r23
    6cc4:	8f 93       	push	r24
    6cc6:	9f 93       	push	r25
    6cc8:	af 93       	push	r26
    6cca:	bf 93       	push	r27
    6ccc:	ef 93       	push	r30
    6cce:	ff 93       	push	r31
    6cd0:	cf 93       	push	r28
    6cd2:	df 93       	push	r29
    6cd4:	cd b7       	in	r28, 0x3d	; 61
    6cd6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    6cd8:	80 91 15 28 	lds	r24, 0x2815
    6cdc:	90 91 16 28 	lds	r25, 0x2816
    6ce0:	00 97       	sbiw	r24, 0x00	; 0
    6ce2:	31 f0       	breq	.+12     	; 0x6cf0 <__vector_111+0x4a>
		tc_tcf0_ccb_callback();
    6ce4:	80 91 15 28 	lds	r24, 0x2815
    6ce8:	90 91 16 28 	lds	r25, 0x2816
    6cec:	fc 01       	movw	r30, r24
    6cee:	09 95       	icall
	}
}
    6cf0:	df 91       	pop	r29
    6cf2:	cf 91       	pop	r28
    6cf4:	ff 91       	pop	r31
    6cf6:	ef 91       	pop	r30
    6cf8:	bf 91       	pop	r27
    6cfa:	af 91       	pop	r26
    6cfc:	9f 91       	pop	r25
    6cfe:	8f 91       	pop	r24
    6d00:	7f 91       	pop	r23
    6d02:	6f 91       	pop	r22
    6d04:	5f 91       	pop	r21
    6d06:	4f 91       	pop	r20
    6d08:	3f 91       	pop	r19
    6d0a:	2f 91       	pop	r18
    6d0c:	0f 90       	pop	r0
    6d0e:	00 92 3b 00 	sts	0x003B, r0
    6d12:	0f 90       	pop	r0
    6d14:	00 92 3f 00 	sts	0x003F, r0
    6d18:	0f 90       	pop	r0
    6d1a:	1f 90       	pop	r1
    6d1c:	18 95       	reti

00006d1e <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    6d1e:	1f 92       	push	r1
    6d20:	0f 92       	push	r0
    6d22:	00 90 3f 00 	lds	r0, 0x003F
    6d26:	0f 92       	push	r0
    6d28:	11 24       	eor	r1, r1
    6d2a:	00 90 3b 00 	lds	r0, 0x003B
    6d2e:	0f 92       	push	r0
    6d30:	2f 93       	push	r18
    6d32:	3f 93       	push	r19
    6d34:	4f 93       	push	r20
    6d36:	5f 93       	push	r21
    6d38:	6f 93       	push	r22
    6d3a:	7f 93       	push	r23
    6d3c:	8f 93       	push	r24
    6d3e:	9f 93       	push	r25
    6d40:	af 93       	push	r26
    6d42:	bf 93       	push	r27
    6d44:	ef 93       	push	r30
    6d46:	ff 93       	push	r31
    6d48:	cf 93       	push	r28
    6d4a:	df 93       	push	r29
    6d4c:	cd b7       	in	r28, 0x3d	; 61
    6d4e:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    6d50:	80 91 17 28 	lds	r24, 0x2817
    6d54:	90 91 18 28 	lds	r25, 0x2818
    6d58:	00 97       	sbiw	r24, 0x00	; 0
    6d5a:	31 f0       	breq	.+12     	; 0x6d68 <__vector_112+0x4a>
		tc_tcf0_ccc_callback();
    6d5c:	80 91 17 28 	lds	r24, 0x2817
    6d60:	90 91 18 28 	lds	r25, 0x2818
    6d64:	fc 01       	movw	r30, r24
    6d66:	09 95       	icall
	}
}
    6d68:	df 91       	pop	r29
    6d6a:	cf 91       	pop	r28
    6d6c:	ff 91       	pop	r31
    6d6e:	ef 91       	pop	r30
    6d70:	bf 91       	pop	r27
    6d72:	af 91       	pop	r26
    6d74:	9f 91       	pop	r25
    6d76:	8f 91       	pop	r24
    6d78:	7f 91       	pop	r23
    6d7a:	6f 91       	pop	r22
    6d7c:	5f 91       	pop	r21
    6d7e:	4f 91       	pop	r20
    6d80:	3f 91       	pop	r19
    6d82:	2f 91       	pop	r18
    6d84:	0f 90       	pop	r0
    6d86:	00 92 3b 00 	sts	0x003B, r0
    6d8a:	0f 90       	pop	r0
    6d8c:	00 92 3f 00 	sts	0x003F, r0
    6d90:	0f 90       	pop	r0
    6d92:	1f 90       	pop	r1
    6d94:	18 95       	reti

00006d96 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    6d96:	1f 92       	push	r1
    6d98:	0f 92       	push	r0
    6d9a:	00 90 3f 00 	lds	r0, 0x003F
    6d9e:	0f 92       	push	r0
    6da0:	11 24       	eor	r1, r1
    6da2:	00 90 3b 00 	lds	r0, 0x003B
    6da6:	0f 92       	push	r0
    6da8:	2f 93       	push	r18
    6daa:	3f 93       	push	r19
    6dac:	4f 93       	push	r20
    6dae:	5f 93       	push	r21
    6db0:	6f 93       	push	r22
    6db2:	7f 93       	push	r23
    6db4:	8f 93       	push	r24
    6db6:	9f 93       	push	r25
    6db8:	af 93       	push	r26
    6dba:	bf 93       	push	r27
    6dbc:	ef 93       	push	r30
    6dbe:	ff 93       	push	r31
    6dc0:	cf 93       	push	r28
    6dc2:	df 93       	push	r29
    6dc4:	cd b7       	in	r28, 0x3d	; 61
    6dc6:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    6dc8:	80 91 19 28 	lds	r24, 0x2819
    6dcc:	90 91 1a 28 	lds	r25, 0x281A
    6dd0:	00 97       	sbiw	r24, 0x00	; 0
    6dd2:	31 f0       	breq	.+12     	; 0x6de0 <__vector_113+0x4a>
		tc_tcf0_ccd_callback();
    6dd4:	80 91 19 28 	lds	r24, 0x2819
    6dd8:	90 91 1a 28 	lds	r25, 0x281A
    6ddc:	fc 01       	movw	r30, r24
    6dde:	09 95       	icall
	}
}
    6de0:	df 91       	pop	r29
    6de2:	cf 91       	pop	r28
    6de4:	ff 91       	pop	r31
    6de6:	ef 91       	pop	r30
    6de8:	bf 91       	pop	r27
    6dea:	af 91       	pop	r26
    6dec:	9f 91       	pop	r25
    6dee:	8f 91       	pop	r24
    6df0:	7f 91       	pop	r23
    6df2:	6f 91       	pop	r22
    6df4:	5f 91       	pop	r21
    6df6:	4f 91       	pop	r20
    6df8:	3f 91       	pop	r19
    6dfa:	2f 91       	pop	r18
    6dfc:	0f 90       	pop	r0
    6dfe:	00 92 3b 00 	sts	0x003B, r0
    6e02:	0f 90       	pop	r0
    6e04:	00 92 3f 00 	sts	0x003F, r0
    6e08:	0f 90       	pop	r0
    6e0a:	1f 90       	pop	r1
    6e0c:	18 95       	reti

00006e0e <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    6e0e:	cf 93       	push	r28
    6e10:	df 93       	push	r29
    6e12:	00 d0       	rcall	.+0      	; 0x6e14 <tc_enable+0x6>
    6e14:	1f 92       	push	r1
    6e16:	cd b7       	in	r28, 0x3d	; 61
    6e18:	de b7       	in	r29, 0x3e	; 62
    6e1a:	8a 83       	std	Y+2, r24	; 0x02
    6e1c:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t iflags = cpu_irq_save();
    6e1e:	10 d9       	rcall	.-3552   	; 0x6040 <cpu_irq_save>
    6e20:	89 83       	std	Y+1, r24	; 0x01

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    6e22:	8a 81       	ldd	r24, Y+2	; 0x02
    6e24:	9b 81       	ldd	r25, Y+3	; 0x03
    6e26:	81 15       	cp	r24, r1
    6e28:	28 e0       	ldi	r18, 0x08	; 8
    6e2a:	92 07       	cpc	r25, r18
    6e2c:	49 f4       	brne	.+18     	; 0x6e40 <tc_enable+0x32>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    6e2e:	61 e0       	ldi	r22, 0x01	; 1
    6e30:	83 e0       	ldi	r24, 0x03	; 3
    6e32:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    6e36:	64 e0       	ldi	r22, 0x04	; 4
    6e38:	83 e0       	ldi	r24, 0x03	; 3
    6e3a:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
    6e3e:	3f c0       	rjmp	.+126    	; 0x6ebe <tc_enable+0xb0>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    6e40:	8a 81       	ldd	r24, Y+2	; 0x02
    6e42:	9b 81       	ldd	r25, Y+3	; 0x03
    6e44:	80 34       	cpi	r24, 0x40	; 64
    6e46:	28 e0       	ldi	r18, 0x08	; 8
    6e48:	92 07       	cpc	r25, r18
    6e4a:	49 f4       	brne	.+18     	; 0x6e5e <tc_enable+0x50>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    6e4c:	62 e0       	ldi	r22, 0x02	; 2
    6e4e:	83 e0       	ldi	r24, 0x03	; 3
    6e50:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    6e54:	64 e0       	ldi	r22, 0x04	; 4
    6e56:	83 e0       	ldi	r24, 0x03	; 3
    6e58:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
    6e5c:	30 c0       	rjmp	.+96     	; 0x6ebe <tc_enable+0xb0>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    6e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    6e60:	9b 81       	ldd	r25, Y+3	; 0x03
    6e62:	81 15       	cp	r24, r1
    6e64:	29 e0       	ldi	r18, 0x09	; 9
    6e66:	92 07       	cpc	r25, r18
    6e68:	49 f4       	brne	.+18     	; 0x6e7c <tc_enable+0x6e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    6e6a:	61 e0       	ldi	r22, 0x01	; 1
    6e6c:	84 e0       	ldi	r24, 0x04	; 4
    6e6e:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    6e72:	64 e0       	ldi	r22, 0x04	; 4
    6e74:	84 e0       	ldi	r24, 0x04	; 4
    6e76:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
    6e7a:	21 c0       	rjmp	.+66     	; 0x6ebe <tc_enable+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    6e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    6e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    6e80:	81 15       	cp	r24, r1
    6e82:	2a e0       	ldi	r18, 0x0A	; 10
    6e84:	92 07       	cpc	r25, r18
    6e86:	49 f4       	brne	.+18     	; 0x6e9a <tc_enable+0x8c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    6e88:	61 e0       	ldi	r22, 0x01	; 1
    6e8a:	85 e0       	ldi	r24, 0x05	; 5
    6e8c:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    6e90:	64 e0       	ldi	r22, 0x04	; 4
    6e92:	85 e0       	ldi	r24, 0x05	; 5
    6e94:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
    6e98:	12 c0       	rjmp	.+36     	; 0x6ebe <tc_enable+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    6e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    6e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    6e9e:	81 15       	cp	r24, r1
    6ea0:	2b e0       	ldi	r18, 0x0B	; 11
    6ea2:	92 07       	cpc	r25, r18
    6ea4:	49 f4       	brne	.+18     	; 0x6eb8 <tc_enable+0xaa>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    6ea6:	61 e0       	ldi	r22, 0x01	; 1
    6ea8:	86 e0       	ldi	r24, 0x06	; 6
    6eaa:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    6eae:	64 e0       	ldi	r22, 0x04	; 4
    6eb0:	86 e0       	ldi	r24, 0x06	; 6
    6eb2:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
    6eb6:	03 c0       	rjmp	.+6      	; 0x6ebe <tc_enable+0xb0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	} else
#endif
	{
		cpu_irq_restore(iflags);
    6eb8:	89 81       	ldd	r24, Y+1	; 0x01
    6eba:	d2 d8       	rcall	.-3676   	; 0x6060 <cpu_irq_restore>
		return;
    6ebc:	04 c0       	rjmp	.+8      	; 0x6ec6 <tc_enable+0xb8>
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
    6ebe:	81 e0       	ldi	r24, 0x01	; 1
    6ec0:	de d8       	rcall	.-3652   	; 0x607e <sleepmgr_lock_mode>
	cpu_irq_restore(iflags);
    6ec2:	89 81       	ldd	r24, Y+1	; 0x01
    6ec4:	cd d8       	rcall	.-3686   	; 0x6060 <cpu_irq_restore>
}
    6ec6:	23 96       	adiw	r28, 0x03	; 3
    6ec8:	cd bf       	out	0x3d, r28	; 61
    6eca:	de bf       	out	0x3e, r29	; 62
    6ecc:	df 91       	pop	r29
    6ece:	cf 91       	pop	r28
    6ed0:	08 95       	ret

00006ed2 <tc_disable>:
 *
 * \note
 * mask TC clock (sysclk).
 */
void tc_disable(volatile void *tc)
{
    6ed2:	cf 93       	push	r28
    6ed4:	df 93       	push	r29
    6ed6:	00 d0       	rcall	.+0      	; 0x6ed8 <tc_disable+0x6>
    6ed8:	1f 92       	push	r1
    6eda:	cd b7       	in	r28, 0x3d	; 61
    6edc:	de b7       	in	r29, 0x3e	; 62
    6ede:	8a 83       	std	Y+2, r24	; 0x02
    6ee0:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t iflags = cpu_irq_save();
    6ee2:	ae d8       	rcall	.-3748   	; 0x6040 <cpu_irq_save>
    6ee4:	89 83       	std	Y+1, r24	; 0x01

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
    6ee6:	81 e0       	ldi	r24, 0x01	; 1
    6ee8:	e6 d8       	rcall	.-3636   	; 0x60b6 <sleepmgr_unlock_mode>

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    6eea:	8a 81       	ldd	r24, Y+2	; 0x02
    6eec:	9b 81       	ldd	r25, Y+3	; 0x03
    6eee:	81 15       	cp	r24, r1
    6ef0:	28 e0       	ldi	r18, 0x08	; 8
    6ef2:	92 07       	cpc	r25, r18
    6ef4:	49 f4       	brne	.+18     	; 0x6f08 <tc_disable+0x36>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    6ef6:	61 e0       	ldi	r22, 0x01	; 1
    6ef8:	83 e0       	ldi	r24, 0x03	; 3
    6efa:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    6efe:	64 e0       	ldi	r22, 0x04	; 4
    6f00:	83 e0       	ldi	r24, 0x03	; 3
    6f02:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_disable_module>
    6f06:	3f c0       	rjmp	.+126    	; 0x6f86 <tc_disable+0xb4>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    6f08:	8a 81       	ldd	r24, Y+2	; 0x02
    6f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    6f0c:	80 34       	cpi	r24, 0x40	; 64
    6f0e:	28 e0       	ldi	r18, 0x08	; 8
    6f10:	92 07       	cpc	r25, r18
    6f12:	49 f4       	brne	.+18     	; 0x6f26 <tc_disable+0x54>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    6f14:	62 e0       	ldi	r22, 0x02	; 2
    6f16:	83 e0       	ldi	r24, 0x03	; 3
    6f18:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    6f1c:	64 e0       	ldi	r22, 0x04	; 4
    6f1e:	83 e0       	ldi	r24, 0x03	; 3
    6f20:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_disable_module>
    6f24:	30 c0       	rjmp	.+96     	; 0x6f86 <tc_disable+0xb4>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    6f26:	8a 81       	ldd	r24, Y+2	; 0x02
    6f28:	9b 81       	ldd	r25, Y+3	; 0x03
    6f2a:	81 15       	cp	r24, r1
    6f2c:	29 e0       	ldi	r18, 0x09	; 9
    6f2e:	92 07       	cpc	r25, r18
    6f30:	49 f4       	brne	.+18     	; 0x6f44 <tc_disable+0x72>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    6f32:	61 e0       	ldi	r22, 0x01	; 1
    6f34:	84 e0       	ldi	r24, 0x04	; 4
    6f36:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    6f3a:	64 e0       	ldi	r22, 0x04	; 4
    6f3c:	84 e0       	ldi	r24, 0x04	; 4
    6f3e:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_disable_module>
    6f42:	21 c0       	rjmp	.+66     	; 0x6f86 <tc_disable+0xb4>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC1);
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    6f44:	8a 81       	ldd	r24, Y+2	; 0x02
    6f46:	9b 81       	ldd	r25, Y+3	; 0x03
    6f48:	81 15       	cp	r24, r1
    6f4a:	2a e0       	ldi	r18, 0x0A	; 10
    6f4c:	92 07       	cpc	r25, r18
    6f4e:	49 f4       	brne	.+18     	; 0x6f62 <tc_disable+0x90>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    6f50:	61 e0       	ldi	r22, 0x01	; 1
    6f52:	85 e0       	ldi	r24, 0x05	; 5
    6f54:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    6f58:	64 e0       	ldi	r22, 0x04	; 4
    6f5a:	85 e0       	ldi	r24, 0x05	; 5
    6f5c:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_disable_module>
    6f60:	12 c0       	rjmp	.+36     	; 0x6f86 <tc_disable+0xb4>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC1);
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    6f62:	8a 81       	ldd	r24, Y+2	; 0x02
    6f64:	9b 81       	ldd	r25, Y+3	; 0x03
    6f66:	81 15       	cp	r24, r1
    6f68:	2b e0       	ldi	r18, 0x0B	; 11
    6f6a:	92 07       	cpc	r25, r18
    6f6c:	49 f4       	brne	.+18     	; 0x6f80 <tc_disable+0xae>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    6f6e:	61 e0       	ldi	r22, 0x01	; 1
    6f70:	86 e0       	ldi	r24, 0x06	; 6
    6f72:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    6f76:	64 e0       	ldi	r22, 0x04	; 4
    6f78:	86 e0       	ldi	r24, 0x06	; 6
    6f7a:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_disable_module>
    6f7e:	03 c0       	rjmp	.+6      	; 0x6f86 <tc_disable+0xb4>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_TC1);
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	} else
#endif
	{
		cpu_irq_restore(iflags);
    6f80:	89 81       	ldd	r24, Y+1	; 0x01
    6f82:	6e d8       	rcall	.-3876   	; 0x6060 <cpu_irq_restore>
		return;
    6f84:	02 c0       	rjmp	.+4      	; 0x6f8a <tc_disable+0xb8>
	}
	cpu_irq_restore(iflags);
    6f86:	89 81       	ldd	r24, Y+1	; 0x01
    6f88:	6b d8       	rcall	.-3882   	; 0x6060 <cpu_irq_restore>
}
    6f8a:	23 96       	adiw	r28, 0x03	; 3
    6f8c:	cd bf       	out	0x3d, r28	; 61
    6f8e:	de bf       	out	0x3e, r29	; 62
    6f90:	df 91       	pop	r29
    6f92:	cf 91       	pop	r28
    6f94:	08 95       	ret

00006f96 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
    6f96:	cf 93       	push	r28
    6f98:	df 93       	push	r29
    6f9a:	00 d0       	rcall	.+0      	; 0x6f9c <tc_set_overflow_interrupt_callback+0x6>
    6f9c:	00 d0       	rcall	.+0      	; 0x6f9e <tc_set_overflow_interrupt_callback+0x8>
    6f9e:	cd b7       	in	r28, 0x3d	; 61
    6fa0:	de b7       	in	r29, 0x3e	; 62
    6fa2:	89 83       	std	Y+1, r24	; 0x01
    6fa4:	9a 83       	std	Y+2, r25	; 0x02
    6fa6:	6b 83       	std	Y+3, r22	; 0x03
    6fa8:	7c 83       	std	Y+4, r23	; 0x04
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    6faa:	89 81       	ldd	r24, Y+1	; 0x01
    6fac:	9a 81       	ldd	r25, Y+2	; 0x02
    6fae:	81 15       	cp	r24, r1
    6fb0:	28 e0       	ldi	r18, 0x08	; 8
    6fb2:	92 07       	cpc	r25, r18
    6fb4:	39 f4       	brne	.+14     	; 0x6fc4 <tc_set_overflow_interrupt_callback+0x2e>
		tc_tcc0_ovf_callback = callback;
    6fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    6fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    6fba:	80 93 e3 27 	sts	0x27E3, r24
    6fbe:	90 93 e4 27 	sts	0x27E4, r25
    6fc2:	33 c0       	rjmp	.+102    	; 0x702a <tc_set_overflow_interrupt_callback+0x94>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    6fc4:	89 81       	ldd	r24, Y+1	; 0x01
    6fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    6fc8:	80 34       	cpi	r24, 0x40	; 64
    6fca:	28 e0       	ldi	r18, 0x08	; 8
    6fcc:	92 07       	cpc	r25, r18
    6fce:	39 f4       	brne	.+14     	; 0x6fde <tc_set_overflow_interrupt_callback+0x48>
		tc_tcc1_ovf_callback = callback;
    6fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    6fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    6fd4:	80 93 ef 27 	sts	0x27EF, r24
    6fd8:	90 93 f0 27 	sts	0x27F0, r25
    6fdc:	26 c0       	rjmp	.+76     	; 0x702a <tc_set_overflow_interrupt_callback+0x94>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    6fde:	89 81       	ldd	r24, Y+1	; 0x01
    6fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    6fe2:	81 15       	cp	r24, r1
    6fe4:	29 e0       	ldi	r18, 0x09	; 9
    6fe6:	92 07       	cpc	r25, r18
    6fe8:	39 f4       	brne	.+14     	; 0x6ff8 <tc_set_overflow_interrupt_callback+0x62>
		tc_tcd0_ovf_callback = callback;
    6fea:	8b 81       	ldd	r24, Y+3	; 0x03
    6fec:	9c 81       	ldd	r25, Y+4	; 0x04
    6fee:	80 93 f7 27 	sts	0x27F7, r24
    6ff2:	90 93 f8 27 	sts	0x27F8, r25
    6ff6:	19 c0       	rjmp	.+50     	; 0x702a <tc_set_overflow_interrupt_callback+0x94>
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
		tc_tcd1_ovf_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    6ff8:	89 81       	ldd	r24, Y+1	; 0x01
    6ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    6ffc:	81 15       	cp	r24, r1
    6ffe:	2a e0       	ldi	r18, 0x0A	; 10
    7000:	92 07       	cpc	r25, r18
    7002:	39 f4       	brne	.+14     	; 0x7012 <tc_set_overflow_interrupt_callback+0x7c>
		tc_tce0_ovf_callback = callback;
    7004:	8b 81       	ldd	r24, Y+3	; 0x03
    7006:	9c 81       	ldd	r25, Y+4	; 0x04
    7008:	80 93 03 28 	sts	0x2803, r24
    700c:	90 93 04 28 	sts	0x2804, r25
    7010:	0c c0       	rjmp	.+24     	; 0x702a <tc_set_overflow_interrupt_callback+0x94>
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
		tc_tce1_ovf_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    7012:	89 81       	ldd	r24, Y+1	; 0x01
    7014:	9a 81       	ldd	r25, Y+2	; 0x02
    7016:	81 15       	cp	r24, r1
    7018:	2b e0       	ldi	r18, 0x0B	; 11
    701a:	92 07       	cpc	r25, r18
    701c:	31 f4       	brne	.+12     	; 0x702a <tc_set_overflow_interrupt_callback+0x94>
		tc_tcf0_ovf_callback = callback;
    701e:	8b 81       	ldd	r24, Y+3	; 0x03
    7020:	9c 81       	ldd	r25, Y+4	; 0x04
    7022:	80 93 0f 28 	sts	0x280F, r24
    7026:	90 93 10 28 	sts	0x2810, r25
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    702a:	24 96       	adiw	r28, 0x04	; 4
    702c:	cd bf       	out	0x3d, r28	; 61
    702e:	de bf       	out	0x3e, r29	; 62
    7030:	df 91       	pop	r29
    7032:	cf 91       	pop	r28
    7034:	08 95       	ret

00007036 <usart_rx_enable>:
	}
	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    7036:	cf 93       	push	r28
    7038:	df 93       	push	r29
    703a:	00 d0       	rcall	.+0      	; 0x703c <usart_rx_enable+0x6>
    703c:	cd b7       	in	r28, 0x3d	; 61
    703e:	de b7       	in	r29, 0x3e	; 62
    7040:	89 83       	std	Y+1, r24	; 0x01
    7042:	9a 83       	std	Y+2, r25	; 0x02
    7044:	89 81       	ldd	r24, Y+1	; 0x01
    7046:	9a 81       	ldd	r25, Y+2	; 0x02
    7048:	fc 01       	movw	r30, r24
    704a:	84 81       	ldd	r24, Z+4	; 0x04
    704c:	28 2f       	mov	r18, r24
    704e:	20 61       	ori	r18, 0x10	; 16
    7050:	89 81       	ldd	r24, Y+1	; 0x01
    7052:	9a 81       	ldd	r25, Y+2	; 0x02
    7054:	fc 01       	movw	r30, r24
    7056:	24 83       	std	Z+4, r18	; 0x04
    7058:	0f 90       	pop	r0
    705a:	0f 90       	pop	r0
    705c:	df 91       	pop	r29
    705e:	cf 91       	pop	r28
    7060:	08 95       	ret

00007062 <usart_format_set>:
    7062:	cf 93       	push	r28
    7064:	df 93       	push	r29
    7066:	cd b7       	in	r28, 0x3d	; 61
    7068:	de b7       	in	r29, 0x3e	; 62
    706a:	25 97       	sbiw	r28, 0x05	; 5
    706c:	cd bf       	out	0x3d, r28	; 61
    706e:	de bf       	out	0x3e, r29	; 62
    7070:	89 83       	std	Y+1, r24	; 0x01
    7072:	9a 83       	std	Y+2, r25	; 0x02
    7074:	6b 83       	std	Y+3, r22	; 0x03
    7076:	4c 83       	std	Y+4, r20	; 0x04
    7078:	2d 83       	std	Y+5, r18	; 0x05
    707a:	9b 81       	ldd	r25, Y+3	; 0x03
    707c:	8c 81       	ldd	r24, Y+4	; 0x04
    707e:	89 2b       	or	r24, r25
    7080:	98 2f       	mov	r25, r24
    7082:	8d 81       	ldd	r24, Y+5	; 0x05
    7084:	88 23       	and	r24, r24
    7086:	11 f0       	breq	.+4      	; 0x708c <usart_format_set+0x2a>
    7088:	88 e0       	ldi	r24, 0x08	; 8
    708a:	01 c0       	rjmp	.+2      	; 0x708e <usart_format_set+0x2c>
    708c:	80 e0       	ldi	r24, 0x00	; 0
    708e:	89 2b       	or	r24, r25
    7090:	28 2f       	mov	r18, r24
    7092:	89 81       	ldd	r24, Y+1	; 0x01
    7094:	9a 81       	ldd	r25, Y+2	; 0x02
    7096:	fc 01       	movw	r30, r24
    7098:	25 83       	std	Z+5, r18	; 0x05
    709a:	25 96       	adiw	r28, 0x05	; 5
    709c:	cd bf       	out	0x3d, r28	; 61
    709e:	de bf       	out	0x3e, r29	; 62
    70a0:	df 91       	pop	r29
    70a2:	cf 91       	pop	r28
    70a4:	08 95       	ret

000070a6 <usart_tx_enable>:
    70a6:	cf 93       	push	r28
    70a8:	df 93       	push	r29
    70aa:	00 d0       	rcall	.+0      	; 0x70ac <usart_tx_enable+0x6>
    70ac:	cd b7       	in	r28, 0x3d	; 61
    70ae:	de b7       	in	r29, 0x3e	; 62
    70b0:	89 83       	std	Y+1, r24	; 0x01
    70b2:	9a 83       	std	Y+2, r25	; 0x02
    70b4:	89 81       	ldd	r24, Y+1	; 0x01
    70b6:	9a 81       	ldd	r25, Y+2	; 0x02
    70b8:	fc 01       	movw	r30, r24
    70ba:	84 81       	ldd	r24, Z+4	; 0x04
    70bc:	28 2f       	mov	r18, r24
    70be:	28 60       	ori	r18, 0x08	; 8
    70c0:	89 81       	ldd	r24, Y+1	; 0x01
    70c2:	9a 81       	ldd	r25, Y+2	; 0x02
    70c4:	fc 01       	movw	r30, r24
    70c6:	24 83       	std	Z+4, r18	; 0x04
    70c8:	0f 90       	pop	r0
    70ca:	0f 90       	pop	r0
    70cc:	df 91       	pop	r29
    70ce:	cf 91       	pop	r28
    70d0:	08 95       	ret

000070d2 <usart_set_mode>:
    70d2:	cf 93       	push	r28
    70d4:	df 93       	push	r29
    70d6:	00 d0       	rcall	.+0      	; 0x70d8 <usart_set_mode+0x6>
    70d8:	1f 92       	push	r1
    70da:	cd b7       	in	r28, 0x3d	; 61
    70dc:	de b7       	in	r29, 0x3e	; 62
    70de:	89 83       	std	Y+1, r24	; 0x01
    70e0:	9a 83       	std	Y+2, r25	; 0x02
    70e2:	6b 83       	std	Y+3, r22	; 0x03
    70e4:	89 81       	ldd	r24, Y+1	; 0x01
    70e6:	9a 81       	ldd	r25, Y+2	; 0x02
    70e8:	fc 01       	movw	r30, r24
    70ea:	85 81       	ldd	r24, Z+5	; 0x05
    70ec:	98 2f       	mov	r25, r24
    70ee:	9f 73       	andi	r25, 0x3F	; 63
    70f0:	8b 81       	ldd	r24, Y+3	; 0x03
    70f2:	89 2b       	or	r24, r25
    70f4:	28 2f       	mov	r18, r24
    70f6:	89 81       	ldd	r24, Y+1	; 0x01
    70f8:	9a 81       	ldd	r25, Y+2	; 0x02
    70fa:	fc 01       	movw	r30, r24
    70fc:	25 83       	std	Z+5, r18	; 0x05
    70fe:	23 96       	adiw	r28, 0x03	; 3
    7100:	cd bf       	out	0x3d, r28	; 61
    7102:	de bf       	out	0x3e, r29	; 62
    7104:	df 91       	pop	r29
    7106:	cf 91       	pop	r28
    7108:	08 95       	ret

0000710a <usart_data_register_is_empty>:
    710a:	cf 93       	push	r28
    710c:	df 93       	push	r29
    710e:	00 d0       	rcall	.+0      	; 0x7110 <usart_data_register_is_empty+0x6>
    7110:	cd b7       	in	r28, 0x3d	; 61
    7112:	de b7       	in	r29, 0x3e	; 62
    7114:	89 83       	std	Y+1, r24	; 0x01
    7116:	9a 83       	std	Y+2, r25	; 0x02
    7118:	89 81       	ldd	r24, Y+1	; 0x01
    711a:	9a 81       	ldd	r25, Y+2	; 0x02
    711c:	fc 01       	movw	r30, r24
    711e:	81 81       	ldd	r24, Z+1	; 0x01
    7120:	88 2f       	mov	r24, r24
    7122:	90 e0       	ldi	r25, 0x00	; 0
    7124:	80 72       	andi	r24, 0x20	; 32
    7126:	99 27       	eor	r25, r25
    7128:	21 e0       	ldi	r18, 0x01	; 1
    712a:	00 97       	sbiw	r24, 0x00	; 0
    712c:	09 f4       	brne	.+2      	; 0x7130 <usart_data_register_is_empty+0x26>
    712e:	20 e0       	ldi	r18, 0x00	; 0
    7130:	82 2f       	mov	r24, r18
    7132:	0f 90       	pop	r0
    7134:	0f 90       	pop	r0
    7136:	df 91       	pop	r29
    7138:	cf 91       	pop	r28
    713a:	08 95       	ret

0000713c <sysclk_get_main_hz>:
    713c:	cf 93       	push	r28
    713e:	df 93       	push	r29
    7140:	cd b7       	in	r28, 0x3d	; 61
    7142:	de b7       	in	r29, 0x3e	; 62
    7144:	80 e0       	ldi	r24, 0x00	; 0
    7146:	98 e4       	ldi	r25, 0x48	; 72
    7148:	a8 ee       	ldi	r26, 0xE8	; 232
    714a:	b1 e0       	ldi	r27, 0x01	; 1
    714c:	bc 01       	movw	r22, r24
    714e:	cd 01       	movw	r24, r26
    7150:	df 91       	pop	r29
    7152:	cf 91       	pop	r28
    7154:	08 95       	ret

00007156 <sysclk_get_per4_hz>:
    7156:	cf 93       	push	r28
    7158:	df 93       	push	r29
    715a:	1f 92       	push	r1
    715c:	cd b7       	in	r28, 0x3d	; 61
    715e:	de b7       	in	r29, 0x3e	; 62
    7160:	19 82       	std	Y+1, r1	; 0x01
    7162:	ec df       	rcall	.-40     	; 0x713c <sysclk_get_main_hz>
    7164:	dc 01       	movw	r26, r24
    7166:	cb 01       	movw	r24, r22
    7168:	29 81       	ldd	r18, Y+1	; 0x01
    716a:	22 2f       	mov	r18, r18
    716c:	30 e0       	ldi	r19, 0x00	; 0
    716e:	02 2e       	mov	r0, r18
    7170:	04 c0       	rjmp	.+8      	; 0x717a <sysclk_get_per4_hz+0x24>
    7172:	b6 95       	lsr	r27
    7174:	a7 95       	ror	r26
    7176:	97 95       	ror	r25
    7178:	87 95       	ror	r24
    717a:	0a 94       	dec	r0
    717c:	d2 f7       	brpl	.-12     	; 0x7172 <sysclk_get_per4_hz+0x1c>
    717e:	bc 01       	movw	r22, r24
    7180:	cd 01       	movw	r24, r26
    7182:	0f 90       	pop	r0
    7184:	df 91       	pop	r29
    7186:	cf 91       	pop	r28
    7188:	08 95       	ret

0000718a <sysclk_get_per2_hz>:
    718a:	cf 93       	push	r28
    718c:	df 93       	push	r29
    718e:	cd b7       	in	r28, 0x3d	; 61
    7190:	de b7       	in	r29, 0x3e	; 62
    7192:	e1 df       	rcall	.-62     	; 0x7156 <sysclk_get_per4_hz>
    7194:	dc 01       	movw	r26, r24
    7196:	cb 01       	movw	r24, r22
    7198:	bc 01       	movw	r22, r24
    719a:	cd 01       	movw	r24, r26
    719c:	df 91       	pop	r29
    719e:	cf 91       	pop	r28
    71a0:	08 95       	ret

000071a2 <sysclk_get_per_hz>:
    71a2:	cf 93       	push	r28
    71a4:	df 93       	push	r29
    71a6:	cd b7       	in	r28, 0x3d	; 61
    71a8:	de b7       	in	r29, 0x3e	; 62
    71aa:	ef df       	rcall	.-34     	; 0x718a <sysclk_get_per2_hz>
    71ac:	dc 01       	movw	r26, r24
    71ae:	cb 01       	movw	r24, r22
    71b0:	bc 01       	movw	r22, r24
    71b2:	cd 01       	movw	r24, r26
    71b4:	df 91       	pop	r29
    71b6:	cf 91       	pop	r28
    71b8:	08 95       	ret

000071ba <usart_enable_module_clock>:
    71ba:	cf 93       	push	r28
    71bc:	df 93       	push	r29
    71be:	00 d0       	rcall	.+0      	; 0x71c0 <usart_enable_module_clock+0x6>
    71c0:	cd b7       	in	r28, 0x3d	; 61
    71c2:	de b7       	in	r29, 0x3e	; 62
    71c4:	89 83       	std	Y+1, r24	; 0x01
    71c6:	9a 83       	std	Y+2, r25	; 0x02
    71c8:	89 81       	ldd	r24, Y+1	; 0x01
    71ca:	9a 81       	ldd	r25, Y+2	; 0x02
    71cc:	80 3a       	cpi	r24, 0xA0	; 160
    71ce:	28 e0       	ldi	r18, 0x08	; 8
    71d0:	92 07       	cpc	r25, r18
    71d2:	21 f4       	brne	.+8      	; 0x71dc <usart_enable_module_clock+0x22>
    71d4:	60 e1       	ldi	r22, 0x10	; 16
    71d6:	83 e0       	ldi	r24, 0x03	; 3
    71d8:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
    71dc:	89 81       	ldd	r24, Y+1	; 0x01
    71de:	9a 81       	ldd	r25, Y+2	; 0x02
    71e0:	80 3a       	cpi	r24, 0xA0	; 160
    71e2:	29 e0       	ldi	r18, 0x09	; 9
    71e4:	92 07       	cpc	r25, r18
    71e6:	21 f4       	brne	.+8      	; 0x71f0 <usart_enable_module_clock+0x36>
    71e8:	60 e1       	ldi	r22, 0x10	; 16
    71ea:	84 e0       	ldi	r24, 0x04	; 4
    71ec:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
    71f0:	89 81       	ldd	r24, Y+1	; 0x01
    71f2:	9a 81       	ldd	r25, Y+2	; 0x02
    71f4:	80 3a       	cpi	r24, 0xA0	; 160
    71f6:	2a e0       	ldi	r18, 0x0A	; 10
    71f8:	92 07       	cpc	r25, r18
    71fa:	21 f4       	brne	.+8      	; 0x7204 <usart_enable_module_clock+0x4a>
    71fc:	60 e1       	ldi	r22, 0x10	; 16
    71fe:	85 e0       	ldi	r24, 0x05	; 5
    7200:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
    7204:	0f 90       	pop	r0
    7206:	0f 90       	pop	r0
    7208:	df 91       	pop	r29
    720a:	cf 91       	pop	r28
    720c:	08 95       	ret

0000720e <usart_init_rs232>:
    720e:	0f 93       	push	r16
    7210:	1f 93       	push	r17
    7212:	cf 93       	push	r28
    7214:	df 93       	push	r29
    7216:	cd b7       	in	r28, 0x3d	; 61
    7218:	de b7       	in	r29, 0x3e	; 62
    721a:	25 97       	sbiw	r28, 0x05	; 5
    721c:	cd bf       	out	0x3d, r28	; 61
    721e:	de bf       	out	0x3e, r29	; 62
    7220:	8a 83       	std	Y+2, r24	; 0x02
    7222:	9b 83       	std	Y+3, r25	; 0x03
    7224:	6c 83       	std	Y+4, r22	; 0x04
    7226:	7d 83       	std	Y+5, r23	; 0x05
    7228:	8a 81       	ldd	r24, Y+2	; 0x02
    722a:	9b 81       	ldd	r25, Y+3	; 0x03
    722c:	c6 df       	rcall	.-116    	; 0x71ba <usart_enable_module_clock>
    722e:	8a 81       	ldd	r24, Y+2	; 0x02
    7230:	9b 81       	ldd	r25, Y+3	; 0x03
    7232:	60 e0       	ldi	r22, 0x00	; 0
    7234:	4e df       	rcall	.-356    	; 0x70d2 <usart_set_mode>
    7236:	8c 81       	ldd	r24, Y+4	; 0x04
    7238:	9d 81       	ldd	r25, Y+5	; 0x05
    723a:	fc 01       	movw	r30, r24
    723c:	26 81       	ldd	r18, Z+6	; 0x06
    723e:	8c 81       	ldd	r24, Y+4	; 0x04
    7240:	9d 81       	ldd	r25, Y+5	; 0x05
    7242:	fc 01       	movw	r30, r24
    7244:	45 81       	ldd	r20, Z+5	; 0x05
    7246:	8c 81       	ldd	r24, Y+4	; 0x04
    7248:	9d 81       	ldd	r25, Y+5	; 0x05
    724a:	fc 01       	movw	r30, r24
    724c:	34 81       	ldd	r19, Z+4	; 0x04
    724e:	8a 81       	ldd	r24, Y+2	; 0x02
    7250:	9b 81       	ldd	r25, Y+3	; 0x03
    7252:	63 2f       	mov	r22, r19
    7254:	06 df       	rcall	.-500    	; 0x7062 <usart_format_set>
    7256:	a5 df       	rcall	.-182    	; 0x71a2 <sysclk_get_per_hz>
    7258:	9b 01       	movw	r18, r22
    725a:	ac 01       	movw	r20, r24
    725c:	8c 81       	ldd	r24, Y+4	; 0x04
    725e:	9d 81       	ldd	r25, Y+5	; 0x05
    7260:	fc 01       	movw	r30, r24
    7262:	80 81       	ld	r24, Z
    7264:	91 81       	ldd	r25, Z+1	; 0x01
    7266:	a2 81       	ldd	r26, Z+2	; 0x02
    7268:	b3 81       	ldd	r27, Z+3	; 0x03
    726a:	ea 81       	ldd	r30, Y+2	; 0x02
    726c:	fb 81       	ldd	r31, Y+3	; 0x03
    726e:	89 01       	movw	r16, r18
    7270:	9a 01       	movw	r18, r20
    7272:	ac 01       	movw	r20, r24
    7274:	bd 01       	movw	r22, r26
    7276:	cf 01       	movw	r24, r30
    7278:	2f d0       	rcall	.+94     	; 0x72d8 <usart_set_baudrate>
    727a:	89 83       	std	Y+1, r24	; 0x01
    727c:	8a 81       	ldd	r24, Y+2	; 0x02
    727e:	9b 81       	ldd	r25, Y+3	; 0x03
    7280:	12 df       	rcall	.-476    	; 0x70a6 <usart_tx_enable>
    7282:	8a 81       	ldd	r24, Y+2	; 0x02
    7284:	9b 81       	ldd	r25, Y+3	; 0x03
    7286:	d7 de       	rcall	.-594    	; 0x7036 <usart_rx_enable>
    7288:	89 81       	ldd	r24, Y+1	; 0x01
    728a:	25 96       	adiw	r28, 0x05	; 5
    728c:	cd bf       	out	0x3d, r28	; 61
    728e:	de bf       	out	0x3e, r29	; 62
    7290:	df 91       	pop	r29
    7292:	cf 91       	pop	r28
    7294:	1f 91       	pop	r17
    7296:	0f 91       	pop	r16
    7298:	08 95       	ret

0000729a <usart_putchar>:
    729a:	cf 93       	push	r28
    729c:	df 93       	push	r29
    729e:	00 d0       	rcall	.+0      	; 0x72a0 <usart_putchar+0x6>
    72a0:	1f 92       	push	r1
    72a2:	cd b7       	in	r28, 0x3d	; 61
    72a4:	de b7       	in	r29, 0x3e	; 62
    72a6:	89 83       	std	Y+1, r24	; 0x01
    72a8:	9a 83       	std	Y+2, r25	; 0x02
    72aa:	6b 83       	std	Y+3, r22	; 0x03
    72ac:	00 00       	nop
    72ae:	89 81       	ldd	r24, Y+1	; 0x01
    72b0:	9a 81       	ldd	r25, Y+2	; 0x02
    72b2:	2b df       	rcall	.-426    	; 0x710a <usart_data_register_is_empty>
    72b4:	98 2f       	mov	r25, r24
    72b6:	81 e0       	ldi	r24, 0x01	; 1
    72b8:	89 27       	eor	r24, r25
    72ba:	88 23       	and	r24, r24
    72bc:	c1 f7       	brne	.-16     	; 0x72ae <usart_putchar+0x14>
    72be:	89 81       	ldd	r24, Y+1	; 0x01
    72c0:	9a 81       	ldd	r25, Y+2	; 0x02
    72c2:	2b 81       	ldd	r18, Y+3	; 0x03
    72c4:	fc 01       	movw	r30, r24
    72c6:	20 83       	st	Z, r18
    72c8:	80 e0       	ldi	r24, 0x00	; 0
    72ca:	90 e0       	ldi	r25, 0x00	; 0
    72cc:	23 96       	adiw	r28, 0x03	; 3
    72ce:	cd bf       	out	0x3d, r28	; 61
    72d0:	de bf       	out	0x3e, r29	; 62
    72d2:	df 91       	pop	r29
    72d4:	cf 91       	pop	r28
    72d6:	08 95       	ret

000072d8 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    72d8:	ef 92       	push	r14
    72da:	ff 92       	push	r15
    72dc:	0f 93       	push	r16
    72de:	1f 93       	push	r17
    72e0:	cf 93       	push	r28
    72e2:	df 93       	push	r29
    72e4:	cd b7       	in	r28, 0x3d	; 61
    72e6:	de b7       	in	r29, 0x3e	; 62
    72e8:	6f 97       	sbiw	r28, 0x1f	; 31
    72ea:	cd bf       	out	0x3d, r28	; 61
    72ec:	de bf       	out	0x3e, r29	; 62
    72ee:	8e 8b       	std	Y+22, r24	; 0x16
    72f0:	9f 8b       	std	Y+23, r25	; 0x17
    72f2:	48 8f       	std	Y+24, r20	; 0x18
    72f4:	59 8f       	std	Y+25, r21	; 0x19
    72f6:	6a 8f       	std	Y+26, r22	; 0x1a
    72f8:	7b 8f       	std	Y+27, r23	; 0x1b
    72fa:	0c 8f       	std	Y+28, r16	; 0x1c
    72fc:	1d 8f       	std	Y+29, r17	; 0x1d
    72fe:	2e 8f       	std	Y+30, r18	; 0x1e
    7300:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	// 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN)
	max_rate = cpu_hz / 8;
    7302:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7304:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7306:	ae 8d       	ldd	r26, Y+30	; 0x1e
    7308:	bf 8d       	ldd	r27, Y+31	; 0x1f
    730a:	68 94       	set
    730c:	12 f8       	bld	r1, 2
    730e:	b6 95       	lsr	r27
    7310:	a7 95       	ror	r26
    7312:	97 95       	ror	r25
    7314:	87 95       	ror	r24
    7316:	16 94       	lsr	r1
    7318:	d1 f7       	brne	.-12     	; 0x730e <usart_set_baudrate+0x36>
    731a:	8e 87       	std	Y+14, r24	; 0x0e
    731c:	9f 87       	std	Y+15, r25	; 0x0f
    731e:	a8 8b       	std	Y+16, r26	; 0x10
    7320:	b9 8b       	std	Y+17, r27	; 0x11
	// 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1)
	min_rate = cpu_hz / 4194304;
    7322:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7324:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7326:	ae 8d       	ldd	r26, Y+30	; 0x1e
    7328:	bf 8d       	ldd	r27, Y+31	; 0x1f
    732a:	07 2e       	mov	r0, r23
    732c:	76 e1       	ldi	r23, 0x16	; 22
    732e:	b6 95       	lsr	r27
    7330:	a7 95       	ror	r26
    7332:	97 95       	ror	r25
    7334:	87 95       	ror	r24
    7336:	7a 95       	dec	r23
    7338:	d1 f7       	brne	.-12     	; 0x732e <usart_set_baudrate+0x56>
    733a:	70 2d       	mov	r23, r0
    733c:	8a 87       	std	Y+10, r24	; 0x0a
    733e:	9b 87       	std	Y+11, r25	; 0x0b
    7340:	ac 87       	std	Y+12, r26	; 0x0c
    7342:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    7344:	8e 89       	ldd	r24, Y+22	; 0x16
    7346:	9f 89       	ldd	r25, Y+23	; 0x17
    7348:	fc 01       	movw	r30, r24
    734a:	84 81       	ldd	r24, Z+4	; 0x04
    734c:	88 2f       	mov	r24, r24
    734e:	90 e0       	ldi	r25, 0x00	; 0
    7350:	84 70       	andi	r24, 0x04	; 4
    7352:	99 27       	eor	r25, r25
    7354:	00 97       	sbiw	r24, 0x00	; 0
    7356:	c1 f4       	brne	.+48     	; 0x7388 <usart_set_baudrate+0xb0>
		max_rate /= 2;
    7358:	8e 85       	ldd	r24, Y+14	; 0x0e
    735a:	9f 85       	ldd	r25, Y+15	; 0x0f
    735c:	a8 89       	ldd	r26, Y+16	; 0x10
    735e:	b9 89       	ldd	r27, Y+17	; 0x11
    7360:	b6 95       	lsr	r27
    7362:	a7 95       	ror	r26
    7364:	97 95       	ror	r25
    7366:	87 95       	ror	r24
    7368:	8e 87       	std	Y+14, r24	; 0x0e
    736a:	9f 87       	std	Y+15, r25	; 0x0f
    736c:	a8 8b       	std	Y+16, r26	; 0x10
    736e:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    7370:	8a 85       	ldd	r24, Y+10	; 0x0a
    7372:	9b 85       	ldd	r25, Y+11	; 0x0b
    7374:	ac 85       	ldd	r26, Y+12	; 0x0c
    7376:	bd 85       	ldd	r27, Y+13	; 0x0d
    7378:	b6 95       	lsr	r27
    737a:	a7 95       	ror	r26
    737c:	97 95       	ror	r25
    737e:	87 95       	ror	r24
    7380:	8a 87       	std	Y+10, r24	; 0x0a
    7382:	9b 87       	std	Y+11, r25	; 0x0b
    7384:	ac 87       	std	Y+12, r26	; 0x0c
    7386:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    7388:	28 8d       	ldd	r18, Y+24	; 0x18
    738a:	39 8d       	ldd	r19, Y+25	; 0x19
    738c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    738e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    7390:	8e 85       	ldd	r24, Y+14	; 0x0e
    7392:	9f 85       	ldd	r25, Y+15	; 0x0f
    7394:	a8 89       	ldd	r26, Y+16	; 0x10
    7396:	b9 89       	ldd	r27, Y+17	; 0x11
    7398:	82 17       	cp	r24, r18
    739a:	93 07       	cpc	r25, r19
    739c:	a4 07       	cpc	r26, r20
    739e:	b5 07       	cpc	r27, r21
    73a0:	68 f0       	brcs	.+26     	; 0x73bc <usart_set_baudrate+0xe4>
    73a2:	28 8d       	ldd	r18, Y+24	; 0x18
    73a4:	39 8d       	ldd	r19, Y+25	; 0x19
    73a6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    73a8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    73aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    73ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    73ae:	ac 85       	ldd	r26, Y+12	; 0x0c
    73b0:	bd 85       	ldd	r27, Y+13	; 0x0d
    73b2:	28 17       	cp	r18, r24
    73b4:	39 07       	cpc	r19, r25
    73b6:	4a 07       	cpc	r20, r26
    73b8:	5b 07       	cpc	r21, r27
    73ba:	10 f4       	brcc	.+4      	; 0x73c0 <usart_set_baudrate+0xe8>
		return false;
    73bc:	80 e0       	ldi	r24, 0x00	; 0
    73be:	3c c1       	rjmp	.+632    	; 0x7638 <usart_set_baudrate+0x360>
	}

	/*
	 * Check if double speed is enabled.
	 */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    73c0:	8e 89       	ldd	r24, Y+22	; 0x16
    73c2:	9f 89       	ldd	r25, Y+23	; 0x17
    73c4:	fc 01       	movw	r30, r24
    73c6:	84 81       	ldd	r24, Z+4	; 0x04
    73c8:	88 2f       	mov	r24, r24
    73ca:	90 e0       	ldi	r25, 0x00	; 0
    73cc:	84 70       	andi	r24, 0x04	; 4
    73ce:	99 27       	eor	r25, r25
    73d0:	00 97       	sbiw	r24, 0x00	; 0
    73d2:	61 f4       	brne	.+24     	; 0x73ec <usart_set_baudrate+0x114>
		baud *= 2;
    73d4:	88 8d       	ldd	r24, Y+24	; 0x18
    73d6:	99 8d       	ldd	r25, Y+25	; 0x19
    73d8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    73da:	bb 8d       	ldd	r27, Y+27	; 0x1b
    73dc:	88 0f       	add	r24, r24
    73de:	99 1f       	adc	r25, r25
    73e0:	aa 1f       	adc	r26, r26
    73e2:	bb 1f       	adc	r27, r27
    73e4:	88 8f       	std	Y+24, r24	; 0x18
    73e6:	99 8f       	std	Y+25, r25	; 0x19
    73e8:	aa 8f       	std	Y+26, r26	; 0x1a
    73ea:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/*
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
    73ec:	8f ef       	ldi	r24, 0xFF	; 255
    73ee:	90 e0       	ldi	r25, 0x00	; 0
    73f0:	a0 e0       	ldi	r26, 0x00	; 0
    73f2:	b0 e0       	ldi	r27, 0x00	; 0
    73f4:	8e 83       	std	Y+6, r24	; 0x06
    73f6:	9f 83       	std	Y+7, r25	; 0x07
    73f8:	a8 87       	std	Y+8, r26	; 0x08
    73fa:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    73fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    73fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7400:	ae 8d       	ldd	r26, Y+30	; 0x1e
    7402:	bf 8d       	ldd	r27, Y+31	; 0x1f
    7404:	28 8d       	ldd	r18, Y+24	; 0x18
    7406:	39 8d       	ldd	r19, Y+25	; 0x19
    7408:	4a 8d       	ldd	r20, Y+26	; 0x1a
    740a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    740c:	bc 01       	movw	r22, r24
    740e:	cd 01       	movw	r24, r26
    7410:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
    7414:	2a 8b       	std	Y+18, r18	; 0x12
    7416:	3b 8b       	std	Y+19, r19	; 0x13
    7418:	4c 8b       	std	Y+20, r20	; 0x14
    741a:	5d 8b       	std	Y+21, r21	; 0x15

	for (exp = -7; exp < 7; exp++) {
    741c:	89 ef       	ldi	r24, 0xF9	; 249
    741e:	89 83       	std	Y+1, r24	; 0x01
    7420:	28 c0       	rjmp	.+80     	; 0x7472 <usart_set_baudrate+0x19a>
		if (ratio < limit) {
    7422:	2a 89       	ldd	r18, Y+18	; 0x12
    7424:	3b 89       	ldd	r19, Y+19	; 0x13
    7426:	4c 89       	ldd	r20, Y+20	; 0x14
    7428:	5d 89       	ldd	r21, Y+21	; 0x15
    742a:	8e 81       	ldd	r24, Y+6	; 0x06
    742c:	9f 81       	ldd	r25, Y+7	; 0x07
    742e:	a8 85       	ldd	r26, Y+8	; 0x08
    7430:	b9 85       	ldd	r27, Y+9	; 0x09
    7432:	28 17       	cp	r18, r24
    7434:	39 07       	cpc	r19, r25
    7436:	4a 07       	cpc	r20, r26
    7438:	5b 07       	cpc	r21, r27
    743a:	f8 f0       	brcs	.+62     	; 0x747a <usart_set_baudrate+0x1a2>
			break;
		}

		limit <<= 1;
    743c:	8e 81       	ldd	r24, Y+6	; 0x06
    743e:	9f 81       	ldd	r25, Y+7	; 0x07
    7440:	a8 85       	ldd	r26, Y+8	; 0x08
    7442:	b9 85       	ldd	r27, Y+9	; 0x09
    7444:	88 0f       	add	r24, r24
    7446:	99 1f       	adc	r25, r25
    7448:	aa 1f       	adc	r26, r26
    744a:	bb 1f       	adc	r27, r27
    744c:	8e 83       	std	Y+6, r24	; 0x06
    744e:	9f 83       	std	Y+7, r25	; 0x07
    7450:	a8 87       	std	Y+8, r26	; 0x08
    7452:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    7454:	89 81       	ldd	r24, Y+1	; 0x01
    7456:	8d 3f       	cpi	r24, 0xFD	; 253
    7458:	4c f4       	brge	.+18     	; 0x746c <usart_set_baudrate+0x194>
			limit |= 1;
    745a:	8e 81       	ldd	r24, Y+6	; 0x06
    745c:	9f 81       	ldd	r25, Y+7	; 0x07
    745e:	a8 85       	ldd	r26, Y+8	; 0x08
    7460:	b9 85       	ldd	r27, Y+9	; 0x09
    7462:	81 60       	ori	r24, 0x01	; 1
    7464:	8e 83       	std	Y+6, r24	; 0x06
    7466:	9f 83       	std	Y+7, r25	; 0x07
    7468:	a8 87       	std	Y+8, r26	; 0x08
    746a:	b9 87       	std	Y+9, r27	; 0x09
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    746c:	89 81       	ldd	r24, Y+1	; 0x01
    746e:	8f 5f       	subi	r24, 0xFF	; 255
    7470:	89 83       	std	Y+1, r24	; 0x01
    7472:	89 81       	ldd	r24, Y+1	; 0x01
    7474:	87 30       	cpi	r24, 0x07	; 7
    7476:	ac f2       	brlt	.-86     	; 0x7422 <usart_set_baudrate+0x14a>
    7478:	01 c0       	rjmp	.+2      	; 0x747c <usart_set_baudrate+0x1a4>
		if (ratio < limit) {
			break;
    747a:	00 00       	nop
	 * operation as it ensures that we never exceeed 2**32 at any point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    747c:	89 81       	ldd	r24, Y+1	; 0x01
    747e:	88 23       	and	r24, r24
    7480:	0c f0       	brlt	.+2      	; 0x7484 <usart_set_baudrate+0x1ac>
    7482:	88 c0       	rjmp	.+272    	; 0x7594 <usart_set_baudrate+0x2bc>
		/*
		 * We are supposed to subtract 1, then apply BSCALE. We want to apply
		 * BSCALE first, so we need to turn everything inside the parenthesis
		 * into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    7484:	88 8d       	ldd	r24, Y+24	; 0x18
    7486:	99 8d       	ldd	r25, Y+25	; 0x19
    7488:	aa 8d       	ldd	r26, Y+26	; 0x1a
    748a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    748c:	88 0f       	add	r24, r24
    748e:	99 1f       	adc	r25, r25
    7490:	aa 1f       	adc	r26, r26
    7492:	bb 1f       	adc	r27, r27
    7494:	88 0f       	add	r24, r24
    7496:	99 1f       	adc	r25, r25
    7498:	aa 1f       	adc	r26, r26
    749a:	bb 1f       	adc	r27, r27
    749c:	88 0f       	add	r24, r24
    749e:	99 1f       	adc	r25, r25
    74a0:	aa 1f       	adc	r26, r26
    74a2:	bb 1f       	adc	r27, r27
    74a4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    74a6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    74a8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    74aa:	5f 8d       	ldd	r21, Y+31	; 0x1f
    74ac:	79 01       	movw	r14, r18
    74ae:	8a 01       	movw	r16, r20
    74b0:	e8 1a       	sub	r14, r24
    74b2:	f9 0a       	sbc	r15, r25
    74b4:	0a 0b       	sbc	r16, r26
    74b6:	1b 0b       	sbc	r17, r27
    74b8:	d8 01       	movw	r26, r16
    74ba:	c7 01       	movw	r24, r14
    74bc:	8c 8f       	std	Y+28, r24	; 0x1c
    74be:	9d 8f       	std	Y+29, r25	; 0x1d
    74c0:	ae 8f       	std	Y+30, r26	; 0x1e
    74c2:	bf 8f       	std	Y+31, r27	; 0x1f
		 * If we end up with a left-shift after taking the final divide-by-8
		 * into account, do the shift before the divide. Otherwise, left-shift
		 * the denominator instead (effectively resulting in an overall right
		 * shift.)
		 */
		if (exp <= -3) {
    74c4:	89 81       	ldd	r24, Y+1	; 0x01
    74c6:	8e 3f       	cpi	r24, 0xFE	; 254
    74c8:	84 f5       	brge	.+96     	; 0x752a <usart_set_baudrate+0x252>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    74ca:	89 81       	ldd	r24, Y+1	; 0x01
    74cc:	99 27       	eor	r25, r25
    74ce:	87 fd       	sbrc	r24, 7
    74d0:	90 95       	com	r25
    74d2:	2d ef       	ldi	r18, 0xFD	; 253
    74d4:	3f ef       	ldi	r19, 0xFF	; 255
    74d6:	28 1b       	sub	r18, r24
    74d8:	39 0b       	sbc	r19, r25
    74da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    74dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    74de:	ae 8d       	ldd	r26, Y+30	; 0x1e
    74e0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    74e2:	7c 01       	movw	r14, r24
    74e4:	8d 01       	movw	r16, r26
    74e6:	04 c0       	rjmp	.+8      	; 0x74f0 <usart_set_baudrate+0x218>
    74e8:	ee 0c       	add	r14, r14
    74ea:	ff 1c       	adc	r15, r15
    74ec:	00 1f       	adc	r16, r16
    74ee:	11 1f       	adc	r17, r17
    74f0:	2a 95       	dec	r18
    74f2:	d2 f7       	brpl	.-12     	; 0x74e8 <usart_set_baudrate+0x210>
    74f4:	a8 01       	movw	r20, r16
    74f6:	97 01       	movw	r18, r14
    74f8:	88 8d       	ldd	r24, Y+24	; 0x18
    74fa:	99 8d       	ldd	r25, Y+25	; 0x19
    74fc:	aa 8d       	ldd	r26, Y+26	; 0x1a
    74fe:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7500:	b6 95       	lsr	r27
    7502:	a7 95       	ror	r26
    7504:	97 95       	ror	r25
    7506:	87 95       	ror	r24
    7508:	82 0f       	add	r24, r18
    750a:	93 1f       	adc	r25, r19
    750c:	a4 1f       	adc	r26, r20
    750e:	b5 1f       	adc	r27, r21
    7510:	28 8d       	ldd	r18, Y+24	; 0x18
    7512:	39 8d       	ldd	r19, Y+25	; 0x19
    7514:	4a 8d       	ldd	r20, Y+26	; 0x1a
    7516:	5b 8d       	ldd	r21, Y+27	; 0x1b
    7518:	bc 01       	movw	r22, r24
    751a:	cd 01       	movw	r24, r26
    751c:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
    7520:	2a 83       	std	Y+2, r18	; 0x02
    7522:	3b 83       	std	Y+3, r19	; 0x03
    7524:	4c 83       	std	Y+4, r20	; 0x04
    7526:	5d 83       	std	Y+5, r21	; 0x05
    7528:	6e c0       	rjmp	.+220    	; 0x7606 <usart_set_baudrate+0x32e>
		} else {
			baud <<= exp + 3;
    752a:	89 81       	ldd	r24, Y+1	; 0x01
    752c:	99 27       	eor	r25, r25
    752e:	87 fd       	sbrc	r24, 7
    7530:	90 95       	com	r25
    7532:	9c 01       	movw	r18, r24
    7534:	2d 5f       	subi	r18, 0xFD	; 253
    7536:	3f 4f       	sbci	r19, 0xFF	; 255
    7538:	88 8d       	ldd	r24, Y+24	; 0x18
    753a:	99 8d       	ldd	r25, Y+25	; 0x19
    753c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    753e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7540:	04 c0       	rjmp	.+8      	; 0x754a <usart_set_baudrate+0x272>
    7542:	88 0f       	add	r24, r24
    7544:	99 1f       	adc	r25, r25
    7546:	aa 1f       	adc	r26, r26
    7548:	bb 1f       	adc	r27, r27
    754a:	2a 95       	dec	r18
    754c:	d2 f7       	brpl	.-12     	; 0x7542 <usart_set_baudrate+0x26a>
    754e:	88 8f       	std	Y+24, r24	; 0x18
    7550:	99 8f       	std	Y+25, r25	; 0x19
    7552:	aa 8f       	std	Y+26, r26	; 0x1a
    7554:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    7556:	88 8d       	ldd	r24, Y+24	; 0x18
    7558:	99 8d       	ldd	r25, Y+25	; 0x19
    755a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    755c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    755e:	9c 01       	movw	r18, r24
    7560:	ad 01       	movw	r20, r26
    7562:	56 95       	lsr	r21
    7564:	47 95       	ror	r20
    7566:	37 95       	ror	r19
    7568:	27 95       	ror	r18
    756a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    756c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    756e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    7570:	bf 8d       	ldd	r27, Y+31	; 0x1f
    7572:	82 0f       	add	r24, r18
    7574:	93 1f       	adc	r25, r19
    7576:	a4 1f       	adc	r26, r20
    7578:	b5 1f       	adc	r27, r21
    757a:	28 8d       	ldd	r18, Y+24	; 0x18
    757c:	39 8d       	ldd	r19, Y+25	; 0x19
    757e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    7580:	5b 8d       	ldd	r21, Y+27	; 0x1b
    7582:	bc 01       	movw	r22, r24
    7584:	cd 01       	movw	r24, r26
    7586:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
    758a:	2a 83       	std	Y+2, r18	; 0x02
    758c:	3b 83       	std	Y+3, r19	; 0x03
    758e:	4c 83       	std	Y+4, r20	; 0x04
    7590:	5d 83       	std	Y+5, r21	; 0x05
    7592:	39 c0       	rjmp	.+114    	; 0x7606 <usart_set_baudrate+0x32e>
	} else {
		/*
		 * We will always do a right shift in this case, but we need to shift
		 * three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    7594:	89 81       	ldd	r24, Y+1	; 0x01
    7596:	99 27       	eor	r25, r25
    7598:	87 fd       	sbrc	r24, 7
    759a:	90 95       	com	r25
    759c:	9c 01       	movw	r18, r24
    759e:	2d 5f       	subi	r18, 0xFD	; 253
    75a0:	3f 4f       	sbci	r19, 0xFF	; 255
    75a2:	88 8d       	ldd	r24, Y+24	; 0x18
    75a4:	99 8d       	ldd	r25, Y+25	; 0x19
    75a6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    75a8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    75aa:	04 c0       	rjmp	.+8      	; 0x75b4 <usart_set_baudrate+0x2dc>
    75ac:	88 0f       	add	r24, r24
    75ae:	99 1f       	adc	r25, r25
    75b0:	aa 1f       	adc	r26, r26
    75b2:	bb 1f       	adc	r27, r27
    75b4:	2a 95       	dec	r18
    75b6:	d2 f7       	brpl	.-12     	; 0x75ac <usart_set_baudrate+0x2d4>
    75b8:	88 8f       	std	Y+24, r24	; 0x18
    75ba:	99 8f       	std	Y+25, r25	; 0x19
    75bc:	aa 8f       	std	Y+26, r26	; 0x1a
    75be:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    75c0:	88 8d       	ldd	r24, Y+24	; 0x18
    75c2:	99 8d       	ldd	r25, Y+25	; 0x19
    75c4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    75c6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    75c8:	9c 01       	movw	r18, r24
    75ca:	ad 01       	movw	r20, r26
    75cc:	56 95       	lsr	r21
    75ce:	47 95       	ror	r20
    75d0:	37 95       	ror	r19
    75d2:	27 95       	ror	r18
    75d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    75d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    75d8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    75da:	bf 8d       	ldd	r27, Y+31	; 0x1f
    75dc:	82 0f       	add	r24, r18
    75de:	93 1f       	adc	r25, r19
    75e0:	a4 1f       	adc	r26, r20
    75e2:	b5 1f       	adc	r27, r21
    75e4:	28 8d       	ldd	r18, Y+24	; 0x18
    75e6:	39 8d       	ldd	r19, Y+25	; 0x19
    75e8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    75ea:	5b 8d       	ldd	r21, Y+27	; 0x1b
    75ec:	bc 01       	movw	r22, r24
    75ee:	cd 01       	movw	r24, r26
    75f0:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
    75f4:	da 01       	movw	r26, r20
    75f6:	c9 01       	movw	r24, r18
    75f8:	01 97       	sbiw	r24, 0x01	; 1
    75fa:	a1 09       	sbc	r26, r1
    75fc:	b1 09       	sbc	r27, r1
    75fe:	8a 83       	std	Y+2, r24	; 0x02
    7600:	9b 83       	std	Y+3, r25	; 0x03
    7602:	ac 83       	std	Y+4, r26	; 0x04
    7604:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    7606:	8a 81       	ldd	r24, Y+2	; 0x02
    7608:	9b 81       	ldd	r25, Y+3	; 0x03
    760a:	ac 81       	ldd	r26, Y+4	; 0x04
    760c:	bd 81       	ldd	r27, Y+5	; 0x05
    760e:	89 2f       	mov	r24, r25
    7610:	9a 2f       	mov	r25, r26
    7612:	ab 2f       	mov	r26, r27
    7614:	bb 27       	eor	r27, r27
    7616:	98 2f       	mov	r25, r24
    7618:	9f 70       	andi	r25, 0x0F	; 15
    761a:	89 81       	ldd	r24, Y+1	; 0x01
    761c:	82 95       	swap	r24
    761e:	80 7f       	andi	r24, 0xF0	; 240
    7620:	29 2f       	mov	r18, r25
    7622:	28 2b       	or	r18, r24
    7624:	8e 89       	ldd	r24, Y+22	; 0x16
    7626:	9f 89       	ldd	r25, Y+23	; 0x17
    7628:	fc 01       	movw	r30, r24
    762a:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    762c:	2a 81       	ldd	r18, Y+2	; 0x02
    762e:	8e 89       	ldd	r24, Y+22	; 0x16
    7630:	9f 89       	ldd	r25, Y+23	; 0x17
    7632:	fc 01       	movw	r30, r24
    7634:	26 83       	std	Z+6, r18	; 0x06

	return true;
    7636:	81 e0       	ldi	r24, 0x01	; 1
}
    7638:	6f 96       	adiw	r28, 0x1f	; 31
    763a:	cd bf       	out	0x3d, r28	; 61
    763c:	de bf       	out	0x3e, r29	; 62
    763e:	df 91       	pop	r29
    7640:	cf 91       	pop	r28
    7642:	1f 91       	pop	r17
    7644:	0f 91       	pop	r16
    7646:	ff 90       	pop	r15
    7648:	ef 90       	pop	r14
    764a:	08 95       	ret

0000764c <wdt_wait_while_busy>:
	uint8_t temp = (WDT_WPER_gm & (win_period << WDT_WPER_gp)) |
			(WDT.WINCTRL & WDT_WEN_bm) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
	wdt_wait_while_busy();
	return true;
}
    764c:	cf 93       	push	r28
    764e:	df 93       	push	r29
    7650:	cd b7       	in	r28, 0x3d	; 61
    7652:	de b7       	in	r29, 0x3e	; 62
    7654:	00 00       	nop
    7656:	80 e8       	ldi	r24, 0x80	; 128
    7658:	90 e0       	ldi	r25, 0x00	; 0
    765a:	fc 01       	movw	r30, r24
    765c:	82 81       	ldd	r24, Z+2	; 0x02
    765e:	88 2f       	mov	r24, r24
    7660:	90 e0       	ldi	r25, 0x00	; 0
    7662:	81 70       	andi	r24, 0x01	; 1
    7664:	99 27       	eor	r25, r25
    7666:	00 97       	sbiw	r24, 0x00	; 0
    7668:	b1 f7       	brne	.-20     	; 0x7656 <wdt_wait_while_busy+0xa>
    766a:	df 91       	pop	r29
    766c:	cf 91       	pop	r28
    766e:	08 95       	ret

00007670 <wdt_set_timeout_period>:
    7670:	cf 93       	push	r28
    7672:	df 93       	push	r29
    7674:	00 d0       	rcall	.+0      	; 0x7676 <wdt_set_timeout_period+0x6>
    7676:	cd b7       	in	r28, 0x3d	; 61
    7678:	de b7       	in	r29, 0x3e	; 62
    767a:	8a 83       	std	Y+2, r24	; 0x02
    767c:	8a 81       	ldd	r24, Y+2	; 0x02
    767e:	88 2f       	mov	r24, r24
    7680:	90 e0       	ldi	r25, 0x00	; 0
    7682:	88 0f       	add	r24, r24
    7684:	99 1f       	adc	r25, r25
    7686:	88 0f       	add	r24, r24
    7688:	99 1f       	adc	r25, r25
    768a:	28 2f       	mov	r18, r24
    768c:	2c 73       	andi	r18, 0x3C	; 60
    768e:	80 e8       	ldi	r24, 0x80	; 128
    7690:	90 e0       	ldi	r25, 0x00	; 0
    7692:	fc 01       	movw	r30, r24
    7694:	80 81       	ld	r24, Z
    7696:	82 70       	andi	r24, 0x02	; 2
    7698:	82 2b       	or	r24, r18
    769a:	81 60       	ori	r24, 0x01	; 1
    769c:	89 83       	std	Y+1, r24	; 0x01
    769e:	69 81       	ldd	r22, Y+1	; 0x01
    76a0:	80 e8       	ldi	r24, 0x80	; 128
    76a2:	90 e0       	ldi	r25, 0x00	; 0
    76a4:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <ccp_write_io>
    76a8:	d1 df       	rcall	.-94     	; 0x764c <wdt_wait_while_busy>
    76aa:	0f 90       	pop	r0
    76ac:	0f 90       	pop	r0
    76ae:	df 91       	pop	r29
    76b0:	cf 91       	pop	r28
    76b2:	08 95       	ret

000076b4 <wdt_disable>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period. Disable functions
 *  operate asynchronously with immidiate effect.
 */
void wdt_disable(void)
{
    76b4:	cf 93       	push	r28
    76b6:	df 93       	push	r29
    76b8:	1f 92       	push	r1
    76ba:	cd b7       	in	r28, 0x3d	; 61
    76bc:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
    76be:	80 e8       	ldi	r24, 0x80	; 128
    76c0:	90 e0       	ldi	r25, 0x00	; 0
    76c2:	fc 01       	movw	r30, r24
    76c4:	80 81       	ld	r24, Z
    76c6:	8c 7f       	andi	r24, 0xFC	; 252
    76c8:	81 60       	ori	r24, 0x01	; 1
    76ca:	89 83       	std	Y+1, r24	; 0x01
	ccp_write_io((void *)&WDT.CTRL, temp);
    76cc:	69 81       	ldd	r22, Y+1	; 0x01
    76ce:	80 e8       	ldi	r24, 0x80	; 128
    76d0:	90 e0       	ldi	r25, 0x00	; 0
    76d2:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <ccp_write_io>
}
    76d6:	0f 90       	pop	r0
    76d8:	df 91       	pop	r29
    76da:	cf 91       	pop	r28
    76dc:	08 95       	ret

000076de <wdt_enable>:
 *  automatically ignored during the change enable period. The function will
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
    76de:	cf 93       	push	r28
    76e0:	df 93       	push	r29
    76e2:	1f 92       	push	r1
    76e4:	cd b7       	in	r28, 0x3d	; 61
    76e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
    76e8:	80 e8       	ldi	r24, 0x80	; 128
    76ea:	90 e0       	ldi	r25, 0x00	; 0
    76ec:	fc 01       	movw	r30, r24
    76ee:	80 81       	ld	r24, Z
    76f0:	8c 73       	andi	r24, 0x3C	; 60
    76f2:	83 60       	ori	r24, 0x03	; 3
    76f4:	89 83       	std	Y+1, r24	; 0x01
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
    76f6:	69 81       	ldd	r22, Y+1	; 0x01
    76f8:	80 e8       	ldi	r24, 0x80	; 128
    76fa:	90 e0       	ldi	r25, 0x00	; 0
    76fc:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <ccp_write_io>
	wdt_wait_while_busy();
    7700:	a5 df       	rcall	.-182    	; 0x764c <wdt_wait_while_busy>
}
    7702:	0f 90       	pop	r0
    7704:	df 91       	pop	r29
    7706:	cf 91       	pop	r28
    7708:	08 95       	ret

0000770a <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    770a:	cf 93       	push	r28
    770c:	df 93       	push	r29
    770e:	cd b7       	in	r28, 0x3d	; 61
    7710:	de b7       	in	r29, 0x3e	; 62

	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    7712:	80 e0       	ldi	r24, 0x00	; 0
    7714:	98 e4       	ldi	r25, 0x48	; 72
    7716:	a8 ee       	ldi	r26, 0xE8	; 232
    7718:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    771a:	bc 01       	movw	r22, r24
    771c:	cd 01       	movw	r24, r26
    771e:	df 91       	pop	r29
    7720:	cf 91       	pop	r28
    7722:	08 95       	ret

00007724 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    7724:	cf 93       	push	r28
    7726:	df 93       	push	r29
    7728:	1f 92       	push	r1
    772a:	cd b7       	in	r28, 0x3d	; 61
    772c:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    772e:	19 82       	std	Y+1, r1	; 0x01

	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    7730:	ec df       	rcall	.-40     	; 0x770a <sysclk_get_main_hz>
    7732:	dc 01       	movw	r26, r24
    7734:	cb 01       	movw	r24, r22
    7736:	29 81       	ldd	r18, Y+1	; 0x01
    7738:	22 2f       	mov	r18, r18
    773a:	30 e0       	ldi	r19, 0x00	; 0
    773c:	02 2e       	mov	r0, r18
    773e:	04 c0       	rjmp	.+8      	; 0x7748 <sysclk_get_per4_hz+0x24>
    7740:	b6 95       	lsr	r27
    7742:	a7 95       	ror	r26
    7744:	97 95       	ror	r25
    7746:	87 95       	ror	r24
    7748:	0a 94       	dec	r0
    774a:	d2 f7       	brpl	.-12     	; 0x7740 <sysclk_get_per4_hz+0x1c>
}
    774c:	bc 01       	movw	r22, r24
    774e:	cd 01       	movw	r24, r26
    7750:	0f 90       	pop	r0
    7752:	df 91       	pop	r29
    7754:	cf 91       	pop	r28
    7756:	08 95       	ret

00007758 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    7758:	cf 93       	push	r28
    775a:	df 93       	push	r29
    775c:	cd b7       	in	r28, 0x3d	; 61
    775e:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    7760:	e1 df       	rcall	.-62     	; 0x7724 <sysclk_get_per4_hz>
    7762:	dc 01       	movw	r26, r24
    7764:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    7766:	bc 01       	movw	r22, r24
    7768:	cd 01       	movw	r24, r26
    776a:	df 91       	pop	r29
    776c:	cf 91       	pop	r28
    776e:	08 95       	ret

00007770 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    7770:	cf 93       	push	r28
    7772:	df 93       	push	r29
    7774:	cd b7       	in	r28, 0x3d	; 61
    7776:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    7778:	ef df       	rcall	.-34     	; 0x7758 <sysclk_get_per2_hz>
    777a:	dc 01       	movw	r26, r24
    777c:	cb 01       	movw	r24, r22
}
    777e:	bc 01       	movw	r22, r24
    7780:	cd 01       	movw	r24, r26
    7782:	df 91       	pop	r29
    7784:	cf 91       	pop	r28
    7786:	08 95       	ret

00007788 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    7788:	cf 93       	push	r28
    778a:	df 93       	push	r29
    778c:	cd b7       	in	r28, 0x3d	; 61
    778e:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    7790:	ef df       	rcall	.-34     	; 0x7770 <sysclk_get_per_hz>
    7792:	dc 01       	movw	r26, r24
    7794:	cb 01       	movw	r24, r22
}
    7796:	bc 01       	movw	r22, r24
    7798:	cd 01       	movw	r24, r26
    779a:	df 91       	pop	r29
    779c:	cf 91       	pop	r28
    779e:	08 95       	ret

000077a0 <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    77a0:	cf 93       	push	r28
    77a2:	df 93       	push	r29
    77a4:	00 d0       	rcall	.+0      	; 0x77a6 <tc_write_clock_source+0x6>
    77a6:	1f 92       	push	r1
    77a8:	cd b7       	in	r28, 0x3d	; 61
    77aa:	de b7       	in	r29, 0x3e	; 62
    77ac:	89 83       	std	Y+1, r24	; 0x01
    77ae:	9a 83       	std	Y+2, r25	; 0x02
    77b0:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    77b2:	89 81       	ldd	r24, Y+1	; 0x01
    77b4:	9a 81       	ldd	r25, Y+2	; 0x02
    77b6:	fc 01       	movw	r30, r24
    77b8:	80 81       	ld	r24, Z
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    77ba:	98 2f       	mov	r25, r24
    77bc:	90 7f       	andi	r25, 0xF0	; 240
    77be:	8b 81       	ldd	r24, Y+3	; 0x03
    77c0:	89 2b       	or	r24, r25
    77c2:	28 2f       	mov	r18, r24
    77c4:	89 81       	ldd	r24, Y+1	; 0x01
    77c6:	9a 81       	ldd	r25, Y+2	; 0x02
    77c8:	fc 01       	movw	r30, r24
    77ca:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
    77cc:	23 96       	adiw	r28, 0x03	; 3
    77ce:	cd bf       	out	0x3d, r28	; 61
    77d0:	de bf       	out	0x3e, r29	; 62
    77d2:	df 91       	pop	r29
    77d4:	cf 91       	pop	r28
    77d6:	08 95       	ret

000077d8 <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
    77d8:	cf 93       	push	r28
    77da:	df 93       	push	r29
    77dc:	00 d0       	rcall	.+0      	; 0x77de <tc_write_period+0x6>
    77de:	00 d0       	rcall	.+0      	; 0x77e0 <tc_write_period+0x8>
    77e0:	cd b7       	in	r28, 0x3d	; 61
    77e2:	de b7       	in	r29, 0x3e	; 62
    77e4:	89 83       	std	Y+1, r24	; 0x01
    77e6:	9a 83       	std	Y+2, r25	; 0x02
    77e8:	6b 83       	std	Y+3, r22	; 0x03
    77ea:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
    77ec:	89 81       	ldd	r24, Y+1	; 0x01
    77ee:	9a 81       	ldd	r25, Y+2	; 0x02
    77f0:	2b 81       	ldd	r18, Y+3	; 0x03
    77f2:	3c 81       	ldd	r19, Y+4	; 0x04
    77f4:	fc 01       	movw	r30, r24
    77f6:	26 a3       	std	Z+38, r18	; 0x26
    77f8:	37 a3       	std	Z+39, r19	; 0x27
}
    77fa:	24 96       	adiw	r28, 0x04	; 4
    77fc:	cd bf       	out	0x3d, r28	; 61
    77fe:	de bf       	out	0x3e, r29	; 62
    7800:	df 91       	pop	r29
    7802:	cf 91       	pop	r28
    7804:	08 95       	ret

00007806 <tc_enable_cc_channels>:
 * \param tc Pointer to TC module.
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
    7806:	cf 93       	push	r28
    7808:	df 93       	push	r29
    780a:	00 d0       	rcall	.+0      	; 0x780c <tc_enable_cc_channels+0x6>
    780c:	1f 92       	push	r1
    780e:	cd b7       	in	r28, 0x3d	; 61
    7810:	de b7       	in	r29, 0x3e	; 62
    7812:	89 83       	std	Y+1, r24	; 0x01
    7814:	9a 83       	std	Y+2, r25	; 0x02
    7816:	6b 83       	std	Y+3, r22	; 0x03
	if (tc_is_tc0(void *tc)) {
    7818:	89 81       	ldd	r24, Y+1	; 0x01
    781a:	9a 81       	ldd	r25, Y+2	; 0x02
    781c:	80 74       	andi	r24, 0x40	; 64
    781e:	99 27       	eor	r25, r25
    7820:	00 97       	sbiw	r24, 0x00	; 0
    7822:	61 f4       	brne	.+24     	; 0x783c <tc_enable_cc_channels+0x36>
		((TC0_t *)tc)->CTRLB |= enablemask;
    7824:	89 81       	ldd	r24, Y+1	; 0x01
    7826:	9a 81       	ldd	r25, Y+2	; 0x02
    7828:	fc 01       	movw	r30, r24
    782a:	91 81       	ldd	r25, Z+1	; 0x01
    782c:	8b 81       	ldd	r24, Y+3	; 0x03
    782e:	29 2f       	mov	r18, r25
    7830:	28 2b       	or	r18, r24
    7832:	89 81       	ldd	r24, Y+1	; 0x01
    7834:	9a 81       	ldd	r25, Y+2	; 0x02
    7836:	fc 01       	movw	r30, r24
    7838:	21 83       	std	Z+1, r18	; 0x01
    783a:	13 c0       	rjmp	.+38     	; 0x7862 <tc_enable_cc_channels+0x5c>
	} else if (tc_is_tc1(void *tc)) {
    783c:	89 81       	ldd	r24, Y+1	; 0x01
    783e:	9a 81       	ldd	r25, Y+2	; 0x02
    7840:	80 74       	andi	r24, 0x40	; 64
    7842:	99 27       	eor	r25, r25
    7844:	00 97       	sbiw	r24, 0x00	; 0
    7846:	69 f0       	breq	.+26     	; 0x7862 <tc_enable_cc_channels+0x5c>
		((TC1_t *)tc)->CTRLB |=
    7848:	89 81       	ldd	r24, Y+1	; 0x01
    784a:	9a 81       	ldd	r25, Y+2	; 0x02
    784c:	fc 01       	movw	r30, r24
    784e:	81 81       	ldd	r24, Z+1	; 0x01
    7850:	98 2f       	mov	r25, r24
    7852:	8b 81       	ldd	r24, Y+3	; 0x03
    7854:	80 73       	andi	r24, 0x30	; 48
    7856:	89 2b       	or	r24, r25
    7858:	28 2f       	mov	r18, r24
    785a:	89 81       	ldd	r24, Y+1	; 0x01
    785c:	9a 81       	ldd	r25, Y+2	; 0x02
    785e:	fc 01       	movw	r30, r24
    7860:	21 83       	std	Z+1, r18	; 0x01
				enablemask & (TC1_CCAEN_bm | TC1_CCBEN_bm);
	}
}
    7862:	23 96       	adiw	r28, 0x03	; 3
    7864:	cd bf       	out	0x3d, r28	; 61
    7866:	de bf       	out	0x3e, r29	; 62
    7868:	df 91       	pop	r29
    786a:	cf 91       	pop	r28
    786c:	08 95       	ret

0000786e <tc_write_cc_buffer>:
 * \param channel_index CC Channel
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
    786e:	cf 93       	push	r28
    7870:	df 93       	push	r29
    7872:	cd b7       	in	r28, 0x3d	; 61
    7874:	de b7       	in	r29, 0x3e	; 62
    7876:	25 97       	sbiw	r28, 0x05	; 5
    7878:	cd bf       	out	0x3d, r28	; 61
    787a:	de bf       	out	0x3e, r29	; 62
    787c:	89 83       	std	Y+1, r24	; 0x01
    787e:	9a 83       	std	Y+2, r25	; 0x02
    7880:	6b 83       	std	Y+3, r22	; 0x03
    7882:	4c 83       	std	Y+4, r20	; 0x04
    7884:	5d 83       	std	Y+5, r21	; 0x05
	if (tc_is_tc0(void *tc)) {
    7886:	89 81       	ldd	r24, Y+1	; 0x01
    7888:	9a 81       	ldd	r25, Y+2	; 0x02
    788a:	80 74       	andi	r24, 0x40	; 64
    788c:	99 27       	eor	r25, r25
    788e:	00 97       	sbiw	r24, 0x00	; 0
    7890:	a9 f5       	brne	.+106    	; 0x78fc <tc_write_cc_buffer+0x8e>
		switch (channel_index) {
    7892:	8b 81       	ldd	r24, Y+3	; 0x03
    7894:	88 2f       	mov	r24, r24
    7896:	90 e0       	ldi	r25, 0x00	; 0
    7898:	82 30       	cpi	r24, 0x02	; 2
    789a:	91 05       	cpc	r25, r1
    789c:	b1 f0       	breq	.+44     	; 0x78ca <tc_write_cc_buffer+0x5c>
    789e:	83 30       	cpi	r24, 0x03	; 3
    78a0:	91 05       	cpc	r25, r1
    78a2:	24 f4       	brge	.+8      	; 0x78ac <tc_write_cc_buffer+0x3e>
    78a4:	81 30       	cpi	r24, 0x01	; 1
    78a6:	91 05       	cpc	r25, r1
    78a8:	41 f0       	breq	.+16     	; 0x78ba <tc_write_cc_buffer+0x4c>
    78aa:	49 c0       	rjmp	.+146    	; 0x793e <tc_write_cc_buffer+0xd0>
    78ac:	83 30       	cpi	r24, 0x03	; 3
    78ae:	91 05       	cpc	r25, r1
    78b0:	a1 f0       	breq	.+40     	; 0x78da <tc_write_cc_buffer+0x6c>
    78b2:	84 30       	cpi	r24, 0x04	; 4
    78b4:	91 05       	cpc	r25, r1
    78b6:	c9 f0       	breq	.+50     	; 0x78ea <tc_write_cc_buffer+0x7c>
    78b8:	42 c0       	rjmp	.+132    	; 0x793e <tc_write_cc_buffer+0xd0>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    78ba:	89 81       	ldd	r24, Y+1	; 0x01
    78bc:	9a 81       	ldd	r25, Y+2	; 0x02
    78be:	2c 81       	ldd	r18, Y+4	; 0x04
    78c0:	3d 81       	ldd	r19, Y+5	; 0x05
    78c2:	fc 01       	movw	r30, r24
    78c4:	20 af       	std	Z+56, r18	; 0x38
    78c6:	31 af       	std	Z+57, r19	; 0x39
			break;
    78c8:	3a c0       	rjmp	.+116    	; 0x793e <tc_write_cc_buffer+0xd0>
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    78ca:	89 81       	ldd	r24, Y+1	; 0x01
    78cc:	9a 81       	ldd	r25, Y+2	; 0x02
    78ce:	2c 81       	ldd	r18, Y+4	; 0x04
    78d0:	3d 81       	ldd	r19, Y+5	; 0x05
    78d2:	fc 01       	movw	r30, r24
    78d4:	22 af       	std	Z+58, r18	; 0x3a
    78d6:	33 af       	std	Z+59, r19	; 0x3b
			break;
    78d8:	32 c0       	rjmp	.+100    	; 0x793e <tc_write_cc_buffer+0xd0>
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    78da:	89 81       	ldd	r24, Y+1	; 0x01
    78dc:	9a 81       	ldd	r25, Y+2	; 0x02
    78de:	2c 81       	ldd	r18, Y+4	; 0x04
    78e0:	3d 81       	ldd	r19, Y+5	; 0x05
    78e2:	fc 01       	movw	r30, r24
    78e4:	24 af       	std	Z+60, r18	; 0x3c
    78e6:	35 af       	std	Z+61, r19	; 0x3d
			break;
    78e8:	2a c0       	rjmp	.+84     	; 0x793e <tc_write_cc_buffer+0xd0>
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    78ea:	89 81       	ldd	r24, Y+1	; 0x01
    78ec:	9a 81       	ldd	r25, Y+2	; 0x02
    78ee:	2c 81       	ldd	r18, Y+4	; 0x04
    78f0:	3d 81       	ldd	r19, Y+5	; 0x05
    78f2:	fc 01       	movw	r30, r24
    78f4:	26 af       	std	Z+62, r18	; 0x3e
    78f6:	37 af       	std	Z+63, r19	; 0x3f
			break;
    78f8:	00 00       	nop
    78fa:	21 c0       	rjmp	.+66     	; 0x793e <tc_write_cc_buffer+0xd0>
		}
	} else if (tc_is_tc1(void *tc)) {
    78fc:	89 81       	ldd	r24, Y+1	; 0x01
    78fe:	9a 81       	ldd	r25, Y+2	; 0x02
    7900:	80 74       	andi	r24, 0x40	; 64
    7902:	99 27       	eor	r25, r25
    7904:	00 97       	sbiw	r24, 0x00	; 0
    7906:	d9 f0       	breq	.+54     	; 0x793e <tc_write_cc_buffer+0xd0>
			switch (channel_index) {
    7908:	8b 81       	ldd	r24, Y+3	; 0x03
    790a:	88 2f       	mov	r24, r24
    790c:	90 e0       	ldi	r25, 0x00	; 0
    790e:	81 30       	cpi	r24, 0x01	; 1
    7910:	91 05       	cpc	r25, r1
    7912:	21 f0       	breq	.+8      	; 0x791c <tc_write_cc_buffer+0xae>
    7914:	82 30       	cpi	r24, 0x02	; 2
    7916:	91 05       	cpc	r25, r1
    7918:	49 f0       	breq	.+18     	; 0x792c <tc_write_cc_buffer+0xbe>
    791a:	10 c0       	rjmp	.+32     	; 0x793c <tc_write_cc_buffer+0xce>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    791c:	89 81       	ldd	r24, Y+1	; 0x01
    791e:	9a 81       	ldd	r25, Y+2	; 0x02
    7920:	2c 81       	ldd	r18, Y+4	; 0x04
    7922:	3d 81       	ldd	r19, Y+5	; 0x05
    7924:	fc 01       	movw	r30, r24
    7926:	20 af       	std	Z+56, r18	; 0x38
    7928:	31 af       	std	Z+57, r19	; 0x39
				break;
    792a:	09 c0       	rjmp	.+18     	; 0x793e <tc_write_cc_buffer+0xd0>
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    792c:	89 81       	ldd	r24, Y+1	; 0x01
    792e:	9a 81       	ldd	r25, Y+2	; 0x02
    7930:	2c 81       	ldd	r18, Y+4	; 0x04
    7932:	3d 81       	ldd	r19, Y+5	; 0x05
    7934:	fc 01       	movw	r30, r24
    7936:	22 af       	std	Z+58, r18	; 0x3a
    7938:	33 af       	std	Z+59, r19	; 0x3b
				break;
    793a:	01 c0       	rjmp	.+2      	; 0x793e <tc_write_cc_buffer+0xd0>
			default:
				return;
    793c:	00 00       	nop
			}
		}
}
    793e:	25 96       	adiw	r28, 0x05	; 5
    7940:	cd bf       	out	0x3d, r28	; 61
    7942:	de bf       	out	0x3e, r29	; 62
    7944:	df 91       	pop	r29
    7946:	cf 91       	pop	r28
    7948:	08 95       	ret

0000794a <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
    794a:	cf 93       	push	r28
    794c:	df 93       	push	r29
    794e:	00 d0       	rcall	.+0      	; 0x7950 <tc_set_wgm+0x6>
    7950:	1f 92       	push	r1
    7952:	cd b7       	in	r28, 0x3d	; 61
    7954:	de b7       	in	r29, 0x3e	; 62
    7956:	89 83       	std	Y+1, r24	; 0x01
    7958:	9a 83       	std	Y+2, r25	; 0x02
    795a:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    795c:	89 81       	ldd	r24, Y+1	; 0x01
    795e:	9a 81       	ldd	r25, Y+2	; 0x02
    7960:	fc 01       	movw	r30, r24
    7962:	81 81       	ldd	r24, Z+1	; 0x01
    7964:	98 2f       	mov	r25, r24
    7966:	98 7f       	andi	r25, 0xF8	; 248
    7968:	8b 81       	ldd	r24, Y+3	; 0x03
    796a:	89 2b       	or	r24, r25
    796c:	28 2f       	mov	r18, r24
    796e:	89 81       	ldd	r24, Y+1	; 0x01
    7970:	9a 81       	ldd	r25, Y+2	; 0x02
    7972:	fc 01       	movw	r30, r24
    7974:	21 83       	std	Z+1, r18	; 0x01
}
    7976:	23 96       	adiw	r28, 0x03	; 3
    7978:	cd bf       	out	0x3d, r28	; 61
    797a:	de bf       	out	0x3e, r29	; 62
    797c:	df 91       	pop	r29
    797e:	cf 91       	pop	r28
    7980:	08 95       	ret

00007982 <pwm_set_duty_cycle_percent>:
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
    7982:	cf 93       	push	r28
    7984:	df 93       	push	r29
    7986:	00 d0       	rcall	.+0      	; 0x7988 <pwm_set_duty_cycle_percent+0x6>
    7988:	1f 92       	push	r1
    798a:	cd b7       	in	r28, 0x3d	; 61
    798c:	de b7       	in	r29, 0x3e	; 62
    798e:	89 83       	std	Y+1, r24	; 0x01
    7990:	9a 83       	std	Y+2, r25	; 0x02
    7992:	6b 83       	std	Y+3, r22	; 0x03
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    7994:	89 81       	ldd	r24, Y+1	; 0x01
    7996:	9a 81       	ldd	r25, Y+2	; 0x02
    7998:	fc 01       	movw	r30, r24
    799a:	85 81       	ldd	r24, Z+5	; 0x05
    799c:	96 81       	ldd	r25, Z+6	; 0x06
    799e:	9c 01       	movw	r18, r24
    79a0:	40 e0       	ldi	r20, 0x00	; 0
    79a2:	50 e0       	ldi	r21, 0x00	; 0
			(uint32_t)duty_cycle_scale) / 100));
    79a4:	8b 81       	ldd	r24, Y+3	; 0x03
    79a6:	88 2f       	mov	r24, r24
    79a8:	90 e0       	ldi	r25, 0x00	; 0
    79aa:	a0 e0       	ldi	r26, 0x00	; 0
    79ac:	b0 e0       	ldi	r27, 0x00	; 0
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    79ae:	bc 01       	movw	r22, r24
    79b0:	cd 01       	movw	r24, r26
    79b2:	0e 94 da 48 	call	0x91b4	; 0x91b4 <__mulsi3>
    79b6:	dc 01       	movw	r26, r24
    79b8:	cb 01       	movw	r24, r22
			(uint32_t)duty_cycle_scale) / 100));
    79ba:	24 e6       	ldi	r18, 0x64	; 100
    79bc:	30 e0       	ldi	r19, 0x00	; 0
    79be:	40 e0       	ldi	r20, 0x00	; 0
    79c0:	50 e0       	ldi	r21, 0x00	; 0
    79c2:	bc 01       	movw	r22, r24
    79c4:	cd 01       	movw	r24, r26
    79c6:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
    79ca:	da 01       	movw	r26, r20
    79cc:	c9 01       	movw	r24, r18
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    79ce:	9c 01       	movw	r18, r24
    79d0:	89 81       	ldd	r24, Y+1	; 0x01
    79d2:	9a 81       	ldd	r25, Y+2	; 0x02
    79d4:	fc 01       	movw	r30, r24
    79d6:	62 81       	ldd	r22, Z+2	; 0x02
    79d8:	89 81       	ldd	r24, Y+1	; 0x01
    79da:	9a 81       	ldd	r25, Y+2	; 0x02
    79dc:	fc 01       	movw	r30, r24
    79de:	80 81       	ld	r24, Z
    79e0:	91 81       	ldd	r25, Z+1	; 0x01
    79e2:	a9 01       	movw	r20, r18
    79e4:	44 df       	rcall	.-376    	; 0x786e <tc_write_cc_buffer>
			(uint16_t)(((uint32_t)config->period *
			(uint32_t)duty_cycle_scale) / 100));
}
    79e6:	23 96       	adiw	r28, 0x03	; 3
    79e8:	cd bf       	out	0x3d, r28	; 61
    79ea:	de bf       	out	0x3e, r29	; 62
    79ec:	df 91       	pop	r29
    79ee:	cf 91       	pop	r28
    79f0:	08 95       	ret

000079f2 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequenzy in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    79f2:	cf 93       	push	r28
    79f4:	df 93       	push	r29
    79f6:	cd b7       	in	r28, 0x3d	; 61
    79f8:	de b7       	in	r29, 0x3e	; 62
    79fa:	2c 97       	sbiw	r28, 0x0c	; 12
    79fc:	cd bf       	out	0x3d, r28	; 61
    79fe:	de bf       	out	0x3e, r29	; 62
    7a00:	89 87       	std	Y+9, r24	; 0x09
    7a02:	9a 87       	std	Y+10, r25	; 0x0a
    7a04:	6b 87       	std	Y+11, r22	; 0x0b
    7a06:	7c 87       	std	Y+12, r23	; 0x0c
	uint32_t cpu_hz = sysclk_get_cpu_hz();
    7a08:	bf de       	rcall	.-642    	; 0x7788 <sysclk_get_cpu_hz>
    7a0a:	dc 01       	movw	r26, r24
    7a0c:	cb 01       	movw	r24, r22
    7a0e:	8b 83       	std	Y+3, r24	; 0x03
    7a10:	9c 83       	std	Y+4, r25	; 0x04
    7a12:	ad 83       	std	Y+5, r26	; 0x05
    7a14:	be 83       	std	Y+6, r27	; 0x06
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest dividor for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    7a16:	8b 85       	ldd	r24, Y+11	; 0x0b
    7a18:	9c 85       	ldd	r25, Y+12	; 0x0c
    7a1a:	9c 01       	movw	r18, r24
    7a1c:	40 e0       	ldi	r20, 0x00	; 0
    7a1e:	50 e0       	ldi	r21, 0x00	; 0
    7a20:	8b 81       	ldd	r24, Y+3	; 0x03
    7a22:	9c 81       	ldd	r25, Y+4	; 0x04
    7a24:	ad 81       	ldd	r26, Y+5	; 0x05
    7a26:	be 81       	ldd	r27, Y+6	; 0x06
    7a28:	bc 01       	movw	r22, r24
    7a2a:	cd 01       	movw	r24, r26
    7a2c:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
    7a30:	da 01       	movw	r26, r20
    7a32:	c9 01       	movw	r24, r18
    7a34:	2f ef       	ldi	r18, 0xFF	; 255
    7a36:	3f ef       	ldi	r19, 0xFF	; 255
    7a38:	40 e0       	ldi	r20, 0x00	; 0
    7a3a:	50 e0       	ldi	r21, 0x00	; 0
    7a3c:	bc 01       	movw	r22, r24
    7a3e:	cd 01       	movw	r24, r26
    7a40:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
    7a44:	da 01       	movw	r26, r20
    7a46:	c9 01       	movw	r24, r18
    7a48:	8f 83       	std	Y+7, r24	; 0x07
    7a4a:	98 87       	std	Y+8, r25	; 0x08
	if (smallest_div < 1) {
    7a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    7a4e:	98 85       	ldd	r25, Y+8	; 0x08
    7a50:	00 97       	sbiw	r24, 0x00	; 0
    7a52:	51 f4       	brne	.+20     	; 0x7a68 <pwm_set_frequency+0x76>
		dividor = 1;
    7a54:	81 e0       	ldi	r24, 0x01	; 1
    7a56:	90 e0       	ldi	r25, 0x00	; 0
    7a58:	89 83       	std	Y+1, r24	; 0x01
    7a5a:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1;
    7a5c:	89 85       	ldd	r24, Y+9	; 0x09
    7a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a60:	21 e0       	ldi	r18, 0x01	; 1
    7a62:	fc 01       	movw	r30, r24
    7a64:	24 83       	std	Z+4, r18	; 0x04
    7a66:	55 c0       	rjmp	.+170    	; 0x7b12 <pwm_set_frequency+0x120>
	} else if (smallest_div < 2) {
    7a68:	8f 81       	ldd	r24, Y+7	; 0x07
    7a6a:	98 85       	ldd	r25, Y+8	; 0x08
    7a6c:	82 30       	cpi	r24, 0x02	; 2
    7a6e:	91 05       	cpc	r25, r1
    7a70:	50 f4       	brcc	.+20     	; 0x7a86 <pwm_set_frequency+0x94>
		dividor = 2;
    7a72:	82 e0       	ldi	r24, 0x02	; 2
    7a74:	90 e0       	ldi	r25, 0x00	; 0
    7a76:	89 83       	std	Y+1, r24	; 0x01
    7a78:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV2;
    7a7a:	89 85       	ldd	r24, Y+9	; 0x09
    7a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a7e:	22 e0       	ldi	r18, 0x02	; 2
    7a80:	fc 01       	movw	r30, r24
    7a82:	24 83       	std	Z+4, r18	; 0x04
    7a84:	46 c0       	rjmp	.+140    	; 0x7b12 <pwm_set_frequency+0x120>
	} else if (smallest_div < 4) {
    7a86:	8f 81       	ldd	r24, Y+7	; 0x07
    7a88:	98 85       	ldd	r25, Y+8	; 0x08
    7a8a:	84 30       	cpi	r24, 0x04	; 4
    7a8c:	91 05       	cpc	r25, r1
    7a8e:	50 f4       	brcc	.+20     	; 0x7aa4 <pwm_set_frequency+0xb2>
		dividor = 4;
    7a90:	84 e0       	ldi	r24, 0x04	; 4
    7a92:	90 e0       	ldi	r25, 0x00	; 0
    7a94:	89 83       	std	Y+1, r24	; 0x01
    7a96:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV4;
    7a98:	89 85       	ldd	r24, Y+9	; 0x09
    7a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    7a9c:	23 e0       	ldi	r18, 0x03	; 3
    7a9e:	fc 01       	movw	r30, r24
    7aa0:	24 83       	std	Z+4, r18	; 0x04
    7aa2:	37 c0       	rjmp	.+110    	; 0x7b12 <pwm_set_frequency+0x120>
	} else if (smallest_div < 8) {
    7aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    7aa6:	98 85       	ldd	r25, Y+8	; 0x08
    7aa8:	88 30       	cpi	r24, 0x08	; 8
    7aaa:	91 05       	cpc	r25, r1
    7aac:	50 f4       	brcc	.+20     	; 0x7ac2 <pwm_set_frequency+0xd0>
		dividor = 8;
    7aae:	88 e0       	ldi	r24, 0x08	; 8
    7ab0:	90 e0       	ldi	r25, 0x00	; 0
    7ab2:	89 83       	std	Y+1, r24	; 0x01
    7ab4:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV8;
    7ab6:	89 85       	ldd	r24, Y+9	; 0x09
    7ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    7aba:	24 e0       	ldi	r18, 0x04	; 4
    7abc:	fc 01       	movw	r30, r24
    7abe:	24 83       	std	Z+4, r18	; 0x04
    7ac0:	28 c0       	rjmp	.+80     	; 0x7b12 <pwm_set_frequency+0x120>
	} else if (smallest_div < 64) {
    7ac2:	8f 81       	ldd	r24, Y+7	; 0x07
    7ac4:	98 85       	ldd	r25, Y+8	; 0x08
    7ac6:	80 34       	cpi	r24, 0x40	; 64
    7ac8:	91 05       	cpc	r25, r1
    7aca:	50 f4       	brcc	.+20     	; 0x7ae0 <pwm_set_frequency+0xee>
		dividor = 64;
    7acc:	80 e4       	ldi	r24, 0x40	; 64
    7ace:	90 e0       	ldi	r25, 0x00	; 0
    7ad0:	89 83       	std	Y+1, r24	; 0x01
    7ad2:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV64;
    7ad4:	89 85       	ldd	r24, Y+9	; 0x09
    7ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    7ad8:	25 e0       	ldi	r18, 0x05	; 5
    7ada:	fc 01       	movw	r30, r24
    7adc:	24 83       	std	Z+4, r18	; 0x04
    7ade:	19 c0       	rjmp	.+50     	; 0x7b12 <pwm_set_frequency+0x120>
	} else if (smallest_div < 256) {
    7ae0:	8f 81       	ldd	r24, Y+7	; 0x07
    7ae2:	98 85       	ldd	r25, Y+8	; 0x08
    7ae4:	8f 3f       	cpi	r24, 0xFF	; 255
    7ae6:	91 05       	cpc	r25, r1
    7ae8:	09 f0       	breq	.+2      	; 0x7aec <pwm_set_frequency+0xfa>
    7aea:	50 f4       	brcc	.+20     	; 0x7b00 <pwm_set_frequency+0x10e>
		dividor = 256;
    7aec:	80 e0       	ldi	r24, 0x00	; 0
    7aee:	91 e0       	ldi	r25, 0x01	; 1
    7af0:	89 83       	std	Y+1, r24	; 0x01
    7af2:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV256;
    7af4:	89 85       	ldd	r24, Y+9	; 0x09
    7af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    7af8:	26 e0       	ldi	r18, 0x06	; 6
    7afa:	fc 01       	movw	r30, r24
    7afc:	24 83       	std	Z+4, r18	; 0x04
    7afe:	09 c0       	rjmp	.+18     	; 0x7b12 <pwm_set_frequency+0x120>
	} else {
		dividor = 1024;
    7b00:	80 e0       	ldi	r24, 0x00	; 0
    7b02:	94 e0       	ldi	r25, 0x04	; 4
    7b04:	89 83       	std	Y+1, r24	; 0x01
    7b06:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1024;
    7b08:	89 85       	ldd	r24, Y+9	; 0x09
    7b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    7b0c:	27 e0       	ldi	r18, 0x07	; 7
    7b0e:	fc 01       	movw	r30, r24
    7b10:	24 83       	std	Z+4, r18	; 0x04
	}

	/* Calculate the period from the just found dividor */
	config->period = cpu_hz / dividor / freq_hz;
    7b12:	89 81       	ldd	r24, Y+1	; 0x01
    7b14:	9a 81       	ldd	r25, Y+2	; 0x02
    7b16:	9c 01       	movw	r18, r24
    7b18:	40 e0       	ldi	r20, 0x00	; 0
    7b1a:	50 e0       	ldi	r21, 0x00	; 0
    7b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    7b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    7b20:	ad 81       	ldd	r26, Y+5	; 0x05
    7b22:	be 81       	ldd	r27, Y+6	; 0x06
    7b24:	bc 01       	movw	r22, r24
    7b26:	cd 01       	movw	r24, r26
    7b28:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
    7b2c:	da 01       	movw	r26, r20
    7b2e:	c9 01       	movw	r24, r18
    7b30:	2b 85       	ldd	r18, Y+11	; 0x0b
    7b32:	3c 85       	ldd	r19, Y+12	; 0x0c
    7b34:	99 01       	movw	r18, r18
    7b36:	40 e0       	ldi	r20, 0x00	; 0
    7b38:	50 e0       	ldi	r21, 0x00	; 0
    7b3a:	bc 01       	movw	r22, r24
    7b3c:	cd 01       	movw	r24, r26
    7b3e:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__udivmodsi4>
    7b42:	da 01       	movw	r26, r20
    7b44:	c9 01       	movw	r24, r18
    7b46:	9c 01       	movw	r18, r24
    7b48:	89 85       	ldd	r24, Y+9	; 0x09
    7b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    7b4c:	fc 01       	movw	r30, r24
    7b4e:	25 83       	std	Z+5, r18	; 0x05
    7b50:	36 83       	std	Z+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    7b52:	89 85       	ldd	r24, Y+9	; 0x09
    7b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    7b56:	fc 01       	movw	r30, r24
    7b58:	85 81       	ldd	r24, Z+5	; 0x05
    7b5a:	96 81       	ldd	r25, Z+6	; 0x06
    7b5c:	84 36       	cpi	r24, 0x64	; 100
    7b5e:	91 05       	cpc	r25, r1
    7b60:	48 f4       	brcc	.+18     	; 0x7b74 <pwm_set_frequency+0x182>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    7b62:	89 85       	ldd	r24, Y+9	; 0x09
    7b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    7b66:	fc 01       	movw	r30, r24
    7b68:	14 82       	std	Z+4, r1	; 0x04
		config->period = 0;
    7b6a:	89 85       	ldd	r24, Y+9	; 0x09
    7b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    7b6e:	fc 01       	movw	r30, r24
    7b70:	15 82       	std	Z+5, r1	; 0x05
    7b72:	16 82       	std	Z+6, r1	; 0x06
		Assert(false);
	}
}
    7b74:	2c 96       	adiw	r28, 0x0c	; 12
    7b76:	cd bf       	out	0x3d, r28	; 61
    7b78:	de bf       	out	0x3e, r29	; 62
    7b7a:	df 91       	pop	r29
    7b7c:	cf 91       	pop	r28
    7b7e:	08 95       	ret

00007b80 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    7b80:	cf 93       	push	r28
    7b82:	df 93       	push	r29
    7b84:	cd b7       	in	r28, 0x3d	; 61
    7b86:	de b7       	in	r29, 0x3e	; 62
    7b88:	27 97       	sbiw	r28, 0x07	; 7
    7b8a:	cd bf       	out	0x3d, r28	; 61
    7b8c:	de bf       	out	0x3e, r29	; 62
    7b8e:	8a 83       	std	Y+2, r24	; 0x02
    7b90:	9b 83       	std	Y+3, r25	; 0x03
    7b92:	6c 83       	std	Y+4, r22	; 0x04
    7b94:	4d 83       	std	Y+5, r20	; 0x05
    7b96:	2e 83       	std	Y+6, r18	; 0x06
    7b98:	3f 83       	std	Y+7, r19	; 0x07
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
    7b9a:	19 82       	std	Y+1, r1	; 0x01

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    7b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    7b9e:	88 2f       	mov	r24, r24
    7ba0:	90 e0       	ldi	r25, 0x00	; 0
    7ba2:	82 30       	cpi	r24, 0x02	; 2
    7ba4:	91 05       	cpc	r25, r1
    7ba6:	09 f4       	brne	.+2      	; 0x7baa <pwm_init+0x2a>
    7ba8:	56 c0       	rjmp	.+172    	; 0x7c56 <pwm_init+0xd6>
    7baa:	83 30       	cpi	r24, 0x03	; 3
    7bac:	91 05       	cpc	r25, r1
    7bae:	34 f4       	brge	.+12     	; 0x7bbc <pwm_init+0x3c>
    7bb0:	00 97       	sbiw	r24, 0x00	; 0
    7bb2:	69 f0       	breq	.+26     	; 0x7bce <pwm_init+0x4e>
    7bb4:	81 30       	cpi	r24, 0x01	; 1
    7bb6:	91 05       	cpc	r25, r1
    7bb8:	61 f1       	breq	.+88     	; 0x7c12 <pwm_init+0x92>
    7bba:	b3 c0       	rjmp	.+358    	; 0x7d22 <pwm_init+0x1a2>
    7bbc:	84 30       	cpi	r24, 0x04	; 4
    7bbe:	91 05       	cpc	r25, r1
    7bc0:	09 f4       	brne	.+2      	; 0x7bc4 <pwm_init+0x44>
    7bc2:	6b c0       	rjmp	.+214    	; 0x7c9a <pwm_init+0x11a>
    7bc4:	86 30       	cpi	r24, 0x06	; 6
    7bc6:	91 05       	cpc	r25, r1
    7bc8:	09 f4       	brne	.+2      	; 0x7bcc <pwm_init+0x4c>
    7bca:	89 c0       	rjmp	.+274    	; 0x7cde <pwm_init+0x15e>
    7bcc:	aa c0       	rjmp	.+340    	; 0x7d22 <pwm_init+0x1a2>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    7bce:	8a 81       	ldd	r24, Y+2	; 0x02
    7bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    7bd2:	20 e0       	ldi	r18, 0x00	; 0
    7bd4:	38 e0       	ldi	r19, 0x08	; 8
    7bd6:	fc 01       	movw	r30, r24
    7bd8:	20 83       	st	Z, r18
    7bda:	31 83       	std	Z+1, r19	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    7bdc:	80 e4       	ldi	r24, 0x40	; 64
    7bde:	96 e0       	ldi	r25, 0x06	; 6
    7be0:	20 e4       	ldi	r18, 0x40	; 64
    7be2:	36 e0       	ldi	r19, 0x06	; 6
    7be4:	f9 01       	movw	r30, r18
    7be6:	20 81       	ld	r18, Z
    7be8:	62 2f       	mov	r22, r18
    7bea:	2d 81       	ldd	r18, Y+5	; 0x05
    7bec:	22 2f       	mov	r18, r18
    7bee:	30 e0       	ldi	r19, 0x00	; 0
    7bf0:	a9 01       	movw	r20, r18
    7bf2:	41 50       	subi	r20, 0x01	; 1
    7bf4:	51 09       	sbc	r21, r1
    7bf6:	21 e0       	ldi	r18, 0x01	; 1
    7bf8:	30 e0       	ldi	r19, 0x00	; 0
    7bfa:	04 2e       	mov	r0, r20
    7bfc:	02 c0       	rjmp	.+4      	; 0x7c02 <pwm_init+0x82>
    7bfe:	22 0f       	add	r18, r18
    7c00:	33 1f       	adc	r19, r19
    7c02:	0a 94       	dec	r0
    7c04:	e2 f7       	brpl	.-8      	; 0x7bfe <pwm_init+0x7e>
    7c06:	26 2b       	or	r18, r22
    7c08:	fc 01       	movw	r30, r24
    7c0a:	20 83       	st	Z, r18
		num_chan = 4;
    7c0c:	84 e0       	ldi	r24, 0x04	; 4
    7c0e:	89 83       	std	Y+1, r24	; 0x01
		break;
    7c10:	89 c0       	rjmp	.+274    	; 0x7d24 <pwm_init+0x1a4>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    7c12:	8a 81       	ldd	r24, Y+2	; 0x02
    7c14:	9b 81       	ldd	r25, Y+3	; 0x03
    7c16:	20 e4       	ldi	r18, 0x40	; 64
    7c18:	38 e0       	ldi	r19, 0x08	; 8
    7c1a:	fc 01       	movw	r30, r24
    7c1c:	20 83       	st	Z, r18
    7c1e:	31 83       	std	Z+1, r19	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    7c20:	80 e4       	ldi	r24, 0x40	; 64
    7c22:	96 e0       	ldi	r25, 0x06	; 6
    7c24:	20 e4       	ldi	r18, 0x40	; 64
    7c26:	36 e0       	ldi	r19, 0x06	; 6
    7c28:	f9 01       	movw	r30, r18
    7c2a:	20 81       	ld	r18, Z
    7c2c:	62 2f       	mov	r22, r18
    7c2e:	2d 81       	ldd	r18, Y+5	; 0x05
    7c30:	22 2f       	mov	r18, r18
    7c32:	30 e0       	ldi	r19, 0x00	; 0
    7c34:	a9 01       	movw	r20, r18
    7c36:	4d 5f       	subi	r20, 0xFD	; 253
    7c38:	5f 4f       	sbci	r21, 0xFF	; 255
    7c3a:	21 e0       	ldi	r18, 0x01	; 1
    7c3c:	30 e0       	ldi	r19, 0x00	; 0
    7c3e:	04 2e       	mov	r0, r20
    7c40:	02 c0       	rjmp	.+4      	; 0x7c46 <pwm_init+0xc6>
    7c42:	22 0f       	add	r18, r18
    7c44:	33 1f       	adc	r19, r19
    7c46:	0a 94       	dec	r0
    7c48:	e2 f7       	brpl	.-8      	; 0x7c42 <pwm_init+0xc2>
    7c4a:	26 2b       	or	r18, r22
    7c4c:	fc 01       	movw	r30, r24
    7c4e:	20 83       	st	Z, r18
		num_chan = 2;
    7c50:	82 e0       	ldi	r24, 0x02	; 2
    7c52:	89 83       	std	Y+1, r24	; 0x01
		break;
    7c54:	67 c0       	rjmp	.+206    	; 0x7d24 <pwm_init+0x1a4>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    7c56:	8a 81       	ldd	r24, Y+2	; 0x02
    7c58:	9b 81       	ldd	r25, Y+3	; 0x03
    7c5a:	20 e0       	ldi	r18, 0x00	; 0
    7c5c:	39 e0       	ldi	r19, 0x09	; 9
    7c5e:	fc 01       	movw	r30, r24
    7c60:	20 83       	st	Z, r18
    7c62:	31 83       	std	Z+1, r19	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    7c64:	80 e6       	ldi	r24, 0x60	; 96
    7c66:	96 e0       	ldi	r25, 0x06	; 6
    7c68:	20 e6       	ldi	r18, 0x60	; 96
    7c6a:	36 e0       	ldi	r19, 0x06	; 6
    7c6c:	f9 01       	movw	r30, r18
    7c6e:	20 81       	ld	r18, Z
    7c70:	62 2f       	mov	r22, r18
    7c72:	2d 81       	ldd	r18, Y+5	; 0x05
    7c74:	22 2f       	mov	r18, r18
    7c76:	30 e0       	ldi	r19, 0x00	; 0
    7c78:	a9 01       	movw	r20, r18
    7c7a:	41 50       	subi	r20, 0x01	; 1
    7c7c:	51 09       	sbc	r21, r1
    7c7e:	21 e0       	ldi	r18, 0x01	; 1
    7c80:	30 e0       	ldi	r19, 0x00	; 0
    7c82:	04 2e       	mov	r0, r20
    7c84:	02 c0       	rjmp	.+4      	; 0x7c8a <pwm_init+0x10a>
    7c86:	22 0f       	add	r18, r18
    7c88:	33 1f       	adc	r19, r19
    7c8a:	0a 94       	dec	r0
    7c8c:	e2 f7       	brpl	.-8      	; 0x7c86 <pwm_init+0x106>
    7c8e:	26 2b       	or	r18, r22
    7c90:	fc 01       	movw	r30, r24
    7c92:	20 83       	st	Z, r18
		num_chan = 4;
    7c94:	84 e0       	ldi	r24, 0x04	; 4
    7c96:	89 83       	std	Y+1, r24	; 0x01
		break;
    7c98:	45 c0       	rjmp	.+138    	; 0x7d24 <pwm_init+0x1a4>
		break;
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    7c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    7c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    7c9e:	20 e0       	ldi	r18, 0x00	; 0
    7ca0:	3a e0       	ldi	r19, 0x0A	; 10
    7ca2:	fc 01       	movw	r30, r24
    7ca4:	20 83       	st	Z, r18
    7ca6:	31 83       	std	Z+1, r19	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    7ca8:	80 e8       	ldi	r24, 0x80	; 128
    7caa:	96 e0       	ldi	r25, 0x06	; 6
    7cac:	20 e8       	ldi	r18, 0x80	; 128
    7cae:	36 e0       	ldi	r19, 0x06	; 6
    7cb0:	f9 01       	movw	r30, r18
    7cb2:	20 81       	ld	r18, Z
    7cb4:	62 2f       	mov	r22, r18
    7cb6:	2d 81       	ldd	r18, Y+5	; 0x05
    7cb8:	22 2f       	mov	r18, r18
    7cba:	30 e0       	ldi	r19, 0x00	; 0
    7cbc:	a9 01       	movw	r20, r18
    7cbe:	41 50       	subi	r20, 0x01	; 1
    7cc0:	51 09       	sbc	r21, r1
    7cc2:	21 e0       	ldi	r18, 0x01	; 1
    7cc4:	30 e0       	ldi	r19, 0x00	; 0
    7cc6:	04 2e       	mov	r0, r20
    7cc8:	02 c0       	rjmp	.+4      	; 0x7cce <pwm_init+0x14e>
    7cca:	22 0f       	add	r18, r18
    7ccc:	33 1f       	adc	r19, r19
    7cce:	0a 94       	dec	r0
    7cd0:	e2 f7       	brpl	.-8      	; 0x7cca <pwm_init+0x14a>
    7cd2:	26 2b       	or	r18, r22
    7cd4:	fc 01       	movw	r30, r24
    7cd6:	20 83       	st	Z, r18
		num_chan = 4;
    7cd8:	84 e0       	ldi	r24, 0x04	; 4
    7cda:	89 83       	std	Y+1, r24	; 0x01
		break;
    7cdc:	23 c0       	rjmp	.+70     	; 0x7d24 <pwm_init+0x1a4>
		break;
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    7cde:	8a 81       	ldd	r24, Y+2	; 0x02
    7ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    7ce2:	20 e0       	ldi	r18, 0x00	; 0
    7ce4:	3b e0       	ldi	r19, 0x0B	; 11
    7ce6:	fc 01       	movw	r30, r24
    7ce8:	20 83       	st	Z, r18
    7cea:	31 83       	std	Z+1, r19	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    7cec:	80 ea       	ldi	r24, 0xA0	; 160
    7cee:	96 e0       	ldi	r25, 0x06	; 6
    7cf0:	20 ea       	ldi	r18, 0xA0	; 160
    7cf2:	36 e0       	ldi	r19, 0x06	; 6
    7cf4:	f9 01       	movw	r30, r18
    7cf6:	20 81       	ld	r18, Z
    7cf8:	62 2f       	mov	r22, r18
    7cfa:	2d 81       	ldd	r18, Y+5	; 0x05
    7cfc:	22 2f       	mov	r18, r18
    7cfe:	30 e0       	ldi	r19, 0x00	; 0
    7d00:	a9 01       	movw	r20, r18
    7d02:	41 50       	subi	r20, 0x01	; 1
    7d04:	51 09       	sbc	r21, r1
    7d06:	21 e0       	ldi	r18, 0x01	; 1
    7d08:	30 e0       	ldi	r19, 0x00	; 0
    7d0a:	04 2e       	mov	r0, r20
    7d0c:	02 c0       	rjmp	.+4      	; 0x7d12 <pwm_init+0x192>
    7d0e:	22 0f       	add	r18, r18
    7d10:	33 1f       	adc	r19, r19
    7d12:	0a 94       	dec	r0
    7d14:	e2 f7       	brpl	.-8      	; 0x7d0e <pwm_init+0x18e>
    7d16:	26 2b       	or	r18, r22
    7d18:	fc 01       	movw	r30, r24
    7d1a:	20 83       	st	Z, r18
		num_chan = 4;
    7d1c:	84 e0       	ldi	r24, 0x04	; 4
    7d1e:	89 83       	std	Y+1, r24	; 0x01
		break;
    7d20:	01 c0       	rjmp	.+2      	; 0x7d24 <pwm_init+0x1a4>
		num_chan = 2;
		break;
#endif
	default:
		Assert(false);
		break;
    7d22:	00 00       	nop
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    7d24:	8a 81       	ldd	r24, Y+2	; 0x02
    7d26:	9b 81       	ldd	r25, Y+3	; 0x03
    7d28:	2d 81       	ldd	r18, Y+5	; 0x05
    7d2a:	fc 01       	movw	r30, r24
    7d2c:	22 83       	std	Z+2, r18	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    7d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    7d30:	88 2f       	mov	r24, r24
    7d32:	90 e0       	ldi	r25, 0x00	; 0
    7d34:	82 30       	cpi	r24, 0x02	; 2
    7d36:	91 05       	cpc	r25, r1
    7d38:	a1 f0       	breq	.+40     	; 0x7d62 <pwm_init+0x1e2>
    7d3a:	83 30       	cpi	r24, 0x03	; 3
    7d3c:	91 05       	cpc	r25, r1
    7d3e:	24 f4       	brge	.+8      	; 0x7d48 <pwm_init+0x1c8>
    7d40:	81 30       	cpi	r24, 0x01	; 1
    7d42:	91 05       	cpc	r25, r1
    7d44:	41 f0       	breq	.+16     	; 0x7d56 <pwm_init+0x1d6>
    7d46:	1f c0       	rjmp	.+62     	; 0x7d86 <pwm_init+0x206>
    7d48:	83 30       	cpi	r24, 0x03	; 3
    7d4a:	91 05       	cpc	r25, r1
    7d4c:	81 f0       	breq	.+32     	; 0x7d6e <pwm_init+0x1ee>
    7d4e:	84 30       	cpi	r24, 0x04	; 4
    7d50:	91 05       	cpc	r25, r1
    7d52:	99 f0       	breq	.+38     	; 0x7d7a <pwm_init+0x1fa>
    7d54:	18 c0       	rjmp	.+48     	; 0x7d86 <pwm_init+0x206>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    7d56:	8a 81       	ldd	r24, Y+2	; 0x02
    7d58:	9b 81       	ldd	r25, Y+3	; 0x03
    7d5a:	20 e1       	ldi	r18, 0x10	; 16
    7d5c:	fc 01       	movw	r30, r24
    7d5e:	23 83       	std	Z+3, r18	; 0x03
		break;
    7d60:	13 c0       	rjmp	.+38     	; 0x7d88 <pwm_init+0x208>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    7d62:	8a 81       	ldd	r24, Y+2	; 0x02
    7d64:	9b 81       	ldd	r25, Y+3	; 0x03
    7d66:	20 e2       	ldi	r18, 0x20	; 32
    7d68:	fc 01       	movw	r30, r24
    7d6a:	23 83       	std	Z+3, r18	; 0x03
		break;
    7d6c:	0d c0       	rjmp	.+26     	; 0x7d88 <pwm_init+0x208>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    7d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    7d70:	9b 81       	ldd	r25, Y+3	; 0x03
    7d72:	20 e4       	ldi	r18, 0x40	; 64
    7d74:	fc 01       	movw	r30, r24
    7d76:	23 83       	std	Z+3, r18	; 0x03
		break;
    7d78:	07 c0       	rjmp	.+14     	; 0x7d88 <pwm_init+0x208>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    7d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    7d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    7d7e:	20 e8       	ldi	r18, 0x80	; 128
    7d80:	fc 01       	movw	r30, r24
    7d82:	23 83       	std	Z+3, r18	; 0x03
		break;
    7d84:	01 c0       	rjmp	.+2      	; 0x7d88 <pwm_init+0x208>
	default:
		Assert(false);
		break;
    7d86:	00 00       	nop
	}

	/* Enable peripherial clock for this TC */
	tc_enable(config->tc);
    7d88:	8a 81       	ldd	r24, Y+2	; 0x02
    7d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    7d8c:	fc 01       	movw	r30, r24
    7d8e:	80 81       	ld	r24, Z
    7d90:	91 81       	ldd	r25, Z+1	; 0x01
    7d92:	3d d8       	rcall	.-3974   	; 0x6e0e <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    7d94:	8a 81       	ldd	r24, Y+2	; 0x02
    7d96:	9b 81       	ldd	r25, Y+3	; 0x03
    7d98:	fc 01       	movw	r30, r24
    7d9a:	80 81       	ld	r24, Z
    7d9c:	91 81       	ldd	r25, Z+1	; 0x01
    7d9e:	63 e0       	ldi	r22, 0x03	; 3
    7da0:	d4 dd       	rcall	.-1112   	; 0x794a <tc_set_wgm>

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    7da2:	8a 81       	ldd	r24, Y+2	; 0x02
    7da4:	9b 81       	ldd	r25, Y+3	; 0x03
    7da6:	fc 01       	movw	r30, r24
    7da8:	15 82       	std	Z+5, r1	; 0x05
    7daa:	16 82       	std	Z+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    7dac:	8a 81       	ldd	r24, Y+2	; 0x02
    7dae:	9b 81       	ldd	r25, Y+3	; 0x03
    7db0:	fc 01       	movw	r30, r24
    7db2:	14 82       	std	Z+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    7db4:	8a 81       	ldd	r24, Y+2	; 0x02
    7db6:	9b 81       	ldd	r25, Y+3	; 0x03
    7db8:	fc 01       	movw	r30, r24
    7dba:	80 81       	ld	r24, Z
    7dbc:	91 81       	ldd	r25, Z+1	; 0x01
    7dbe:	60 e0       	ldi	r22, 0x00	; 0
    7dc0:	ef dc       	rcall	.-1570   	; 0x77a0 <tc_write_clock_source>

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    7dc2:	2e 81       	ldd	r18, Y+6	; 0x06
    7dc4:	3f 81       	ldd	r19, Y+7	; 0x07
    7dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    7dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    7dca:	b9 01       	movw	r22, r18
    7dcc:	12 de       	rcall	.-988    	; 0x79f2 <pwm_set_frequency>
}
    7dce:	27 96       	adiw	r28, 0x07	; 7
    7dd0:	cd bf       	out	0x3d, r28	; 61
    7dd2:	de bf       	out	0x3e, r29	; 62
    7dd4:	df 91       	pop	r29
    7dd6:	cf 91       	pop	r28
    7dd8:	08 95       	ret

00007dda <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    7dda:	cf 93       	push	r28
    7ddc:	df 93       	push	r29
    7dde:	00 d0       	rcall	.+0      	; 0x7de0 <pwm_start+0x6>
    7de0:	1f 92       	push	r1
    7de2:	cd b7       	in	r28, 0x3d	; 61
    7de4:	de b7       	in	r29, 0x3e	; 62
    7de6:	89 83       	std	Y+1, r24	; 0x01
    7de8:	9a 83       	std	Y+2, r25	; 0x02
    7dea:	6b 83       	std	Y+3, r22	; 0x03
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
    7dec:	89 81       	ldd	r24, Y+1	; 0x01
    7dee:	9a 81       	ldd	r25, Y+2	; 0x02
    7df0:	6b 81       	ldd	r22, Y+3	; 0x03
    7df2:	c7 dd       	rcall	.-1138   	; 0x7982 <pwm_set_duty_cycle_percent>
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    7df4:	89 81       	ldd	r24, Y+1	; 0x01
    7df6:	9a 81       	ldd	r25, Y+2	; 0x02
    7df8:	fc 01       	movw	r30, r24
    7dfa:	25 81       	ldd	r18, Z+5	; 0x05
    7dfc:	36 81       	ldd	r19, Z+6	; 0x06
    7dfe:	89 81       	ldd	r24, Y+1	; 0x01
    7e00:	9a 81       	ldd	r25, Y+2	; 0x02
    7e02:	fc 01       	movw	r30, r24
    7e04:	80 81       	ld	r24, Z
    7e06:	91 81       	ldd	r25, Z+1	; 0x01
    7e08:	b9 01       	movw	r22, r18
    7e0a:	e6 dc       	rcall	.-1588   	; 0x77d8 <tc_write_period>
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    7e0c:	89 81       	ldd	r24, Y+1	; 0x01
    7e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    7e10:	fc 01       	movw	r30, r24
    7e12:	23 81       	ldd	r18, Z+3	; 0x03
    7e14:	89 81       	ldd	r24, Y+1	; 0x01
    7e16:	9a 81       	ldd	r25, Y+2	; 0x02
    7e18:	fc 01       	movw	r30, r24
    7e1a:	80 81       	ld	r24, Z
    7e1c:	91 81       	ldd	r25, Z+1	; 0x01
    7e1e:	62 2f       	mov	r22, r18
    7e20:	f2 dc       	rcall	.-1564   	; 0x7806 <tc_enable_cc_channels>
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    7e22:	89 81       	ldd	r24, Y+1	; 0x01
    7e24:	9a 81       	ldd	r25, Y+2	; 0x02
    7e26:	fc 01       	movw	r30, r24
    7e28:	24 81       	ldd	r18, Z+4	; 0x04
    7e2a:	89 81       	ldd	r24, Y+1	; 0x01
    7e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e2e:	fc 01       	movw	r30, r24
    7e30:	80 81       	ld	r24, Z
    7e32:	91 81       	ldd	r25, Z+1	; 0x01
    7e34:	62 2f       	mov	r22, r18
    7e36:	b4 dc       	rcall	.-1688   	; 0x77a0 <tc_write_clock_source>
}
    7e38:	23 96       	adiw	r28, 0x03	; 3
    7e3a:	cd bf       	out	0x3d, r28	; 61
    7e3c:	de bf       	out	0x3e, r29	; 62
    7e3e:	df 91       	pop	r29
    7e40:	cf 91       	pop	r28
    7e42:	08 95       	ret

00007e44 <ioport_set_pin_level>:
}

bool BluetoothMouseMode()
{
	return sendBTCmd("BC:CD=000580");
}
    7e44:	cf 93       	push	r28
    7e46:	df 93       	push	r29
    7e48:	cd b7       	in	r28, 0x3d	; 61
    7e4a:	de b7       	in	r29, 0x3e	; 62
    7e4c:	2b 97       	sbiw	r28, 0x0b	; 11
    7e4e:	cd bf       	out	0x3d, r28	; 61
    7e50:	de bf       	out	0x3e, r29	; 62
    7e52:	8a 87       	std	Y+10, r24	; 0x0a
    7e54:	6b 87       	std	Y+11, r22	; 0x0b
    7e56:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e58:	89 83       	std	Y+1, r24	; 0x01
    7e5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    7e5c:	8a 83       	std	Y+2, r24	; 0x02
    7e5e:	89 81       	ldd	r24, Y+1	; 0x01
    7e60:	8b 83       	std	Y+3, r24	; 0x03
    7e62:	8b 81       	ldd	r24, Y+3	; 0x03
    7e64:	8c 83       	std	Y+4, r24	; 0x04
    7e66:	8c 81       	ldd	r24, Y+4	; 0x04
    7e68:	86 95       	lsr	r24
    7e6a:	86 95       	lsr	r24
    7e6c:	86 95       	lsr	r24
    7e6e:	8d 83       	std	Y+5, r24	; 0x05
    7e70:	8d 81       	ldd	r24, Y+5	; 0x05
    7e72:	88 2f       	mov	r24, r24
    7e74:	90 e0       	ldi	r25, 0x00	; 0
    7e76:	88 0f       	add	r24, r24
    7e78:	99 1f       	adc	r25, r25
    7e7a:	82 95       	swap	r24
    7e7c:	92 95       	swap	r25
    7e7e:	90 7f       	andi	r25, 0xF0	; 240
    7e80:	98 27       	eor	r25, r24
    7e82:	80 7f       	andi	r24, 0xF0	; 240
    7e84:	98 27       	eor	r25, r24
    7e86:	9a 5f       	subi	r25, 0xFA	; 250
    7e88:	8e 83       	std	Y+6, r24	; 0x06
    7e8a:	9f 83       	std	Y+7, r25	; 0x07
    7e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    7e8e:	88 23       	and	r24, r24
    7e90:	a9 f0       	breq	.+42     	; 0x7ebc <ioport_set_pin_level+0x78>
    7e92:	89 81       	ldd	r24, Y+1	; 0x01
    7e94:	88 87       	std	Y+8, r24	; 0x08
    7e96:	88 85       	ldd	r24, Y+8	; 0x08
    7e98:	88 2f       	mov	r24, r24
    7e9a:	90 e0       	ldi	r25, 0x00	; 0
    7e9c:	9c 01       	movw	r18, r24
    7e9e:	27 70       	andi	r18, 0x07	; 7
    7ea0:	33 27       	eor	r19, r19
    7ea2:	81 e0       	ldi	r24, 0x01	; 1
    7ea4:	90 e0       	ldi	r25, 0x00	; 0
    7ea6:	02 c0       	rjmp	.+4      	; 0x7eac <ioport_set_pin_level+0x68>
    7ea8:	88 0f       	add	r24, r24
    7eaa:	99 1f       	adc	r25, r25
    7eac:	2a 95       	dec	r18
    7eae:	e2 f7       	brpl	.-8      	; 0x7ea8 <ioport_set_pin_level+0x64>
    7eb0:	28 2f       	mov	r18, r24
    7eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    7eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    7eb6:	fc 01       	movw	r30, r24
    7eb8:	25 83       	std	Z+5, r18	; 0x05
    7eba:	14 c0       	rjmp	.+40     	; 0x7ee4 <ioport_set_pin_level+0xa0>
    7ebc:	89 81       	ldd	r24, Y+1	; 0x01
    7ebe:	89 87       	std	Y+9, r24	; 0x09
    7ec0:	89 85       	ldd	r24, Y+9	; 0x09
    7ec2:	88 2f       	mov	r24, r24
    7ec4:	90 e0       	ldi	r25, 0x00	; 0
    7ec6:	9c 01       	movw	r18, r24
    7ec8:	27 70       	andi	r18, 0x07	; 7
    7eca:	33 27       	eor	r19, r19
    7ecc:	81 e0       	ldi	r24, 0x01	; 1
    7ece:	90 e0       	ldi	r25, 0x00	; 0
    7ed0:	02 c0       	rjmp	.+4      	; 0x7ed6 <ioport_set_pin_level+0x92>
    7ed2:	88 0f       	add	r24, r24
    7ed4:	99 1f       	adc	r25, r25
    7ed6:	2a 95       	dec	r18
    7ed8:	e2 f7       	brpl	.-8      	; 0x7ed2 <ioport_set_pin_level+0x8e>
    7eda:	28 2f       	mov	r18, r24
    7edc:	8e 81       	ldd	r24, Y+6	; 0x06
    7ede:	9f 81       	ldd	r25, Y+7	; 0x07
    7ee0:	fc 01       	movw	r30, r24
    7ee2:	26 83       	std	Z+6, r18	; 0x06
    7ee4:	2b 96       	adiw	r28, 0x0b	; 11
    7ee6:	cd bf       	out	0x3d, r28	; 61
    7ee8:	de bf       	out	0x3e, r29	; 62
    7eea:	df 91       	pop	r29
    7eec:	cf 91       	pop	r28
    7eee:	08 95       	ret

00007ef0 <ioport_get_pin_level>:
    7ef0:	cf 93       	push	r28
    7ef2:	df 93       	push	r29
    7ef4:	cd b7       	in	r28, 0x3d	; 61
    7ef6:	de b7       	in	r29, 0x3e	; 62
    7ef8:	28 97       	sbiw	r28, 0x08	; 8
    7efa:	cd bf       	out	0x3d, r28	; 61
    7efc:	de bf       	out	0x3e, r29	; 62
    7efe:	88 87       	std	Y+8, r24	; 0x08
    7f00:	88 85       	ldd	r24, Y+8	; 0x08
    7f02:	89 83       	std	Y+1, r24	; 0x01
    7f04:	89 81       	ldd	r24, Y+1	; 0x01
    7f06:	8a 83       	std	Y+2, r24	; 0x02
    7f08:	8a 81       	ldd	r24, Y+2	; 0x02
    7f0a:	8b 83       	std	Y+3, r24	; 0x03
    7f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    7f0e:	86 95       	lsr	r24
    7f10:	86 95       	lsr	r24
    7f12:	86 95       	lsr	r24
    7f14:	8c 83       	std	Y+4, r24	; 0x04
    7f16:	8c 81       	ldd	r24, Y+4	; 0x04
    7f18:	88 2f       	mov	r24, r24
    7f1a:	90 e0       	ldi	r25, 0x00	; 0
    7f1c:	88 0f       	add	r24, r24
    7f1e:	99 1f       	adc	r25, r25
    7f20:	82 95       	swap	r24
    7f22:	92 95       	swap	r25
    7f24:	90 7f       	andi	r25, 0xF0	; 240
    7f26:	98 27       	eor	r25, r24
    7f28:	80 7f       	andi	r24, 0xF0	; 240
    7f2a:	98 27       	eor	r25, r24
    7f2c:	9a 5f       	subi	r25, 0xFA	; 250
    7f2e:	8d 83       	std	Y+5, r24	; 0x05
    7f30:	9e 83       	std	Y+6, r25	; 0x06
    7f32:	8d 81       	ldd	r24, Y+5	; 0x05
    7f34:	9e 81       	ldd	r25, Y+6	; 0x06
    7f36:	fc 01       	movw	r30, r24
    7f38:	40 85       	ldd	r20, Z+8	; 0x08
    7f3a:	89 81       	ldd	r24, Y+1	; 0x01
    7f3c:	8f 83       	std	Y+7, r24	; 0x07
    7f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    7f40:	88 2f       	mov	r24, r24
    7f42:	90 e0       	ldi	r25, 0x00	; 0
    7f44:	9c 01       	movw	r18, r24
    7f46:	27 70       	andi	r18, 0x07	; 7
    7f48:	33 27       	eor	r19, r19
    7f4a:	81 e0       	ldi	r24, 0x01	; 1
    7f4c:	90 e0       	ldi	r25, 0x00	; 0
    7f4e:	02 2e       	mov	r0, r18
    7f50:	02 c0       	rjmp	.+4      	; 0x7f56 <ioport_get_pin_level+0x66>
    7f52:	88 0f       	add	r24, r24
    7f54:	99 1f       	adc	r25, r25
    7f56:	0a 94       	dec	r0
    7f58:	e2 f7       	brpl	.-8      	; 0x7f52 <ioport_get_pin_level+0x62>
    7f5a:	94 2f       	mov	r25, r20
    7f5c:	98 23       	and	r25, r24
    7f5e:	81 e0       	ldi	r24, 0x01	; 1
    7f60:	99 23       	and	r25, r25
    7f62:	09 f4       	brne	.+2      	; 0x7f66 <ioport_get_pin_level+0x76>
    7f64:	80 e0       	ldi	r24, 0x00	; 0
    7f66:	28 96       	adiw	r28, 0x08	; 8
    7f68:	cd bf       	out	0x3d, r28	; 61
    7f6a:	de bf       	out	0x3e, r29	; 62
    7f6c:	df 91       	pop	r29
    7f6e:	cf 91       	pop	r28
    7f70:	08 95       	ret

00007f72 <__portable_avr_delay_cycles>:
    7f72:	61 50       	subi	r22, 0x01	; 1
    7f74:	71 09       	sbc	r23, r1
    7f76:	81 09       	sbc	r24, r1
    7f78:	91 09       	sbc	r25, r1
    7f7a:	d9 f7       	brne	.-10     	; 0x7f72 <__portable_avr_delay_cycles>
    7f7c:	08 95       	ret

00007f7e <setupBluetoothFast>:
    7f7e:	1f 93       	push	r17
    7f80:	cf 93       	push	r28
    7f82:	df 93       	push	r29
    7f84:	cd b7       	in	r28, 0x3d	; 61
    7f86:	de b7       	in	r29, 0x3e	; 62
    7f88:	2d 97       	sbiw	r28, 0x0d	; 13
    7f8a:	cd bf       	out	0x3d, r28	; 61
    7f8c:	de bf       	out	0x3e, r29	; 62
    7f8e:	87 e0       	ldi	r24, 0x07	; 7
    7f90:	ed e6       	ldi	r30, 0x6D	; 109
    7f92:	f1 e2       	ldi	r31, 0x21	; 33
    7f94:	de 01       	movw	r26, r28
    7f96:	17 96       	adiw	r26, 0x07	; 7
    7f98:	01 90       	ld	r0, Z+
    7f9a:	0d 92       	st	X+, r0
    7f9c:	8a 95       	dec	r24
    7f9e:	e1 f7       	brne	.-8      	; 0x7f98 <setupBluetoothFast+0x1a>
    7fa0:	60 e1       	ldi	r22, 0x10	; 16
    7fa2:	85 e0       	ldi	r24, 0x05	; 5
    7fa4:	0e 94 de 2b 	call	0x57bc	; 0x57bc <sysclk_enable_module>
    7fa8:	8e e5       	ldi	r24, 0x5E	; 94
    7faa:	91 e2       	ldi	r25, 0x21	; 33
    7fac:	0e 94 b1 21 	call	0x4362	; 0x4362 <sendDBGString>
    7fb0:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
    7fb4:	ce 01       	movw	r24, r28
    7fb6:	07 96       	adiw	r24, 0x07	; 7
    7fb8:	bc 01       	movw	r22, r24
    7fba:	80 ea       	ldi	r24, 0xA0	; 160
    7fbc:	9a e0       	ldi	r25, 0x0A	; 10
    7fbe:	27 d9       	rcall	.-3506   	; 0x720e <usart_init_rs232>
    7fc0:	88 23       	and	r24, r24
    7fc2:	79 f0       	breq	.+30     	; 0x7fe2 <setupBluetoothFast+0x64>
    7fc4:	88 ec       	ldi	r24, 0xC8	; 200
    7fc6:	91 e0       	ldi	r25, 0x01	; 1
    7fc8:	89 83       	std	Y+1, r24	; 0x01
    7fca:	9a 83       	std	Y+2, r25	; 0x02
    7fcc:	89 81       	ldd	r24, Y+1	; 0x01
    7fce:	9a 81       	ldd	r25, Y+2	; 0x02
    7fd0:	fc 01       	movw	r30, r24
    7fd2:	14 91       	lpm	r17, Z
    7fd4:	1b 83       	std	Y+3, r17	; 0x03
    7fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    7fd8:	88 2f       	mov	r24, r24
    7fda:	90 e0       	ldi	r25, 0x00	; 0
    7fdc:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
    7fe0:	0e c0       	rjmp	.+28     	; 0x7ffe <setupBluetoothFast+0x80>
    7fe2:	8d ec       	ldi	r24, 0xCD	; 205
    7fe4:	91 e0       	ldi	r25, 0x01	; 1
    7fe6:	8c 83       	std	Y+4, r24	; 0x04
    7fe8:	9d 83       	std	Y+5, r25	; 0x05
    7fea:	8c 81       	ldd	r24, Y+4	; 0x04
    7fec:	9d 81       	ldd	r25, Y+5	; 0x05
    7fee:	fc 01       	movw	r30, r24
    7ff0:	14 91       	lpm	r17, Z
    7ff2:	1e 83       	std	Y+6, r17	; 0x06
    7ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    7ff6:	88 2f       	mov	r24, r24
    7ff8:	90 e0       	ldi	r25, 0x00	; 0
    7ffa:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
    7ffe:	2d 96       	adiw	r28, 0x0d	; 13
    8000:	cd bf       	out	0x3d, r28	; 61
    8002:	de bf       	out	0x3e, r29	; 62
    8004:	df 91       	pop	r29
    8006:	cf 91       	pop	r28
    8008:	1f 91       	pop	r17
    800a:	08 95       	ret

0000800c <sendBTHexPair>:
    800c:	cf 93       	push	r28
    800e:	df 93       	push	r29
    8010:	00 d0       	rcall	.+0      	; 0x8012 <sendBTHexPair+0x6>
    8012:	cd b7       	in	r28, 0x3d	; 61
    8014:	de b7       	in	r29, 0x3e	; 62
    8016:	8a 83       	std	Y+2, r24	; 0x02
    8018:	8a 81       	ldd	r24, Y+2	; 0x02
    801a:	82 95       	swap	r24
    801c:	8f 70       	andi	r24, 0x0F	; 15
    801e:	89 83       	std	Y+1, r24	; 0x01
    8020:	89 81       	ldd	r24, Y+1	; 0x01
    8022:	8a 30       	cpi	r24, 0x0A	; 10
    8024:	38 f0       	brcs	.+14     	; 0x8034 <sendBTHexPair+0x28>
    8026:	89 81       	ldd	r24, Y+1	; 0x01
    8028:	89 5c       	subi	r24, 0xC9	; 201
    802a:	68 2f       	mov	r22, r24
    802c:	80 ea       	ldi	r24, 0xA0	; 160
    802e:	9a e0       	ldi	r25, 0x0A	; 10
    8030:	34 d9       	rcall	.-3480   	; 0x729a <usart_putchar>
    8032:	06 c0       	rjmp	.+12     	; 0x8040 <sendBTHexPair+0x34>
    8034:	89 81       	ldd	r24, Y+1	; 0x01
    8036:	80 5d       	subi	r24, 0xD0	; 208
    8038:	68 2f       	mov	r22, r24
    803a:	80 ea       	ldi	r24, 0xA0	; 160
    803c:	9a e0       	ldi	r25, 0x0A	; 10
    803e:	2d d9       	rcall	.-3494   	; 0x729a <usart_putchar>
    8040:	8a 81       	ldd	r24, Y+2	; 0x02
    8042:	8f 70       	andi	r24, 0x0F	; 15
    8044:	89 83       	std	Y+1, r24	; 0x01
    8046:	89 81       	ldd	r24, Y+1	; 0x01
    8048:	8a 30       	cpi	r24, 0x0A	; 10
    804a:	38 f0       	brcs	.+14     	; 0x805a <sendBTHexPair+0x4e>
    804c:	89 81       	ldd	r24, Y+1	; 0x01
    804e:	89 5c       	subi	r24, 0xC9	; 201
    8050:	68 2f       	mov	r22, r24
    8052:	80 ea       	ldi	r24, 0xA0	; 160
    8054:	9a e0       	ldi	r25, 0x0A	; 10
    8056:	21 d9       	rcall	.-3518   	; 0x729a <usart_putchar>
    8058:	06 c0       	rjmp	.+12     	; 0x8066 <sendBTHexPair+0x5a>
    805a:	89 81       	ldd	r24, Y+1	; 0x01
    805c:	80 5d       	subi	r24, 0xD0	; 208
    805e:	68 2f       	mov	r22, r24
    8060:	80 ea       	ldi	r24, 0xA0	; 160
    8062:	9a e0       	ldi	r25, 0x0A	; 10
    8064:	1a d9       	rcall	.-3532   	; 0x729a <usart_putchar>
    8066:	0f 90       	pop	r0
    8068:	0f 90       	pop	r0
    806a:	df 91       	pop	r29
    806c:	cf 91       	pop	r28
    806e:	08 95       	ret

00008070 <sendBTChar>:
    8070:	cf 93       	push	r28
    8072:	df 93       	push	r29
    8074:	1f 92       	push	r1
    8076:	cd b7       	in	r28, 0x3d	; 61
    8078:	de b7       	in	r29, 0x3e	; 62
    807a:	89 83       	std	Y+1, r24	; 0x01
    807c:	88 ee       	ldi	r24, 0xE8	; 232
    807e:	93 e0       	ldi	r25, 0x03	; 3
    8080:	dc d0       	rcall	.+440    	; 0x823a <hardwareflowcontrol>
    8082:	88 23       	and	r24, r24
    8084:	21 f0       	breq	.+8      	; 0x808e <sendBTChar+0x1e>
    8086:	69 81       	ldd	r22, Y+1	; 0x01
    8088:	80 ea       	ldi	r24, 0xA0	; 160
    808a:	9a e0       	ldi	r25, 0x0A	; 10
    808c:	06 d9       	rcall	.-3572   	; 0x729a <usart_putchar>
    808e:	0f 90       	pop	r0
    8090:	df 91       	pop	r29
    8092:	cf 91       	pop	r28
    8094:	08 95       	ret

00008096 <sendBTString>:
    8096:	cf 93       	push	r28
    8098:	df 93       	push	r29
    809a:	00 d0       	rcall	.+0      	; 0x809c <sendBTString+0x6>
    809c:	cd b7       	in	r28, 0x3d	; 61
    809e:	de b7       	in	r29, 0x3e	; 62
    80a0:	89 83       	std	Y+1, r24	; 0x01
    80a2:	9a 83       	std	Y+2, r25	; 0x02
    80a4:	0c c0       	rjmp	.+24     	; 0x80be <sendBTString+0x28>
    80a6:	89 81       	ldd	r24, Y+1	; 0x01
    80a8:	9a 81       	ldd	r25, Y+2	; 0x02
    80aa:	fc 01       	movw	r30, r24
    80ac:	80 81       	ld	r24, Z
    80ae:	28 2f       	mov	r18, r24
    80b0:	89 81       	ldd	r24, Y+1	; 0x01
    80b2:	9a 81       	ldd	r25, Y+2	; 0x02
    80b4:	01 96       	adiw	r24, 0x01	; 1
    80b6:	89 83       	std	Y+1, r24	; 0x01
    80b8:	9a 83       	std	Y+2, r25	; 0x02
    80ba:	82 2f       	mov	r24, r18
    80bc:	d9 df       	rcall	.-78     	; 0x8070 <sendBTChar>
    80be:	89 81       	ldd	r24, Y+1	; 0x01
    80c0:	9a 81       	ldd	r25, Y+2	; 0x02
    80c2:	fc 01       	movw	r30, r24
    80c4:	80 81       	ld	r24, Z
    80c6:	88 23       	and	r24, r24
    80c8:	71 f7       	brne	.-36     	; 0x80a6 <sendBTString+0x10>
    80ca:	0f 90       	pop	r0
    80cc:	0f 90       	pop	r0
    80ce:	df 91       	pop	r29
    80d0:	cf 91       	pop	r28
    80d2:	08 95       	ret

000080d4 <sendBTCmd>:
    80d4:	cf 93       	push	r28
    80d6:	df 93       	push	r29
    80d8:	00 d0       	rcall	.+0      	; 0x80da <sendBTCmd+0x6>
    80da:	cd b7       	in	r28, 0x3d	; 61
    80dc:	de b7       	in	r29, 0x3e	; 62
    80de:	89 83       	std	Y+1, r24	; 0x01
    80e0:	9a 83       	std	Y+2, r25	; 0x02
    80e2:	88 ee       	ldi	r24, 0xE8	; 232
    80e4:	93 e0       	ldi	r25, 0x03	; 3
    80e6:	a9 d0       	rcall	.+338    	; 0x823a <hardwareflowcontrol>
    80e8:	88 23       	and	r24, r24
    80ea:	39 f0       	breq	.+14     	; 0x80fa <sendBTCmd+0x26>
    80ec:	89 81       	ldd	r24, Y+1	; 0x01
    80ee:	9a 81       	ldd	r25, Y+2	; 0x02
    80f0:	d2 df       	rcall	.-92     	; 0x8096 <sendBTString>
    80f2:	8d e0       	ldi	r24, 0x0D	; 13
    80f4:	bd df       	rcall	.-134    	; 0x8070 <sendBTChar>
    80f6:	8a e0       	ldi	r24, 0x0A	; 10
    80f8:	bb df       	rcall	.-138    	; 0x8070 <sendBTChar>
    80fa:	80 e0       	ldi	r24, 0x00	; 0
    80fc:	0f 90       	pop	r0
    80fe:	0f 90       	pop	r0
    8100:	df 91       	pop	r29
    8102:	cf 91       	pop	r28
    8104:	08 95       	ret

00008106 <turnBTOn>:
    8106:	cf 93       	push	r28
    8108:	df 93       	push	r29
    810a:	00 d0       	rcall	.+0      	; 0x810c <turnBTOn+0x6>
    810c:	cd b7       	in	r28, 0x3d	; 61
    810e:	de b7       	in	r29, 0x3e	; 62
    8110:	61 e0       	ldi	r22, 0x01	; 1
    8112:	85 e2       	ldi	r24, 0x25	; 37
    8114:	97 de       	rcall	.-722    	; 0x7e44 <ioport_set_pin_level>
    8116:	65 e5       	ldi	r22, 0x55	; 85
    8118:	73 e2       	ldi	r23, 0x23	; 35
    811a:	88 e0       	ldi	r24, 0x08	; 8
    811c:	90 e0       	ldi	r25, 0x00	; 0
    811e:	29 df       	rcall	.-430    	; 0x7f72 <__portable_avr_delay_cycles>
    8120:	60 e0       	ldi	r22, 0x00	; 0
    8122:	80 e2       	ldi	r24, 0x20	; 32
    8124:	8f de       	rcall	.-738    	; 0x7e44 <ioport_set_pin_level>
    8126:	19 82       	std	Y+1, r1	; 0x01
    8128:	1a 82       	std	Y+2, r1	; 0x02
    812a:	0c c0       	rjmp	.+24     	; 0x8144 <turnBTOn+0x3e>
    812c:	65 ed       	ldi	r22, 0xD5	; 213
    812e:	74 e1       	ldi	r23, 0x14	; 20
    8130:	80 e0       	ldi	r24, 0x00	; 0
    8132:	90 e0       	ldi	r25, 0x00	; 0
    8134:	1e df       	rcall	.-452    	; 0x7f72 <__portable_avr_delay_cycles>
    8136:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
    813a:	89 81       	ldd	r24, Y+1	; 0x01
    813c:	9a 81       	ldd	r25, Y+2	; 0x02
    813e:	01 96       	adiw	r24, 0x01	; 1
    8140:	89 83       	std	Y+1, r24	; 0x01
    8142:	9a 83       	std	Y+2, r25	; 0x02
    8144:	89 81       	ldd	r24, Y+1	; 0x01
    8146:	9a 81       	ldd	r25, Y+2	; 0x02
    8148:	80 3d       	cpi	r24, 0xD0	; 208
    814a:	27 e0       	ldi	r18, 0x07	; 7
    814c:	92 07       	cpc	r25, r18
    814e:	74 f3       	brlt	.-36     	; 0x812c <turnBTOn+0x26>
    8150:	0f 90       	pop	r0
    8152:	0f 90       	pop	r0
    8154:	df 91       	pop	r29
    8156:	cf 91       	pop	r28
    8158:	08 95       	ret

0000815a <turnBTOff>:
    815a:	cf 93       	push	r28
    815c:	df 93       	push	r29
    815e:	cd b7       	in	r28, 0x3d	; 61
    8160:	de b7       	in	r29, 0x3e	; 62
    8162:	84 e7       	ldi	r24, 0x74	; 116
    8164:	91 e2       	ldi	r25, 0x21	; 33
    8166:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
    816a:	80 ed       	ldi	r24, 0xD0	; 208
    816c:	97 e0       	ldi	r25, 0x07	; 7
    816e:	65 d0       	rcall	.+202    	; 0x823a <hardwareflowcontrol>
    8170:	8a e7       	ldi	r24, 0x7A	; 122
    8172:	91 e2       	ldi	r25, 0x21	; 33
    8174:	af df       	rcall	.-162    	; 0x80d4 <sendBTCmd>
    8176:	61 e0       	ldi	r22, 0x01	; 1
    8178:	80 e2       	ldi	r24, 0x20	; 32
    817a:	64 de       	rcall	.-824    	; 0x7e44 <ioport_set_pin_level>
    817c:	60 e0       	ldi	r22, 0x00	; 0
    817e:	85 e2       	ldi	r24, 0x25	; 37
    8180:	61 de       	rcall	.-830    	; 0x7e44 <ioport_set_pin_level>
    8182:	df 91       	pop	r29
    8184:	cf 91       	pop	r28
    8186:	08 95       	ret

00008188 <initBTComms>:
    8188:	cf 93       	push	r28
    818a:	df 93       	push	r29
    818c:	00 d0       	rcall	.+0      	; 0x818e <initBTComms+0x6>
    818e:	cd b7       	in	r28, 0x3d	; 61
    8190:	de b7       	in	r29, 0x3e	; 62
    8192:	89 83       	std	Y+1, r24	; 0x01
    8194:	9a 83       	std	Y+2, r25	; 0x02
    8196:	80 e8       	ldi	r24, 0x80	; 128
    8198:	91 e2       	ldi	r25, 0x21	; 33
    819a:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
    819e:	a8 95       	wdr
    81a0:	87 e8       	ldi	r24, 0x87	; 135
    81a2:	91 e2       	ldi	r25, 0x21	; 33
    81a4:	97 df       	rcall	.-210    	; 0x80d4 <sendBTCmd>
    81a6:	80 ed       	ldi	r24, 0xD0	; 208
    81a8:	97 e0       	ldi	r25, 0x07	; 7
    81aa:	47 d0       	rcall	.+142    	; 0x823a <hardwareflowcontrol>
    81ac:	83 e9       	ldi	r24, 0x93	; 147
    81ae:	91 e2       	ldi	r25, 0x21	; 33
    81b0:	91 df       	rcall	.-222    	; 0x80d4 <sendBTCmd>
    81b2:	a8 95       	wdr
    81b4:	88 ee       	ldi	r24, 0xE8	; 232
    81b6:	93 e0       	ldi	r25, 0x03	; 3
    81b8:	40 d0       	rcall	.+128    	; 0x823a <hardwareflowcontrol>
    81ba:	8c e9       	ldi	r24, 0x9C	; 156
    81bc:	91 e2       	ldi	r25, 0x21	; 33
    81be:	8a df       	rcall	.-236    	; 0x80d4 <sendBTCmd>
    81c0:	a8 95       	wdr
    81c2:	80 e7       	ldi	r24, 0x70	; 112
    81c4:	97 e1       	ldi	r25, 0x17	; 23
    81c6:	39 d0       	rcall	.+114    	; 0x823a <hardwareflowcontrol>
    81c8:	0f 90       	pop	r0
    81ca:	0f 90       	pop	r0
    81cc:	df 91       	pop	r29
    81ce:	cf 91       	pop	r28
    81d0:	08 95       	ret

000081d2 <bt_exitBypass>:
    81d2:	cf 93       	push	r28
    81d4:	df 93       	push	r29
    81d6:	cd b7       	in	r28, 0x3d	; 61
    81d8:	de b7       	in	r29, 0x3e	; 62
    81da:	60 e0       	ldi	r22, 0x00	; 0
    81dc:	88 e2       	ldi	r24, 0x28	; 40
    81de:	32 de       	rcall	.-924    	; 0x7e44 <ioport_set_pin_level>
    81e0:	92 df       	rcall	.-220    	; 0x8106 <turnBTOn>
    81e2:	60 e0       	ldi	r22, 0x00	; 0
    81e4:	7a e6       	ldi	r23, 0x6A	; 106
    81e6:	88 e1       	ldi	r24, 0x18	; 24
    81e8:	90 e0       	ldi	r25, 0x00	; 0
    81ea:	c3 de       	rcall	.-634    	; 0x7f72 <__portable_avr_delay_cycles>
    81ec:	61 e0       	ldi	r22, 0x01	; 1
    81ee:	88 e2       	ldi	r24, 0x28	; 40
    81f0:	29 de       	rcall	.-942    	; 0x7e44 <ioport_set_pin_level>
    81f2:	65 e5       	ldi	r22, 0x55	; 85
    81f4:	73 e2       	ldi	r23, 0x23	; 35
    81f6:	88 e0       	ldi	r24, 0x08	; 8
    81f8:	90 e0       	ldi	r25, 0x00	; 0
    81fa:	bb de       	rcall	.-650    	; 0x7f72 <__portable_avr_delay_cycles>
    81fc:	df 91       	pop	r29
    81fe:	cf 91       	pop	r28
    8200:	08 95       	ret

00008202 <bt_homeButton>:
    8202:	cf 93       	push	r28
    8204:	df 93       	push	r29
    8206:	cd b7       	in	r28, 0x3d	; 61
    8208:	de b7       	in	r29, 0x3e	; 62
    820a:	81 ea       	ldi	r24, 0xA1	; 161
    820c:	31 df       	rcall	.-414    	; 0x8070 <sendBTChar>
    820e:	82 e0       	ldi	r24, 0x02	; 2
    8210:	2f df       	rcall	.-418    	; 0x8070 <sendBTChar>
    8212:	81 e0       	ldi	r24, 0x01	; 1
    8214:	2d df       	rcall	.-422    	; 0x8070 <sendBTChar>
    8216:	80 e0       	ldi	r24, 0x00	; 0
    8218:	2b df       	rcall	.-426    	; 0x8070 <sendBTChar>
    821a:	6a e2       	ldi	r22, 0x2A	; 42
    821c:	78 e6       	ldi	r23, 0x68	; 104
    821e:	80 e0       	ldi	r24, 0x00	; 0
    8220:	90 e0       	ldi	r25, 0x00	; 0
    8222:	a7 de       	rcall	.-690    	; 0x7f72 <__portable_avr_delay_cycles>
    8224:	81 ea       	ldi	r24, 0xA1	; 161
    8226:	24 df       	rcall	.-440    	; 0x8070 <sendBTChar>
    8228:	82 e0       	ldi	r24, 0x02	; 2
    822a:	22 df       	rcall	.-444    	; 0x8070 <sendBTChar>
    822c:	80 e0       	ldi	r24, 0x00	; 0
    822e:	20 df       	rcall	.-448    	; 0x8070 <sendBTChar>
    8230:	80 e0       	ldi	r24, 0x00	; 0
    8232:	1e df       	rcall	.-452    	; 0x8070 <sendBTChar>
    8234:	df 91       	pop	r29
    8236:	cf 91       	pop	r28
    8238:	08 95       	ret

0000823a <hardwareflowcontrol>:
    823a:	cf 93       	push	r28
    823c:	df 93       	push	r29
    823e:	00 d0       	rcall	.+0      	; 0x8240 <hardwareflowcontrol+0x6>
    8240:	1f 92       	push	r1
    8242:	cd b7       	in	r28, 0x3d	; 61
    8244:	de b7       	in	r29, 0x3e	; 62
    8246:	8a 83       	std	Y+2, r24	; 0x02
    8248:	9b 83       	std	Y+3, r25	; 0x03
    824a:	84 e2       	ldi	r24, 0x24	; 36
    824c:	51 de       	rcall	.-862    	; 0x7ef0 <ioport_get_pin_level>
    824e:	88 23       	and	r24, r24
    8250:	11 f0       	breq	.+4      	; 0x8256 <hardwareflowcontrol+0x1c>
    8252:	81 e0       	ldi	r24, 0x01	; 1
    8254:	1d c0       	rjmp	.+58     	; 0x8290 <hardwareflowcontrol+0x56>
    8256:	61 e0       	ldi	r22, 0x01	; 1
    8258:	81 e2       	ldi	r24, 0x21	; 33
    825a:	f4 dd       	rcall	.-1048   	; 0x7e44 <ioport_set_pin_level>
    825c:	19 82       	std	Y+1, r1	; 0x01
    825e:	10 c0       	rjmp	.+32     	; 0x8280 <hardwareflowcontrol+0x46>
    8260:	84 e2       	ldi	r24, 0x24	; 36
    8262:	46 de       	rcall	.-884    	; 0x7ef0 <ioport_get_pin_level>
    8264:	89 83       	std	Y+1, r24	; 0x01
    8266:	89 81       	ldd	r24, Y+1	; 0x01
    8268:	88 23       	and	r24, r24
    826a:	81 f4       	brne	.+32     	; 0x828c <hardwareflowcontrol+0x52>
    826c:	8a 81       	ldd	r24, Y+2	; 0x02
    826e:	9b 81       	ldd	r25, Y+3	; 0x03
    8270:	01 97       	sbiw	r24, 0x01	; 1
    8272:	8a 83       	std	Y+2, r24	; 0x02
    8274:	9b 83       	std	Y+3, r25	; 0x03
    8276:	65 ed       	ldi	r22, 0xD5	; 213
    8278:	74 e1       	ldi	r23, 0x14	; 20
    827a:	80 e0       	ldi	r24, 0x00	; 0
    827c:	90 e0       	ldi	r25, 0x00	; 0
    827e:	79 de       	rcall	.-782    	; 0x7f72 <__portable_avr_delay_cycles>
    8280:	8a 81       	ldd	r24, Y+2	; 0x02
    8282:	9b 81       	ldd	r25, Y+3	; 0x03
    8284:	18 16       	cp	r1, r24
    8286:	19 06       	cpc	r1, r25
    8288:	5c f3       	brlt	.-42     	; 0x8260 <hardwareflowcontrol+0x26>
    828a:	01 c0       	rjmp	.+2      	; 0x828e <hardwareflowcontrol+0x54>
    828c:	00 00       	nop
    828e:	89 81       	ldd	r24, Y+1	; 0x01
    8290:	23 96       	adiw	r28, 0x03	; 3
    8292:	cd bf       	out	0x3d, r28	; 61
    8294:	de bf       	out	0x3e, r29	; 62
    8296:	df 91       	pop	r29
    8298:	cf 91       	pop	r28
    829a:	08 95       	ret

0000829c <btFactoryReset>:
    829c:	cf 93       	push	r28
    829e:	df 93       	push	r29
    82a0:	cd b7       	in	r28, 0x3d	; 61
    82a2:	de b7       	in	r29, 0x3e	; 62
    82a4:	5a df       	rcall	.-332    	; 0x815a <turnBTOff>
    82a6:	60 e0       	ldi	r22, 0x00	; 0
    82a8:	88 e2       	ldi	r24, 0x28	; 40
    82aa:	cc dd       	rcall	.-1128   	; 0x7e44 <ioport_set_pin_level>
    82ac:	2c df       	rcall	.-424    	; 0x8106 <turnBTOn>
    82ae:	6a ea       	ldi	r22, 0xAA	; 170
    82b0:	7b e7       	ldi	r23, 0x7B	; 123
    82b2:	8c e1       	ldi	r24, 0x1C	; 28
    82b4:	90 e0       	ldi	r25, 0x00	; 0
    82b6:	5d de       	rcall	.-838    	; 0x7f72 <__portable_avr_delay_cycles>
    82b8:	61 e0       	ldi	r22, 0x01	; 1
    82ba:	88 e2       	ldi	r24, 0x28	; 40
    82bc:	c3 dd       	rcall	.-1146   	; 0x7e44 <ioport_set_pin_level>
    82be:	df 91       	pop	r29
    82c0:	cf 91       	pop	r28
    82c2:	08 95       	ret

000082c4 <btIsConnected>:
    82c4:	cf 93       	push	r28
    82c6:	df 93       	push	r29
    82c8:	cd b7       	in	r28, 0x3d	; 61
    82ca:	de b7       	in	r29, 0x3e	; 62
    82cc:	86 e2       	ldi	r24, 0x26	; 38
    82ce:	10 de       	rcall	.-992    	; 0x7ef0 <ioport_get_pin_level>
    82d0:	88 2f       	mov	r24, r24
    82d2:	90 e0       	ldi	r25, 0x00	; 0
    82d4:	21 e0       	ldi	r18, 0x01	; 1
    82d6:	00 97       	sbiw	r24, 0x00	; 0
    82d8:	09 f4       	brne	.+2      	; 0x82dc <btIsConnected+0x18>
    82da:	20 e0       	ldi	r18, 0x00	; 0
    82dc:	81 e0       	ldi	r24, 0x01	; 1
    82de:	82 27       	eor	r24, r18
    82e0:	88 2f       	mov	r24, r24
    82e2:	90 e0       	ldi	r25, 0x00	; 0
    82e4:	81 70       	andi	r24, 0x01	; 1
    82e6:	df 91       	pop	r29
    82e8:	cf 91       	pop	r28
    82ea:	08 95       	ret

000082ec <btClearAutoConnectList>:
    82ec:	cf 93       	push	r28
    82ee:	df 93       	push	r29
    82f0:	cd b7       	in	r28, 0x3d	; 61
    82f2:	de b7       	in	r29, 0x3e	; 62
    82f4:	88 ee       	ldi	r24, 0xE8	; 232
    82f6:	93 e0       	ldi	r25, 0x03	; 3
    82f8:	a0 df       	rcall	.-192    	; 0x823a <hardwareflowcontrol>
    82fa:	8b ea       	ldi	r24, 0xAB	; 171
    82fc:	91 e2       	ldi	r25, 0x21	; 33
    82fe:	ea de       	rcall	.-556    	; 0x80d4 <sendBTCmd>
    8300:	df 91       	pop	r29
    8302:	cf 91       	pop	r28
    8304:	08 95       	ret

00008306 <BluetoothKeyboardMode>:
    8306:	cf 93       	push	r28
    8308:	df 93       	push	r29
    830a:	cd b7       	in	r28, 0x3d	; 61
    830c:	de b7       	in	r29, 0x3e	; 62
    830e:	81 eb       	ldi	r24, 0xB1	; 177
    8310:	91 e2       	ldi	r25, 0x21	; 33
    8312:	e0 de       	rcall	.-576    	; 0x80d4 <sendBTCmd>
    8314:	df 91       	pop	r29
    8316:	cf 91       	pop	r28
    8318:	08 95       	ret

0000831a <BluetoothComboMode>:

bool BluetoothComboMode() // Keyboard & Mouse
{
    831a:	cf 93       	push	r28
    831c:	df 93       	push	r29
    831e:	cd b7       	in	r28, 0x3d	; 61
    8320:	de b7       	in	r29, 0x3e	; 62
	return sendBTCmd("BC:CD=0005C0");
    8322:	8b ec       	ldi	r24, 0xCB	; 203
    8324:	91 e2       	ldi	r25, 0x21	; 33
    8326:	d6 de       	rcall	.-596    	; 0x80d4 <sendBTCmd>
}
    8328:	df 91       	pop	r29
    832a:	cf 91       	pop	r28
    832c:	08 95       	ret

0000832e <BluetoothGamePadMode>:

bool BluetoothGamePadMode() // Gamepad (default)
{
    832e:	cf 93       	push	r28
    8330:	df 93       	push	r29
    8332:	cd b7       	in	r28, 0x3d	; 61
    8334:	de b7       	in	r29, 0x3e	; 62
	return sendBTCmd("BC:CD=000508");
    8336:	88 ed       	ldi	r24, 0xD8	; 216
    8338:	91 e2       	ldi	r25, 0x21	; 33
    833a:	cc de       	rcall	.-616    	; 0x80d4 <sendBTCmd>
}
    833c:	df 91       	pop	r29
    833e:	cf 91       	pop	r28
    8340:	08 95       	ret

00008342 <BluetoothJoystickMode>:

bool BluetoothJoystickMode()
{
    8342:	cf 93       	push	r28
    8344:	df 93       	push	r29
    8346:	cd b7       	in	r28, 0x3d	; 61
    8348:	de b7       	in	r29, 0x3e	; 62
	return sendBTCmd("BC:CD=0005C4");
    834a:	85 ee       	ldi	r24, 0xE5	; 229
    834c:	91 e2       	ldi	r25, 0x21	; 33
    834e:	c2 de       	rcall	.-636    	; 0x80d4 <sendBTCmd>
}
    8350:	df 91       	pop	r29
    8352:	cf 91       	pop	r28
    8354:	08 95       	ret

00008356 <cpu_irq_save>:
	WatchdogPet();
	WatchDogEnable(false);
	turnBTOff();
	delay_ms(20);
	reset_do_soft_reset();
}
    8356:	cf 93       	push	r28
    8358:	df 93       	push	r29
    835a:	1f 92       	push	r1
    835c:	cd b7       	in	r28, 0x3d	; 61
    835e:	de b7       	in	r29, 0x3e	; 62
    8360:	8f e3       	ldi	r24, 0x3F	; 63
    8362:	90 e0       	ldi	r25, 0x00	; 0
    8364:	fc 01       	movw	r30, r24
    8366:	80 81       	ld	r24, Z
    8368:	89 83       	std	Y+1, r24	; 0x01
    836a:	f8 94       	cli
    836c:	89 81       	ldd	r24, Y+1	; 0x01
    836e:	0f 90       	pop	r0
    8370:	df 91       	pop	r29
    8372:	cf 91       	pop	r28
    8374:	08 95       	ret

00008376 <cpu_irq_restore>:
    8376:	cf 93       	push	r28
    8378:	df 93       	push	r29
    837a:	1f 92       	push	r1
    837c:	cd b7       	in	r28, 0x3d	; 61
    837e:	de b7       	in	r29, 0x3e	; 62
    8380:	89 83       	std	Y+1, r24	; 0x01
    8382:	8f e3       	ldi	r24, 0x3F	; 63
    8384:	90 e0       	ldi	r25, 0x00	; 0
    8386:	29 81       	ldd	r18, Y+1	; 0x01
    8388:	fc 01       	movw	r30, r24
    838a:	20 83       	st	Z, r18
    838c:	0f 90       	pop	r0
    838e:	df 91       	pop	r29
    8390:	cf 91       	pop	r28
    8392:	08 95       	ret

00008394 <sleep_set_mode>:
    8394:	cf 93       	push	r28
    8396:	df 93       	push	r29
    8398:	1f 92       	push	r1
    839a:	cd b7       	in	r28, 0x3d	; 61
    839c:	de b7       	in	r29, 0x3e	; 62
    839e:	89 83       	std	Y+1, r24	; 0x01
    83a0:	88 e4       	ldi	r24, 0x48	; 72
    83a2:	90 e0       	ldi	r25, 0x00	; 0
    83a4:	28 e4       	ldi	r18, 0x48	; 72
    83a6:	30 e0       	ldi	r19, 0x00	; 0
    83a8:	f9 01       	movw	r30, r18
    83aa:	20 81       	ld	r18, Z
    83ac:	32 2f       	mov	r19, r18
    83ae:	31 7f       	andi	r19, 0xF1	; 241
    83b0:	29 81       	ldd	r18, Y+1	; 0x01
    83b2:	23 2b       	or	r18, r19
    83b4:	fc 01       	movw	r30, r24
    83b6:	20 83       	st	Z, r18
    83b8:	0f 90       	pop	r0
    83ba:	df 91       	pop	r29
    83bc:	cf 91       	pop	r28
    83be:	08 95       	ret

000083c0 <sleepmgr_sleep>:
    83c0:	1f 93       	push	r17
    83c2:	cf 93       	push	r28
    83c4:	df 93       	push	r29
    83c6:	00 d0       	rcall	.+0      	; 0x83c8 <sleepmgr_sleep+0x8>
    83c8:	00 d0       	rcall	.+0      	; 0x83ca <sleepmgr_sleep+0xa>
    83ca:	cd b7       	in	r28, 0x3d	; 61
    83cc:	de b7       	in	r29, 0x3e	; 62
    83ce:	8c 83       	std	Y+4, r24	; 0x04
    83d0:	8c 81       	ldd	r24, Y+4	; 0x04
    83d2:	88 2f       	mov	r24, r24
    83d4:	90 e0       	ldi	r25, 0x00	; 0
    83d6:	01 97       	sbiw	r24, 0x01	; 1
    83d8:	8d 51       	subi	r24, 0x1D	; 29
    83da:	9e 4f       	sbci	r25, 0xFE	; 254
    83dc:	89 83       	std	Y+1, r24	; 0x01
    83de:	9a 83       	std	Y+2, r25	; 0x02
    83e0:	89 81       	ldd	r24, Y+1	; 0x01
    83e2:	9a 81       	ldd	r25, Y+2	; 0x02
    83e4:	fc 01       	movw	r30, r24
    83e6:	14 91       	lpm	r17, Z
    83e8:	1b 83       	std	Y+3, r17	; 0x03
    83ea:	8b 81       	ldd	r24, Y+3	; 0x03
    83ec:	d3 df       	rcall	.-90     	; 0x8394 <sleep_set_mode>
    83ee:	88 e4       	ldi	r24, 0x48	; 72
    83f0:	90 e0       	ldi	r25, 0x00	; 0
    83f2:	28 e4       	ldi	r18, 0x48	; 72
    83f4:	30 e0       	ldi	r19, 0x00	; 0
    83f6:	f9 01       	movw	r30, r18
    83f8:	20 81       	ld	r18, Z
    83fa:	21 60       	ori	r18, 0x01	; 1
    83fc:	fc 01       	movw	r30, r24
    83fe:	20 83       	st	Z, r18
    8400:	78 94       	sei
    8402:	88 95       	sleep
    8404:	88 e4       	ldi	r24, 0x48	; 72
    8406:	90 e0       	ldi	r25, 0x00	; 0
    8408:	28 e4       	ldi	r18, 0x48	; 72
    840a:	30 e0       	ldi	r19, 0x00	; 0
    840c:	f9 01       	movw	r30, r18
    840e:	20 81       	ld	r18, Z
    8410:	2e 7f       	andi	r18, 0xFE	; 254
    8412:	fc 01       	movw	r30, r24
    8414:	20 83       	st	Z, r18
    8416:	24 96       	adiw	r28, 0x04	; 4
    8418:	cd bf       	out	0x3d, r28	; 61
    841a:	de bf       	out	0x3e, r29	; 62
    841c:	df 91       	pop	r29
    841e:	cf 91       	pop	r28
    8420:	1f 91       	pop	r17
    8422:	08 95       	ret

00008424 <sleepmgr_init>:
    8424:	cf 93       	push	r28
    8426:	df 93       	push	r29
    8428:	1f 92       	push	r1
    842a:	cd b7       	in	r28, 0x3d	; 61
    842c:	de b7       	in	r29, 0x3e	; 62
    842e:	19 82       	std	Y+1, r1	; 0x01
    8430:	0a c0       	rjmp	.+20     	; 0x8446 <sleepmgr_init+0x22>
    8432:	89 81       	ldd	r24, Y+1	; 0x01
    8434:	88 2f       	mov	r24, r24
    8436:	90 e0       	ldi	r25, 0x00	; 0
    8438:	89 5b       	subi	r24, 0xB9	; 185
    843a:	97 4d       	sbci	r25, 0xD7	; 215
    843c:	fc 01       	movw	r30, r24
    843e:	10 82       	st	Z, r1
    8440:	89 81       	ldd	r24, Y+1	; 0x01
    8442:	8f 5f       	subi	r24, 0xFF	; 255
    8444:	89 83       	std	Y+1, r24	; 0x01
    8446:	89 81       	ldd	r24, Y+1	; 0x01
    8448:	85 30       	cpi	r24, 0x05	; 5
    844a:	98 f3       	brcs	.-26     	; 0x8432 <sleepmgr_init+0xe>
    844c:	81 e0       	ldi	r24, 0x01	; 1
    844e:	80 93 4c 28 	sts	0x284C, r24
    8452:	0f 90       	pop	r0
    8454:	df 91       	pop	r29
    8456:	cf 91       	pop	r28
    8458:	08 95       	ret

0000845a <reset_do_soft_reset>:
    845a:	cf 93       	push	r28
    845c:	df 93       	push	r29
    845e:	cd b7       	in	r28, 0x3d	; 61
    8460:	de b7       	in	r29, 0x3e	; 62
    8462:	61 e0       	ldi	r22, 0x01	; 1
    8464:	89 e7       	ldi	r24, 0x79	; 121
    8466:	90 e0       	ldi	r25, 0x00	; 0
    8468:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <ccp_write_io>
    846c:	ff cf       	rjmp	.-2      	; 0x846c <reset_do_soft_reset+0x12>

0000846e <__portable_avr_delay_cycles>:
    846e:	61 50       	subi	r22, 0x01	; 1
    8470:	71 09       	sbc	r23, r1
    8472:	81 09       	sbc	r24, r1
    8474:	91 09       	sbc	r25, r1
    8476:	d9 f7       	brne	.-10     	; 0x846e <__portable_avr_delay_cycles>
    8478:	08 95       	ret

0000847a <pmic_init>:
    847a:	cf 93       	push	r28
    847c:	df 93       	push	r29
    847e:	cd b7       	in	r28, 0x3d	; 61
    8480:	de b7       	in	r29, 0x3e	; 62
    8482:	80 ea       	ldi	r24, 0xA0	; 160
    8484:	90 e0       	ldi	r25, 0x00	; 0
    8486:	27 e0       	ldi	r18, 0x07	; 7
    8488:	fc 01       	movw	r30, r24
    848a:	22 83       	std	Z+2, r18	; 0x02
    848c:	df 91       	pop	r29
    848e:	cf 91       	pop	r28
    8490:	08 95       	ret

00008492 <main>:
bool pulse, bios, turnedOn;

#include "build_timestamp.h"

int main (void)
{
    8492:	cf 92       	push	r12
    8494:	df 92       	push	r13
    8496:	ef 92       	push	r14
    8498:	ff 92       	push	r15
    849a:	0f 93       	push	r16
    849c:	1f 93       	push	r17
    849e:	cf 93       	push	r28
    84a0:	df 93       	push	r29
    84a2:	cd b7       	in	r28, 0x3d	; 61
    84a4:	de b7       	in	r29, 0x3e	; 62
    84a6:	c9 55       	subi	r28, 0x59	; 89
    84a8:	d1 09       	sbc	r29, r1
    84aa:	cd bf       	out	0x3d, r28	; 61
    84ac:	de bf       	out	0x3e, r29	; 62
    struct Timeout startReleaseTimeout;
	struct Timeout rptTimeout;
    
	uint8_t i; // temporary variable.
    enum ButtonState tempBState;
	bool possiblyPoweringOff = false;
    84ae:	1a 82       	std	Y+2, r1	; 0x02
	bool possiblyBiosMode = false;
    84b0:	1b 82       	std	Y+3, r1	; 0x03
    bool doStartRelease = false;
    84b2:	1c 82       	std	Y+4, r1	; 0x04
	cfgsel_t which_cfg;
	pulse = false;
    84b4:	10 92 4f 28 	sts	0x284F, r1
	uint16_t battery_level=0u;
    84b8:	1d 82       	std	Y+5, r1	; 0x05
    84ba:	1e 82       	std	Y+6, r1	; 0x06
	bool chargingDone;
	
	sysclk_init(); //Initialize System Clock
    84bc:	0e 94 ab 2b 	call	0x5756	; 0x5756 <sysclk_init>
	board_init(); //Setup IO
    84c0:	0e 94 07 05 	call	0xa0e	; 0xa0e <board_init>
	delay_ms(5);
    84c4:	6a e2       	ldi	r22, 0x2A	; 42
    84c6:	78 e6       	ldi	r23, 0x68	; 104
    84c8:	80 e0       	ldi	r24, 0x00	; 0
    84ca:	90 e0       	ldi	r25, 0x00	; 0
    84cc:	d0 df       	rcall	.-96     	; 0x846e <__portable_avr_delay_cycles>
	
	setupLEDs(false);
    84ce:	80 e0       	ldi	r24, 0x00	; 0
    84d0:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <setupLEDs>
	setLEDValue(LED_OFF, LED_OFF, LED_DIM);
    84d4:	41 e0       	ldi	r20, 0x01	; 1
    84d6:	60 e0       	ldi	r22, 0x00	; 0
    84d8:	80 e0       	ldi	r24, 0x00	; 0
    84da:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
	
	while(buttonActivated(B_START));
    84de:	00 00       	nop
    84e0:	88 e0       	ldi	r24, 0x08	; 8
    84e2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    84e6:	88 23       	and	r24, r24
    84e8:	d9 f7       	brne	.-10     	; 0x84e0 <main+0x4e>
	
	setupAnalog();
    84ea:	0e 94 7d 03 	call	0x6fa	; 0x6fa <setupAnalog>
	enableAnalog();
    84ee:	0e 94 03 04 	call	0x806	; 0x806 <enableAnalog>
	battery_level = sampleAnalogChannel(BATTERY_DETECT_ADC);
    84f2:	83 e0       	ldi	r24, 0x03	; 3
    84f4:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    84f8:	8d 83       	std	Y+5, r24	; 0x05
    84fa:	9e 83       	std	Y+6, r25	; 0x06
	chargingDone = IsChargingDone();
    84fc:	0e 94 f4 06 	call	0xde8	; 0xde8 <IsChargingDone>
    8500:	8f 83       	std	Y+7, r24	; 0x07
	
	turnBTOn(); // Enable the Bluetooth module
    8502:	01 de       	rcall	.-1022   	; 0x8106 <turnBTOn>
	setupBluetoothFast(); // Set baud rate to 115200
    8504:	3c dd       	rcall	.-1416   	; 0x7f7e <setupBluetoothFast>
	 
	// Setup the watchdog timer period:
	WatchdogInit();
    8506:	0e 94 ac 2a 	call	0x5558	; 0x5558 <WatchdogInit>

	// Setup the system tick:
	setupSysTick(&sysTickCallback);
    850a:	8f e7       	ldi	r24, 0x7F	; 127
    850c:	97 e4       	ldi	r25, 0x47	; 71
    850e:	0e 94 69 28 	call	0x50d2	; 0x50d2 <setupSysTick>
	
	// Insert application code here, after the board has been initialized.
	// Setup other peripherals:
	setupDbg();
    8512:	0e 94 53 21 	call	0x42a6	; 0x42a6 <setupDbg>
	setupUsb();
    8516:	0e 94 56 29 	call	0x52ac	; 0x52ac <setupUsb>
	
	// Sample each of the joysticks to set the center values:
	for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    851a:	19 82       	std	Y+1, r1	; 0x01
    851c:	f6 c0       	rjmp	.+492    	; 0x870a <main+0x278>
		joysticks[i].previous_x = joysticks[i].center_x = joysticks[i].current_x  = sampleAnalogChannel(joysticks[i].adc_channel_x);
    851e:	89 81       	ldd	r24, Y+1	; 0x01
    8520:	c8 2e       	mov	r12, r24
    8522:	d1 2c       	mov	r13, r1
    8524:	89 81       	ldd	r24, Y+1	; 0x01
    8526:	08 2f       	mov	r16, r24
    8528:	10 e0       	ldi	r17, 0x00	; 0
    852a:	89 81       	ldd	r24, Y+1	; 0x01
    852c:	e8 2e       	mov	r14, r24
    852e:	f1 2c       	mov	r15, r1
    8530:	89 81       	ldd	r24, Y+1	; 0x01
    8532:	88 2f       	mov	r24, r24
    8534:	90 e0       	ldi	r25, 0x00	; 0
    8536:	88 0f       	add	r24, r24
    8538:	99 1f       	adc	r25, r25
    853a:	9c 01       	movw	r18, r24
    853c:	22 0f       	add	r18, r18
    853e:	33 1f       	adc	r19, r19
    8540:	22 0f       	add	r18, r18
    8542:	33 1f       	adc	r19, r19
    8544:	22 0f       	add	r18, r18
    8546:	33 1f       	adc	r19, r19
    8548:	28 1b       	sub	r18, r24
    854a:	39 0b       	sbc	r19, r25
    854c:	c9 01       	movw	r24, r18
    854e:	8a 5a       	subi	r24, 0xAA	; 170
    8550:	9f 4d       	sbci	r25, 0xDF	; 223
    8552:	dc 01       	movw	r26, r24
    8554:	8c 91       	ld	r24, X
    8556:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    855a:	ac 01       	movw	r20, r24
    855c:	c7 01       	movw	r24, r14
    855e:	88 0f       	add	r24, r24
    8560:	99 1f       	adc	r25, r25
    8562:	9c 01       	movw	r18, r24
    8564:	22 0f       	add	r18, r18
    8566:	33 1f       	adc	r19, r19
    8568:	22 0f       	add	r18, r18
    856a:	33 1f       	adc	r19, r19
    856c:	22 0f       	add	r18, r18
    856e:	33 1f       	adc	r19, r19
    8570:	28 1b       	sub	r18, r24
    8572:	39 0b       	sbc	r19, r25
    8574:	c9 01       	movw	r24, r18
    8576:	80 5a       	subi	r24, 0xA0	; 160
    8578:	9f 4d       	sbci	r25, 0xDF	; 223
    857a:	fc 01       	movw	r30, r24
    857c:	40 83       	st	Z, r20
    857e:	51 83       	std	Z+1, r21	; 0x01
    8580:	c7 01       	movw	r24, r14
    8582:	88 0f       	add	r24, r24
    8584:	99 1f       	adc	r25, r25
    8586:	9c 01       	movw	r18, r24
    8588:	22 0f       	add	r18, r18
    858a:	33 1f       	adc	r19, r19
    858c:	22 0f       	add	r18, r18
    858e:	33 1f       	adc	r19, r19
    8590:	22 0f       	add	r18, r18
    8592:	33 1f       	adc	r19, r19
    8594:	28 1b       	sub	r18, r24
    8596:	39 0b       	sbc	r19, r25
    8598:	c9 01       	movw	r24, r18
    859a:	80 5a       	subi	r24, 0xA0	; 160
    859c:	9f 4d       	sbci	r25, 0xDF	; 223
    859e:	dc 01       	movw	r26, r24
    85a0:	4d 91       	ld	r20, X+
    85a2:	5c 91       	ld	r21, X
    85a4:	c8 01       	movw	r24, r16
    85a6:	88 0f       	add	r24, r24
    85a8:	99 1f       	adc	r25, r25
    85aa:	9c 01       	movw	r18, r24
    85ac:	22 0f       	add	r18, r18
    85ae:	33 1f       	adc	r19, r19
    85b0:	22 0f       	add	r18, r18
    85b2:	33 1f       	adc	r19, r19
    85b4:	22 0f       	add	r18, r18
    85b6:	33 1f       	adc	r19, r19
    85b8:	28 1b       	sub	r18, r24
    85ba:	39 0b       	sbc	r19, r25
    85bc:	c9 01       	movw	r24, r18
    85be:	88 5a       	subi	r24, 0xA8	; 168
    85c0:	9f 4d       	sbci	r25, 0xDF	; 223
    85c2:	fc 01       	movw	r30, r24
    85c4:	40 83       	st	Z, r20
    85c6:	51 83       	std	Z+1, r21	; 0x01
    85c8:	c8 01       	movw	r24, r16
    85ca:	88 0f       	add	r24, r24
    85cc:	99 1f       	adc	r25, r25
    85ce:	9c 01       	movw	r18, r24
    85d0:	22 0f       	add	r18, r18
    85d2:	33 1f       	adc	r19, r19
    85d4:	22 0f       	add	r18, r18
    85d6:	33 1f       	adc	r19, r19
    85d8:	22 0f       	add	r18, r18
    85da:	33 1f       	adc	r19, r19
    85dc:	28 1b       	sub	r18, r24
    85de:	39 0b       	sbc	r19, r25
    85e0:	c9 01       	movw	r24, r18
    85e2:	88 5a       	subi	r24, 0xA8	; 168
    85e4:	9f 4d       	sbci	r25, 0xDF	; 223
    85e6:	dc 01       	movw	r26, r24
    85e8:	4d 91       	ld	r20, X+
    85ea:	5c 91       	ld	r21, X
    85ec:	c6 01       	movw	r24, r12
    85ee:	88 0f       	add	r24, r24
    85f0:	99 1f       	adc	r25, r25
    85f2:	9c 01       	movw	r18, r24
    85f4:	22 0f       	add	r18, r18
    85f6:	33 1f       	adc	r19, r19
    85f8:	22 0f       	add	r18, r18
    85fa:	33 1f       	adc	r19, r19
    85fc:	22 0f       	add	r18, r18
    85fe:	33 1f       	adc	r19, r19
    8600:	28 1b       	sub	r18, r24
    8602:	39 0b       	sbc	r19, r25
    8604:	c9 01       	movw	r24, r18
    8606:	84 5a       	subi	r24, 0xA4	; 164
    8608:	9f 4d       	sbci	r25, 0xDF	; 223
    860a:	fc 01       	movw	r30, r24
    860c:	40 83       	st	Z, r20
    860e:	51 83       	std	Z+1, r21	; 0x01
		joysticks[i].previous_y = joysticks[i].center_y = joysticks[i].current_y  = sampleAnalogChannel(joysticks[i].adc_channel_y);
    8610:	89 81       	ldd	r24, Y+1	; 0x01
    8612:	c8 2e       	mov	r12, r24
    8614:	d1 2c       	mov	r13, r1
    8616:	89 81       	ldd	r24, Y+1	; 0x01
    8618:	08 2f       	mov	r16, r24
    861a:	10 e0       	ldi	r17, 0x00	; 0
    861c:	89 81       	ldd	r24, Y+1	; 0x01
    861e:	e8 2e       	mov	r14, r24
    8620:	f1 2c       	mov	r15, r1
    8622:	89 81       	ldd	r24, Y+1	; 0x01
    8624:	88 2f       	mov	r24, r24
    8626:	90 e0       	ldi	r25, 0x00	; 0
    8628:	88 0f       	add	r24, r24
    862a:	99 1f       	adc	r25, r25
    862c:	9c 01       	movw	r18, r24
    862e:	22 0f       	add	r18, r18
    8630:	33 1f       	adc	r19, r19
    8632:	22 0f       	add	r18, r18
    8634:	33 1f       	adc	r19, r19
    8636:	22 0f       	add	r18, r18
    8638:	33 1f       	adc	r19, r19
    863a:	28 1b       	sub	r18, r24
    863c:	39 0b       	sbc	r19, r25
    863e:	c9 01       	movw	r24, r18
    8640:	89 5a       	subi	r24, 0xA9	; 169
    8642:	9f 4d       	sbci	r25, 0xDF	; 223
    8644:	dc 01       	movw	r26, r24
    8646:	8c 91       	ld	r24, X
    8648:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    864c:	ac 01       	movw	r20, r24
    864e:	c7 01       	movw	r24, r14
    8650:	88 0f       	add	r24, r24
    8652:	99 1f       	adc	r25, r25
    8654:	9c 01       	movw	r18, r24
    8656:	22 0f       	add	r18, r18
    8658:	33 1f       	adc	r19, r19
    865a:	22 0f       	add	r18, r18
    865c:	33 1f       	adc	r19, r19
    865e:	22 0f       	add	r18, r18
    8660:	33 1f       	adc	r19, r19
    8662:	28 1b       	sub	r18, r24
    8664:	39 0b       	sbc	r19, r25
    8666:	c9 01       	movw	r24, r18
    8668:	8e 59       	subi	r24, 0x9E	; 158
    866a:	9f 4d       	sbci	r25, 0xDF	; 223
    866c:	fc 01       	movw	r30, r24
    866e:	40 83       	st	Z, r20
    8670:	51 83       	std	Z+1, r21	; 0x01
    8672:	c7 01       	movw	r24, r14
    8674:	88 0f       	add	r24, r24
    8676:	99 1f       	adc	r25, r25
    8678:	9c 01       	movw	r18, r24
    867a:	22 0f       	add	r18, r18
    867c:	33 1f       	adc	r19, r19
    867e:	22 0f       	add	r18, r18
    8680:	33 1f       	adc	r19, r19
    8682:	22 0f       	add	r18, r18
    8684:	33 1f       	adc	r19, r19
    8686:	28 1b       	sub	r18, r24
    8688:	39 0b       	sbc	r19, r25
    868a:	c9 01       	movw	r24, r18
    868c:	8e 59       	subi	r24, 0x9E	; 158
    868e:	9f 4d       	sbci	r25, 0xDF	; 223
    8690:	dc 01       	movw	r26, r24
    8692:	4d 91       	ld	r20, X+
    8694:	5c 91       	ld	r21, X
    8696:	c8 01       	movw	r24, r16
    8698:	88 0f       	add	r24, r24
    869a:	99 1f       	adc	r25, r25
    869c:	9c 01       	movw	r18, r24
    869e:	22 0f       	add	r18, r18
    86a0:	33 1f       	adc	r19, r19
    86a2:	22 0f       	add	r18, r18
    86a4:	33 1f       	adc	r19, r19
    86a6:	22 0f       	add	r18, r18
    86a8:	33 1f       	adc	r19, r19
    86aa:	28 1b       	sub	r18, r24
    86ac:	39 0b       	sbc	r19, r25
    86ae:	c9 01       	movw	r24, r18
    86b0:	86 5a       	subi	r24, 0xA6	; 166
    86b2:	9f 4d       	sbci	r25, 0xDF	; 223
    86b4:	fc 01       	movw	r30, r24
    86b6:	40 83       	st	Z, r20
    86b8:	51 83       	std	Z+1, r21	; 0x01
    86ba:	c8 01       	movw	r24, r16
    86bc:	88 0f       	add	r24, r24
    86be:	99 1f       	adc	r25, r25
    86c0:	9c 01       	movw	r18, r24
    86c2:	22 0f       	add	r18, r18
    86c4:	33 1f       	adc	r19, r19
    86c6:	22 0f       	add	r18, r18
    86c8:	33 1f       	adc	r19, r19
    86ca:	22 0f       	add	r18, r18
    86cc:	33 1f       	adc	r19, r19
    86ce:	28 1b       	sub	r18, r24
    86d0:	39 0b       	sbc	r19, r25
    86d2:	c9 01       	movw	r24, r18
    86d4:	86 5a       	subi	r24, 0xA6	; 166
    86d6:	9f 4d       	sbci	r25, 0xDF	; 223
    86d8:	dc 01       	movw	r26, r24
    86da:	4d 91       	ld	r20, X+
    86dc:	5c 91       	ld	r21, X
    86de:	11 97       	sbiw	r26, 0x01	; 1
    86e0:	c6 01       	movw	r24, r12
    86e2:	88 0f       	add	r24, r24
    86e4:	99 1f       	adc	r25, r25
    86e6:	9c 01       	movw	r18, r24
    86e8:	22 0f       	add	r18, r18
    86ea:	33 1f       	adc	r19, r19
    86ec:	22 0f       	add	r18, r18
    86ee:	33 1f       	adc	r19, r19
    86f0:	22 0f       	add	r18, r18
    86f2:	33 1f       	adc	r19, r19
    86f4:	28 1b       	sub	r18, r24
    86f6:	39 0b       	sbc	r19, r25
    86f8:	c9 01       	movw	r24, r18
    86fa:	82 5a       	subi	r24, 0xA2	; 162
    86fc:	9f 4d       	sbci	r25, 0xDF	; 223
    86fe:	fc 01       	movw	r30, r24
    8700:	40 83       	st	Z, r20
    8702:	51 83       	std	Z+1, r21	; 0x01
	// Setup other peripherals:
	setupDbg();
	setupUsb();
	
	// Sample each of the joysticks to set the center values:
	for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    8704:	89 81       	ldd	r24, Y+1	; 0x01
    8706:	8f 5f       	subi	r24, 0xFF	; 255
    8708:	89 83       	std	Y+1, r24	; 0x01
    870a:	89 81       	ldd	r24, Y+1	; 0x01
    870c:	82 30       	cpi	r24, 0x02	; 2
    870e:	08 f4       	brcc	.+2      	; 0x8712 <main+0x280>
    8710:	06 cf       	rjmp	.-500    	; 0x851e <main+0x8c>
		joysticks[i].previous_x = joysticks[i].center_x = joysticks[i].current_x  = sampleAnalogChannel(joysticks[i].adc_channel_x);
		joysticks[i].previous_y = joysticks[i].center_y = joysticks[i].current_y  = sampleAnalogChannel(joysticks[i].adc_channel_y);
	}	
	
	sleepmgr_init(); // Initialize Sleep Manager
    8712:	88 de       	rcall	.-752    	; 0x8424 <sleepmgr_init>
	enableSysTick(); // Enable System clock	
    8714:	0e 94 99 28 	call	0x5132	; 0x5132 <enableSysTick>
	
	SetupStartPinExternalInterrupt();
    8718:	9d d4       	rcall	.+2362   	; 0x9054 <SetupStartPinExternalInterrupt>
	SetupChrgStatPinExternalInterrupt();
    871a:	0e 94 98 07 	call	0xf30	; 0xf30 <SetupChrgStatPinExternalInterrupt>
	
	pmic_init(); // Enable low/mid/high level interrupts
    871e:	ad de       	rcall	.-678    	; 0x847a <pmic_init>
	cpu_irq_enable(); // Global interrupt enable
    8720:	78 94       	sei
	
	turnedOn = powerOn(global_header.powerOffSoftware);
    8722:	80 91 28 28 	lds	r24, 0x2828
    8726:	88 1f       	adc	r24, r24
    8728:	88 27       	eor	r24, r24
    872a:	88 1f       	adc	r24, r24
    872c:	90 91 29 28 	lds	r25, 0x2829
    8730:	9f 73       	andi	r25, 0x3F	; 63
    8732:	99 0f       	add	r25, r25
    8734:	89 2b       	or	r24, r25
    8736:	88 2f       	mov	r24, r24
    8738:	90 e0       	ldi	r25, 0x00	; 0
    873a:	21 e0       	ldi	r18, 0x01	; 1
    873c:	00 97       	sbiw	r24, 0x00	; 0
    873e:	09 f4       	brne	.+2      	; 0x8742 <main+0x2b0>
    8740:	20 e0       	ldi	r18, 0x00	; 0
    8742:	82 2f       	mov	r24, r18
    8744:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <powerOn>
    8748:	80 93 4e 28 	sts	0x284E, r24
	
	// Set the global/controller configuration:
	which_cfg = whichConfiguration();
    874c:	0e 94 80 11 	call	0x2300	; 0x2300 <whichConfiguration>
    8750:	88 87       	std	Y+8, r24	; 0x08
	loadConfiguration(which_cfg);
    8752:	88 85       	ldd	r24, Y+8	; 0x08
    8754:	0e 94 ae 10 	call	0x215c	; 0x215c <loadConfiguration>
	
	selectHandlers();
    8758:	f4 d3       	rcall	.+2024   	; 0x8f42 <selectHandlers>
	setupLEDs(!global_header.led_G_D0_B_D1);
    875a:	80 91 29 28 	lds	r24, 0x2829
    875e:	82 95       	swap	r24
    8760:	86 95       	lsr	r24
    8762:	86 95       	lsr	r24
    8764:	83 70       	andi	r24, 0x03	; 3
    8766:	90 91 2a 28 	lds	r25, 0x282A
    876a:	9f 73       	andi	r25, 0x3F	; 63
    876c:	99 0f       	add	r25, r25
    876e:	99 0f       	add	r25, r25
    8770:	89 2b       	or	r24, r25
    8772:	98 2f       	mov	r25, r24
    8774:	81 e0       	ldi	r24, 0x01	; 1
    8776:	99 23       	and	r25, r25
    8778:	09 f0       	breq	.+2      	; 0x877c <main+0x2ea>
    877a:	80 e0       	ldi	r24, 0x00	; 0
    877c:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <setupLEDs>

	// Send startup message:
	sendUSBLine("| DRONE | Version " STRINGIFY_EXPANDED(SW_VERSION));
    8780:	82 ef       	ldi	r24, 0xF2	; 242
    8782:	91 e2       	ldi	r25, 0x21	; 33
    8784:	0e 94 c5 29 	call	0x538a	; 0x538a <sendUSBLine>
	sendUSBLine(BUILD_DATE_TIME);
    8788:	8b e0       	ldi	r24, 0x0B	; 11
    878a:	92 e2       	ldi	r25, 0x22	; 34
    878c:	0e 94 c5 29 	call	0x538a	; 0x538a <sendUSBLine>
	
	sendDBGLine("| DRONE | Version " STRINGIFY_EXPANDED(SW_VERSION));
    8790:	82 ef       	ldi	r24, 0xF2	; 242
    8792:	91 e2       	ldi	r25, 0x21	; 33
    8794:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
	
	initBTComms(global_header.bluetooth_mode_names[ccc.mode]);
    8798:	80 91 50 28 	lds	r24, 0x2850
    879c:	88 2f       	mov	r24, r24
    879e:	90 e0       	ldi	r25, 0x00	; 0
    87a0:	04 96       	adiw	r24, 0x04	; 4
    87a2:	8d 5d       	subi	r24, 0xDD	; 221
    87a4:	97 4d       	sbci	r25, 0xD7	; 215
    87a6:	f0 dc       	rcall	.-1568   	; 0x8188 <initBTComms>

	// Initialize the button handler:
	wdt_reset();
    87a8:	a8 95       	wdr
	if (button_handler_init != NULL) {
    87aa:	80 91 1b 28 	lds	r24, 0x281B
    87ae:	90 91 1c 28 	lds	r25, 0x281C
    87b2:	00 97       	sbiw	r24, 0x00	; 0
    87b4:	49 f0       	breq	.+18     	; 0x87c8 <main+0x336>
		button_handler_init(&ccc);
    87b6:	20 91 1b 28 	lds	r18, 0x281B
    87ba:	30 91 1c 28 	lds	r19, 0x281C
    87be:	80 e5       	ldi	r24, 0x50	; 80
    87c0:	98 e2       	ldi	r25, 0x28	; 40
    87c2:	f9 01       	movw	r30, r18
    87c4:	09 95       	icall
    87c6:	04 c0       	rjmp	.+8      	; 0x87d0 <main+0x33e>
	}
	else
	{
		sendDBGLine("!button_handler_init == null!");
    87c8:	81 e3       	ldi	r24, 0x31	; 49
    87ca:	92 e2       	ldi	r25, 0x22	; 34
    87cc:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
	}		

	// Start the timeouts:
	startTimeout(&rptTimeout,REPORT_TIMEOUT_MS);
    87d0:	ce 01       	movw	r24, r28
    87d2:	8e 5a       	subi	r24, 0xAE	; 174
    87d4:	9f 4f       	sbci	r25, 0xFF	; 255
    87d6:	43 e2       	ldi	r20, 0x23	; 35
    87d8:	50 e0       	ldi	r21, 0x00	; 0
    87da:	60 e0       	ldi	r22, 0x00	; 0
    87dc:	70 e0       	ldi	r23, 0x00	; 0
    87de:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
	WatchdogPet();
    87e2:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
	
	startTimeout(&buttonSampleTimeout, BUTTON_SAMPLE_TIMEOUT_MS);
    87e6:	ce 01       	movw	r24, r28
    87e8:	0a 96       	adiw	r24, 0x0a	; 10
    87ea:	46 e0       	ldi	r20, 0x06	; 6
    87ec:	50 e0       	ldi	r21, 0x00	; 0
    87ee:	60 e0       	ldi	r22, 0x00	; 0
    87f0:	70 e0       	ldi	r23, 0x00	; 0
    87f2:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
	WatchdogPet();
    87f6:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
	
	startTimeout(&joystickSampleTimeout, JOYSTICK_SAMPLE_TIMEOUT_MS);
    87fa:	ce 01       	movw	r24, r28
    87fc:	42 96       	adiw	r24, 0x12	; 18
    87fe:	46 e0       	ldi	r20, 0x06	; 6
    8800:	50 e0       	ldi	r21, 0x00	; 0
    8802:	60 e0       	ldi	r22, 0x00	; 0
    8804:	70 e0       	ldi	r23, 0x00	; 0
    8806:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
	WatchdogPet();
    880a:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
	
	startTimeout(&debugReportTimeout, DEBUG_REPORT_TIMEOUT_MS);
    880e:	ce 01       	movw	r24, r28
    8810:	8a 96       	adiw	r24, 0x2a	; 42
    8812:	48 ee       	ldi	r20, 0xE8	; 232
    8814:	53 e0       	ldi	r21, 0x03	; 3
    8816:	60 e0       	ldi	r22, 0x00	; 0
    8818:	70 e0       	ldi	r23, 0x00	; 0
    881a:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
	WatchdogPet();
    881e:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
	
	startTimeout(&batteryCheckTimeout, BATTERY_CHECK_TIMEOUT_MS);
    8822:	ce 01       	movw	r24, r28
    8824:	c2 96       	adiw	r24, 0x32	; 50
    8826:	40 e6       	ldi	r20, 0x60	; 96
    8828:	5a ee       	ldi	r21, 0xEA	; 234
    882a:	60 e0       	ldi	r22, 0x00	; 0
    882c:	70 e0       	ldi	r23, 0x00	; 0
    882e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
	WatchdogPet();
    8832:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
	
	startTimeout(&ledTimeout, LED_TIMEOUT_MS);
    8836:	ce 01       	movw	r24, r28
    8838:	ca 96       	adiw	r24, 0x3a	; 58
    883a:	48 ee       	ldi	r20, 0xE8	; 232
    883c:	53 e0       	ldi	r21, 0x03	; 3
    883e:	60 e0       	ldi	r22, 0x00	; 0
    8840:	70 e0       	ldi	r23, 0x00	; 0
    8842:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
	WatchdogPet();	
    8846:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
	
	startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    884a:	ce 01       	movw	r24, r28
    884c:	8e 5b       	subi	r24, 0xBE	; 190
    884e:	9f 4f       	sbci	r25, 0xFF	; 255
    8850:	40 ee       	ldi	r20, 0xE0	; 224
    8852:	53 e9       	ldi	r21, 0x93	; 147
    8854:	64 e0       	ldi	r22, 0x04	; 4
    8856:	70 e0       	ldi	r23, 0x00	; 0
    8858:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
	WatchdogPet();
    885c:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
	
	// Except the poweroff timeout:
	cancelTimeout(&powerOffTimeout);
    8860:	ce 01       	movw	r24, r28
    8862:	4a 96       	adiw	r24, 0x1a	; 26
    8864:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <cancelTimeout>
	
	// Main loop:
	sendDBGLine("Entering Main loop");
    8868:	8f e4       	ldi	r24, 0x4F	; 79
    886a:	92 e2       	ldi	r25, 0x22	; 34
    886c:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <sendDBGLine>
	while(1) {
		
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
			!checkTimeout(&rptTimeout) && 
    8870:	ce 01       	movw	r24, r28
    8872:	8e 5a       	subi	r24, 0xAE	; 174
    8874:	9f 4f       	sbci	r25, 0xFF	; 255
    8876:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    887a:	98 2f       	mov	r25, r24
    887c:	81 e0       	ldi	r24, 0x01	; 1
    887e:	89 27       	eor	r24, r25
	// Main loop:
	sendDBGLine("Entering Main loop");
	while(1) {
		
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
    8880:	88 23       	and	r24, r24
    8882:	31 f1       	breq	.+76     	; 0x88d0 <main+0x43e>
			!checkTimeout(&rptTimeout) && 
			!checkTimeout(&buttonSampleTimeout) && 
    8884:	ce 01       	movw	r24, r28
    8886:	0a 96       	adiw	r24, 0x0a	; 10
    8888:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    888c:	98 2f       	mov	r25, r24
    888e:	81 e0       	ldi	r24, 0x01	; 1
    8890:	89 27       	eor	r24, r25
	sendDBGLine("Entering Main loop");
	while(1) {
		
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
			!checkTimeout(&rptTimeout) && 
    8892:	88 23       	and	r24, r24
    8894:	e9 f0       	breq	.+58     	; 0x88d0 <main+0x43e>
			!checkTimeout(&buttonSampleTimeout) && 
			!checkTimeout(&joystickSampleTimeout) && 
    8896:	ce 01       	movw	r24, r28
    8898:	42 96       	adiw	r24, 0x12	; 18
    889a:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    889e:	98 2f       	mov	r25, r24
    88a0:	81 e0       	ldi	r24, 0x01	; 1
    88a2:	89 27       	eor	r24, r25
	while(1) {
		
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
			!checkTimeout(&rptTimeout) && 
			!checkTimeout(&buttonSampleTimeout) && 
    88a4:	88 23       	and	r24, r24
    88a6:	a1 f0       	breq	.+40     	; 0x88d0 <main+0x43e>
			!checkTimeout(&joystickSampleTimeout) && 
			!checkTimeout(&batteryCheckTimeout) &&
    88a8:	ce 01       	movw	r24, r28
    88aa:	c2 96       	adiw	r24, 0x32	; 50
    88ac:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    88b0:	98 2f       	mov	r25, r24
    88b2:	81 e0       	ldi	r24, 0x01	; 1
    88b4:	89 27       	eor	r24, r25
		
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
			!checkTimeout(&rptTimeout) && 
			!checkTimeout(&buttonSampleTimeout) && 
			!checkTimeout(&joystickSampleTimeout) && 
    88b6:	88 23       	and	r24, r24
    88b8:	59 f0       	breq	.+22     	; 0x88d0 <main+0x43e>
			!checkTimeout(&batteryCheckTimeout) &&
			!checkTimeout(&ledTimeout)
    88ba:	ce 01       	movw	r24, r28
    88bc:	ca 96       	adiw	r24, 0x3a	; 58
    88be:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    88c2:	98 2f       	mov	r25, r24
    88c4:	81 e0       	ldi	r24, 0x01	; 1
    88c6:	89 27       	eor	r24, r25
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
			!checkTimeout(&rptTimeout) && 
			!checkTimeout(&buttonSampleTimeout) && 
			!checkTimeout(&joystickSampleTimeout) && 
			!checkTimeout(&batteryCheckTimeout) &&
    88c8:	88 23       	and	r24, r24
    88ca:	11 f0       	breq	.+4      	; 0x88d0 <main+0x43e>
			!checkTimeout(&ledTimeout)
		) 
		{
			sleepmgr_sleep(SLEEPMGR_IDLE);	
    88cc:	81 e0       	ldi	r24, 0x01	; 1
    88ce:	78 dd       	rcall	.-1296   	; 0x83c0 <sleepmgr_sleep>
		}		
		
		// Pet the WDT:
		WatchdogPet();
    88d0:	0e 94 b8 2a 	call	0x5570	; 0x5570 <WatchdogPet>
		WatchdogTaskRunning(TASK_MAIN);
    88d4:	80 e0       	ldi	r24, 0x00	; 0
    88d6:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <WatchdogTaskRunning>
		
		if (checkTimeout(&batteryCheckTimeout)) 
    88da:	ce 01       	movw	r24, r28
    88dc:	c2 96       	adiw	r24, 0x32	; 50
    88de:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    88e2:	88 23       	and	r24, r24
    88e4:	81 f0       	breq	.+32     	; 0x8906 <main+0x474>
		{
			//Time to check the controller status?
			startTimeout(&batteryCheckTimeout, BATTERY_CHECK_TIMEOUT_MS);
    88e6:	ce 01       	movw	r24, r28
    88e8:	c2 96       	adiw	r24, 0x32	; 50
    88ea:	40 e6       	ldi	r20, 0x60	; 96
    88ec:	5a ee       	ldi	r21, 0xEA	; 234
    88ee:	60 e0       	ldi	r22, 0x00	; 0
    88f0:	70 e0       	ldi	r23, 0x00	; 0
    88f2:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
			battery_level = sampleAnalogChannel(BATTERY_DETECT_ADC);
    88f6:	83 e0       	ldi	r24, 0x03	; 3
    88f8:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    88fc:	8d 83       	std	Y+5, r24	; 0x05
    88fe:	9e 83       	std	Y+6, r25	; 0x06
			chargingDone = IsChargingDone();
    8900:	0e 94 f4 06 	call	0xde8	; 0xde8 <IsChargingDone>
    8904:	8f 83       	std	Y+7, r24	; 0x07
		}
		
		if (checkTimeout(&ledTimeout)) 
    8906:	ce 01       	movw	r24, r28
    8908:	ca 96       	adiw	r24, 0x3a	; 58
    890a:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    890e:	88 23       	and	r24, r24
    8910:	01 f1       	breq	.+64     	; 0x8952 <main+0x4c0>
		{
			startTimeout(&ledTimeout, LED_TIMEOUT_MS);
    8912:	ce 01       	movw	r24, r28
    8914:	ca 96       	adiw	r24, 0x3a	; 58
    8916:	48 ee       	ldi	r20, 0xE8	; 232
    8918:	53 e0       	ldi	r21, 0x03	; 3
    891a:	60 e0       	ldi	r22, 0x00	; 0
    891c:	70 e0       	ldi	r23, 0x00	; 0
    891e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
			//Change the pulse state:
			pulse = !pulse;
    8922:	80 91 4f 28 	lds	r24, 0x284F
    8926:	88 2f       	mov	r24, r24
    8928:	90 e0       	ldi	r25, 0x00	; 0
    892a:	21 e0       	ldi	r18, 0x01	; 1
    892c:	00 97       	sbiw	r24, 0x00	; 0
    892e:	09 f4       	brne	.+2      	; 0x8932 <main+0x4a0>
    8930:	20 e0       	ldi	r18, 0x00	; 0
    8932:	81 e0       	ldi	r24, 0x01	; 1
    8934:	82 27       	eor	r24, r18
    8936:	88 2f       	mov	r24, r24
    8938:	90 e0       	ldi	r25, 0x00	; 0
    893a:	81 70       	andi	r24, 0x01	; 1
    893c:	80 93 4f 28 	sts	0x284F, r24
			MaintainControllerStatus(pulse,chargingDone,battery_level);
    8940:	20 91 4f 28 	lds	r18, 0x284F
    8944:	8d 81       	ldd	r24, Y+5	; 0x05
    8946:	9e 81       	ldd	r25, Y+6	; 0x06
    8948:	ac 01       	movw	r20, r24
    894a:	6f 81       	ldd	r22, Y+7	; 0x07
    894c:	82 2f       	mov	r24, r18
    894e:	0e 94 0c 07 	call	0xe18	; 0xe18 <MaintainControllerStatus>
		}
		
		if (ccc.mode==BTM_GAMEPAD && checkTimeout(&rptTimeout)) 
    8952:	80 91 50 28 	lds	r24, 0x2850
    8956:	82 30       	cpi	r24, 0x02	; 2
    8958:	49 f5       	brne	.+82     	; 0x89ac <main+0x51a>
    895a:	ce 01       	movw	r24, r28
    895c:	8e 5a       	subi	r24, 0xAE	; 174
    895e:	9f 4f       	sbci	r25, 0xFF	; 255
    8960:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    8964:	88 23       	and	r24, r24
    8966:	11 f1       	breq	.+68     	; 0x89ac <main+0x51a>
		{
			startTimeout(&rptTimeout, REPORT_TIMEOUT_MS);
    8968:	ce 01       	movw	r24, r28
    896a:	8e 5a       	subi	r24, 0xAE	; 174
    896c:	9f 4f       	sbci	r25, 0xFF	; 255
    896e:	43 e2       	ldi	r20, 0x23	; 35
    8970:	50 e0       	ldi	r21, 0x00	; 0
    8972:	60 e0       	ldi	r22, 0x00	; 0
    8974:	70 e0       	ldi	r23, 0x00	; 0
    8976:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
			
			button_handler(REPORT,0);
    897a:	20 91 1d 28 	lds	r18, 0x281D
    897e:	30 91 1e 28 	lds	r19, 0x281E
    8982:	60 e0       	ldi	r22, 0x00	; 0
    8984:	81 e1       	ldi	r24, 0x11	; 17
    8986:	f9 01       	movw	r30, r18
    8988:	09 95       	icall
			
			//delta toggling for auto power off
			if(delta)
    898a:	80 91 32 27 	lds	r24, 0x2732
    898e:	88 23       	and	r24, r24
    8990:	59 f0       	breq	.+22     	; 0x89a8 <main+0x516>
			{
				startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    8992:	ce 01       	movw	r24, r28
    8994:	8e 5b       	subi	r24, 0xBE	; 190
    8996:	9f 4f       	sbci	r25, 0xFF	; 255
    8998:	40 ee       	ldi	r20, 0xE0	; 224
    899a:	53 e9       	ldi	r21, 0x93	; 147
    899c:	64 e0       	ldi	r22, 0x04	; 4
    899e:	70 e0       	ldi	r23, 0x00	; 0
    89a0:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
				delta = false;
    89a4:	10 92 32 27 	sts	0x2732, r1
			}
			GamepadSendReport(); // send gamepad report
    89a8:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <GamepadSendReport>
		}
		
		if (ccc.mode==BTM_JOYSTICK_ANALOG && checkTimeout(&rptTimeout))
    89ac:	80 91 50 28 	lds	r24, 0x2850
    89b0:	87 30       	cpi	r24, 0x07	; 7
    89b2:	49 f5       	brne	.+82     	; 0x8a06 <main+0x574>
    89b4:	ce 01       	movw	r24, r28
    89b6:	8e 5a       	subi	r24, 0xAE	; 174
    89b8:	9f 4f       	sbci	r25, 0xFF	; 255
    89ba:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    89be:	88 23       	and	r24, r24
    89c0:	11 f1       	breq	.+68     	; 0x8a06 <main+0x574>
		{
			startTimeout(&rptTimeout, REPORT_TIMEOUT_MS);
    89c2:	ce 01       	movw	r24, r28
    89c4:	8e 5a       	subi	r24, 0xAE	; 174
    89c6:	9f 4f       	sbci	r25, 0xFF	; 255
    89c8:	43 e2       	ldi	r20, 0x23	; 35
    89ca:	50 e0       	ldi	r21, 0x00	; 0
    89cc:	60 e0       	ldi	r22, 0x00	; 0
    89ce:	70 e0       	ldi	r23, 0x00	; 0
    89d0:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
			
			button_handler(REPORT,0);
    89d4:	20 91 1d 28 	lds	r18, 0x281D
    89d8:	30 91 1e 28 	lds	r19, 0x281E
    89dc:	60 e0       	ldi	r22, 0x00	; 0
    89de:	81 e1       	ldi	r24, 0x11	; 17
    89e0:	f9 01       	movw	r30, r18
    89e2:	09 95       	icall
			
			//delta toggling for auto power off
			if(jdelta)
    89e4:	80 91 3b 27 	lds	r24, 0x273B
    89e8:	88 23       	and	r24, r24
    89ea:	59 f0       	breq	.+22     	; 0x8a02 <main+0x570>
			{
				startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    89ec:	ce 01       	movw	r24, r28
    89ee:	8e 5b       	subi	r24, 0xBE	; 190
    89f0:	9f 4f       	sbci	r25, 0xFF	; 255
    89f2:	40 ee       	ldi	r20, 0xE0	; 224
    89f4:	53 e9       	ldi	r21, 0x93	; 147
    89f6:	64 e0       	ldi	r22, 0x04	; 4
    89f8:	70 e0       	ldi	r23, 0x00	; 0
    89fa:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
				jdelta = false;
    89fe:	10 92 3b 27 	sts	0x273B, r1
			}
			jStickSendReport(); // send joystick report 
    8a02:	0e 94 4a 1a 	call	0x3494	; 0x3494 <jStickSendReport>
		}
		
		// Is it time to sample the buttons?
		if (checkTimeout(&buttonSampleTimeout)) {
    8a06:	ce 01       	movw	r24, r28
    8a08:	0a 96       	adiw	r24, 0x0a	; 10
    8a0a:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    8a0e:	88 23       	and	r24, r24
    8a10:	09 f4       	brne	.+2      	; 0x8a14 <main+0x582>
    8a12:	69 c1       	rjmp	.+722    	; 0x8ce6 <main+0x854>
			startTimeout(&buttonSampleTimeout, BUTTON_SAMPLE_TIMEOUT_MS);
    8a14:	ce 01       	movw	r24, r28
    8a16:	0a 96       	adiw	r24, 0x0a	; 10
    8a18:	46 e0       	ldi	r20, 0x06	; 6
    8a1a:	50 e0       	ldi	r21, 0x00	; 0
    8a1c:	60 e0       	ldi	r22, 0x00	; 0
    8a1e:	70 e0       	ldi	r23, 0x00	; 0
    8a20:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
			
			// Scan the current state of each button:
			for (i = 0; i < NUM_BUTTONS; i++) {
    8a24:	19 82       	std	Y+1, r1	; 0x01
    8a26:	59 c0       	rjmp	.+178    	; 0x8ada <main+0x648>
				// Is the button currently released, but being pressed?
                tempBState = buttons[i].state;
    8a28:	89 81       	ldd	r24, Y+1	; 0x01
    8a2a:	88 2f       	mov	r24, r24
    8a2c:	90 e0       	ldi	r25, 0x00	; 0
    8a2e:	88 0f       	add	r24, r24
    8a30:	99 1f       	adc	r25, r25
    8a32:	88 0f       	add	r24, r24
    8a34:	99 1f       	adc	r25, r25
    8a36:	8a 5f       	subi	r24, 0xFA	; 250
    8a38:	9f 4d       	sbci	r25, 0xDF	; 223
    8a3a:	dc 01       	movw	r26, r24
    8a3c:	8c 91       	ld	r24, X
    8a3e:	89 87       	std	Y+9, r24	; 0x09
				if ((tempBState == BUTTON_RELEASED) && buttonActivated((enum ButtonName)i)) {
    8a40:	89 85       	ldd	r24, Y+9	; 0x09
    8a42:	88 23       	and	r24, r24
    8a44:	d9 f4       	brne	.+54     	; 0x8a7c <main+0x5ea>
    8a46:	89 81       	ldd	r24, Y+1	; 0x01
    8a48:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    8a4c:	88 23       	and	r24, r24
    8a4e:	b1 f0       	breq	.+44     	; 0x8a7c <main+0x5ea>
					// Then increment the debounce counter:
					buttons[i].debounce_counter++;
    8a50:	89 81       	ldd	r24, Y+1	; 0x01
    8a52:	88 2f       	mov	r24, r24
    8a54:	90 e0       	ldi	r25, 0x00	; 0
    8a56:	9c 01       	movw	r18, r24
    8a58:	22 0f       	add	r18, r18
    8a5a:	33 1f       	adc	r19, r19
    8a5c:	22 0f       	add	r18, r18
    8a5e:	33 1f       	adc	r19, r19
    8a60:	2b 5f       	subi	r18, 0xFB	; 251
    8a62:	3f 4d       	sbci	r19, 0xDF	; 223
    8a64:	f9 01       	movw	r30, r18
    8a66:	20 81       	ld	r18, Z
    8a68:	2f 5f       	subi	r18, 0xFF	; 255
    8a6a:	88 0f       	add	r24, r24
    8a6c:	99 1f       	adc	r25, r25
    8a6e:	88 0f       	add	r24, r24
    8a70:	99 1f       	adc	r25, r25
    8a72:	8b 5f       	subi	r24, 0xFB	; 251
    8a74:	9f 4d       	sbci	r25, 0xDF	; 223
    8a76:	dc 01       	movw	r26, r24
    8a78:	2c 93       	st	X, r18
    8a7a:	2c c0       	rjmp	.+88     	; 0x8ad4 <main+0x642>
				}
				// Or is the button currently pressed, but being released?
				else if ((tempBState != BUTTON_RELEASED) && !buttonActivated((enum ButtonName)i)) {
    8a7c:	89 85       	ldd	r24, Y+9	; 0x09
    8a7e:	88 23       	and	r24, r24
    8a80:	f1 f0       	breq	.+60     	; 0x8abe <main+0x62c>
    8a82:	89 81       	ldd	r24, Y+1	; 0x01
    8a84:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    8a88:	98 2f       	mov	r25, r24
    8a8a:	81 e0       	ldi	r24, 0x01	; 1
    8a8c:	89 27       	eor	r24, r25
    8a8e:	88 23       	and	r24, r24
    8a90:	b1 f0       	breq	.+44     	; 0x8abe <main+0x62c>
					// Then increment the debounce counter:
					buttons[i].debounce_counter++;
    8a92:	89 81       	ldd	r24, Y+1	; 0x01
    8a94:	88 2f       	mov	r24, r24
    8a96:	90 e0       	ldi	r25, 0x00	; 0
    8a98:	9c 01       	movw	r18, r24
    8a9a:	22 0f       	add	r18, r18
    8a9c:	33 1f       	adc	r19, r19
    8a9e:	22 0f       	add	r18, r18
    8aa0:	33 1f       	adc	r19, r19
    8aa2:	2b 5f       	subi	r18, 0xFB	; 251
    8aa4:	3f 4d       	sbci	r19, 0xDF	; 223
    8aa6:	f9 01       	movw	r30, r18
    8aa8:	20 81       	ld	r18, Z
    8aaa:	2f 5f       	subi	r18, 0xFF	; 255
    8aac:	88 0f       	add	r24, r24
    8aae:	99 1f       	adc	r25, r25
    8ab0:	88 0f       	add	r24, r24
    8ab2:	99 1f       	adc	r25, r25
    8ab4:	8b 5f       	subi	r24, 0xFB	; 251
    8ab6:	9f 4d       	sbci	r25, 0xDF	; 223
    8ab8:	dc 01       	movw	r26, r24
    8aba:	2c 93       	st	X, r18
    8abc:	0b c0       	rjmp	.+22     	; 0x8ad4 <main+0x642>
				}
				// Otherwise reset the debounce counter:
				else {
					buttons[i].debounce_counter = 0;
    8abe:	89 81       	ldd	r24, Y+1	; 0x01
    8ac0:	88 2f       	mov	r24, r24
    8ac2:	90 e0       	ldi	r25, 0x00	; 0
    8ac4:	88 0f       	add	r24, r24
    8ac6:	99 1f       	adc	r25, r25
    8ac8:	88 0f       	add	r24, r24
    8aca:	99 1f       	adc	r25, r25
    8acc:	8b 5f       	subi	r24, 0xFB	; 251
    8ace:	9f 4d       	sbci	r25, 0xDF	; 223
    8ad0:	fc 01       	movw	r30, r24
    8ad2:	10 82       	st	Z, r1
		// Is it time to sample the buttons?
		if (checkTimeout(&buttonSampleTimeout)) {
			startTimeout(&buttonSampleTimeout, BUTTON_SAMPLE_TIMEOUT_MS);
			
			// Scan the current state of each button:
			for (i = 0; i < NUM_BUTTONS; i++) {
    8ad4:	89 81       	ldd	r24, Y+1	; 0x01
    8ad6:	8f 5f       	subi	r24, 0xFF	; 255
    8ad8:	89 83       	std	Y+1, r24	; 0x01
    8ada:	89 81       	ldd	r24, Y+1	; 0x01
    8adc:	80 31       	cpi	r24, 0x10	; 16
    8ade:	08 f4       	brcc	.+2      	; 0x8ae2 <main+0x650>
    8ae0:	a3 cf       	rjmp	.-186    	; 0x8a28 <main+0x596>
					buttons[i].debounce_counter = 0;
				}
			}
			
			// Handle button state changes:
			for (i = 0; i < NUM_BUTTONS; i++) {
    8ae2:	19 82       	std	Y+1, r1	; 0x01
    8ae4:	90 c0       	rjmp	.+288    	; 0x8c06 <main+0x774>
				// Is the debounce counter pass its threshold?
				if (buttons[i].debounce_counter >= DEBOUNCE_PERIOD) {
    8ae6:	89 81       	ldd	r24, Y+1	; 0x01
    8ae8:	88 2f       	mov	r24, r24
    8aea:	90 e0       	ldi	r25, 0x00	; 0
    8aec:	88 0f       	add	r24, r24
    8aee:	99 1f       	adc	r25, r25
    8af0:	88 0f       	add	r24, r24
    8af2:	99 1f       	adc	r25, r25
    8af4:	8b 5f       	subi	r24, 0xFB	; 251
    8af6:	9f 4d       	sbci	r25, 0xDF	; 223
    8af8:	dc 01       	movw	r26, r24
    8afa:	8c 91       	ld	r24, X
    8afc:	84 30       	cpi	r24, 0x04	; 4
    8afe:	08 f4       	brcc	.+2      	; 0x8b02 <main+0x670>
    8b00:	7f c0       	rjmp	.+254    	; 0x8c00 <main+0x76e>
					// Then we need to send a press/release event.
					
					// Clear the debounce counter:
					buttons[i].debounce_counter = 0;
    8b02:	89 81       	ldd	r24, Y+1	; 0x01
    8b04:	88 2f       	mov	r24, r24
    8b06:	90 e0       	ldi	r25, 0x00	; 0
    8b08:	88 0f       	add	r24, r24
    8b0a:	99 1f       	adc	r25, r25
    8b0c:	88 0f       	add	r24, r24
    8b0e:	99 1f       	adc	r25, r25
    8b10:	8b 5f       	subi	r24, 0xFB	; 251
    8b12:	9f 4d       	sbci	r25, 0xDF	; 223
    8b14:	fc 01       	movw	r30, r24
    8b16:	10 82       	st	Z, r1

					// Is the button's state currently released?
					if (buttons[i].state == BUTTON_RELEASED) {
    8b18:	89 81       	ldd	r24, Y+1	; 0x01
    8b1a:	88 2f       	mov	r24, r24
    8b1c:	90 e0       	ldi	r25, 0x00	; 0
    8b1e:	88 0f       	add	r24, r24
    8b20:	99 1f       	adc	r25, r25
    8b22:	88 0f       	add	r24, r24
    8b24:	99 1f       	adc	r25, r25
    8b26:	8a 5f       	subi	r24, 0xFA	; 250
    8b28:	9f 4d       	sbci	r25, 0xDF	; 223
    8b2a:	dc 01       	movw	r26, r24
    8b2c:	8c 91       	ld	r24, X
    8b2e:	88 23       	and	r24, r24
    8b30:	69 f4       	brne	.+26     	; 0x8b4c <main+0x6ba>
						// Then it needs to change to pressed:
						buttons[i].state = BUTTON_PRESSED;
    8b32:	89 81       	ldd	r24, Y+1	; 0x01
    8b34:	88 2f       	mov	r24, r24
    8b36:	90 e0       	ldi	r25, 0x00	; 0
    8b38:	88 0f       	add	r24, r24
    8b3a:	99 1f       	adc	r25, r25
    8b3c:	88 0f       	add	r24, r24
    8b3e:	99 1f       	adc	r25, r25
    8b40:	8a 5f       	subi	r24, 0xFA	; 250
    8b42:	9f 4d       	sbci	r25, 0xDF	; 223
    8b44:	21 e0       	ldi	r18, 0x01	; 1
    8b46:	fc 01       	movw	r30, r24
    8b48:	20 83       	st	Z, r18
    8b4a:	0b c0       	rjmp	.+22     	; 0x8b62 <main+0x6d0>
					}
					else {
						// Otherwise it needs to change to release:
						buttons[i].state = BUTTON_RELEASED;
    8b4c:	89 81       	ldd	r24, Y+1	; 0x01
    8b4e:	88 2f       	mov	r24, r24
    8b50:	90 e0       	ldi	r25, 0x00	; 0
    8b52:	88 0f       	add	r24, r24
    8b54:	99 1f       	adc	r25, r25
    8b56:	88 0f       	add	r24, r24
    8b58:	99 1f       	adc	r25, r25
    8b5a:	8a 5f       	subi	r24, 0xFA	; 250
    8b5c:	9f 4d       	sbci	r25, 0xDF	; 223
    8b5e:	dc 01       	movw	r26, r24
    8b60:	1c 92       	st	X, r1
					}
					
                    tempBState = buttons[i].state;
    8b62:	89 81       	ldd	r24, Y+1	; 0x01
    8b64:	88 2f       	mov	r24, r24
    8b66:	90 e0       	ldi	r25, 0x00	; 0
    8b68:	88 0f       	add	r24, r24
    8b6a:	99 1f       	adc	r25, r25
    8b6c:	88 0f       	add	r24, r24
    8b6e:	99 1f       	adc	r25, r25
    8b70:	8a 5f       	subi	r24, 0xFA	; 250
    8b72:	9f 4d       	sbci	r25, 0xDF	; 223
    8b74:	fc 01       	movw	r30, r24
    8b76:	80 81       	ld	r24, Z
    8b78:	89 87       	std	Y+9, r24	; 0x09

					// At this point the button has just changed states.
					// Time to notify the device/computer.
					if (button_handler != NULL) {
    8b7a:	80 91 1d 28 	lds	r24, 0x281D
    8b7e:	90 91 1e 28 	lds	r25, 0x281E
    8b82:	00 97       	sbiw	r24, 0x00	; 0
    8b84:	41 f1       	breq	.+80     	; 0x8bd6 <main+0x744>
						//TODO: optimize other modes to be like gamepad mode
						if( ccc.mode!=BTM_GAMEPAD )
    8b86:	80 91 50 28 	lds	r24, 0x2850
    8b8a:	82 30       	cpi	r24, 0x02	; 2
    8b8c:	49 f0       	breq	.+18     	; 0x8ba0 <main+0x70e>
						{
							startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    8b8e:	ce 01       	movw	r24, r28
    8b90:	8e 5b       	subi	r24, 0xBE	; 190
    8b92:	9f 4f       	sbci	r25, 0xFF	; 255
    8b94:	40 ee       	ldi	r20, 0xE0	; 224
    8b96:	53 e9       	ldi	r21, 0x93	; 147
    8b98:	64 e0       	ldi	r22, 0x04	; 4
    8b9a:	70 e0       	ldi	r23, 0x00	; 0
    8b9c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
						}
						if( ccc.mode!=BTM_JOYSTICK_ANALOG )
    8ba0:	80 91 50 28 	lds	r24, 0x2850
    8ba4:	87 30       	cpi	r24, 0x07	; 7
    8ba6:	49 f0       	breq	.+18     	; 0x8bba <main+0x728>
						{
							startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    8ba8:	ce 01       	movw	r24, r28
    8baa:	8e 5b       	subi	r24, 0xBE	; 190
    8bac:	9f 4f       	sbci	r25, 0xFF	; 255
    8bae:	40 ee       	ldi	r20, 0xE0	; 224
    8bb0:	53 e9       	ldi	r21, 0x93	; 147
    8bb2:	64 e0       	ldi	r22, 0x04	; 4
    8bb4:	70 e0       	ldi	r23, 0x00	; 0
    8bb6:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
						}
                        //filter sending subsequent B_START BUTTON_RELEASED event
                        if( !(B_START==i && BUTTON_RELEASED==tempBState) ) { 
    8bba:	89 81       	ldd	r24, Y+1	; 0x01
    8bbc:	88 30       	cpi	r24, 0x08	; 8
    8bbe:	19 f4       	brne	.+6      	; 0x8bc6 <main+0x734>
    8bc0:	89 85       	ldd	r24, Y+9	; 0x09
    8bc2:	88 23       	and	r24, r24
    8bc4:	41 f0       	breq	.+16     	; 0x8bd6 <main+0x744>
							  button_handler((enum ButtonName)i, tempBState);
    8bc6:	20 91 1d 28 	lds	r18, 0x281D
    8bca:	30 91 1e 28 	lds	r19, 0x281E
    8bce:	69 85       	ldd	r22, Y+9	; 0x09
    8bd0:	89 81       	ldd	r24, Y+1	; 0x01
    8bd2:	f9 01       	movw	r30, r18
    8bd4:	09 95       	icall
                        }
					}
					
					//Only send 1 B_START pressed message for the press event, 
					//  and filter all subsequent pressed messages until released
					if( B_START==i && BUTTON_PRESSED==buttons[B_START].state )
    8bd6:	89 81       	ldd	r24, Y+1	; 0x01
    8bd8:	88 30       	cpi	r24, 0x08	; 8
    8bda:	91 f4       	brne	.+36     	; 0x8c00 <main+0x76e>
    8bdc:	80 91 26 20 	lds	r24, 0x2026
    8be0:	81 30       	cpi	r24, 0x01	; 1
    8be2:	71 f4       	brne	.+28     	; 0x8c00 <main+0x76e>
					{
						buttons[B_START].state = BUTTON_LONG_PRESS;
    8be4:	82 e0       	ldi	r24, 0x02	; 2
    8be6:	80 93 26 20 	sts	0x2026, r24
                        doStartRelease = true;
    8bea:	81 e0       	ldi	r24, 0x01	; 1
    8bec:	8c 83       	std	Y+4, r24	; 0x04
                        startTimeout(&startReleaseTimeout, START_RELEASE_DLY_MS); //schedule B_START BUTTON_RELEASED event after delay
    8bee:	ce 01       	movw	r24, r28
    8bf0:	86 5b       	subi	r24, 0xB6	; 182
    8bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    8bf4:	46 e9       	ldi	r20, 0x96	; 150
    8bf6:	50 e0       	ldi	r21, 0x00	; 0
    8bf8:	60 e0       	ldi	r22, 0x00	; 0
    8bfa:	70 e0       	ldi	r23, 0x00	; 0
    8bfc:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
					buttons[i].debounce_counter = 0;
				}
			}
			
			// Handle button state changes:
			for (i = 0; i < NUM_BUTTONS; i++) {
    8c00:	89 81       	ldd	r24, Y+1	; 0x01
    8c02:	8f 5f       	subi	r24, 0xFF	; 255
    8c04:	89 83       	std	Y+1, r24	; 0x01
    8c06:	89 81       	ldd	r24, Y+1	; 0x01
    8c08:	80 31       	cpi	r24, 0x10	; 16
    8c0a:	08 f4       	brcc	.+2      	; 0x8c0e <main+0x77c>
    8c0c:	6c cf       	rjmp	.-296    	; 0x8ae6 <main+0x654>
					}
				}
				
			}

            if( doStartRelease && checkTimeout(&startReleaseTimeout) ) {
    8c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    8c10:	88 23       	and	r24, r24
    8c12:	81 f0       	breq	.+32     	; 0x8c34 <main+0x7a2>
    8c14:	ce 01       	movw	r24, r28
    8c16:	86 5b       	subi	r24, 0xB6	; 182
    8c18:	9f 4f       	sbci	r25, 0xFF	; 255
    8c1a:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    8c1e:	88 23       	and	r24, r24
    8c20:	49 f0       	breq	.+18     	; 0x8c34 <main+0x7a2>
				button_handler( B_START, BUTTON_RELEASED );  //send message with B_START released
    8c22:	20 91 1d 28 	lds	r18, 0x281D
    8c26:	30 91 1e 28 	lds	r19, 0x281E
    8c2a:	60 e0       	ldi	r22, 0x00	; 0
    8c2c:	88 e0       	ldi	r24, 0x08	; 8
    8c2e:	f9 01       	movw	r30, r18
    8c30:	09 95       	icall
				doStartRelease = false;
    8c32:	1c 82       	std	Y+4, r1	; 0x04
            }

			// Start the power off timeout if the start button was just pressed:
			if (!possiblyPoweringOff && buttons[B_START].state != BUTTON_RELEASED ) {
    8c34:	9a 81       	ldd	r25, Y+2	; 0x02
    8c36:	81 e0       	ldi	r24, 0x01	; 1
    8c38:	89 27       	eor	r24, r25
    8c3a:	88 23       	and	r24, r24
    8c3c:	d1 f0       	breq	.+52     	; 0x8c72 <main+0x7e0>
    8c3e:	80 91 26 20 	lds	r24, 0x2026
    8c42:	88 23       	and	r24, r24
    8c44:	b1 f0       	breq	.+44     	; 0x8c72 <main+0x7e0>
				possiblyPoweringOff = true;
    8c46:	81 e0       	ldi	r24, 0x01	; 1
    8c48:	8a 83       	std	Y+2, r24	; 0x02
				startTimeout(&powerOffTimeout, ((uint32_t)global_header.sleep_delay) * 50);
    8c4a:	80 91 23 28 	lds	r24, 0x2823
    8c4e:	28 2f       	mov	r18, r24
    8c50:	30 e0       	ldi	r19, 0x00	; 0
    8c52:	40 e0       	ldi	r20, 0x00	; 0
    8c54:	50 e0       	ldi	r21, 0x00	; 0
    8c56:	82 e3       	ldi	r24, 0x32	; 50
    8c58:	90 e0       	ldi	r25, 0x00	; 0
    8c5a:	dc 01       	movw	r26, r24
    8c5c:	0a d3       	rcall	.+1556   	; 0x9272 <__muluhisi3>
    8c5e:	dc 01       	movw	r26, r24
    8c60:	cb 01       	movw	r24, r22
    8c62:	9e 01       	movw	r18, r28
    8c64:	26 5e       	subi	r18, 0xE6	; 230
    8c66:	3f 4f       	sbci	r19, 0xFF	; 255
    8c68:	ac 01       	movw	r20, r24
    8c6a:	bd 01       	movw	r22, r26
    8c6c:	c9 01       	movw	r24, r18
    8c6e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
			}
						
			// Cancel the power off timeout if the start button was released:
			if (possiblyPoweringOff && buttons[B_START].state == BUTTON_RELEASED) {
    8c72:	8a 81       	ldd	r24, Y+2	; 0x02
    8c74:	88 23       	and	r24, r24
    8c76:	49 f0       	breq	.+18     	; 0x8c8a <main+0x7f8>
    8c78:	80 91 26 20 	lds	r24, 0x2026
    8c7c:	88 23       	and	r24, r24
    8c7e:	29 f4       	brne	.+10     	; 0x8c8a <main+0x7f8>
				possiblyPoweringOff = false;
    8c80:	1a 82       	std	Y+2, r1	; 0x02
				cancelTimeout(&powerOffTimeout);
    8c82:	ce 01       	movw	r24, r28
    8c84:	4a 96       	adiw	r24, 0x1a	; 26
    8c86:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <cancelTimeout>
			}
			
			if (!possiblyBiosMode && buttons[B_SELECT].state != BUTTON_RELEASED ) {
    8c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    8c8c:	81 e0       	ldi	r24, 0x01	; 1
    8c8e:	89 27       	eor	r24, r25
    8c90:	88 23       	and	r24, r24
    8c92:	e9 f0       	breq	.+58     	; 0x8cce <main+0x83c>
    8c94:	80 91 2a 20 	lds	r24, 0x202A
    8c98:	88 23       	and	r24, r24
    8c9a:	c9 f0       	breq	.+50     	; 0x8cce <main+0x83c>
				possiblyBiosMode = true;
    8c9c:	81 e0       	ldi	r24, 0x01	; 1
    8c9e:	8b 83       	std	Y+3, r24	; 0x03
				startTimeout(&biosModeTimeout, 2*((uint32_t)global_header.sleep_delay) * 50);
    8ca0:	80 91 23 28 	lds	r24, 0x2823
    8ca4:	28 2f       	mov	r18, r24
    8ca6:	30 e0       	ldi	r19, 0x00	; 0
    8ca8:	40 e0       	ldi	r20, 0x00	; 0
    8caa:	50 e0       	ldi	r21, 0x00	; 0
    8cac:	84 e6       	ldi	r24, 0x64	; 100
    8cae:	90 e0       	ldi	r25, 0x00	; 0
    8cb0:	dc 01       	movw	r26, r24
    8cb2:	df d2       	rcall	.+1470   	; 0x9272 <__muluhisi3>
    8cb4:	dc 01       	movw	r26, r24
    8cb6:	cb 01       	movw	r24, r22
    8cb8:	9e 01       	movw	r18, r28
    8cba:	2e 5d       	subi	r18, 0xDE	; 222
    8cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    8cbe:	ac 01       	movw	r20, r24
    8cc0:	bd 01       	movw	r22, r26
    8cc2:	c9 01       	movw	r24, r18
    8cc4:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
				displayWhichConfiguration(which_cfg);
    8cc8:	88 85       	ldd	r24, Y+8	; 0x08
    8cca:	0e 94 00 11 	call	0x2200	; 0x2200 <displayWhichConfiguration>
			}
			
			if (possiblyBiosMode && buttons[B_SELECT].state == BUTTON_RELEASED) {
    8cce:	8b 81       	ldd	r24, Y+3	; 0x03
    8cd0:	88 23       	and	r24, r24
    8cd2:	49 f0       	breq	.+18     	; 0x8ce6 <main+0x854>
    8cd4:	80 91 2a 20 	lds	r24, 0x202A
    8cd8:	88 23       	and	r24, r24
    8cda:	29 f4       	brne	.+10     	; 0x8ce6 <main+0x854>
				possiblyBiosMode = false;
    8cdc:	1b 82       	std	Y+3, r1	; 0x03
				cancelTimeout(&biosModeTimeout);
    8cde:	ce 01       	movw	r24, r28
    8ce0:	82 96       	adiw	r24, 0x22	; 34
    8ce2:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <cancelTimeout>
			}
			
		}
		if (checkTimeout(&joystickSampleTimeout)) {
    8ce6:	ce 01       	movw	r24, r28
    8ce8:	42 96       	adiw	r24, 0x12	; 18
    8cea:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    8cee:	88 23       	and	r24, r24
    8cf0:	09 f4       	brne	.+2      	; 0x8cf4 <main+0x862>
    8cf2:	9d c0       	rjmp	.+314    	; 0x8e2e <main+0x99c>
			startTimeout(&joystickSampleTimeout, JOYSTICK_SAMPLE_TIMEOUT_MS);
    8cf4:	ce 01       	movw	r24, r28
    8cf6:	42 96       	adiw	r24, 0x12	; 18
    8cf8:	46 e0       	ldi	r20, 0x06	; 6
    8cfa:	50 e0       	ldi	r21, 0x00	; 0
    8cfc:	60 e0       	ldi	r22, 0x00	; 0
    8cfe:	70 e0       	ldi	r23, 0x00	; 0
    8d00:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
			
			// Sample each of the joysticks:
			for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    8d04:	19 82       	std	Y+1, r1	; 0x01
    8d06:	8f c0       	rjmp	.+286    	; 0x8e26 <main+0x994>
				//joysticks[i].previous_x = joysticks[i].current_x;
				joysticks[i].current_x  = sampleAnalogChannel(joysticks[i].adc_channel_x);
    8d08:	89 81       	ldd	r24, Y+1	; 0x01
    8d0a:	08 2f       	mov	r16, r24
    8d0c:	10 e0       	ldi	r17, 0x00	; 0
    8d0e:	89 81       	ldd	r24, Y+1	; 0x01
    8d10:	88 2f       	mov	r24, r24
    8d12:	90 e0       	ldi	r25, 0x00	; 0
    8d14:	88 0f       	add	r24, r24
    8d16:	99 1f       	adc	r25, r25
    8d18:	9c 01       	movw	r18, r24
    8d1a:	22 0f       	add	r18, r18
    8d1c:	33 1f       	adc	r19, r19
    8d1e:	22 0f       	add	r18, r18
    8d20:	33 1f       	adc	r19, r19
    8d22:	22 0f       	add	r18, r18
    8d24:	33 1f       	adc	r19, r19
    8d26:	28 1b       	sub	r18, r24
    8d28:	39 0b       	sbc	r19, r25
    8d2a:	c9 01       	movw	r24, r18
    8d2c:	8a 5a       	subi	r24, 0xAA	; 170
    8d2e:	9f 4d       	sbci	r25, 0xDF	; 223
    8d30:	dc 01       	movw	r26, r24
    8d32:	8c 91       	ld	r24, X
    8d34:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    8d38:	ac 01       	movw	r20, r24
    8d3a:	c8 01       	movw	r24, r16
    8d3c:	88 0f       	add	r24, r24
    8d3e:	99 1f       	adc	r25, r25
    8d40:	9c 01       	movw	r18, r24
    8d42:	22 0f       	add	r18, r18
    8d44:	33 1f       	adc	r19, r19
    8d46:	22 0f       	add	r18, r18
    8d48:	33 1f       	adc	r19, r19
    8d4a:	22 0f       	add	r18, r18
    8d4c:	33 1f       	adc	r19, r19
    8d4e:	28 1b       	sub	r18, r24
    8d50:	39 0b       	sbc	r19, r25
    8d52:	c9 01       	movw	r24, r18
    8d54:	80 5a       	subi	r24, 0xA0	; 160
    8d56:	9f 4d       	sbci	r25, 0xDF	; 223
    8d58:	fc 01       	movw	r30, r24
    8d5a:	40 83       	st	Z, r20
    8d5c:	51 83       	std	Z+1, r21	; 0x01
				
				//joysticks[i].previous_y = joysticks[i].current_y;
				joysticks[i].current_y  = sampleAnalogChannel(joysticks[i].adc_channel_y);
    8d5e:	89 81       	ldd	r24, Y+1	; 0x01
    8d60:	08 2f       	mov	r16, r24
    8d62:	10 e0       	ldi	r17, 0x00	; 0
    8d64:	89 81       	ldd	r24, Y+1	; 0x01
    8d66:	88 2f       	mov	r24, r24
    8d68:	90 e0       	ldi	r25, 0x00	; 0
    8d6a:	88 0f       	add	r24, r24
    8d6c:	99 1f       	adc	r25, r25
    8d6e:	9c 01       	movw	r18, r24
    8d70:	22 0f       	add	r18, r18
    8d72:	33 1f       	adc	r19, r19
    8d74:	22 0f       	add	r18, r18
    8d76:	33 1f       	adc	r19, r19
    8d78:	22 0f       	add	r18, r18
    8d7a:	33 1f       	adc	r19, r19
    8d7c:	28 1b       	sub	r18, r24
    8d7e:	39 0b       	sbc	r19, r25
    8d80:	c9 01       	movw	r24, r18
    8d82:	89 5a       	subi	r24, 0xA9	; 169
    8d84:	9f 4d       	sbci	r25, 0xDF	; 223
    8d86:	dc 01       	movw	r26, r24
    8d88:	8c 91       	ld	r24, X
    8d8a:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    8d8e:	ac 01       	movw	r20, r24
    8d90:	c8 01       	movw	r24, r16
    8d92:	88 0f       	add	r24, r24
    8d94:	99 1f       	adc	r25, r25
    8d96:	9c 01       	movw	r18, r24
    8d98:	22 0f       	add	r18, r18
    8d9a:	33 1f       	adc	r19, r19
    8d9c:	22 0f       	add	r18, r18
    8d9e:	33 1f       	adc	r19, r19
    8da0:	22 0f       	add	r18, r18
    8da2:	33 1f       	adc	r19, r19
    8da4:	28 1b       	sub	r18, r24
    8da6:	39 0b       	sbc	r19, r25
    8da8:	c9 01       	movw	r24, r18
    8daa:	8e 59       	subi	r24, 0x9E	; 158
    8dac:	9f 4d       	sbci	r25, 0xDF	; 223
    8dae:	fc 01       	movw	r30, r24
    8db0:	40 83       	st	Z, r20
    8db2:	51 83       	std	Z+1, r21	; 0x01
				
				if (joystick_handler != NULL) 
    8db4:	80 91 1f 28 	lds	r24, 0x281F
    8db8:	90 91 20 28 	lds	r25, 0x2820
    8dbc:	00 97       	sbiw	r24, 0x00	; 0
    8dbe:	81 f1       	breq	.+96     	; 0x8e20 <main+0x98e>
				{
					joystick_handler((enum JoystickName)i, joysticks[i].current_x, joysticks[i].current_y);
    8dc0:	e0 91 1f 28 	lds	r30, 0x281F
    8dc4:	f0 91 20 28 	lds	r31, 0x2820
    8dc8:	89 81       	ldd	r24, Y+1	; 0x01
    8dca:	88 2f       	mov	r24, r24
    8dcc:	90 e0       	ldi	r25, 0x00	; 0
    8dce:	88 0f       	add	r24, r24
    8dd0:	99 1f       	adc	r25, r25
    8dd2:	9c 01       	movw	r18, r24
    8dd4:	22 0f       	add	r18, r18
    8dd6:	33 1f       	adc	r19, r19
    8dd8:	22 0f       	add	r18, r18
    8dda:	33 1f       	adc	r19, r19
    8ddc:	22 0f       	add	r18, r18
    8dde:	33 1f       	adc	r19, r19
    8de0:	28 1b       	sub	r18, r24
    8de2:	39 0b       	sbc	r19, r25
    8de4:	c9 01       	movw	r24, r18
    8de6:	8e 59       	subi	r24, 0x9E	; 158
    8de8:	9f 4d       	sbci	r25, 0xDF	; 223
    8dea:	dc 01       	movw	r26, r24
    8dec:	8d 91       	ld	r24, X+
    8dee:	9c 91       	ld	r25, X
    8df0:	ac 01       	movw	r20, r24
    8df2:	89 81       	ldd	r24, Y+1	; 0x01
    8df4:	88 2f       	mov	r24, r24
    8df6:	90 e0       	ldi	r25, 0x00	; 0
    8df8:	88 0f       	add	r24, r24
    8dfa:	99 1f       	adc	r25, r25
    8dfc:	9c 01       	movw	r18, r24
    8dfe:	22 0f       	add	r18, r18
    8e00:	33 1f       	adc	r19, r19
    8e02:	22 0f       	add	r18, r18
    8e04:	33 1f       	adc	r19, r19
    8e06:	22 0f       	add	r18, r18
    8e08:	33 1f       	adc	r19, r19
    8e0a:	28 1b       	sub	r18, r24
    8e0c:	39 0b       	sbc	r19, r25
    8e0e:	c9 01       	movw	r24, r18
    8e10:	80 5a       	subi	r24, 0xA0	; 160
    8e12:	9f 4d       	sbci	r25, 0xDF	; 223
    8e14:	dc 01       	movw	r26, r24
    8e16:	8d 91       	ld	r24, X+
    8e18:	9c 91       	ld	r25, X
    8e1a:	bc 01       	movw	r22, r24
    8e1c:	89 81       	ldd	r24, Y+1	; 0x01
    8e1e:	09 95       	icall
		}
		if (checkTimeout(&joystickSampleTimeout)) {
			startTimeout(&joystickSampleTimeout, JOYSTICK_SAMPLE_TIMEOUT_MS);
			
			// Sample each of the joysticks:
			for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    8e20:	89 81       	ldd	r24, Y+1	; 0x01
    8e22:	8f 5f       	subi	r24, 0xFF	; 255
    8e24:	89 83       	std	Y+1, r24	; 0x01
    8e26:	89 81       	ldd	r24, Y+1	; 0x01
    8e28:	82 30       	cpi	r24, 0x02	; 2
    8e2a:	08 f4       	brcc	.+2      	; 0x8e2e <main+0x99c>
    8e2c:	6d cf       	rjmp	.-294    	; 0x8d08 <main+0x876>
			}
		}
		
		// Check if the start button has been held long enough to turn the device off:
		// Check if controller has been sitting idle long enough to turn the device off:
		if( checkTimeout(&powerOffTimeout) || checkTimeout(&powerOffUnused) )
    8e2e:	ce 01       	movw	r24, r28
    8e30:	4a 96       	adiw	r24, 0x1a	; 26
    8e32:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    8e36:	88 23       	and	r24, r24
    8e38:	39 f4       	brne	.+14     	; 0x8e48 <main+0x9b6>
    8e3a:	ce 01       	movw	r24, r28
    8e3c:	8e 5b       	subi	r24, 0xBE	; 190
    8e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    8e40:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    8e44:	88 23       	and	r24, r24
    8e46:	69 f1       	breq	.+90     	; 0x8ea2 <main+0xa10>
		{
			cancelTimeout(&powerOffTimeout);
    8e48:	ce 01       	movw	r24, r28
    8e4a:	4a 96       	adiw	r24, 0x1a	; 26
    8e4c:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <cancelTimeout>
			
			//chargingDone prevents poweroff, so no reboot to restart the timer, then unplug charger, then don't press any buttons -
			//  powerOffUnused timer is still unplugged, so the controller will stay on until a button is pressed to start the timer or
			//  battery voltage drops
			startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS); 
    8e50:	ce 01       	movw	r24, r28
    8e52:	8e 5b       	subi	r24, 0xBE	; 190
    8e54:	9f 4f       	sbci	r25, 0xFF	; 255
    8e56:	40 ee       	ldi	r20, 0xE0	; 224
    8e58:	53 e9       	ldi	r21, 0x93	; 147
    8e5a:	64 e0       	ldi	r22, 0x04	; 4
    8e5c:	70 e0       	ldi	r23, 0x00	; 0
    8e5e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <startTimeout>
			
			chargingDone = IsChargingDone(); //could have used logical-AND short circuiting above, but this is clearer
    8e62:	0e 94 f4 06 	call	0xde8	; 0xde8 <IsChargingDone>
    8e66:	8f 83       	std	Y+7, r24	; 0x07
			//when chargingDone, don't poweroff 
			//(when the controller is unplugged, chargingDone will deassert and allow poweroff again)
			if( !chargingDone )
    8e68:	9f 81       	ldd	r25, Y+7	; 0x07
    8e6a:	81 e0       	ldi	r24, 0x01	; 1
    8e6c:	89 27       	eor	r24, r25
    8e6e:	88 23       	and	r24, r24
    8e70:	c1 f0       	breq	.+48     	; 0x8ea2 <main+0xa10>
			{
				setLEDValue(LED_OFF, LED_OFF, LED_OFF);
    8e72:	40 e0       	ldi	r20, 0x00	; 0
    8e74:	60 e0       	ldi	r22, 0x00	; 0
    8e76:	80 e0       	ldi	r24, 0x00	; 0
    8e78:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
				powerOff(global_header.powerOffSoftware);
    8e7c:	80 91 28 28 	lds	r24, 0x2828
    8e80:	88 1f       	adc	r24, r24
    8e82:	88 27       	eor	r24, r24
    8e84:	88 1f       	adc	r24, r24
    8e86:	90 91 29 28 	lds	r25, 0x2829
    8e8a:	9f 73       	andi	r25, 0x3F	; 63
    8e8c:	99 0f       	add	r25, r25
    8e8e:	89 2b       	or	r24, r25
    8e90:	88 2f       	mov	r24, r24
    8e92:	90 e0       	ldi	r25, 0x00	; 0
    8e94:	21 e0       	ldi	r18, 0x01	; 1
    8e96:	00 97       	sbiw	r24, 0x00	; 0
    8e98:	09 f4       	brne	.+2      	; 0x8e9c <main+0xa0a>
    8e9a:	20 e0       	ldi	r18, 0x00	; 0
    8e9c:	82 2f       	mov	r24, r18
    8e9e:	0e 94 af 24 	call	0x495e	; 0x495e <powerOff>
			}
		}
		
		// Check if the select button has been held long enough to clear paired bluetooth list:
		if( checkTimeout(&biosModeTimeout) )
    8ea2:	ce 01       	movw	r24, r28
    8ea4:	82 96       	adiw	r24, 0x22	; 34
    8ea6:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <checkTimeout>
    8eaa:	88 23       	and	r24, r24
    8eac:	89 f0       	breq	.+34     	; 0x8ed0 <main+0xa3e>
		{
			cancelTimeout(&biosModeTimeout);
    8eae:	ce 01       	movw	r24, r28
    8eb0:	82 96       	adiw	r24, 0x22	; 34
    8eb2:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <cancelTimeout>
			bt_exitBypass();
    8eb6:	8d d9       	rcall	.-3302   	; 0x81d2 <bt_exitBypass>
			btClearAutoConnectList();
    8eb8:	19 da       	rcall	.-3022   	; 0x82ec <btClearAutoConnectList>
			setLEDValue(LED_OFF, LED_DIM, LED_OFF); //green
    8eba:	40 e0       	ldi	r20, 0x00	; 0
    8ebc:	61 e0       	ldi	r22, 0x01	; 1
    8ebe:	80 e0       	ldi	r24, 0x00	; 0
    8ec0:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <setLEDValue>
			delay_ms(2000);
    8ec4:	6b ea       	ldi	r22, 0xAB	; 171
    8ec6:	72 ec       	ldi	r23, 0xC2	; 194
    8ec8:	82 ea       	ldi	r24, 0xA2	; 162
    8eca:	90 e0       	ldi	r25, 0x00	; 0
    8ecc:	d0 da       	rcall	.-2656   	; 0x846e <__portable_avr_delay_cycles>
			reset_do_soft_reset();
    8ece:	c5 da       	rcall	.-2678   	; 0x845a <reset_do_soft_reset>
		}
		
		// If button start and button select pressed send the bluetooth consumer report home key event.
		if (buttonActivated(B_START) & buttonActivated(B_SELECT))
    8ed0:	88 e0       	ldi	r24, 0x08	; 8
    8ed2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    8ed6:	08 2f       	mov	r16, r24
    8ed8:	10 e0       	ldi	r17, 0x00	; 0
    8eda:	89 e0       	ldi	r24, 0x09	; 9
    8edc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    8ee0:	88 2f       	mov	r24, r24
    8ee2:	90 e0       	ldi	r25, 0x00	; 0
    8ee4:	80 23       	and	r24, r16
    8ee6:	91 23       	and	r25, r17
    8ee8:	00 97       	sbiw	r24, 0x00	; 0
    8eea:	31 f0       	breq	.+12     	; 0x8ef8 <main+0xa66>
		{
			delay_ms(250);
    8eec:	65 e5       	ldi	r22, 0x55	; 85
    8eee:	78 e5       	ldi	r23, 0x58	; 88
    8ef0:	84 e1       	ldi	r24, 0x14	; 20
    8ef2:	90 e0       	ldi	r25, 0x00	; 0
    8ef4:	bc da       	rcall	.-2696   	; 0x846e <__portable_avr_delay_cycles>
			bt_homeButton();
    8ef6:	85 d9       	rcall	.-3318   	; 0x8202 <bt_homeButton>
		}
		
		// Check for commands from the computer (e.g. reset for bootloader entry):
		processComm();
    8ef8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <processComm>
	}
    8efc:	b9 cc       	rjmp	.-1678   	; 0x8870 <main+0x3de>

00008efe <sysTickCallback>:
}

void sysTickCallback(void) {
    8efe:	cf 93       	push	r28
    8f00:	df 93       	push	r29
    8f02:	cd b7       	in	r28, 0x3d	; 61
    8f04:	de b7       	in	r29, 0x3e	; 62
	static unsigned int wdtCheckCount = 0;
	// Clear the interrupt flag:
	clearSysTickFlag();
    8f06:	0e 94 af 28 	call	0x515e	; 0x515e <clearSysTickFlag>
	
	// Increment system time:
	tickSystemTime();
    8f0a:	0e 94 10 27 	call	0x4e20	; 0x4e20 <tickSystemTime>
	
	/* Check for time to validate system is still running */
	wdtCheckCount++;
    8f0e:	80 91 21 28 	lds	r24, 0x2821
    8f12:	90 91 22 28 	lds	r25, 0x2822
    8f16:	01 96       	adiw	r24, 0x01	; 1
    8f18:	80 93 21 28 	sts	0x2821, r24
    8f1c:	90 93 22 28 	sts	0x2822, r25
	if (wdtCheckCount >= SYSTICK_FREQUENCY) {
    8f20:	80 91 21 28 	lds	r24, 0x2821
    8f24:	90 91 22 28 	lds	r25, 0x2822
    8f28:	88 3e       	cpi	r24, 0xE8	; 232
    8f2a:	23 e0       	ldi	r18, 0x03	; 3
    8f2c:	92 07       	cpc	r25, r18
    8f2e:	30 f0       	brcs	.+12     	; 0x8f3c <sysTickCallback+0x3e>
		wdtCheckCount = 0;
    8f30:	10 92 21 28 	sts	0x2821, r1
    8f34:	10 92 22 28 	sts	0x2822, r1
		WatchdogValidate();
    8f38:	0e 94 c4 2a 	call	0x5588	; 0x5588 <WatchdogValidate>
	}
}
    8f3c:	df 91       	pop	r29
    8f3e:	cf 91       	pop	r28
    8f40:	08 95       	ret

00008f42 <selectHandlers>:

void selectHandlers(void) {
    8f42:	cf 93       	push	r28
    8f44:	df 93       	push	r29
    8f46:	cd b7       	in	r28, 0x3d	; 61
    8f48:	de b7       	in	r29, 0x3e	; 62
	switch (ccc.mode) {
    8f4a:	80 91 50 28 	lds	r24, 0x2850
    8f4e:	88 2f       	mov	r24, r24
    8f50:	90 e0       	ldi	r25, 0x00	; 0
    8f52:	82 30       	cpi	r24, 0x02	; 2
    8f54:	91 05       	cpc	r25, r1
    8f56:	09 f4       	brne	.+2      	; 0x8f5a <selectHandlers+0x18>
    8f58:	5a c0       	rjmp	.+180    	; 0x900e <selectHandlers+0xcc>
    8f5a:	83 30       	cpi	r24, 0x03	; 3
    8f5c:	91 05       	cpc	r25, r1
    8f5e:	34 f4       	brge	.+12     	; 0x8f6c <selectHandlers+0x2a>
    8f60:	00 97       	sbiw	r24, 0x00	; 0
    8f62:	79 f1       	breq	.+94     	; 0x8fc2 <selectHandlers+0x80>
    8f64:	81 30       	cpi	r24, 0x01	; 1
    8f66:	91 05       	cpc	r25, r1
    8f68:	d9 f0       	breq	.+54     	; 0x8fa0 <selectHandlers+0x5e>
    8f6a:	64 c0       	rjmp	.+200    	; 0x9034 <selectHandlers+0xf2>
    8f6c:	84 30       	cpi	r24, 0x04	; 4
    8f6e:	91 05       	cpc	r25, r1
    8f70:	21 f0       	breq	.+8      	; 0x8f7a <selectHandlers+0x38>
    8f72:	87 30       	cpi	r24, 0x07	; 7
    8f74:	91 05       	cpc	r25, r1
    8f76:	c1 f1       	breq	.+112    	; 0x8fe8 <selectHandlers+0xa6>
    8f78:	5d c0       	rjmp	.+186    	; 0x9034 <selectHandlers+0xf2>
		case BTM_KEYBOARD_MOUSE:
			button_handler_init = &keyboardMouseInit;
    8f7a:	85 e7       	ldi	r24, 0x75	; 117
    8f7c:	9d e1       	ldi	r25, 0x1D	; 29
    8f7e:	80 93 1b 28 	sts	0x281B, r24
    8f82:	90 93 1c 28 	sts	0x281C, r25
			button_handler      = &keyboadMouseButtonHandler;
    8f86:	81 e9       	ldi	r24, 0x91	; 145
    8f88:	9d e1       	ldi	r25, 0x1D	; 29
    8f8a:	80 93 1d 28 	sts	0x281D, r24
    8f8e:	90 93 1e 28 	sts	0x281E, r25
			joystick_handler    = &keyboardMouseJoystickHandler;
    8f92:	80 ea       	ldi	r24, 0xA0	; 160
    8f94:	9d e1       	ldi	r25, 0x1D	; 29
    8f96:	80 93 1f 28 	sts	0x281F, r24
    8f9a:	90 93 20 28 	sts	0x2820, r25
			break;
    8f9e:	57 c0       	rjmp	.+174    	; 0x904e <selectHandlers+0x10c>
			
		case BTM_IOS_KEYBOARD:
			button_handler_init = &keyboardiOSInit;
    8fa0:	8a e2       	ldi	r24, 0x2A	; 42
    8fa2:	9a e0       	ldi	r25, 0x0A	; 10
    8fa4:	80 93 1b 28 	sts	0x281B, r24
    8fa8:	90 93 1c 28 	sts	0x281C, r25
			button_handler      = &keyboardiOSButtonHandler;
    8fac:	8e e3       	ldi	r24, 0x3E	; 62
    8fae:	9a e0       	ldi	r25, 0x0A	; 10
    8fb0:	80 93 1d 28 	sts	0x281D, r24
    8fb4:	90 93 1e 28 	sts	0x281E, r25
			joystick_handler    = NULL;
    8fb8:	10 92 1f 28 	sts	0x281F, r1
    8fbc:	10 92 20 28 	sts	0x2820, r1
			break;
    8fc0:	46 c0       	rjmp	.+140    	; 0x904e <selectHandlers+0x10c>

		case BTM_KEYBOARD:
			button_handler_init = &keyboardInit;
    8fc2:	82 e7       	ldi	r24, 0x72	; 114
    8fc4:	9a e1       	ldi	r25, 0x1A	; 26
    8fc6:	80 93 1b 28 	sts	0x281B, r24
    8fca:	90 93 1c 28 	sts	0x281C, r25
			button_handler      = &keyboardButtonHandler;
    8fce:	86 e8       	ldi	r24, 0x86	; 134
    8fd0:	9a e1       	ldi	r25, 0x1A	; 26
    8fd2:	80 93 1d 28 	sts	0x281D, r24
    8fd6:	90 93 1e 28 	sts	0x281E, r25
			joystick_handler    = &keyboardJoystickHandler;
    8fda:	85 e9       	ldi	r24, 0x95	; 149
    8fdc:	9a e1       	ldi	r25, 0x1A	; 26
    8fde:	80 93 1f 28 	sts	0x281F, r24
    8fe2:	90 93 20 28 	sts	0x2820, r25
			break;
    8fe6:	33 c0       	rjmp	.+102    	; 0x904e <selectHandlers+0x10c>
		
		case BTM_JOYSTICK_ANALOG:
			button_handler_init = &jStickInit;
    8fe8:	8d eb       	ldi	r24, 0xBD	; 189
    8fea:	96 e1       	ldi	r25, 0x16	; 22
    8fec:	80 93 1b 28 	sts	0x281B, r24
    8ff0:	90 93 1c 28 	sts	0x281C, r25
			button_handler      = &jStickButtonHandler;
    8ff4:	8f e3       	ldi	r24, 0x3F	; 63
    8ff6:	97 e1       	ldi	r25, 0x17	; 23
    8ff8:	80 93 1d 28 	sts	0x281D, r24
    8ffc:	90 93 1e 28 	sts	0x281E, r25
			joystick_handler    = &jStickJoystickHandler;
    9000:	80 ee       	ldi	r24, 0xE0	; 224
    9002:	99 e1       	ldi	r25, 0x19	; 25
    9004:	80 93 1f 28 	sts	0x281F, r24
    9008:	90 93 20 28 	sts	0x2820, r25
			break;
    900c:	20 c0       	rjmp	.+64     	; 0x904e <selectHandlers+0x10c>
		
		case BTM_GAMEPAD:
			button_handler_init = &gamepadInit;
    900e:	8c ed       	ldi	r24, 0xDC	; 220
    9010:	91 e1       	ldi	r25, 0x11	; 17
    9012:	80 93 1b 28 	sts	0x281B, r24
    9016:	90 93 1c 28 	sts	0x281C, r25
			button_handler      = &gamepadButtonHandler;
    901a:	8e e5       	ldi	r24, 0x5E	; 94
    901c:	92 e1       	ldi	r25, 0x12	; 18
    901e:	80 93 1d 28 	sts	0x281D, r24
    9022:	90 93 1e 28 	sts	0x281E, r25
			joystick_handler    = &gamepadJoystickHandler;
    9026:	8b e2       	ldi	r24, 0x2B	; 43
    9028:	96 e1       	ldi	r25, 0x16	; 22
    902a:	80 93 1f 28 	sts	0x281F, r24
    902e:	90 93 20 28 	sts	0x2820, r25
			break;
    9032:	0d c0       	rjmp	.+26     	; 0x904e <selectHandlers+0x10c>
		
		default:
			button_handler_init = NULL;
    9034:	10 92 1b 28 	sts	0x281B, r1
    9038:	10 92 1c 28 	sts	0x281C, r1
			button_handler      = NULL;
    903c:	10 92 1d 28 	sts	0x281D, r1
    9040:	10 92 1e 28 	sts	0x281E, r1
			joystick_handler    = NULL;
    9044:	10 92 1f 28 	sts	0x281F, r1
    9048:	10 92 20 28 	sts	0x2820, r1
			break;
    904c:	00 00       	nop
	}
}
    904e:	df 91       	pop	r29
    9050:	cf 91       	pop	r28
    9052:	08 95       	ret

00009054 <SetupStartPinExternalInterrupt>:

//Setup START_PIN external interrupt
void SetupStartPinExternalInterrupt()
{
    9054:	cf 93       	push	r28
    9056:	df 93       	push	r29
    9058:	cd b7       	in	r28, 0x3d	; 61
    905a:	de b7       	in	r29, 0x3e	; 62
    905c:	2a 97       	sbiw	r28, 0x0a	; 10
    905e:	cd bf       	out	0x3d, r28	; 61
    9060:	de bf       	out	0x3e, r29	; 62
	irqflags_t flags;
	flags = cpu_irq_save();
    9062:	79 d9       	rcall	.-3342   	; 0x8356 <cpu_irq_save>
    9064:	89 83       	std	Y+1, r24	; 0x01
	
	PORTF_INT0MASK = 1u<<2; //Set PORTF interrupt on PORTF.2 pin
    9066:	8a ea       	ldi	r24, 0xAA	; 170
    9068:	96 e0       	ldi	r25, 0x06	; 6
    906a:	24 e0       	ldi	r18, 0x04	; 4
    906c:	fc 01       	movw	r30, r24
    906e:	20 83       	st	Z, r18
    9070:	8a e2       	ldi	r24, 0x2A	; 42
    9072:	8a 83       	std	Y+2, r24	; 0x02
    9074:	81 e0       	ldi	r24, 0x01	; 1
    9076:	8b 83       	std	Y+3, r24	; 0x03
    9078:	8a 81       	ldd	r24, Y+2	; 0x02
    907a:	8c 83       	std	Y+4, r24	; 0x04
    907c:	8c 81       	ldd	r24, Y+4	; 0x04
    907e:	8d 83       	std	Y+5, r24	; 0x05
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static inline ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    9080:	8d 81       	ldd	r24, Y+5	; 0x05
    9082:	86 95       	lsr	r24
    9084:	86 95       	lsr	r24
    9086:	86 95       	lsr	r24
    9088:	8e 83       	std	Y+6, r24	; 0x06
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    908a:	8e 81       	ldd	r24, Y+6	; 0x06
    908c:	88 2f       	mov	r24, r24
    908e:	90 e0       	ldi	r25, 0x00	; 0
    9090:	88 0f       	add	r24, r24
    9092:	99 1f       	adc	r25, r25
    9094:	82 95       	swap	r24
    9096:	92 95       	swap	r25
    9098:	90 7f       	andi	r25, 0xF0	; 240
    909a:	98 27       	eor	r25, r24
    909c:	80 7f       	andi	r24, 0xF0	; 240
    909e:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    90a0:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
    90a2:	8f 83       	std	Y+7, r24	; 0x07
    90a4:	98 87       	std	Y+8, r25	; 0x08

	uint8_t flags = cpu_irq_save();
    90a6:	57 d9       	rcall	.-3410   	; 0x8356 <cpu_irq_save>
    90a8:	89 87       	std	Y+9, r24	; 0x09

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
    90aa:	80 eb       	ldi	r24, 0xB0	; 176
    90ac:	90 e0       	ldi	r25, 0x00	; 0
    90ae:	2a 81       	ldd	r18, Y+2	; 0x02
    90b0:	2a 87       	std	Y+10, r18	; 0x0a
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    90b2:	2a 85       	ldd	r18, Y+10	; 0x0a
    90b4:	22 2f       	mov	r18, r18
    90b6:	30 e0       	ldi	r19, 0x00	; 0
    90b8:	a9 01       	movw	r20, r18
    90ba:	47 70       	andi	r20, 0x07	; 7
    90bc:	55 27       	eor	r21, r21
    90be:	21 e0       	ldi	r18, 0x01	; 1
    90c0:	30 e0       	ldi	r19, 0x00	; 0
    90c2:	02 c0       	rjmp	.+4      	; 0x90c8 <SetupStartPinExternalInterrupt+0x74>
    90c4:	22 0f       	add	r18, r18
    90c6:	33 1f       	adc	r19, r19
    90c8:	4a 95       	dec	r20
    90ca:	e2 f7       	brpl	.-8      	; 0x90c4 <SetupStartPinExternalInterrupt+0x70>
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	uint8_t flags = cpu_irq_save();

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
    90cc:	fc 01       	movw	r30, r24
    90ce:	20 83       	st	Z, r18

	base->PIN0CTRL &= ~PORT_ISC_gm;
    90d0:	8f 81       	ldd	r24, Y+7	; 0x07
    90d2:	98 85       	ldd	r25, Y+8	; 0x08
    90d4:	fc 01       	movw	r30, r24
    90d6:	80 89       	ldd	r24, Z+16	; 0x10
    90d8:	28 2f       	mov	r18, r24
    90da:	28 7f       	andi	r18, 0xF8	; 248
    90dc:	8f 81       	ldd	r24, Y+7	; 0x07
    90de:	98 85       	ldd	r25, Y+8	; 0x08
    90e0:	fc 01       	movw	r30, r24
    90e2:	20 8b       	std	Z+16, r18	; 0x10
	base->PIN0CTRL |= (pin_sense & PORT_ISC_gm);
    90e4:	8f 81       	ldd	r24, Y+7	; 0x07
    90e6:	98 85       	ldd	r25, Y+8	; 0x08
    90e8:	fc 01       	movw	r30, r24
    90ea:	80 89       	ldd	r24, Z+16	; 0x10
    90ec:	98 2f       	mov	r25, r24
    90ee:	8b 81       	ldd	r24, Y+3	; 0x03
    90f0:	87 70       	andi	r24, 0x07	; 7
    90f2:	89 2b       	or	r24, r25
    90f4:	28 2f       	mov	r18, r24
    90f6:	8f 81       	ldd	r24, Y+7	; 0x07
    90f8:	98 85       	ldd	r25, Y+8	; 0x08
    90fa:	fc 01       	movw	r30, r24
    90fc:	20 8b       	std	Z+16, r18	; 0x10

	cpu_irq_restore(flags);
    90fe:	89 85       	ldd	r24, Y+9	; 0x09
    9100:	3a d9       	rcall	.-3468   	; 0x8376 <cpu_irq_restore>
	arch_ioport_set_pin_sense_mode(START_PIN,IOPORT_SENSE_RISING);
	PORTF_INTCTRL = 2u; //Enable medium level external interrupt
    9102:	89 ea       	ldi	r24, 0xA9	; 169
    9104:	96 e0       	ldi	r25, 0x06	; 6
    9106:	22 e0       	ldi	r18, 0x02	; 2
    9108:	fc 01       	movw	r30, r24
    910a:	20 83       	st	Z, r18
	
	cpu_irq_restore(flags);
    910c:	89 81       	ldd	r24, Y+1	; 0x01
    910e:	33 d9       	rcall	.-3482   	; 0x8376 <cpu_irq_restore>
}
    9110:	2a 96       	adiw	r28, 0x0a	; 10
    9112:	cd bf       	out	0x3d, r28	; 61
    9114:	de bf       	out	0x3e, r29	; 62
    9116:	df 91       	pop	r29
    9118:	cf 91       	pop	r28
    911a:	08 95       	ret

0000911c <__vector_104>:

// PORTF interrupt vector, Vector 0 is the reset vector
ISR(PORTF_INT0_vect)
{
    911c:	1f 92       	push	r1
    911e:	0f 92       	push	r0
    9120:	00 90 3f 00 	lds	r0, 0x003F
    9124:	0f 92       	push	r0
    9126:	11 24       	eor	r1, r1
    9128:	00 90 3b 00 	lds	r0, 0x003B
    912c:	0f 92       	push	r0
    912e:	2f 93       	push	r18
    9130:	3f 93       	push	r19
    9132:	4f 93       	push	r20
    9134:	5f 93       	push	r21
    9136:	6f 93       	push	r22
    9138:	7f 93       	push	r23
    913a:	8f 93       	push	r24
    913c:	9f 93       	push	r25
    913e:	af 93       	push	r26
    9140:	bf 93       	push	r27
    9142:	ef 93       	push	r30
    9144:	ff 93       	push	r31
    9146:	cf 93       	push	r28
    9148:	df 93       	push	r29
    914a:	1f 92       	push	r1
    914c:	cd b7       	in	r28, 0x3d	; 61
    914e:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags;
	flags = cpu_irq_save();
    9150:	02 d9       	rcall	.-3580   	; 0x8356 <cpu_irq_save>
    9152:	89 83       	std	Y+1, r24	; 0x01
	
	// If interrupt0 flag is set, clear it
	#define INT0IF 1u<<0
	#define INT1IF 1u<<1
	if( PORTF_INTFLAGS & INT0IF )
    9154:	8c ea       	ldi	r24, 0xAC	; 172
    9156:	96 e0       	ldi	r25, 0x06	; 6
    9158:	fc 01       	movw	r30, r24
    915a:	80 81       	ld	r24, Z
    915c:	88 2f       	mov	r24, r24
    915e:	90 e0       	ldi	r25, 0x00	; 0
    9160:	81 70       	andi	r24, 0x01	; 1
    9162:	99 27       	eor	r25, r25
    9164:	00 97       	sbiw	r24, 0x00	; 0
    9166:	29 f0       	breq	.+10     	; 0x9172 <__vector_104+0x56>
	{
		PORTF_INTFLAGS = INT0IF; // write-1-to-clear - to clear interrupt flag write a '1'
    9168:	8c ea       	ldi	r24, 0xAC	; 172
    916a:	96 e0       	ldi	r25, 0x06	; 6
    916c:	21 e0       	ldi	r18, 0x01	; 1
    916e:	fc 01       	movw	r30, r24
    9170:	20 83       	st	Z, r18
	}
	
	if (!turnedOn)
    9172:	90 91 4e 28 	lds	r25, 0x284E
    9176:	81 e0       	ldi	r24, 0x01	; 1
    9178:	89 27       	eor	r24, r25
    917a:	88 23       	and	r24, r24
    917c:	09 f0       	breq	.+2      	; 0x9180 <__vector_104+0x64>
	{
		reset_do_soft_reset();
    917e:	6d d9       	rcall	.-3366   	; 0x845a <reset_do_soft_reset>
	}
	
	cpu_irq_restore(flags);
    9180:	89 81       	ldd	r24, Y+1	; 0x01
    9182:	f9 d8       	rcall	.-3598   	; 0x8376 <cpu_irq_restore>
}
    9184:	0f 90       	pop	r0
    9186:	df 91       	pop	r29
    9188:	cf 91       	pop	r28
    918a:	ff 91       	pop	r31
    918c:	ef 91       	pop	r30
    918e:	bf 91       	pop	r27
    9190:	af 91       	pop	r26
    9192:	9f 91       	pop	r25
    9194:	8f 91       	pop	r24
    9196:	7f 91       	pop	r23
    9198:	6f 91       	pop	r22
    919a:	5f 91       	pop	r21
    919c:	4f 91       	pop	r20
    919e:	3f 91       	pop	r19
    91a0:	2f 91       	pop	r18
    91a2:	0f 90       	pop	r0
    91a4:	00 92 3b 00 	sts	0x003B, r0
    91a8:	0f 90       	pop	r0
    91aa:	00 92 3f 00 	sts	0x003F, r0
    91ae:	0f 90       	pop	r0
    91b0:	1f 90       	pop	r1
    91b2:	18 95       	reti

000091b4 <__mulsi3>:
    91b4:	db 01       	movw	r26, r22
    91b6:	8f 93       	push	r24
    91b8:	9f 93       	push	r25
    91ba:	5b d0       	rcall	.+182    	; 0x9272 <__muluhisi3>
    91bc:	bf 91       	pop	r27
    91be:	af 91       	pop	r26
    91c0:	a2 9f       	mul	r26, r18
    91c2:	80 0d       	add	r24, r0
    91c4:	91 1d       	adc	r25, r1
    91c6:	a3 9f       	mul	r26, r19
    91c8:	90 0d       	add	r25, r0
    91ca:	b2 9f       	mul	r27, r18
    91cc:	90 0d       	add	r25, r0
    91ce:	11 24       	eor	r1, r1
    91d0:	08 95       	ret

000091d2 <__divmodhi4>:
    91d2:	97 fb       	bst	r25, 7
    91d4:	07 2e       	mov	r0, r23
    91d6:	16 f4       	brtc	.+4      	; 0x91dc <__divmodhi4+0xa>
    91d8:	00 94       	com	r0
    91da:	06 d0       	rcall	.+12     	; 0x91e8 <__divmodhi4_neg1>
    91dc:	77 fd       	sbrc	r23, 7
    91de:	08 d0       	rcall	.+16     	; 0x91f0 <__divmodhi4_neg2>
    91e0:	58 d0       	rcall	.+176    	; 0x9292 <__udivmodhi4>
    91e2:	07 fc       	sbrc	r0, 7
    91e4:	05 d0       	rcall	.+10     	; 0x91f0 <__divmodhi4_neg2>
    91e6:	3e f4       	brtc	.+14     	; 0x91f6 <__divmodhi4_exit>

000091e8 <__divmodhi4_neg1>:
    91e8:	90 95       	com	r25
    91ea:	81 95       	neg	r24
    91ec:	9f 4f       	sbci	r25, 0xFF	; 255
    91ee:	08 95       	ret

000091f0 <__divmodhi4_neg2>:
    91f0:	70 95       	com	r23
    91f2:	61 95       	neg	r22
    91f4:	7f 4f       	sbci	r23, 0xFF	; 255

000091f6 <__divmodhi4_exit>:
    91f6:	08 95       	ret

000091f8 <__udivmodsi4>:
    91f8:	a1 e2       	ldi	r26, 0x21	; 33
    91fa:	1a 2e       	mov	r1, r26
    91fc:	aa 1b       	sub	r26, r26
    91fe:	bb 1b       	sub	r27, r27
    9200:	fd 01       	movw	r30, r26
    9202:	0d c0       	rjmp	.+26     	; 0x921e <__udivmodsi4_ep>

00009204 <__udivmodsi4_loop>:
    9204:	aa 1f       	adc	r26, r26
    9206:	bb 1f       	adc	r27, r27
    9208:	ee 1f       	adc	r30, r30
    920a:	ff 1f       	adc	r31, r31
    920c:	a2 17       	cp	r26, r18
    920e:	b3 07       	cpc	r27, r19
    9210:	e4 07       	cpc	r30, r20
    9212:	f5 07       	cpc	r31, r21
    9214:	20 f0       	brcs	.+8      	; 0x921e <__udivmodsi4_ep>
    9216:	a2 1b       	sub	r26, r18
    9218:	b3 0b       	sbc	r27, r19
    921a:	e4 0b       	sbc	r30, r20
    921c:	f5 0b       	sbc	r31, r21

0000921e <__udivmodsi4_ep>:
    921e:	66 1f       	adc	r22, r22
    9220:	77 1f       	adc	r23, r23
    9222:	88 1f       	adc	r24, r24
    9224:	99 1f       	adc	r25, r25
    9226:	1a 94       	dec	r1
    9228:	69 f7       	brne	.-38     	; 0x9204 <__udivmodsi4_loop>
    922a:	60 95       	com	r22
    922c:	70 95       	com	r23
    922e:	80 95       	com	r24
    9230:	90 95       	com	r25
    9232:	9b 01       	movw	r18, r22
    9234:	ac 01       	movw	r20, r24
    9236:	bd 01       	movw	r22, r26
    9238:	cf 01       	movw	r24, r30
    923a:	08 95       	ret

0000923c <__divmodsi4>:
    923c:	05 2e       	mov	r0, r21
    923e:	97 fb       	bst	r25, 7
    9240:	16 f4       	brtc	.+4      	; 0x9246 <__divmodsi4+0xa>
    9242:	00 94       	com	r0
    9244:	06 d0       	rcall	.+12     	; 0x9252 <__divmodsi4_neg1>
    9246:	57 fd       	sbrc	r21, 7
    9248:	0c d0       	rcall	.+24     	; 0x9262 <__divmodsi4_neg2>
    924a:	d6 df       	rcall	.-84     	; 0x91f8 <__udivmodsi4>
    924c:	07 fc       	sbrc	r0, 7
    924e:	09 d0       	rcall	.+18     	; 0x9262 <__divmodsi4_neg2>
    9250:	7e f4       	brtc	.+30     	; 0x9270 <__divmodsi4_exit>

00009252 <__divmodsi4_neg1>:
    9252:	90 95       	com	r25
    9254:	80 95       	com	r24
    9256:	70 95       	com	r23
    9258:	61 95       	neg	r22
    925a:	7f 4f       	sbci	r23, 0xFF	; 255
    925c:	8f 4f       	sbci	r24, 0xFF	; 255
    925e:	9f 4f       	sbci	r25, 0xFF	; 255
    9260:	08 95       	ret

00009262 <__divmodsi4_neg2>:
    9262:	50 95       	com	r21
    9264:	40 95       	com	r20
    9266:	30 95       	com	r19
    9268:	21 95       	neg	r18
    926a:	3f 4f       	sbci	r19, 0xFF	; 255
    926c:	4f 4f       	sbci	r20, 0xFF	; 255
    926e:	5f 4f       	sbci	r21, 0xFF	; 255

00009270 <__divmodsi4_exit>:
    9270:	08 95       	ret

00009272 <__muluhisi3>:
    9272:	23 d0       	rcall	.+70     	; 0x92ba <__umulhisi3>
    9274:	a5 9f       	mul	r26, r21
    9276:	90 0d       	add	r25, r0
    9278:	b4 9f       	mul	r27, r20
    927a:	90 0d       	add	r25, r0
    927c:	a4 9f       	mul	r26, r20
    927e:	80 0d       	add	r24, r0
    9280:	91 1d       	adc	r25, r1
    9282:	11 24       	eor	r1, r1
    9284:	08 95       	ret

00009286 <__mulshisi3>:
    9286:	b7 ff       	sbrs	r27, 7
    9288:	f4 cf       	rjmp	.-24     	; 0x9272 <__muluhisi3>

0000928a <__mulohisi3>:
    928a:	f3 df       	rcall	.-26     	; 0x9272 <__muluhisi3>
    928c:	82 1b       	sub	r24, r18
    928e:	93 0b       	sbc	r25, r19
    9290:	08 95       	ret

00009292 <__udivmodhi4>:
    9292:	aa 1b       	sub	r26, r26
    9294:	bb 1b       	sub	r27, r27
    9296:	51 e1       	ldi	r21, 0x11	; 17
    9298:	07 c0       	rjmp	.+14     	; 0x92a8 <__udivmodhi4_ep>

0000929a <__udivmodhi4_loop>:
    929a:	aa 1f       	adc	r26, r26
    929c:	bb 1f       	adc	r27, r27
    929e:	a6 17       	cp	r26, r22
    92a0:	b7 07       	cpc	r27, r23
    92a2:	10 f0       	brcs	.+4      	; 0x92a8 <__udivmodhi4_ep>
    92a4:	a6 1b       	sub	r26, r22
    92a6:	b7 0b       	sbc	r27, r23

000092a8 <__udivmodhi4_ep>:
    92a8:	88 1f       	adc	r24, r24
    92aa:	99 1f       	adc	r25, r25
    92ac:	5a 95       	dec	r21
    92ae:	a9 f7       	brne	.-22     	; 0x929a <__udivmodhi4_loop>
    92b0:	80 95       	com	r24
    92b2:	90 95       	com	r25
    92b4:	bc 01       	movw	r22, r24
    92b6:	cd 01       	movw	r24, r26
    92b8:	08 95       	ret

000092ba <__umulhisi3>:
    92ba:	a2 9f       	mul	r26, r18
    92bc:	b0 01       	movw	r22, r0
    92be:	b3 9f       	mul	r27, r19
    92c0:	c0 01       	movw	r24, r0
    92c2:	a3 9f       	mul	r26, r19
    92c4:	01 d0       	rcall	.+2      	; 0x92c8 <__umulhisi3+0xe>
    92c6:	b2 9f       	mul	r27, r18
    92c8:	70 0d       	add	r23, r0
    92ca:	81 1d       	adc	r24, r1
    92cc:	11 24       	eor	r1, r1
    92ce:	91 1d       	adc	r25, r1
    92d0:	08 95       	ret

000092d2 <memchr>:
    92d2:	fc 01       	movw	r30, r24
    92d4:	41 50       	subi	r20, 0x01	; 1
    92d6:	50 40       	sbci	r21, 0x00	; 0
    92d8:	30 f0       	brcs	.+12     	; 0x92e6 <memchr+0x14>
    92da:	01 90       	ld	r0, Z+
    92dc:	06 16       	cp	r0, r22
    92de:	d1 f7       	brne	.-12     	; 0x92d4 <memchr+0x2>
    92e0:	31 97       	sbiw	r30, 0x01	; 1
    92e2:	cf 01       	movw	r24, r30
    92e4:	08 95       	ret
    92e6:	88 27       	eor	r24, r24
    92e8:	99 27       	eor	r25, r25
    92ea:	08 95       	ret

000092ec <memcpy>:
    92ec:	fb 01       	movw	r30, r22
    92ee:	dc 01       	movw	r26, r24
    92f0:	02 c0       	rjmp	.+4      	; 0x92f6 <memcpy+0xa>
    92f2:	01 90       	ld	r0, Z+
    92f4:	0d 92       	st	X+, r0
    92f6:	41 50       	subi	r20, 0x01	; 1
    92f8:	50 40       	sbci	r21, 0x00	; 0
    92fa:	d8 f7       	brcc	.-10     	; 0x92f2 <memcpy+0x6>
    92fc:	08 95       	ret

000092fe <strcmp>:
    92fe:	fb 01       	movw	r30, r22
    9300:	dc 01       	movw	r26, r24
    9302:	8d 91       	ld	r24, X+
    9304:	01 90       	ld	r0, Z+
    9306:	80 19       	sub	r24, r0
    9308:	01 10       	cpse	r0, r1
    930a:	d9 f3       	breq	.-10     	; 0x9302 <strcmp+0x4>
    930c:	99 0b       	sbc	r25, r25
    930e:	08 95       	ret

00009310 <strlen>:
    9310:	fc 01       	movw	r30, r24
    9312:	01 90       	ld	r0, Z+
    9314:	00 20       	and	r0, r0
    9316:	e9 f7       	brne	.-6      	; 0x9312 <strlen+0x2>
    9318:	80 95       	com	r24
    931a:	90 95       	com	r25
    931c:	8e 0f       	add	r24, r30
    931e:	9f 1f       	adc	r25, r31
    9320:	08 95       	ret

00009322 <itoa>:
    9322:	fb 01       	movw	r30, r22
    9324:	9f 01       	movw	r18, r30
    9326:	e8 94       	clt
    9328:	42 30       	cpi	r20, 0x02	; 2
    932a:	bc f0       	brlt	.+46     	; 0x935a <itoa+0x38>
    932c:	45 32       	cpi	r20, 0x25	; 37
    932e:	ac f4       	brge	.+42     	; 0x935a <itoa+0x38>
    9330:	4a 30       	cpi	r20, 0x0A	; 10
    9332:	29 f4       	brne	.+10     	; 0x933e <itoa+0x1c>
    9334:	97 fb       	bst	r25, 7
    9336:	1e f4       	brtc	.+6      	; 0x933e <itoa+0x1c>
    9338:	90 95       	com	r25
    933a:	81 95       	neg	r24
    933c:	9f 4f       	sbci	r25, 0xFF	; 255
    933e:	64 2f       	mov	r22, r20
    9340:	77 27       	eor	r23, r23
    9342:	a7 df       	rcall	.-178    	; 0x9292 <__udivmodhi4>
    9344:	80 5d       	subi	r24, 0xD0	; 208
    9346:	8a 33       	cpi	r24, 0x3A	; 58
    9348:	0c f0       	brlt	.+2      	; 0x934c <itoa+0x2a>
    934a:	89 5d       	subi	r24, 0xD9	; 217
    934c:	81 93       	st	Z+, r24
    934e:	cb 01       	movw	r24, r22
    9350:	00 97       	sbiw	r24, 0x00	; 0
    9352:	a9 f7       	brne	.-22     	; 0x933e <itoa+0x1c>
    9354:	16 f4       	brtc	.+4      	; 0x935a <itoa+0x38>
    9356:	5d e2       	ldi	r21, 0x2D	; 45
    9358:	51 93       	st	Z+, r21
    935a:	10 82       	st	Z, r1
    935c:	c9 01       	movw	r24, r18
    935e:	00 c0       	rjmp	.+0      	; 0x9360 <strrev>

00009360 <strrev>:
    9360:	dc 01       	movw	r26, r24
    9362:	fc 01       	movw	r30, r24
    9364:	67 2f       	mov	r22, r23
    9366:	71 91       	ld	r23, Z+
    9368:	77 23       	and	r23, r23
    936a:	e1 f7       	brne	.-8      	; 0x9364 <strrev+0x4>
    936c:	32 97       	sbiw	r30, 0x02	; 2
    936e:	04 c0       	rjmp	.+8      	; 0x9378 <strrev+0x18>
    9370:	7c 91       	ld	r23, X
    9372:	6d 93       	st	X+, r22
    9374:	70 83       	st	Z, r23
    9376:	62 91       	ld	r22, -Z
    9378:	ae 17       	cp	r26, r30
    937a:	bf 07       	cpc	r27, r31
    937c:	c8 f3       	brcs	.-14     	; 0x9370 <strrev+0x10>
    937e:	08 95       	ret

00009380 <_exit>:
    9380:	f8 94       	cli

00009382 <__stop_program>:
    9382:	ff cf       	rjmp	.-2      	; 0x9382 <__stop_program>
