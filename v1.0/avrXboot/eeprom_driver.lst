   1               		.file	"eeprom_driver.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 371               		.section	.text.NVM_EXEC,"ax",@progbits
 374               	NVM_EXEC:
   1:eeprom_driver.c **** /************************************************************************/
   2:eeprom_driver.c **** /* XMEGA EEPROM Driver                                                  */
   3:eeprom_driver.c **** /*                                                                      */
   4:eeprom_driver.c **** /* eeprom.c                                                             */
   5:eeprom_driver.c **** /*                                                                      */
   6:eeprom_driver.c **** /* Alex Forencich <alex@alexforencich.com>                              */
   7:eeprom_driver.c **** /*                                                                      */
   8:eeprom_driver.c **** /* Copyright (c) 2011 Alex Forencich                                    */
   9:eeprom_driver.c **** /*                                                                      */
  10:eeprom_driver.c **** /* Permission is hereby granted, free of charge, to any person          */
  11:eeprom_driver.c **** /* obtaining a copy of this software and associated documentation       */
  12:eeprom_driver.c **** /* files(the "Software"), to deal in the Software without restriction,  */
  13:eeprom_driver.c **** /* including without limitation the rights to use, copy, modify, merge, */
  14:eeprom_driver.c **** /* publish, distribute, sublicense, and/or sell copies of the Software, */
  15:eeprom_driver.c **** /* and to permit persons to whom the Software is furnished to do so,    */
  16:eeprom_driver.c **** /* subject to the following conditions:                                 */
  17:eeprom_driver.c **** /*                                                                      */
  18:eeprom_driver.c **** /* The above copyright notice and this permission notice shall be       */
  19:eeprom_driver.c **** /* included in all copies or substantial portions of the Software.      */
  20:eeprom_driver.c **** /*                                                                      */
  21:eeprom_driver.c **** /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,      */
  22:eeprom_driver.c **** /* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF   */
  23:eeprom_driver.c **** /* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                */
  24:eeprom_driver.c **** /* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  */
  25:eeprom_driver.c **** /* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN   */
  26:eeprom_driver.c **** /* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN    */
  27:eeprom_driver.c **** /* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE     */
  28:eeprom_driver.c **** /* SOFTWARE.                                                            */
  29:eeprom_driver.c **** /*                                                                      */
  30:eeprom_driver.c **** /************************************************************************/
  31:eeprom_driver.c **** 
  32:eeprom_driver.c **** #include "eeprom_driver.h"
  33:eeprom_driver.c **** #include "string.h"
  34:eeprom_driver.c **** 
  35:eeprom_driver.c **** #ifdef __AVR_XMEGA__
  36:eeprom_driver.c **** 
  37:eeprom_driver.c **** // NVM call
  38:eeprom_driver.c **** static inline void NVM_EXEC(void)
  39:eeprom_driver.c **** {
 376               	.LM0:
 377               	.LFBB1:
 378               	/* prologue: function */
 379               	/* frame size = 0 */
 380               	/* stack size = 0 */
 381               	.L__stack_usage = 0
  40:eeprom_driver.c ****         void *z = (void *)&NVM_CTRLA;
  41:eeprom_driver.c ****         
  42:eeprom_driver.c ****         __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
 383               	.LM1:
 384 0000 EBEC      		ldi r30,lo8(-53)
 385 0002 F1E0      		ldi r31,lo8(1)
 386 0004 21E0      		ldi r18,lo8(1)
 387 0006 30E0      		ldi r19,0
 388 0008 88ED      		ldi r24,lo8(-40)
 389 000a 90E0      		ldi r25,0
 390               	/* #APP */
 391               	 ;  42 "eeprom_driver.c" 1
 392 000c 84BF      		out 52, r24
 393 000e 2083      		st z, r18
 394               	 ;  0 "" 2
 395               	/* #NOAPP */
 396 0010 0895      		ret
 398               	.Lscope1:
 399               		.section	.text.wait_for_nvm,"ax",@progbits
 401               	.global	wait_for_nvm
 403               	wait_for_nvm:
  43:eeprom_driver.c ****         "st z, %[cmdex]"
  44:eeprom_driver.c ****         :
  45:eeprom_driver.c ****         : [ccp] "I" (_SFR_IO_ADDR(CCP)),
  46:eeprom_driver.c ****         [ioreg] "d" (CCP_IOREG_gc),
  47:eeprom_driver.c ****                      [cmdex] "r" (NVM_CMDEX_bm),
  48:eeprom_driver.c ****                      [z] "z" (z)
  49:eeprom_driver.c ****                      );
  50:eeprom_driver.c **** }
  51:eeprom_driver.c **** 
  52:eeprom_driver.c **** #ifdef USE_AVR1008_EEPROM
  53:eeprom_driver.c **** 
  54:eeprom_driver.c **** // Interrupt handler for the EEPROM write "done" interrupt
  55:eeprom_driver.c **** ISR(NVM_EE_vect)
  56:eeprom_driver.c **** {
  57:eeprom_driver.c ****         // Disable the EEPROM interrupt
  58:eeprom_driver.c ****         NVM.INTCTRL = (NVM.INTCTRL & ~NVM_EELVL_gm);
  59:eeprom_driver.c **** }
  60:eeprom_driver.c **** 
  61:eeprom_driver.c **** // AVR1008 fix
  62:eeprom_driver.c **** static inline void NVM_EXEC_WRAPPER(void)
  63:eeprom_driver.c **** {
  64:eeprom_driver.c ****         // Save the Sleep register
  65:eeprom_driver.c ****         uint8_t sleepCtr = SLEEP.CTRL;
  66:eeprom_driver.c ****         // Set sleep mode to IDLE
  67:eeprom_driver.c ****         SLEEP.CTRL = (SLEEP.CTRL & ~SLEEP.CTRL) | SLEEP_SMODE_IDLE_gc;
  68:eeprom_driver.c ****         // Save the PMIC Status and control registers
  69:eeprom_driver.c ****         uint8_t statusStore = PMIC.STATUS;
  70:eeprom_driver.c ****         uint8_t pmicStore = PMIC.CTRL;
  71:eeprom_driver.c ****         
  72:eeprom_driver.c ****         // Enable only the highest level of interrupts
  73:eeprom_driver.c ****         PMIC.CTRL = (PMIC.CTRL & ~(PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm)) | PMIC_HILVLEN_bm;
  74:eeprom_driver.c ****         // Save SREG for later use
  75:eeprom_driver.c ****         uint8_t globalInt = SREG;
  76:eeprom_driver.c ****         // Enable global interrupts
  77:eeprom_driver.c ****         sei();
  78:eeprom_driver.c ****         // Set sleep enabled
  79:eeprom_driver.c ****         SLEEP.CTRL |= SLEEP_SEN_bm;
  80:eeprom_driver.c ****         // Save eeprom interrupt settings for later
  81:eeprom_driver.c ****         uint8_t eepromintStore = NVM.INTCTRL;
  82:eeprom_driver.c ****         NVM_EXEC();
  83:eeprom_driver.c ****         // Enable EEPROM interrupt
  84:eeprom_driver.c ****         NVM.INTCTRL =  NVM_EELVL0_bm | NVM_EELVL1_bm;
  85:eeprom_driver.c ****         // Sleep before 2.5uS has passed
  86:eeprom_driver.c ****         sleep_cpu();
  87:eeprom_driver.c ****         // Restore sleep settings
  88:eeprom_driver.c ****         SLEEP.CTRL = sleepCtr;
  89:eeprom_driver.c ****         // Restore PMIC status and control registers
  90:eeprom_driver.c ****         PMIC.STATUS = statusStore;
  91:eeprom_driver.c ****         PMIC.CTRL = pmicStore;
  92:eeprom_driver.c ****         // Restore EEPROM interruptsettings
  93:eeprom_driver.c ****         NVM.INTCTRL = eepromintStore;
  94:eeprom_driver.c ****         // Restore global interrupt settings
  95:eeprom_driver.c ****         SREG = globalInt;
  96:eeprom_driver.c **** }
  97:eeprom_driver.c **** 
  98:eeprom_driver.c **** #else
  99:eeprom_driver.c **** 
 100:eeprom_driver.c **** #define NVM_EXEC_WRAPPER NVM_EXEC
 101:eeprom_driver.c **** 
 102:eeprom_driver.c **** #endif // USE_AVR1008_EEPROM
 103:eeprom_driver.c **** 
 104:eeprom_driver.c **** 
 105:eeprom_driver.c **** void wait_for_nvm(void)
 106:eeprom_driver.c **** {
 405               	.LM2:
 406               	.LFBB2:
 407               	/* prologue: function */
 408               	/* frame size = 0 */
 409               	/* stack size = 0 */
 410               	.L__stack_usage = 0
 411               	.L3:
 107:eeprom_driver.c ****         while (NVM.STATUS & NVM_NVMBUSY_bm) { };
 413               	.LM3:
 414 0000 8091 CF01 		lds r24,463
 415 0004 87FD      		sbrc r24,7
 416 0006 00C0      		rjmp .L3
 417               	/* epilogue start */
 108:eeprom_driver.c **** }
 419               	.LM4:
 420 0008 0895      		ret
 422               	.Lscope2:
 423               		.section	.text.flush_buffer,"ax",@progbits
 425               	.global	flush_buffer
 427               	flush_buffer:
 109:eeprom_driver.c **** 
 110:eeprom_driver.c **** void flush_buffer(void)
 111:eeprom_driver.c **** {
 429               	.LM5:
 430               	.LFBB3:
 431               	/* prologue: function */
 432               	/* frame size = 0 */
 433               	/* stack size = 0 */
 434               	.L__stack_usage = 0
 112:eeprom_driver.c ****         wait_for_nvm();
 436               	.LM6:
 437 0000 0E94 0000 		call wait_for_nvm
 113:eeprom_driver.c ****         
 114:eeprom_driver.c ****         if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
 439               	.LM7:
 440 0004 8091 CF01 		lds r24,463
 441 0008 81FF      		sbrs r24,1
 442 000a 00C0      		rjmp .L5
 115:eeprom_driver.c ****                 NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
 444               	.LM8:
 445 000c 86E3      		ldi r24,lo8(54)
 446 000e 8093 CA01 		sts 458,r24
 116:eeprom_driver.c ****                 NVM_EXEC();
 448               	.LM9:
 449 0012 0C94 0000 		jmp NVM_EXEC
 450               	.L5:
 451 0016 0895      		ret
 453               	.Lscope3:
 454               		.section	.text.EEPROM_read_byte,"ax",@progbits
 456               	.global	EEPROM_read_byte
 458               	EEPROM_read_byte:
 117:eeprom_driver.c ****         }
 118:eeprom_driver.c **** }
 119:eeprom_driver.c **** 
 120:eeprom_driver.c **** 
 121:eeprom_driver.c **** uint8_t EEPROM_read_byte(uint16_t addr)
 122:eeprom_driver.c **** {
 460               	.LM10:
 461               	.LFBB4:
 462 0000 EF92      		push r14
 463 0002 FF92      		push r15
 464 0004 1F93      		push r17
 465 0006 CF93      		push r28
 466 0008 DF93      		push r29
 467 000a 1F92      		push __zero_reg__
 468 000c CDB7      		in r28,__SP_L__
 469 000e DEB7      		in r29,__SP_H__
 470               	/* prologue: function */
 471               	/* frame size = 1 */
 472               	/* stack size = 6 */
 473               	.L__stack_usage = 6
 474 0010 192F      		mov r17,r25
 123:eeprom_driver.c ****         wait_for_nvm();
 476               	.LM11:
 477 0012 8983      		std Y+1,r24
 478 0014 0E94 0000 		call wait_for_nvm
 124:eeprom_driver.c ****         
 125:eeprom_driver.c ****         NVM.ADDR0 = addr & 0xFF;
 480               	.LM12:
 481 0018 80EC      		ldi r24,lo8(-64)
 482 001a E82E      		mov r14,r24
 483 001c FF24      		clr r15
 484 001e F394      		inc r15
 485 0020 8981      		ldd r24,Y+1
 486 0022 F701      		movw r30,r14
 487 0024 8083      		st Z,r24
 126:eeprom_driver.c ****         NVM.ADDR1 = (addr >> 8) & 0x1F;
 489               	.LM13:
 490 0026 812F      		mov r24,r17
 491 0028 90E0      		ldi r25,0
 492 002a 8F71      		andi r24,31
 493 002c 9927      		clr r25
 494 002e 8183      		std Z+1,r24
 127:eeprom_driver.c ****         NVM.ADDR2 = 0;
 496               	.LM14:
 497 0030 1282      		std Z+2,__zero_reg__
 128:eeprom_driver.c ****         
 129:eeprom_driver.c ****         NVM.CMD = NVM_CMD_READ_EEPROM_gc;
 499               	.LM15:
 500 0032 86E0      		ldi r24,lo8(6)
 501 0034 8287      		std Z+10,r24
 130:eeprom_driver.c ****         NVM_EXEC();
 503               	.LM16:
 504 0036 0E94 0000 		call NVM_EXEC
 131:eeprom_driver.c ****         
 132:eeprom_driver.c ****         return NVM.DATA0;
 506               	.LM17:
 507 003a F701      		movw r30,r14
 508 003c 8481      		ldd r24,Z+4
 509               	/* epilogue start */
 133:eeprom_driver.c **** }
 511               	.LM18:
 512 003e 0F90      		pop __tmp_reg__
 513 0040 DF91      		pop r29
 514 0042 CF91      		pop r28
 515 0044 1F91      		pop r17
 516 0046 FF90      		pop r15
 517 0048 EF90      		pop r14
 518 004a 0895      		ret
 520               	.Lscope4:
 521               		.section	.text.EEPROM_write_byte,"ax",@progbits
 524               	.global	EEPROM_write_byte
 526               	EEPROM_write_byte:
 134:eeprom_driver.c **** 
 135:eeprom_driver.c **** 
 136:eeprom_driver.c **** void EEPROM_write_byte(uint16_t addr, uint8_t byte)
 137:eeprom_driver.c **** {
 528               	.LM19:
 529               	.LFBB5:
 530 0000 1F93      		push r17
 531 0002 CF93      		push r28
 532 0004 DF93      		push r29
 533 0006 00D0      		rcall .
 534 0008 CDB7      		in r28,__SP_L__
 535 000a DEB7      		in r29,__SP_H__
 536               	/* prologue: function */
 537               	/* frame size = 2 */
 538               	/* stack size = 5 */
 539               	.L__stack_usage = 5
 540 000c 192F      		mov r17,r25
 138:eeprom_driver.c ****         flush_buffer();
 542               	.LM20:
 543 000e 6983      		std Y+1,r22
 544 0010 8A83      		std Y+2,r24
 545 0012 0E94 0000 		call flush_buffer
 139:eeprom_driver.c ****         NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
 547               	.LM21:
 548 0016 E0EC      		ldi r30,lo8(-64)
 549 0018 F1E0      		ldi r31,lo8(1)
 550 001a 93E3      		ldi r25,lo8(51)
 551 001c 9287      		std Z+10,r25
 140:eeprom_driver.c ****         
 141:eeprom_driver.c ****         NVM.ADDR0 = addr & 0xFF;
 553               	.LM22:
 554 001e 8A81      		ldd r24,Y+2
 555 0020 8083      		st Z,r24
 142:eeprom_driver.c ****         NVM.ADDR1 = (addr >> 8) & 0x1F;
 557               	.LM23:
 558 0022 812F      		mov r24,r17
 559 0024 90E0      		ldi r25,0
 560 0026 8F71      		andi r24,31
 561 0028 9927      		clr r25
 562 002a 8183      		std Z+1,r24
 143:eeprom_driver.c ****         NVM.ADDR2 = 0;
 564               	.LM24:
 565 002c 1282      		std Z+2,__zero_reg__
 144:eeprom_driver.c ****         
 145:eeprom_driver.c ****         NVM.DATA0 = byte;
 567               	.LM25:
 568 002e 6981      		ldd r22,Y+1
 569 0030 6483      		std Z+4,r22
 146:eeprom_driver.c ****         
 147:eeprom_driver.c ****         NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
 571               	.LM26:
 572 0032 85E3      		ldi r24,lo8(53)
 573 0034 8287      		std Z+10,r24
 574               	/* epilogue start */
 148:eeprom_driver.c ****         NVM_EXEC_WRAPPER();
 149:eeprom_driver.c **** }
 576               	.LM27:
 577 0036 0F90      		pop __tmp_reg__
 578 0038 0F90      		pop __tmp_reg__
 579 003a DF91      		pop r29
 580 003c CF91      		pop r28
 581 003e 1F91      		pop r17
 148:eeprom_driver.c ****         NVM_EXEC_WRAPPER();
 583               	.LM28:
 584 0040 0C94 0000 		jmp NVM_EXEC
 586               	.Lscope5:
 587               		.section	.text.EEPROM_read_block,"ax",@progbits
 592               	.global	EEPROM_read_block
 594               	EEPROM_read_block:
 150:eeprom_driver.c **** 
 151:eeprom_driver.c **** 
 152:eeprom_driver.c **** uint16_t EEPROM_read_block(uint16_t addr, uint8_t *dest, uint16_t len)
 153:eeprom_driver.c **** {
 596               	.LM29:
 597               	.LFBB6:
 598 0000 BF92      		push r11
 599 0002 CF92      		push r12
 600 0004 DF92      		push r13
 601 0006 EF92      		push r14
 602 0008 FF92      		push r15
 603 000a 0F93      		push r16
 604 000c 1F93      		push r17
 605 000e CF93      		push r28
 606 0010 DF93      		push r29
 607               	/* prologue: function */
 608               	/* frame size = 0 */
 609               	/* stack size = 9 */
 610               	.L__stack_usage = 9
 611 0012 EC01      		movw r28,r24
 612 0014 8B01      		movw r16,r22
 613 0016 7A01      		movw r14,r20
 154:eeprom_driver.c ****         uint16_t cnt = 0;
 155:eeprom_driver.c ****         
 156:eeprom_driver.c ****         NVM.ADDR2 = 0;
 615               	.LM30:
 616 0018 1092 C201 		sts 450,__zero_reg__
 157:eeprom_driver.c ****         
 158:eeprom_driver.c ****         wait_for_nvm();
 618               	.LM31:
 619 001c 0E94 0000 		call wait_for_nvm
 152:eeprom_driver.c **** uint16_t EEPROM_read_block(uint16_t addr, uint8_t *dest, uint16_t len)
 621               	.LM32:
 622 0020 6801      		movw r12,r16
 623 0022 CE0C      		add r12,r14
 624 0024 DF1C      		adc r13,r15
 159:eeprom_driver.c ****         
 160:eeprom_driver.c ****         while (len > 0)
 161:eeprom_driver.c ****         {
 162:eeprom_driver.c ****                 NVM.ADDR0 = addr & 0xFF;
 163:eeprom_driver.c ****                 NVM.ADDR1 = (addr >> 8) & 0x1F;
 164:eeprom_driver.c ****                 
 165:eeprom_driver.c ****                 NVM.CMD = NVM_CMD_READ_EEPROM_gc;
 626               	.LM33:
 627 0026 26E0      		ldi r18,lo8(6)
 628 0028 B22E      		mov r11,r18
 160:eeprom_driver.c ****         while (len > 0)
 630               	.LM34:
 631 002a 00C0      		rjmp .L10
 632               	.L11:
 162:eeprom_driver.c ****                 NVM.ADDR0 = addr & 0xFF;
 634               	.LM35:
 635 002c C093 C001 		sts 448,r28
 163:eeprom_driver.c ****                 NVM.ADDR1 = (addr >> 8) & 0x1F;
 637               	.LM36:
 638 0030 8D2F      		mov r24,r29
 639 0032 9927      		clr r25
 640 0034 8F71      		andi r24,31
 641 0036 9927      		clr r25
 642 0038 8093 C101 		sts 449,r24
 644               	.LM37:
 645 003c B092 CA01 		sts 458,r11
 166:eeprom_driver.c ****                 NVM_EXEC();
 647               	.LM38:
 648 0040 0E94 0000 		call NVM_EXEC
 167:eeprom_driver.c ****                 
 168:eeprom_driver.c ****                 *(dest++) = NVM.DATA0; addr++;
 650               	.LM39:
 651 0044 8091 C401 		lds r24,452
 652 0048 F801      		movw r30,r16
 653 004a 8193      		st Z+,r24
 654 004c 8F01      		movw r16,r30
 655 004e 2196      		adiw r28,1
 656               	.L10:
 160:eeprom_driver.c ****         while (len > 0)
 658               	.LM40:
 659 0050 0C15      		cp r16,r12
 660 0052 1D05      		cpc r17,r13
 661 0054 01F4      		brne .L11
 169:eeprom_driver.c ****                 
 170:eeprom_driver.c ****                 len--; cnt++;
 171:eeprom_driver.c ****         }
 172:eeprom_driver.c ****         return cnt;
 173:eeprom_driver.c **** }
 663               	.LM41:
 664 0056 C701      		movw r24,r14
 665               	/* epilogue start */
 666 0058 DF91      		pop r29
 667 005a CF91      		pop r28
 668 005c 1F91      		pop r17
 669 005e 0F91      		pop r16
 670 0060 FF90      		pop r15
 671 0062 EF90      		pop r14
 672 0064 DF90      		pop r13
 673 0066 CF90      		pop r12
 674 0068 BF90      		pop r11
 675 006a 0895      		ret
 677               	.Lscope6:
 678               		.section	.text.EEPROM_write_block,"ax",@progbits
 682               	.global	EEPROM_write_block
 684               	EEPROM_write_block:
 174:eeprom_driver.c **** 
 175:eeprom_driver.c **** 
 176:eeprom_driver.c **** uint16_t EEPROM_write_block(uint16_t addr, const uint8_t *src, uint16_t len)
 177:eeprom_driver.c **** {
 686               	.LM42:
 687               	.LFBB7:
 688 0000 9F92      		push r9
 689 0002 AF92      		push r10
 690 0004 BF92      		push r11
 691 0006 CF92      		push r12
 692 0008 DF92      		push r13
 693 000a EF92      		push r14
 694 000c FF92      		push r15
 695 000e 0F93      		push r16
 696 0010 1F93      		push r17
 697 0012 CF93      		push r28
 698 0014 DF93      		push r29
 699               	/* prologue: function */
 700               	/* frame size = 0 */
 701               	/* stack size = 11 */
 702               	.L__stack_usage = 11
 703 0016 7B01      		movw r14,r22
 704 0018 B42E      		mov r11,r20
 705 001a C52E      		mov r12,r21
 178:eeprom_driver.c ****         uint8_t byte_addr = addr % EEPROM_PAGE_SIZE;
 707               	.LM43:
 708 001c 9C01      		movw r18,r24
 709 001e 2F71      		andi r18,31
 710 0020 3327      		clr r19
 711 0022 D22E      		mov r13,r18
 179:eeprom_driver.c ****         uint16_t page_addr = addr - byte_addr;
 713               	.LM44:
 714 0024 8C01      		movw r16,r24
 715 0026 021B      		sub r16,r18
 716 0028 130B      		sbc r17,r19
 180:eeprom_driver.c ****         uint16_t cnt = 0;
 181:eeprom_driver.c ****         
 182:eeprom_driver.c ****         flush_buffer();
 718               	.LM45:
 719 002a 0E94 0000 		call flush_buffer
 183:eeprom_driver.c ****         wait_for_nvm();
 721               	.LM46:
 722 002e 0E94 0000 		call wait_for_nvm
 184:eeprom_driver.c ****         NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
 724               	.LM47:
 725 0032 83E3      		ldi r24,lo8(51)
 726 0034 8093 CA01 		sts 458,r24
 185:eeprom_driver.c ****         
 186:eeprom_driver.c ****         NVM.ADDR1 = 0;
 728               	.LM48:
 729 0038 1092 C101 		sts 449,__zero_reg__
 187:eeprom_driver.c ****         NVM.ADDR2 = 0;
 731               	.LM49:
 732 003c 1092 C201 		sts 450,__zero_reg__
 188:eeprom_driver.c ****         
 189:eeprom_driver.c ****         while (len > 0)
 734               	.LM50:
 735 0040 CB2D      		mov r28,r11
 736 0042 DC2D      		mov r29,r12
 190:eeprom_driver.c ****         {
 191:eeprom_driver.c ****                 NVM.ADDR0 = byte_addr;
 192:eeprom_driver.c ****                 
 193:eeprom_driver.c ****                 NVM.DATA0 = *(src++);
 194:eeprom_driver.c ****                 
 195:eeprom_driver.c ****                 byte_addr++;
 196:eeprom_driver.c ****                 len--;
 197:eeprom_driver.c ****                 
 198:eeprom_driver.c ****                 if (len == 0 || byte_addr >= EEPROM_PAGE_SIZE)
 199:eeprom_driver.c ****                 {
 200:eeprom_driver.c ****                         NVM.ADDR0 = page_addr & 0xFF;
 201:eeprom_driver.c ****                         NVM.ADDR1 = (page_addr >> 8) & 0x1F;
 202:eeprom_driver.c ****                         
 203:eeprom_driver.c ****                         NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
 738               	.LM51:
 739 0044 45E3      		ldi r20,lo8(53)
 740 0046 A42E      		mov r10,r20
 204:eeprom_driver.c ****                         NVM_EXEC();
 205:eeprom_driver.c ****                         
 206:eeprom_driver.c ****                         page_addr += EEPROM_PAGE_SIZE;
 207:eeprom_driver.c ****                         byte_addr = 0;
 208:eeprom_driver.c ****                         
 209:eeprom_driver.c ****                         wait_for_nvm();
 210:eeprom_driver.c ****                         
 211:eeprom_driver.c ****                         NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
 742               	.LM52:
 743 0048 53E3      		ldi r21,lo8(51)
 744 004a 952E      		mov r9,r21
 189:eeprom_driver.c ****         while (len > 0)
 746               	.LM53:
 747 004c 00C0      		rjmp .L22
 748               	.L16:
 191:eeprom_driver.c ****                 NVM.ADDR0 = byte_addr;
 750               	.LM54:
 751 004e D092 C001 		sts 448,r13
 193:eeprom_driver.c ****                 NVM.DATA0 = *(src++);
 753               	.LM55:
 754 0052 F701      		movw r30,r14
 755 0054 8191      		ld r24,Z+
 756 0056 7F01      		movw r14,r30
 757 0058 8093 C401 		sts 452,r24
 196:eeprom_driver.c ****                 len--;
 759               	.LM56:
 760 005c 2197      		sbiw r28,1
 198:eeprom_driver.c ****                 if (len == 0 || byte_addr >= EEPROM_PAGE_SIZE)
 762               	.LM57:
 763 005e 01F0      		breq .L14
 195:eeprom_driver.c ****                 byte_addr++;
 765               	.LM58:
 766 0060 D394      		inc r13
 198:eeprom_driver.c ****                 if (len == 0 || byte_addr >= EEPROM_PAGE_SIZE)
 768               	.LM59:
 769 0062 F0E2      		ldi r31,lo8(32)
 770 0064 DF12      		cpse r13,r31
 771 0066 00C0      		rjmp .L22
 772               	.L14:
 200:eeprom_driver.c ****                         NVM.ADDR0 = page_addr & 0xFF;
 774               	.LM60:
 775 0068 0093 C001 		sts 448,r16
 201:eeprom_driver.c ****                         NVM.ADDR1 = (page_addr >> 8) & 0x1F;
 777               	.LM61:
 778 006c 212F      		mov r18,r17
 779 006e 3327      		clr r19
 780 0070 2F71      		andi r18,31
 781 0072 3327      		clr r19
 782 0074 2093 C101 		sts 449,r18
 203:eeprom_driver.c ****                         NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
 784               	.LM62:
 785 0078 A092 CA01 		sts 458,r10
 204:eeprom_driver.c ****                         NVM_EXEC();
 787               	.LM63:
 788 007c 0E94 0000 		call NVM_EXEC
 206:eeprom_driver.c ****                         page_addr += EEPROM_PAGE_SIZE;
 790               	.LM64:
 791 0080 005E      		subi r16,-32
 792 0082 1F4F      		sbci r17,-1
 209:eeprom_driver.c ****                         wait_for_nvm();
 794               	.LM65:
 795 0084 0E94 0000 		call wait_for_nvm
 797               	.LM66:
 798 0088 9092 CA01 		sts 458,r9
 207:eeprom_driver.c ****                         byte_addr = 0;
 800               	.LM67:
 801 008c D12C      		mov r13,__zero_reg__
 802               	.L22:
 189:eeprom_driver.c ****         while (len > 0)
 804               	.LM68:
 805 008e 2097      		sbiw r28,0
 806 0090 01F4      		brne .L16
 212:eeprom_driver.c ****                 }
 213:eeprom_driver.c ****                 
 214:eeprom_driver.c ****                 cnt++;
 215:eeprom_driver.c ****         }
 216:eeprom_driver.c ****         
 217:eeprom_driver.c ****         return cnt;
 218:eeprom_driver.c **** }
 808               	.LM69:
 809 0092 8B2D      		mov r24,r11
 810 0094 9C2D      		mov r25,r12
 811               	/* epilogue start */
 812 0096 DF91      		pop r29
 813 0098 CF91      		pop r28
 814 009a 1F91      		pop r17
 815 009c 0F91      		pop r16
 816 009e FF90      		pop r15
 817 00a0 EF90      		pop r14
 818 00a2 DF90      		pop r13
 819 00a4 CF90      		pop r12
 820 00a6 BF90      		pop r11
 821 00a8 AF90      		pop r10
 822 00aa 9F90      		pop r9
 823 00ac 0895      		ret
 829               	.Lscope7:
 830               		.section	.text.EEPROM_erase_page,"ax",@progbits
 832               	.global	EEPROM_erase_page
 834               	EEPROM_erase_page:
 219:eeprom_driver.c **** 
 220:eeprom_driver.c **** 
 221:eeprom_driver.c **** void EEPROM_erase_page(uint16_t addr)
 222:eeprom_driver.c **** {
 836               	.LM70:
 837               	.LFBB8:
 838 0000 CF93      		push r28
 839 0002 DF93      		push r29
 840               	/* prologue: function */
 841               	/* frame size = 0 */
 842               	/* stack size = 2 */
 843               	.L__stack_usage = 2
 223:eeprom_driver.c ****         NVM.ADDR0 = addr & 0xFF;
 845               	.LM71:
 846 0004 C0EC      		ldi r28,lo8(-64)
 847 0006 D1E0      		ldi r29,lo8(1)
 848 0008 8883      		st Y,r24
 224:eeprom_driver.c ****         NVM.ADDR1 = (addr >> 8) & 0x1F;
 850               	.LM72:
 851 000a 292F      		mov r18,r25
 852 000c 30E0      		ldi r19,0
 853 000e 2F71      		andi r18,31
 854 0010 3327      		clr r19
 855 0012 2983      		std Y+1,r18
 225:eeprom_driver.c ****         NVM.ADDR2 = 0;
 857               	.LM73:
 858 0014 1A82      		std Y+2,__zero_reg__
 226:eeprom_driver.c ****         
 227:eeprom_driver.c ****         wait_for_nvm();
 860               	.LM74:
 861 0016 0E94 0000 		call wait_for_nvm
 228:eeprom_driver.c ****         
 229:eeprom_driver.c ****         NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
 863               	.LM75:
 864 001a 82E3      		ldi r24,lo8(50)
 865 001c 8A87      		std Y+10,r24
 866               	/* epilogue start */
 230:eeprom_driver.c ****         NVM_EXEC_WRAPPER();
 231:eeprom_driver.c **** }
 868               	.LM76:
 869 001e DF91      		pop r29
 870 0020 CF91      		pop r28
 230:eeprom_driver.c ****         NVM_EXEC_WRAPPER();
 872               	.LM77:
 873 0022 0C94 0000 		jmp NVM_EXEC
 875               	.Lscope8:
 876               		.section	.text.EEPROM_erase_all,"ax",@progbits
 878               	.global	EEPROM_erase_all
 880               	EEPROM_erase_all:
 232:eeprom_driver.c **** 
 233:eeprom_driver.c **** 
 234:eeprom_driver.c **** void EEPROM_erase_all(void)
 235:eeprom_driver.c **** {
 882               	.LM78:
 883               	.LFBB9:
 884               	/* prologue: function */
 885               	/* frame size = 0 */
 886               	/* stack size = 0 */
 887               	.L__stack_usage = 0
 236:eeprom_driver.c ****         wait_for_nvm();
 889               	.LM79:
 890 0000 0E94 0000 		call wait_for_nvm
 237:eeprom_driver.c ****         
 238:eeprom_driver.c ****         NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
 892               	.LM80:
 893 0004 80E3      		ldi r24,lo8(48)
 894 0006 E0EC      		ldi r30,lo8(-64)
 895 0008 F1E0      		ldi r31,lo8(1)
 896 000a 8287      		std Z+10,r24
 239:eeprom_driver.c ****         NVM_EXEC_WRAPPER();
 898               	.LM81:
 899 000c 0C94 0000 		jmp NVM_EXEC
 901               	.Lscope9:
 902               		.text
 904               	.Letext0:
 905               		.ident	"GCC: (AVR_8_bit_GNU_Toolchain_3.4.2_992) 4.7.2"
DEFINED SYMBOLS
                            *ABS*:00000000 eeprom_driver.c
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:2      *ABS*:0000003e __SP_H__
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:3      *ABS*:0000003d __SP_L__
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:4      *ABS*:0000003f __SREG__
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:6      *ABS*:00000034 __CCP__
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:7      *ABS*:00000000 __tmp_reg__
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:8      *ABS*:00000001 __zero_reg__
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:374    .text.NVM_EXEC:00000000 NVM_EXEC
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:403    .text.wait_for_nvm:00000000 wait_for_nvm
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:427    .text.flush_buffer:00000000 flush_buffer
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:458    .text.EEPROM_read_byte:00000000 EEPROM_read_byte
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:526    .text.EEPROM_write_byte:00000000 EEPROM_write_byte
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:594    .text.EEPROM_read_block:00000000 EEPROM_read_block
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:684    .text.EEPROM_write_block:00000000 EEPROM_write_block
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:834    .text.EEPROM_erase_page:00000000 EEPROM_erase_page
C:\Users\Matthew\AppData\Local\Temp\ccCVT5u2.s:880    .text.EEPROM_erase_all:00000000 EEPROM_erase_all

NO UNDEFINED SYMBOLS
