
Drone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000067e  00802000  00009172  00009206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002bb  0080267e  0080267e  00009884  2**0
                  ALLOC
  3 .stab         00000b94  00000000  00000000  00009884  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000353  00000000  00000000  0000a418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000a76b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000010d0  00000000  00000000  0000a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00018424  00000000  00000000  0000b870  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005536  00000000  00000000  00023c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001ba1b  00000000  00000000  000291ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003ec8  00000000  00000000  00044be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00020b2a  00000000  00000000  00048ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000083e3  00000000  00000000  000695da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f88  00000000  00000000  000719c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000e6b4  00000000  00000000  00072948  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f4 c0       	rjmp	.+488    	; 0x1ea <__ctors_end>
       2:	00 00       	nop
       4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
       6:	00 00       	nop
       8:	f7 c7       	rjmp	.+4078   	; 0xff8 <__vector_2>
       a:	00 00       	nop
       c:	0d c1       	rjmp	.+538    	; 0x228 <__bad_interrupt>
       e:	00 00       	nop
      10:	0b c1       	rjmp	.+534    	; 0x228 <__bad_interrupt>
      12:	00 00       	nop
      14:	09 c1       	rjmp	.+530    	; 0x228 <__bad_interrupt>
      16:	00 00       	nop
      18:	07 c1       	rjmp	.+526    	; 0x228 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
      1e:	00 00       	nop
      20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c0       	rjmp	.+498    	; 0x228 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 59 2f 	jmp	0x5eb2	; 0x5eb2 <__vector_14>
      3c:	0c 94 95 2f 	jmp	0x5f2a	; 0x5f2a <__vector_15>
      40:	0c 94 d1 2f 	jmp	0x5fa2	; 0x5fa2 <__vector_16>
      44:	0c 94 0d 30 	jmp	0x601a	; 0x601a <__vector_17>
      48:	0c 94 49 30 	jmp	0x6092	; 0x6092 <__vector_18>
      4c:	0c 94 85 30 	jmp	0x610a	; 0x610a <__vector_19>
      50:	0c 94 c1 30 	jmp	0x6182	; 0x6182 <__vector_20>
      54:	0c 94 fd 30 	jmp	0x61fa	; 0x61fa <__vector_21>
      58:	0c 94 39 31 	jmp	0x6272	; 0x6272 <__vector_22>
      5c:	0c 94 75 31 	jmp	0x62ea	; 0x62ea <__vector_23>
      60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <__vector_25>
      68:	0c 94 1a 29 	jmp	0x5234	; 0x5234 <__vector_26>
      6c:	dd c0       	rjmp	.+442    	; 0x228 <__bad_interrupt>
      6e:	00 00       	nop
      70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
      72:	00 00       	nop
      74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
      82:	00 00       	nop
      84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
      86:	00 00       	nop
      88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
      92:	00 00       	nop
      94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
      96:	00 00       	nop
      98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 19 33 	jmp	0x6632	; 0x6632 <__vector_47>
      c0:	0c 94 55 33 	jmp	0x66aa	; 0x66aa <__vector_48>
      c4:	0c 94 91 33 	jmp	0x6722	; 0x6722 <__vector_49>
      c8:	0c 94 cd 33 	jmp	0x679a	; 0x679a <__vector_50>
      cc:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__vector_51>
      d0:	0c 94 45 34 	jmp	0x688a	; 0x688a <__vector_52>
      d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a7 c0       	rjmp	.+334    	; 0x228 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a1 c0       	rjmp	.+322    	; 0x228 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9f c0       	rjmp	.+318    	; 0x228 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	9d c0       	rjmp	.+314    	; 0x228 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	9b c0       	rjmp	.+310    	; 0x228 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	99 c0       	rjmp	.+306    	; 0x228 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	97 c0       	rjmp	.+302    	; 0x228 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	95 c0       	rjmp	.+298    	; 0x228 <__bad_interrupt>
      fe:	00 00       	nop
     100:	93 c0       	rjmp	.+294    	; 0x228 <__bad_interrupt>
     102:	00 00       	nop
     104:	91 c0       	rjmp	.+290    	; 0x228 <__bad_interrupt>
     106:	00 00       	nop
     108:	8f c0       	rjmp	.+286    	; 0x228 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	8d c0       	rjmp	.+282    	; 0x228 <__bad_interrupt>
     10e:	00 00       	nop
     110:	8b c0       	rjmp	.+278    	; 0x228 <__bad_interrupt>
     112:	00 00       	nop
     114:	89 c0       	rjmp	.+274    	; 0x228 <__bad_interrupt>
     116:	00 00       	nop
     118:	87 c0       	rjmp	.+270    	; 0x228 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	85 c0       	rjmp	.+266    	; 0x228 <__bad_interrupt>
     11e:	00 00       	nop
     120:	83 c0       	rjmp	.+262    	; 0x228 <__bad_interrupt>
     122:	00 00       	nop
     124:	81 c0       	rjmp	.+258    	; 0x228 <__bad_interrupt>
     126:	00 00       	nop
     128:	7f c0       	rjmp	.+254    	; 0x228 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	7d c0       	rjmp	.+250    	; 0x228 <__bad_interrupt>
     12e:	00 00       	nop
     130:	7b c0       	rjmp	.+246    	; 0x228 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 b1 31 	jmp	0x6362	; 0x6362 <__vector_77>
     138:	0c 94 ed 31 	jmp	0x63da	; 0x63da <__vector_78>
     13c:	0c 94 29 32 	jmp	0x6452	; 0x6452 <__vector_79>
     140:	0c 94 65 32 	jmp	0x64ca	; 0x64ca <__vector_80>
     144:	0c 94 a1 32 	jmp	0x6542	; 0x6542 <__vector_81>
     148:	0c 94 dd 32 	jmp	0x65ba	; 0x65ba <__vector_82>
     14c:	6d c0       	rjmp	.+218    	; 0x228 <__bad_interrupt>
     14e:	00 00       	nop
     150:	6b c0       	rjmp	.+214    	; 0x228 <__bad_interrupt>
     152:	00 00       	nop
     154:	69 c0       	rjmp	.+210    	; 0x228 <__bad_interrupt>
     156:	00 00       	nop
     158:	67 c0       	rjmp	.+206    	; 0x228 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	65 c0       	rjmp	.+202    	; 0x228 <__bad_interrupt>
     15e:	00 00       	nop
     160:	63 c0       	rjmp	.+198    	; 0x228 <__bad_interrupt>
     162:	00 00       	nop
     164:	61 c0       	rjmp	.+194    	; 0x228 <__bad_interrupt>
     166:	00 00       	nop
     168:	5f c0       	rjmp	.+190    	; 0x228 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	5d c0       	rjmp	.+186    	; 0x228 <__bad_interrupt>
     16e:	00 00       	nop
     170:	5b c0       	rjmp	.+182    	; 0x228 <__bad_interrupt>
     172:	00 00       	nop
     174:	59 c0       	rjmp	.+178    	; 0x228 <__bad_interrupt>
     176:	00 00       	nop
     178:	57 c0       	rjmp	.+174    	; 0x228 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	55 c0       	rjmp	.+170    	; 0x228 <__bad_interrupt>
     17e:	00 00       	nop
     180:	53 c0       	rjmp	.+166    	; 0x228 <__bad_interrupt>
     182:	00 00       	nop
     184:	51 c0       	rjmp	.+162    	; 0x228 <__bad_interrupt>
     186:	00 00       	nop
     188:	4f c0       	rjmp	.+158    	; 0x228 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	4d c0       	rjmp	.+154    	; 0x228 <__bad_interrupt>
     18e:	00 00       	nop
     190:	4b c0       	rjmp	.+150    	; 0x228 <__bad_interrupt>
     192:	00 00       	nop
     194:	49 c0       	rjmp	.+146    	; 0x228 <__bad_interrupt>
     196:	00 00       	nop
     198:	47 c0       	rjmp	.+142    	; 0x228 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	45 c0       	rjmp	.+138    	; 0x228 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	0c 94 85 47 	jmp	0x8f0a	; 0x8f0a <__vector_104>
     1a4:	41 c0       	rjmp	.+130    	; 0x228 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	3f c0       	rjmp	.+126    	; 0x228 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3d c0       	rjmp	.+122    	; 0x228 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 81 34 	jmp	0x6902	; 0x6902 <__vector_108>
     1b4:	0c 94 bd 34 	jmp	0x697a	; 0x697a <__vector_109>
     1b8:	0c 94 f9 34 	jmp	0x69f2	; 0x69f2 <__vector_110>
     1bc:	0c 94 35 35 	jmp	0x6a6a	; 0x6a6a <__vector_111>
     1c0:	0c 94 71 35 	jmp	0x6ae2	; 0x6ae2 <__vector_112>
     1c4:	0c 94 ad 35 	jmp	0x6b5a	; 0x6b5a <__vector_113>

000001c8 <good>:
     1c8:	47 4f 4f 44 00                                      GOOD.

000001cd <bad>:
     1cd:	42 41 44 00                                         BAD.

000001d1 <debuguartinit>:
     1d1:	44 45 42 55 47 20 55 41 52 54 20 49 4e 49 54 3a     DEBUG UART INIT:
     1e1:	20 00                                                .

000001e3 <sleepmgr_configs>:
     1e3:	00 0e 06 0c 04 00 00                                .......

000001ea <__ctors_end>:
     1ea:	11 24       	eor	r1, r1
     1ec:	1f be       	out	0x3f, r1	; 63
     1ee:	cf ef       	ldi	r28, 0xFF	; 255
     1f0:	df e2       	ldi	r29, 0x2F	; 47
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	cd bf       	out	0x3d, r28	; 61

000001f6 <__do_copy_data>:
     1f6:	16 e2       	ldi	r17, 0x26	; 38
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	b0 e2       	ldi	r27, 0x20	; 32
     1fc:	e2 e7       	ldi	r30, 0x72	; 114
     1fe:	f1 e9       	ldi	r31, 0x91	; 145
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0b bf       	out	0x3b, r16	; 59
     204:	02 c0       	rjmp	.+4      	; 0x20a <__do_copy_data+0x14>
     206:	07 90       	elpm	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	ae 37       	cpi	r26, 0x7E	; 126
     20c:	b1 07       	cpc	r27, r17
     20e:	d9 f7       	brne	.-10     	; 0x206 <__do_copy_data+0x10>

00000210 <__do_clear_bss>:
     210:	29 e2       	ldi	r18, 0x29	; 41
     212:	ae e7       	ldi	r26, 0x7E	; 126
     214:	b6 e2       	ldi	r27, 0x26	; 38
     216:	01 c0       	rjmp	.+2      	; 0x21a <.do_clear_bss_start>

00000218 <.do_clear_bss_loop>:
     218:	1d 92       	st	X+, r1

0000021a <.do_clear_bss_start>:
     21a:	a9 33       	cpi	r26, 0x39	; 57
     21c:	b2 07       	cpc	r27, r18
     21e:	e1 f7       	brne	.-8      	; 0x218 <.do_clear_bss_loop>
     220:	0e 94 38 41 	call	0x8270	; 0x8270 <main>
     224:	0c 94 b7 48 	jmp	0x916e	; 0x916e <_exit>

00000228 <__bad_interrupt>:
     228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <cpu_irq_save>:
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
	return arch_ioport_pin_to_mask(pin);
}
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	1f 92       	push	r1
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	8f e3       	ldi	r24, 0x3F	; 63
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	80 81       	ld	r24, Z
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	f8 94       	cli
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	0f 90       	pop	r0
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <cpu_irq_restore>:
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	8f e3       	ldi	r24, 0x3F	; 63
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	29 81       	ldd	r18, Y+1	; 0x01
     25c:	fc 01       	movw	r30, r24
     25e:	20 83       	st	Z, r18
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62

	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	98 e4       	ldi	r25, 0x48	; 72
     274:	a8 ee       	ldi	r26, 0xE8	; 232
     276:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
     278:	bc 01       	movw	r22, r24
     27a:	cd 01       	movw	r24, r26
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	1f 92       	push	r1
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
     28c:	19 82       	std	Y+1, r1	; 0x01

	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
     28e:	ec df       	rcall	.-40     	; 0x268 <sysclk_get_main_hz>
     290:	dc 01       	movw	r26, r24
     292:	cb 01       	movw	r24, r22
     294:	29 81       	ldd	r18, Y+1	; 0x01
     296:	22 2f       	mov	r18, r18
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	02 2e       	mov	r0, r18
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <sysclk_get_per4_hz+0x24>
     29e:	b6 95       	lsr	r27
     2a0:	a7 95       	ror	r26
     2a2:	97 95       	ror	r25
     2a4:	87 95       	ror	r24
     2a6:	0a 94       	dec	r0
     2a8:	d2 f7       	brpl	.-12     	; 0x29e <sysclk_get_per4_hz+0x1c>
}
     2aa:	bc 01       	movw	r22, r24
     2ac:	cd 01       	movw	r24, r26
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
     2be:	e1 df       	rcall	.-62     	; 0x282 <sysclk_get_per4_hz>
     2c0:	dc 01       	movw	r26, r24
     2c2:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
     2c4:	bc 01       	movw	r22, r24
     2c6:	cd 01       	movw	r24, r26
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
     2d6:	ef df       	rcall	.-34     	; 0x2b6 <sysclk_get_per2_hz>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
}
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <adc_start_conversion>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <adc_start_conversion+0x6>
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <adc_start_conversion+0x8>
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	8a 83       	std	Y+2, r24	; 0x02
     2f4:	9b 83       	std	Y+3, r25	; 0x03
     2f6:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
     2f8:	98 df       	rcall	.-208    	; 0x22a <cpu_irq_save>
     2fa:	89 83       	std	Y+1, r24	; 0x01
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     2fc:	8a 81       	ldd	r24, Y+2	; 0x02
     2fe:	9b 81       	ldd	r25, Y+3	; 0x03
     300:	fc 01       	movw	r30, r24
     302:	80 81       	ld	r24, Z
     304:	28 2f       	mov	r18, r24
     306:	8c 81       	ldd	r24, Y+4	; 0x04
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	82 2b       	or	r24, r18
     316:	28 2f       	mov	r18, r24
     318:	8a 81       	ldd	r24, Y+2	; 0x02
     31a:	9b 81       	ldd	r25, Y+3	; 0x03
     31c:	fc 01       	movw	r30, r24
     31e:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	93 df       	rcall	.-218    	; 0x24a <cpu_irq_restore>
}
     324:	24 96       	adiw	r28, 0x04	; 4
     326:	cd bf       	out	0x3d, r28	; 61
     328:	de bf       	out	0x3e, r29	; 62
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <adc_get_interrupt_flag>:
 * together.)
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	00 d0       	rcall	.+0      	; 0x336 <adc_get_interrupt_flag+0x6>
     336:	1f 92       	push	r1
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	89 83       	std	Y+1, r24	; 0x01
     33e:	9a 83       	std	Y+2, r25	; 0x02
     340:	6b 83       	std	Y+3, r22	; 0x03
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	9a 81       	ldd	r25, Y+2	; 0x02
     346:	fc 01       	movw	r30, r24
     348:	96 81       	ldd	r25, Z+6	; 0x06
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	89 23       	and	r24, r25
}
     34e:	23 96       	adiw	r28, 0x03	; 3
     350:	cd bf       	out	0x3d, r28	; 61
     352:	de bf       	out	0x3e, r29	; 62
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <adc_clear_interrupt_flag>:
 * together.)
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	00 d0       	rcall	.+0      	; 0x360 <adc_clear_interrupt_flag+0x6>
     360:	1f 92       	push	r1
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	89 83       	std	Y+1, r24	; 0x01
     368:	9a 83       	std	Y+2, r25	; 0x02
     36a:	6b 83       	std	Y+3, r22	; 0x03
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	2b 81       	ldd	r18, Y+3	; 0x03
     372:	fc 01       	movw	r30, r24
     374:	26 83       	std	Z+6, r18	; 0x06
}
     376:	23 96       	adiw	r28, 0x03	; 3
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <adc_wait_for_interrupt_flag>:
 * \param ch_mask Mask of ADC channel(s):
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	00 d0       	rcall	.+0      	; 0x388 <adc_wait_for_interrupt_flag+0x6>
     388:	1f 92       	push	r1
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	89 83       	std	Y+1, r24	; 0x01
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	6b 83       	std	Y+3, r22	; 0x03
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	6b 81       	ldd	r22, Y+3	; 0x03
     39a:	ca df       	rcall	.-108    	; 0x330 <adc_get_interrupt_flag>
     39c:	98 2f       	mov	r25, r24
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	98 17       	cp	r25, r24
     3a2:	c1 f7       	brne	.-16     	; 0x394 <adc_wait_for_interrupt_flag+0x12>
	adc_clear_interrupt_flag(adc, ch_mask);
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	6b 81       	ldd	r22, Y+3	; 0x03
     3aa:	d7 df       	rcall	.-82     	; 0x35a <adc_clear_interrupt_flag>
}
     3ac:	23 96       	adiw	r28, 0x03	; 3
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	08 95       	ret

000003b8 <adc_set_clock_rate>:
 * devices. Setting the current limit mode on some devices will also affect the
 * maximum ADC sampling rate. Refer to the device manual for detailed
 * information on conversion timing and/or the current limitation mode.
 */
static inline void adc_set_clock_rate(struct adc_config *conf, uint32_t clk_adc)
{
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	2d 97       	sbiw	r28, 0x0d	; 13
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	88 87       	std	Y+8, r24	; 0x08
     3c8:	99 87       	std	Y+9, r25	; 0x09
     3ca:	4a 87       	std	Y+10, r20	; 0x0a
     3cc:	5b 87       	std	Y+11, r21	; 0x0b
     3ce:	6c 87       	std	Y+12, r22	; 0x0c
     3d0:	7d 87       	std	Y+13, r23	; 0x0d
	Assert(clk_adc <= 1400000UL);
#elif XMEGA_C
	Assert(clk_adc <= 1800000UL);
#endif

	clk_per = sysclk_get_per_hz();
     3d2:	7d df       	rcall	.-262    	; 0x2ce <sysclk_get_per_hz>
     3d4:	dc 01       	movw	r26, r24
     3d6:	cb 01       	movw	r24, r22
     3d8:	8a 83       	std	Y+2, r24	; 0x02
     3da:	9b 83       	std	Y+3, r25	; 0x03
     3dc:	ac 83       	std	Y+4, r26	; 0x04
     3de:	bd 83       	std	Y+5, r27	; 0x05
	ratio = clk_per / clk_adc;
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	9b 81       	ldd	r25, Y+3	; 0x03
     3e4:	ac 81       	ldd	r26, Y+4	; 0x04
     3e6:	bd 81       	ldd	r27, Y+5	; 0x05
     3e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     3ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     3ec:	4c 85       	ldd	r20, Y+12	; 0x0c
     3ee:	5d 85       	ldd	r21, Y+13	; 0x0d
     3f0:	bc 01       	movw	r22, r24
     3f2:	cd 01       	movw	r24, r26
     3f4:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
     3f8:	da 01       	movw	r26, r20
     3fa:	c9 01       	movw	r24, r18
     3fc:	8e 83       	std	Y+6, r24	; 0x06
     3fe:	9f 83       	std	Y+7, r25	; 0x07

	/* Round ratio up to the nearest prescaling factor. */
	if (ratio <= 4) {
     400:	8e 81       	ldd	r24, Y+6	; 0x06
     402:	9f 81       	ldd	r25, Y+7	; 0x07
     404:	85 30       	cpi	r24, 0x05	; 5
     406:	91 05       	cpc	r25, r1
     408:	10 f4       	brcc	.+4      	; 0x40e <adc_set_clock_rate+0x56>
		psc = ADC_PRESCALER_DIV4_gc;
     40a:	19 82       	std	Y+1, r1	; 0x01
     40c:	33 c0       	rjmp	.+102    	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 8) {
     40e:	8e 81       	ldd	r24, Y+6	; 0x06
     410:	9f 81       	ldd	r25, Y+7	; 0x07
     412:	89 30       	cpi	r24, 0x09	; 9
     414:	91 05       	cpc	r25, r1
     416:	18 f4       	brcc	.+6      	; 0x41e <adc_set_clock_rate+0x66>
		psc = ADC_PRESCALER_DIV8_gc;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	2b c0       	rjmp	.+86     	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 16) {
     41e:	8e 81       	ldd	r24, Y+6	; 0x06
     420:	9f 81       	ldd	r25, Y+7	; 0x07
     422:	81 31       	cpi	r24, 0x11	; 17
     424:	91 05       	cpc	r25, r1
     426:	18 f4       	brcc	.+6      	; 0x42e <adc_set_clock_rate+0x76>
		psc = ADC_PRESCALER_DIV16_gc;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	23 c0       	rjmp	.+70     	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 32) {
     42e:	8e 81       	ldd	r24, Y+6	; 0x06
     430:	9f 81       	ldd	r25, Y+7	; 0x07
     432:	81 32       	cpi	r24, 0x21	; 33
     434:	91 05       	cpc	r25, r1
     436:	18 f4       	brcc	.+6      	; 0x43e <adc_set_clock_rate+0x86>
		psc = ADC_PRESCALER_DIV32_gc;
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	1b c0       	rjmp	.+54     	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 64) {
     43e:	8e 81       	ldd	r24, Y+6	; 0x06
     440:	9f 81       	ldd	r25, Y+7	; 0x07
     442:	81 34       	cpi	r24, 0x41	; 65
     444:	91 05       	cpc	r25, r1
     446:	18 f4       	brcc	.+6      	; 0x44e <adc_set_clock_rate+0x96>
		psc = ADC_PRESCALER_DIV64_gc;
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	13 c0       	rjmp	.+38     	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 128) {
     44e:	8e 81       	ldd	r24, Y+6	; 0x06
     450:	9f 81       	ldd	r25, Y+7	; 0x07
     452:	81 38       	cpi	r24, 0x81	; 129
     454:	91 05       	cpc	r25, r1
     456:	18 f4       	brcc	.+6      	; 0x45e <adc_set_clock_rate+0xa6>
		psc = ADC_PRESCALER_DIV128_gc;
     458:	85 e0       	ldi	r24, 0x05	; 5
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	0b c0       	rjmp	.+22     	; 0x474 <adc_set_clock_rate+0xbc>
	} else if (ratio <= 256) {
     45e:	8e 81       	ldd	r24, Y+6	; 0x06
     460:	9f 81       	ldd	r25, Y+7	; 0x07
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	92 07       	cpc	r25, r18
     468:	18 f4       	brcc	.+6      	; 0x470 <adc_set_clock_rate+0xb8>
		psc = ADC_PRESCALER_DIV256_gc;
     46a:	86 e0       	ldi	r24, 0x06	; 6
     46c:	89 83       	std	Y+1, r24	; 0x01
     46e:	02 c0       	rjmp	.+4      	; 0x474 <adc_set_clock_rate+0xbc>
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
     470:	87 e0       	ldi	r24, 0x07	; 7
     472:	89 83       	std	Y+1, r24	; 0x01
	}

	conf->prescaler = psc;
     474:	88 85       	ldd	r24, Y+8	; 0x08
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	29 81       	ldd	r18, Y+1	; 0x01
     47a:	fc 01       	movw	r30, r24
     47c:	23 83       	std	Z+3, r18	; 0x03
}
     47e:	2d 96       	adiw	r28, 0x0d	; 13
     480:	cd bf       	out	0x3d, r28	; 61
     482:	de bf       	out	0x3e, r29	; 62
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <adc_set_conversion_parameters>:
 * \param ref Voltage reference to use.
 */
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	25 97       	sbiw	r28, 0x05	; 5
     494:	cd bf       	out	0x3d, r28	; 61
     496:	de bf       	out	0x3e, r29	; 62
     498:	89 83       	std	Y+1, r24	; 0x01
     49a:	9a 83       	std	Y+2, r25	; 0x02
     49c:	6b 83       	std	Y+3, r22	; 0x03
     49e:	4c 83       	std	Y+4, r20	; 0x04
     4a0:	2d 83       	std	Y+5, r18	; 0x05
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	fc 01       	movw	r30, r24
     4a8:	80 81       	ld	r24, Z
     4aa:	28 2f       	mov	r18, r24
     4ac:	29 7e       	andi	r18, 0xE9	; 233
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	9a 81       	ldd	r25, Y+2	; 0x02
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ba:	fc 01       	movw	r30, r24
     4bc:	90 81       	ld	r25, Z
     4be:	2c 81       	ldd	r18, Y+4	; 0x04
     4c0:	8b 81       	ldd	r24, Y+3	; 0x03
     4c2:	82 2b       	or	r24, r18
     4c4:	29 2f       	mov	r18, r25
     4c6:	28 2b       	or	r18, r24
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18

	conf->refctrl &= ~ADC_REFSEL_gm;
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	fc 01       	movw	r30, r24
     4d6:	81 81       	ldd	r24, Z+1	; 0x01
     4d8:	28 2f       	mov	r18, r24
     4da:	2f 7c       	andi	r18, 0xCF	; 207
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	9a 81       	ldd	r25, Y+2	; 0x02
     4e0:	fc 01       	movw	r30, r24
     4e2:	21 83       	std	Z+1, r18	; 0x01
	conf->refctrl |= ref;
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	9a 81       	ldd	r25, Y+2	; 0x02
     4e8:	fc 01       	movw	r30, r24
     4ea:	91 81       	ldd	r25, Z+1	; 0x01
     4ec:	8d 81       	ldd	r24, Y+5	; 0x05
     4ee:	29 2f       	mov	r18, r25
     4f0:	28 2b       	or	r18, r24
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	9a 81       	ldd	r25, Y+2	; 0x02
     4f6:	fc 01       	movw	r30, r24
     4f8:	21 83       	std	Z+1, r18	; 0x01
}
     4fa:	25 96       	adiw	r28, 0x05	; 5
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <adc_set_conversion_trigger>:
 * \arg \c 1 - \c ADC_NR_OF_CHANNELS (must be non-zero).
 * \param base_ev_ch Base event channel, if used.
 */
static inline void adc_set_conversion_trigger(struct adc_config *conf,
		enum adc_trigger trig, uint8_t nr_of_ch, uint8_t base_ev_ch)
{
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	25 97       	sbiw	r28, 0x05	; 5
     510:	cd bf       	out	0x3d, r28	; 61
     512:	de bf       	out	0x3e, r29	; 62
     514:	89 83       	std	Y+1, r24	; 0x01
     516:	9a 83       	std	Y+2, r25	; 0x02
     518:	6b 83       	std	Y+3, r22	; 0x03
     51a:	4c 83       	std	Y+4, r20	; 0x04
     51c:	2d 83       	std	Y+5, r18	; 0x05
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	88 2f       	mov	r24, r24
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	00 97       	sbiw	r24, 0x00	; 0
     526:	21 f0       	breq	.+8      	; 0x530 <adc_set_conversion_trigger+0x2a>
     528:	82 30       	cpi	r24, 0x02	; 2
     52a:	91 05       	cpc	r25, r1
     52c:	81 f0       	breq	.+32     	; 0x54e <adc_set_conversion_trigger+0x48>
     52e:	2b c0       	rjmp	.+86     	; 0x586 <adc_set_conversion_trigger+0x80>
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	fc 01       	movw	r30, r24
     536:	80 81       	ld	r24, Z
     538:	28 2f       	mov	r18, r24
     53a:	27 7f       	andi	r18, 0xF7	; 247
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
		conf->evctrl = ADC_EVACT_NONE_gc;
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	fc 01       	movw	r30, r24
     54a:	12 82       	std	Z+2, r1	; 0x02
		break;
     54c:	1c c0       	rjmp	.+56     	; 0x586 <adc_set_conversion_trigger+0x80>

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	fc 01       	movw	r30, r24
     554:	80 81       	ld	r24, Z
     556:	28 2f       	mov	r18, r24
     558:	27 7f       	andi	r18, 0xF7	; 247
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	9a 81       	ldd	r25, Y+2	; 0x02
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
     562:	8d 81       	ldd	r24, Y+5	; 0x05
     564:	88 2f       	mov	r24, r24
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	98 2f       	mov	r25, r24
     576:	8c 81       	ldd	r24, Y+4	; 0x04
     578:	89 2b       	or	r24, r25
     57a:	28 2f       	mov	r18, r24
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	fc 01       	movw	r30, r24
     582:	22 83       	std	Z+2, r18	; 0x02
				(nr_of_ch << ADC_EVACT_gp);
		break;
     584:	00 00       	nop
#endif

	default:
		Assert(0);
	}
}
     586:	25 96       	adiw	r28, 0x05	; 5
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <adcch_get_gain_setting>:
 * \param gain Valid gain factor for the measurement.
 *
 * \return Gain setting of type ADC_CH_GAIN_t.
 */
static inline uint8_t adcch_get_gain_setting(uint8_t gain)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	1f 92       	push	r1
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	89 83       	std	Y+1, r24	; 0x01
	switch (gain) {
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	88 2f       	mov	r24, r24
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	88 30       	cpi	r24, 0x08	; 8
     5a6:	91 05       	cpc	r25, r1
     5a8:	61 f1       	breq	.+88     	; 0x602 <adcch_get_gain_setting+0x70>
     5aa:	89 30       	cpi	r24, 0x09	; 9
     5ac:	91 05       	cpc	r25, r1
     5ae:	84 f4       	brge	.+32     	; 0x5d0 <adcch_get_gain_setting+0x3e>
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	91 05       	cpc	r25, r1
     5b4:	01 f1       	breq	.+64     	; 0x5f6 <adcch_get_gain_setting+0x64>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	91 05       	cpc	r25, r1
     5ba:	1c f4       	brge	.+6      	; 0x5c2 <adcch_get_gain_setting+0x30>
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	c9 f0       	breq	.+50     	; 0x5f2 <adcch_get_gain_setting+0x60>
     5c0:	2a c0       	rjmp	.+84     	; 0x616 <adcch_get_gain_setting+0x84>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	91 05       	cpc	r25, r1
     5c6:	c9 f0       	breq	.+50     	; 0x5fa <adcch_get_gain_setting+0x68>
     5c8:	84 30       	cpi	r24, 0x04	; 4
     5ca:	91 05       	cpc	r25, r1
     5cc:	c1 f0       	breq	.+48     	; 0x5fe <adcch_get_gain_setting+0x6c>
     5ce:	23 c0       	rjmp	.+70     	; 0x616 <adcch_get_gain_setting+0x84>
     5d0:	80 32       	cpi	r24, 0x20	; 32
     5d2:	91 05       	cpc	r25, r1
     5d4:	d1 f0       	breq	.+52     	; 0x60a <adcch_get_gain_setting+0x78>
     5d6:	81 32       	cpi	r24, 0x21	; 33
     5d8:	91 05       	cpc	r25, r1
     5da:	24 f4       	brge	.+8      	; 0x5e4 <adcch_get_gain_setting+0x52>
     5dc:	80 31       	cpi	r24, 0x10	; 16
     5de:	91 05       	cpc	r25, r1
     5e0:	91 f0       	breq	.+36     	; 0x606 <adcch_get_gain_setting+0x74>
     5e2:	19 c0       	rjmp	.+50     	; 0x616 <adcch_get_gain_setting+0x84>
     5e4:	80 34       	cpi	r24, 0x40	; 64
     5e6:	91 05       	cpc	r25, r1
     5e8:	91 f0       	breq	.+36     	; 0x60e <adcch_get_gain_setting+0x7c>
     5ea:	8f 3f       	cpi	r24, 0xFF	; 255
     5ec:	91 05       	cpc	r25, r1
     5ee:	89 f0       	breq	.+34     	; 0x612 <adcch_get_gain_setting+0x80>
     5f0:	12 c0       	rjmp	.+36     	; 0x616 <adcch_get_gain_setting+0x84>
#if (CONFIG_ADC_VERSION == 2) || XMEGA_D
	case 0:
		return ADC_CH_GAIN_DIV2_tmpfix_gc;
     5f2:	8c e1       	ldi	r24, 0x1C	; 28
     5f4:	11 c0       	rjmp	.+34     	; 0x618 <adcch_get_gain_setting+0x86>
#endif
	case 1:
		return ADC_CH_GAIN_1X_gc;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0f c0       	rjmp	.+30     	; 0x618 <adcch_get_gain_setting+0x86>

	case 2:
		return ADC_CH_GAIN_2X_gc;
     5fa:	84 e0       	ldi	r24, 0x04	; 4
     5fc:	0d c0       	rjmp	.+26     	; 0x618 <adcch_get_gain_setting+0x86>

	case 4:
		return ADC_CH_GAIN_4X_gc;
     5fe:	88 e0       	ldi	r24, 0x08	; 8
     600:	0b c0       	rjmp	.+22     	; 0x618 <adcch_get_gain_setting+0x86>

	case 8:
		return ADC_CH_GAIN_8X_gc;
     602:	8c e0       	ldi	r24, 0x0C	; 12
     604:	09 c0       	rjmp	.+18     	; 0x618 <adcch_get_gain_setting+0x86>

	case 16:
		return ADC_CH_GAIN_16X_gc;
     606:	80 e1       	ldi	r24, 0x10	; 16
     608:	07 c0       	rjmp	.+14     	; 0x618 <adcch_get_gain_setting+0x86>

	case 32:
		return ADC_CH_GAIN_32X_gc;
     60a:	84 e1       	ldi	r24, 0x14	; 20
     60c:	05 c0       	rjmp	.+10     	; 0x618 <adcch_get_gain_setting+0x86>

	case 64:
		return ADC_CH_GAIN_64X_gc;
     60e:	88 e1       	ldi	r24, 0x18	; 24
     610:	03 c0       	rjmp	.+6      	; 0x618 <adcch_get_gain_setting+0x86>

	case ADCCH_FORCE_1X_GAINSTAGE:
		return ADC_CH_GAIN_1X_gc;
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	01 c0       	rjmp	.+2      	; 0x618 <adcch_get_gain_setting+0x86>

	default:
		Assert(0);
		return 0;
     616:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     618:	0f 90       	pop	r0
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <adcch_set_input>:
 * possible unless the user specifies \ref ADCCH_FORCE_1X_GAINSTAGE as \a gain.
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	25 97       	sbiw	r28, 0x05	; 5
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	9a 83       	std	Y+2, r25	; 0x02
     632:	6b 83       	std	Y+3, r22	; 0x03
     634:	4c 83       	std	Y+4, r20	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
	/* Zero gain is not applicable on other devices */
	Assert(gain);
#endif

	/* Configure for internal input. */
	if (pos >= ADCCH_POS_TEMPSENSE) {
     638:	8b 81       	ldd	r24, Y+3	; 0x03
     63a:	80 31       	cpi	r24, 0x10	; 16
     63c:	78 f0       	brcs	.+30     	; 0x65c <adcch_set_input+0x3c>
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	fc 01       	movw	r30, r24
     644:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
     646:	8b 81       	ldd	r24, Y+3	; 0x03
     648:	80 51       	subi	r24, 0x10	; 16
     64a:	28 2f       	mov	r18, r24
     64c:	22 0f       	add	r18, r18
     64e:	22 0f       	add	r18, r18
     650:	22 0f       	add	r18, r18
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	9a 81       	ldd	r25, Y+2	; 0x02
     656:	fc 01       	movw	r30, r24
     658:	21 83       	std	Z+1, r18	; 0x01
				ADC_CH_MUXPOS_gp;
		return;
     65a:	49 c0       	rjmp	.+146    	; 0x6ee <adcch_set_input+0xce>
	}

	/* Configure for single-ended measurement. */
	if (neg == ADCCH_NEG_NONE) {
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	88 30       	cpi	r24, 0x08	; 8
     660:	79 f4       	brne	.+30     	; 0x680 <adcch_set_input+0x60>
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	21 e0       	ldi	r18, 0x01	; 1
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	28 2f       	mov	r18, r24
     670:	22 0f       	add	r18, r18
     672:	22 0f       	add	r18, r18
     674:	22 0f       	add	r18, r18
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	fc 01       	movw	r30, r24
     67c:	21 83       	std	Z+1, r18	; 0x01
     67e:	37 c0       	rjmp	.+110    	; 0x6ee <adcch_set_input+0xce>
		/* Configure for differential measurement. */
	} else {
		/* Pins 0-3 can only be used for negative input if the gain
		 * stage is not used, i.e., unity gain.
		 */
		if (neg <= ADCCH_NEG_PIN3) {
     680:	8c 81       	ldd	r24, Y+4	; 0x04
     682:	84 30       	cpi	r24, 0x04	; 4
     684:	b8 f4       	brcc	.+46     	; 0x6b4 <adcch_set_input+0x94>
			Assert(gain == 1);

			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	9a 81       	ldd	r25, Y+2	; 0x02
     68a:	22 e0       	ldi	r18, 0x02	; 2
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	98 2f       	mov	r25, r24
     6a4:	8c 81       	ldd	r24, Y+4	; 0x04
     6a6:	89 2b       	or	r24, r25
     6a8:	28 2f       	mov	r18, r24
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	fc 01       	movw	r30, r24
     6b0:	21 83       	std	Z+1, r18	; 0x01
     6b2:	1d c0       	rjmp	.+58     	; 0x6ee <adcch_set_input+0xce>
					(neg << ADC_CH_MUXNEG_gp);
		} else if (neg <= ADCCH_NEG_PIN7) {
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	88 30       	cpi	r24, 0x08	; 8
     6b8:	d0 f4       	brcc	.+52     	; 0x6ee <adcch_set_input+0xce>
			 * unity
			 * gain, which is available even if the gain stage is
			 *active.
			 */
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
					adcch_get_gain_setting(gain);
     6ba:	8d 81       	ldd	r24, Y+5	; 0x05
     6bc:	6a df       	rcall	.-300    	; 0x592 <adcch_get_gain_setting>
			/* Pins 4-7 can be used for all gain settings, including
			 * unity
			 * gain, which is available even if the gain stage is
			 *active.
			 */
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
     6be:	28 2f       	mov	r18, r24
     6c0:	23 60       	ori	r18, 0x03	; 3
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
					adcch_get_gain_setting(gain);
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	88 2f       	mov	r24, r24
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	98 2f       	mov	r25, r24
     6de:	8c 81       	ldd	r24, Y+4	; 0x04
     6e0:	84 50       	subi	r24, 0x04	; 4
     6e2:	89 2b       	or	r24, r25
     6e4:	28 2f       	mov	r18, r24
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	fc 01       	movw	r30, r24
     6ec:	21 83       	std	Z+1, r18	; 0x01
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
					(neg << ADC_CH_MUXNEG_gp);
		}
#endif
	}
}
     6ee:	25 96       	adiw	r28, 0x05	; 5
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <setupAnalog>:
#include "joysticks.h"

static struct adc_config         analog_config;
static struct adc_channel_config analog_channel_config;

void setupAnalog(void) {
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	
	// Populate the structs with default values:
	adc_read_configuration(&JOYSTICK_ADC_MODULE, &analog_config);
     702:	6e e7       	ldi	r22, 0x7E	; 126
     704:	76 e2       	ldi	r23, 0x26	; 38
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	0e 94 80 2c 	call	0x5900	; 0x5900 <adc_read_configuration>
	adcch_read_configuration(&JOYSTICK_ADC_MODULE, JOYSTICK_ADC_CHANNEL, &analog_channel_config);
     70e:	44 e8       	ldi	r20, 0x84	; 132
     710:	56 e2       	ldi	r21, 0x26	; 38
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <adcch_read_configuration>
	
	// Configure the ADC
	adc_set_conversion_parameters(&analog_config, DRONE_ADC_SIGN,DRONE_ADC_RES,ADC_REF_AREFA); // Reference is VCC/1.6
     71c:	20 e2       	ldi	r18, 0x20	; 32
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	8e e7       	ldi	r24, 0x7E	; 126
     724:	96 e2       	ldi	r25, 0x26	; 38
     726:	b1 de       	rcall	.-670    	; 0x48a <adc_set_conversion_parameters>
	adc_set_conversion_trigger(&analog_config, ADC_TRIG_MANUAL, 1, 0);
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	41 e0       	ldi	r20, 0x01	; 1
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	8e e7       	ldi	r24, 0x7E	; 126
     730:	96 e2       	ldi	r25, 0x26	; 38
     732:	e9 de       	rcall	.-558    	; 0x506 <adc_set_conversion_trigger>
	
	// Set the adc clock rate:
	adc_set_clock_rate(&analog_config, ADC_CLOCK_HZ);
     734:	40 e2       	ldi	r20, 0x20	; 32
     736:	51 ea       	ldi	r21, 0xA1	; 161
     738:	67 e0       	ldi	r22, 0x07	; 7
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	8e e7       	ldi	r24, 0x7E	; 126
     73e:	96 e2       	ldi	r25, 0x26	; 38
     740:	3b de       	rcall	.-906    	; 0x3b8 <adc_set_clock_rate>

	// Write the configuration to its registers:
	adc_write_configuration(&JOYSTICK_ADC_MODULE, &analog_config);
     742:	6e e7       	ldi	r22, 0x7E	; 126
     744:	76 e2       	ldi	r23, 0x26	; 38
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	0e 94 17 2c 	call	0x582e	; 0x582e <adc_write_configuration>
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <AdcInput>:

void AdcInput(enum adcch_positive_input channel)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	89 83       	std	Y+1, r24	; 0x01
	// Select the input to the adc:
	adcch_set_input(&analog_channel_config, channel, ADCCH_NEG_NONE, 1);
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	48 e0       	ldi	r20, 0x08	; 8
     764:	69 81       	ldd	r22, Y+1	; 0x01
     766:	84 e8       	ldi	r24, 0x84	; 132
     768:	96 e2       	ldi	r25, 0x26	; 38
     76a:	5a df       	rcall	.-332    	; 0x620 <adcch_set_input>

	// Write the channel configuration:
	adcch_write_configuration(&JOYSTICK_ADC_MODULE, JOYSTICK_ADC_CHANNEL, &analog_channel_config);
     76c:	44 e8       	ldi	r20, 0x84	; 132
     76e:	56 e2       	ldi	r21, 0x26	; 38
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	0e 94 c5 2c 	call	0x598a	; 0x598a <adcch_write_configuration>
};
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <AdcSample>:

//THIS IS BLOCKING!
uint16_t AdcSample(void)
{
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <AdcSample+0x6>
     788:	00 d0       	rcall	.+0      	; 0x78a <AdcSample+0x8>
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
	// Start the conversion:
	adc_start_conversion(&JOYSTICK_ADC_MODULE, JOYSTICK_ADC_CHANNEL);
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	a8 dd       	rcall	.-1200   	; 0x2e6 <adc_start_conversion>
		
	// Wait for it to finish:
	adc_wait_for_interrupt_flag(&JOYSTICK_ADC_MODULE, JOYSTICK_ADC_CHANNEL); //THIS IS BLOCKING!
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	f2 dd       	rcall	.-1052   	; 0x382 <adc_wait_for_interrupt_flag>
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	89 83       	std	Y+1, r24	; 0x01
     7a4:	9a 83       	std	Y+2, r25	; 0x02
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	8c 83       	std	Y+4, r24	; 0x04
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     7aa:	1b 82       	std	Y+3, r1	; 0x03
	if (!(ch_mask & 0x01)) {
		index++;
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	9c 01       	movw	r18, r24
     7b2:	20 5e       	subi	r18, 0xE0	; 224
     7b4:	3f 4f       	sbci	r19, 0xFF	; 255
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	88 2f       	mov	r24, r24
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	82 0f       	add	r24, r18
     7ca:	93 1f       	adc	r25, r19

	// Return the result
	return (adc_get_result(&JOYSTICK_ADC_MODULE, JOYSTICK_ADC_CHANNEL)); //was flipping by inverting result
     7cc:	fc 01       	movw	r30, r24
     7ce:	84 81       	ldd	r24, Z+4	; 0x04
     7d0:	95 81       	ldd	r25, Z+5	; 0x05
}
     7d2:	24 96       	adiw	r28, 0x04	; 4
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <sampleAnalogChannel>:

uint16_t sampleAnalogChannel(enum adcch_positive_input channel) {
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <sampleAnalogChannel+0x6>
     7e4:	1f 92       	push	r1
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t result;
	AdcInput(channel);
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	b2 df       	rcall	.-156    	; 0x754 <AdcInput>
	result = AdcSample();
     7f0:	c8 df       	rcall	.-112    	; 0x782 <AdcSample>
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	9a 83       	std	Y+2, r25	; 0x02
	return result;
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
};
     7fa:	23 96       	adiw	r28, 0x03	; 3
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <enableAnalog>:

void enableAnalog(void)
{
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
	adc_enable(&JOYSTICK_ADC_MODULE);
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <adc_enable>
}
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <ioport_init>:
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <ioport_set_pin_mode>:
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	2a 97       	sbiw	r28, 0x0a	; 10
     834:	cd bf       	out	0x3d, r28	; 61
     836:	de bf       	out	0x3e, r29	; 62
     838:	89 87       	std	Y+9, r24	; 0x09
     83a:	6a 87       	std	Y+10, r22	; 0x0a
     83c:	89 85       	ldd	r24, Y+9	; 0x09
     83e:	89 83       	std	Y+1, r24	; 0x01
     840:	8a 85       	ldd	r24, Y+10	; 0x0a
     842:	8a 83       	std	Y+2, r24	; 0x02
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	8b 83       	std	Y+3, r24	; 0x03
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	8c 83       	std	Y+4, r24	; 0x04
     84c:	8c 81       	ldd	r24, Y+4	; 0x04
     84e:	86 95       	lsr	r24
     850:	86 95       	lsr	r24
     852:	86 95       	lsr	r24
     854:	8d 83       	std	Y+5, r24	; 0x05
     856:	8d 81       	ldd	r24, Y+5	; 0x05
     858:	88 2f       	mov	r24, r24
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	82 95       	swap	r24
     862:	92 95       	swap	r25
     864:	90 7f       	andi	r25, 0xF0	; 240
     866:	98 27       	eor	r25, r24
     868:	80 7f       	andi	r24, 0xF0	; 240
     86a:	98 27       	eor	r25, r24
     86c:	9a 5f       	subi	r25, 0xFA	; 250
     86e:	8e 83       	std	Y+6, r24	; 0x06
     870:	9f 83       	std	Y+7, r25	; 0x07
     872:	80 eb       	ldi	r24, 0xB0	; 176
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	29 81       	ldd	r18, Y+1	; 0x01
     878:	28 87       	std	Y+8, r18	; 0x08
     87a:	28 85       	ldd	r18, Y+8	; 0x08
     87c:	22 2f       	mov	r18, r18
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	a9 01       	movw	r20, r18
     882:	47 70       	andi	r20, 0x07	; 7
     884:	55 27       	eor	r21, r21
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	04 2e       	mov	r0, r20
     88c:	02 c0       	rjmp	.+4      	; 0x892 <ioport_set_pin_mode+0x68>
     88e:	22 0f       	add	r18, r18
     890:	33 1f       	adc	r19, r19
     892:	0a 94       	dec	r0
     894:	e2 f7       	brpl	.-8      	; 0x88e <ioport_set_pin_mode+0x64>
     896:	fc 01       	movw	r30, r24
     898:	20 83       	st	Z, r18
     89a:	8e 81       	ldd	r24, Y+6	; 0x06
     89c:	9f 81       	ldd	r25, Y+7	; 0x07
     89e:	2a 81       	ldd	r18, Y+2	; 0x02
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 8b       	std	Z+16, r18	; 0x10
     8a4:	2a 96       	adiw	r28, 0x0a	; 10
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <ioport_set_pin_dir>:
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	2b 97       	sbiw	r28, 0x0b	; 11
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	8a 87       	std	Y+10, r24	; 0x0a
     8c0:	6b 87       	std	Y+11, r22	; 0x0b
     8c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     8c8:	8a 83       	std	Y+2, r24	; 0x02
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	8b 83       	std	Y+3, r24	; 0x03
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	8c 83       	std	Y+4, r24	; 0x04
     8d2:	8c 81       	ldd	r24, Y+4	; 0x04
     8d4:	86 95       	lsr	r24
     8d6:	86 95       	lsr	r24
     8d8:	86 95       	lsr	r24
     8da:	8d 83       	std	Y+5, r24	; 0x05
     8dc:	8d 81       	ldd	r24, Y+5	; 0x05
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	82 95       	swap	r24
     8e8:	92 95       	swap	r25
     8ea:	90 7f       	andi	r25, 0xF0	; 240
     8ec:	98 27       	eor	r25, r24
     8ee:	80 7f       	andi	r24, 0xF0	; 240
     8f0:	98 27       	eor	r25, r24
     8f2:	9a 5f       	subi	r25, 0xFA	; 250
     8f4:	8e 83       	std	Y+6, r24	; 0x06
     8f6:	9f 83       	std	Y+7, r25	; 0x07
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	a9 f4       	brne	.+42     	; 0x928 <ioport_set_pin_dir+0x78>
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	88 87       	std	Y+8, r24	; 0x08
     902:	88 85       	ldd	r24, Y+8	; 0x08
     904:	88 2f       	mov	r24, r24
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	9c 01       	movw	r18, r24
     90a:	27 70       	andi	r18, 0x07	; 7
     90c:	33 27       	eor	r19, r19
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	02 c0       	rjmp	.+4      	; 0x918 <ioport_set_pin_dir+0x68>
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	2a 95       	dec	r18
     91a:	e2 f7       	brpl	.-8      	; 0x914 <ioport_set_pin_dir+0x64>
     91c:	28 2f       	mov	r18, r24
     91e:	8e 81       	ldd	r24, Y+6	; 0x06
     920:	9f 81       	ldd	r25, Y+7	; 0x07
     922:	fc 01       	movw	r30, r24
     924:	21 83       	std	Z+1, r18	; 0x01
     926:	17 c0       	rjmp	.+46     	; 0x956 <ioport_set_pin_dir+0xa6>
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	88 23       	and	r24, r24
     92c:	a1 f4       	brne	.+40     	; 0x956 <ioport_set_pin_dir+0xa6>
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	89 87       	std	Y+9, r24	; 0x09
     932:	89 85       	ldd	r24, Y+9	; 0x09
     934:	88 2f       	mov	r24, r24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9c 01       	movw	r18, r24
     93a:	27 70       	andi	r18, 0x07	; 7
     93c:	33 27       	eor	r19, r19
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	02 c0       	rjmp	.+4      	; 0x948 <ioport_set_pin_dir+0x98>
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	2a 95       	dec	r18
     94a:	e2 f7       	brpl	.-8      	; 0x944 <ioport_set_pin_dir+0x94>
     94c:	28 2f       	mov	r18, r24
     94e:	8e 81       	ldd	r24, Y+6	; 0x06
     950:	9f 81       	ldd	r25, Y+7	; 0x07
     952:	fc 01       	movw	r30, r24
     954:	22 83       	std	Z+2, r18	; 0x02
     956:	2b 96       	adiw	r28, 0x0b	; 11
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <ioport_set_pin_level>:
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	2b 97       	sbiw	r28, 0x0b	; 11
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	de bf       	out	0x3e, r29	; 62
     970:	8a 87       	std	Y+10, r24	; 0x0a
     972:	6b 87       	std	Y+11, r22	; 0x0b
     974:	8a 85       	ldd	r24, Y+10	; 0x0a
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	8b 85       	ldd	r24, Y+11	; 0x0b
     97a:	8a 83       	std	Y+2, r24	; 0x02
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	8b 83       	std	Y+3, r24	; 0x03
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	8c 83       	std	Y+4, r24	; 0x04
     984:	8c 81       	ldd	r24, Y+4	; 0x04
     986:	86 95       	lsr	r24
     988:	86 95       	lsr	r24
     98a:	86 95       	lsr	r24
     98c:	8d 83       	std	Y+5, r24	; 0x05
     98e:	8d 81       	ldd	r24, Y+5	; 0x05
     990:	88 2f       	mov	r24, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	82 95       	swap	r24
     99a:	92 95       	swap	r25
     99c:	90 7f       	andi	r25, 0xF0	; 240
     99e:	98 27       	eor	r25, r24
     9a0:	80 7f       	andi	r24, 0xF0	; 240
     9a2:	98 27       	eor	r25, r24
     9a4:	9a 5f       	subi	r25, 0xFA	; 250
     9a6:	8e 83       	std	Y+6, r24	; 0x06
     9a8:	9f 83       	std	Y+7, r25	; 0x07
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	88 23       	and	r24, r24
     9ae:	a9 f0       	breq	.+42     	; 0x9da <ioport_set_pin_level+0x78>
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	88 87       	std	Y+8, r24	; 0x08
     9b4:	88 85       	ldd	r24, Y+8	; 0x08
     9b6:	88 2f       	mov	r24, r24
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	9c 01       	movw	r18, r24
     9bc:	27 70       	andi	r18, 0x07	; 7
     9be:	33 27       	eor	r19, r19
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <ioport_set_pin_level+0x68>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	2a 95       	dec	r18
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <ioport_set_pin_level+0x64>
     9ce:	28 2f       	mov	r18, r24
     9d0:	8e 81       	ldd	r24, Y+6	; 0x06
     9d2:	9f 81       	ldd	r25, Y+7	; 0x07
     9d4:	fc 01       	movw	r30, r24
     9d6:	25 83       	std	Z+5, r18	; 0x05
     9d8:	14 c0       	rjmp	.+40     	; 0xa02 <ioport_set_pin_level+0xa0>
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	89 87       	std	Y+9, r24	; 0x09
     9de:	89 85       	ldd	r24, Y+9	; 0x09
     9e0:	88 2f       	mov	r24, r24
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	9c 01       	movw	r18, r24
     9e6:	27 70       	andi	r18, 0x07	; 7
     9e8:	33 27       	eor	r19, r19
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <ioport_set_pin_level+0x92>
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	2a 95       	dec	r18
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <ioport_set_pin_level+0x8e>
     9f8:	28 2f       	mov	r18, r24
     9fa:	8e 81       	ldd	r24, Y+6	; 0x06
     9fc:	9f 81       	ldd	r25, Y+7	; 0x07
     9fe:	fc 01       	movw	r30, r24
     a00:	26 83       	std	Z+6, r18	; 0x06
     a02:	2b 96       	adiw	r28, 0x0b	; 11
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <board_init>:

#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	// Enable ioport:
	ioport_init();
     a16:	02 df       	rcall	.-508    	; 0x81c <ioport_init>

	// Setup the power pins:
	ioport_set_pin_level(POWER_SWITCH_PIN, 1); // 1- enable power, 0 - disable power
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	81 e1       	ldi	r24, 0x11	; 17
     a1c:	a2 df       	rcall	.-188    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (POWER_SWITCH_PIN, IOPORT_DIR_OUTPUT);
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	81 e1       	ldi	r24, 0x11	; 17
     a22:	46 df       	rcall	.-372    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (POWER_SWITCH_PIN, IOPORT_MODE_WIREDOR);
     a24:	60 e2       	ldi	r22, 0x20	; 32
     a26:	81 e1       	ldi	r24, 0x11	; 17
     a28:	00 df       	rcall	.-512    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (CHRG_STAT_PIN, IOPORT_DIR_INPUT);
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	80 e1       	ldi	r24, 0x10	; 16
     a2e:	40 df       	rcall	.-384    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(CHRG_STAT_PIN, IOPORT_MODE_PULLUP);// IOPORT_MODE_TOTEM);
     a30:	68 e1       	ldi	r22, 0x18	; 24
     a32:	80 e1       	ldi	r24, 0x10	; 16
     a34:	fa de       	rcall	.-524    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (BATTERY_DETECT_PIN, IOPORT_DIR_INPUT);
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	3a df       	rcall	.-396    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(BATTERY_DETECT_PIN, IOPORT_MODE_TOTEM);
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	f4 de       	rcall	.-536    	; 0x82a <ioport_set_pin_mode>
	
	// Setup the buttons:
	ioport_set_pin_dir (UP_PIN, IOPORT_DIR_INPUT);
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	89 e0       	ldi	r24, 0x09	; 9
     a46:	34 df       	rcall	.-408    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(UP_PIN, IOPORT_MODE_PULLUP);
     a48:	68 e1       	ldi	r22, 0x18	; 24
     a4a:	89 e0       	ldi	r24, 0x09	; 9
     a4c:	ee de       	rcall	.-548    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (DOWN_PIN, IOPORT_DIR_INPUT);
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	8d e0       	ldi	r24, 0x0D	; 13
     a52:	2e df       	rcall	.-420    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(DOWN_PIN, IOPORT_MODE_PULLUP);
     a54:	68 e1       	ldi	r22, 0x18	; 24
     a56:	8d e0       	ldi	r24, 0x0D	; 13
     a58:	e8 de       	rcall	.-560    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (LEFT_PIN, IOPORT_DIR_INPUT);
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	8b e0       	ldi	r24, 0x0B	; 11
     a5e:	28 df       	rcall	.-432    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(LEFT_PIN, IOPORT_MODE_PULLUP);
     a60:	68 e1       	ldi	r22, 0x18	; 24
     a62:	8b e0       	ldi	r24, 0x0B	; 11
     a64:	e2 de       	rcall	.-572    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (RIGHT_PIN, IOPORT_DIR_INPUT);
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	22 df       	rcall	.-444    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(RIGHT_PIN, IOPORT_MODE_PULLUP);
     a6c:	68 e1       	ldi	r22, 0x18	; 24
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	dc de       	rcall	.-584    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (A_PIN, IOPORT_DIR_INPUT);
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	85 e0       	ldi	r24, 0x05	; 5
     a76:	1c df       	rcall	.-456    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(A_PIN, IOPORT_MODE_PULLUP);
     a78:	68 e1       	ldi	r22, 0x18	; 24
     a7a:	85 e0       	ldi	r24, 0x05	; 5
     a7c:	d6 de       	rcall	.-596    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (B_PIN, IOPORT_DIR_INPUT);
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	8c e2       	ldi	r24, 0x2C	; 44
     a82:	16 df       	rcall	.-468    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(B_PIN, IOPORT_MODE_PULLUP);
     a84:	68 e1       	ldi	r22, 0x18	; 24
     a86:	8c e2       	ldi	r24, 0x2C	; 44
     a88:	d0 de       	rcall	.-608    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (X_PIN, IOPORT_DIR_INPUT);
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	84 e0       	ldi	r24, 0x04	; 4
     a8e:	10 df       	rcall	.-480    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(X_PIN, IOPORT_MODE_PULLUP);
     a90:	68 e1       	ldi	r22, 0x18	; 24
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	ca de       	rcall	.-620    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (Y_PIN, IOPORT_DIR_INPUT);
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	87 e0       	ldi	r24, 0x07	; 7
     a9a:	0a df       	rcall	.-492    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(Y_PIN, IOPORT_MODE_PULLUP);
     a9c:	68 e1       	ldi	r22, 0x18	; 24
     a9e:	87 e0       	ldi	r24, 0x07	; 7
     aa0:	c4 de       	rcall	.-632    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (START_PIN, IOPORT_DIR_INPUT);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	8a e2       	ldi	r24, 0x2A	; 42
     aa6:	04 df       	rcall	.-504    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(START_PIN, IOPORT_MODE_PULLDOWN);
     aa8:	60 e1       	ldi	r22, 0x10	; 16
     aaa:	8a e2       	ldi	r24, 0x2A	; 42
     aac:	be de       	rcall	.-644    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (SELECT_PIN, IOPORT_DIR_INPUT);
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	8d e2       	ldi	r24, 0x2D	; 45
     ab2:	fe de       	rcall	.-516    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(SELECT_PIN, IOPORT_MODE_PULLUP);
     ab4:	68 e1       	ldi	r22, 0x18	; 24
     ab6:	8d e2       	ldi	r24, 0x2D	; 45
     ab8:	b8 de       	rcall	.-656    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (RB_PIN, IOPORT_DIR_INPUT);
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	8f e2       	ldi	r24, 0x2F	; 47
     abe:	f8 de       	rcall	.-528    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(RB_PIN, IOPORT_MODE_PULLUP);
     ac0:	68 e1       	ldi	r22, 0x18	; 24
     ac2:	8f e2       	ldi	r24, 0x2F	; 47
     ac4:	b2 de       	rcall	.-668    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (LB_PIN, IOPORT_DIR_INPUT);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	8e e2       	ldi	r24, 0x2E	; 46
     aca:	f2 de       	rcall	.-540    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(LB_PIN, IOPORT_MODE_PULLUP);
     acc:	68 e1       	ldi	r22, 0x18	; 24
     ace:	8e e2       	ldi	r24, 0x2E	; 46
     ad0:	ac de       	rcall	.-680    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (RT_PIN, IOPORT_DIR_INPUT);
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	ec de       	rcall	.-552    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(RT_PIN, IOPORT_MODE_PULLUP);
     ad8:	68 e1       	ldi	r22, 0x18	; 24
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	a6 de       	rcall	.-692    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (LT_PIN, IOPORT_DIR_INPUT);
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	8c e0       	ldi	r24, 0x0C	; 12
     ae2:	e6 de       	rcall	.-564    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(LT_PIN, IOPORT_MODE_PULLUP);
     ae4:	68 e1       	ldi	r22, 0x18	; 24
     ae6:	8c e0       	ldi	r24, 0x0C	; 12
     ae8:	a0 de       	rcall	.-704    	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(JOYSTICK_L_CLICK, IOPORT_DIR_INPUT);
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	8d e1       	ldi	r24, 0x1D	; 29
     aee:	e0 de       	rcall	.-576    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_L_CLICK, IOPORT_MODE_PULLUP);
     af0:	68 e1       	ldi	r22, 0x18	; 24
     af2:	8d e1       	ldi	r24, 0x1D	; 29
     af4:	9a de       	rcall	.-716    	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(JOYSTICK_R_CLICK, IOPORT_DIR_INPUT);
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	8c e1       	ldi	r24, 0x1C	; 28
     afa:	da de       	rcall	.-588    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_R_CLICK, IOPORT_MODE_PULLUP);	
     afc:	68 e1       	ldi	r22, 0x18	; 24
     afe:	8c e1       	ldi	r24, 0x1C	; 28
     b00:	94 de       	rcall	.-728    	; 0x82a <ioport_set_pin_mode>
	
	// Setup the joysticks:
	ioport_set_pin_dir (JOYSTICK_L_X_PIN, IOPORT_DIR_INPUT);
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	86 e0       	ldi	r24, 0x06	; 6
     b06:	d4 de       	rcall	.-600    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_L_X_PIN, IOPORT_MODE_TOTEM);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	86 e0       	ldi	r24, 0x06	; 6
     b0c:	8e de       	rcall	.-740    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (JOYSTICK_L_Y_PIN, IOPORT_DIR_INPUT);
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	88 e0       	ldi	r24, 0x08	; 8
     b12:	ce de       	rcall	.-612    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_L_Y_PIN, IOPORT_MODE_TOTEM);
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	88 e0       	ldi	r24, 0x08	; 8
     b18:	88 de       	rcall	.-752    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (JOYSTICK_R_X_PIN, IOPORT_DIR_INPUT);
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	8e e0       	ldi	r24, 0x0E	; 14
     b1e:	c8 de       	rcall	.-624    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_R_X_PIN, IOPORT_MODE_TOTEM);
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	8e e0       	ldi	r24, 0x0E	; 14
     b24:	82 de       	rcall	.-764    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir (JOYSTICK_R_Y_PIN, IOPORT_DIR_INPUT);
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	8f e0       	ldi	r24, 0x0F	; 15
     b2a:	c2 de       	rcall	.-636    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(JOYSTICK_R_Y_PIN, IOPORT_MODE_TOTEM);
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	8f e0       	ldi	r24, 0x0F	; 15
     b30:	7c de       	rcall	.-776    	; 0x82a <ioport_set_pin_mode>
	
	// Setup the bluetooth pins:	
	ioport_set_pin_level(BT_RESET_PIN, true); // Hold it in reset.
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	80 e2       	ldi	r24, 0x20	; 32
     b36:	15 df       	rcall	.-470    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_RESET_PIN, IOPORT_DIR_OUTPUT);
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	80 e2       	ldi	r24, 0x20	; 32
     b3c:	b9 de       	rcall	.-654    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_RESET_PIN, IOPORT_MODE_TOTEM);
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	80 e2       	ldi	r24, 0x20	; 32
     b42:	73 de       	rcall	.-794    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(BT_FACTORY_RESET_PIN, true); // Float to default (low)
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	88 e2       	ldi	r24, 0x28	; 40
     b48:	0c df       	rcall	.-488    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_FACTORY_RESET_PIN, IOPORT_DIR_OUTPUT);
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	88 e2       	ldi	r24, 0x28	; 40
     b4e:	b0 de       	rcall	.-672    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_FACTORY_RESET_PIN, IOPORT_MODE_TOTEM);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	88 e2       	ldi	r24, 0x28	; 40
     b54:	6a de       	rcall	.-812    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(BT_CTS_PIN, false); // Default - enable transmitter.
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	84 e2       	ldi	r24, 0x24	; 36
     b5a:	03 df       	rcall	.-506    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_CTS_PIN, IOPORT_DIR_INPUT);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	84 e2       	ldi	r24, 0x24	; 36
     b60:	a7 de       	rcall	.-690    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_CTS_PIN, IOPORT_MODE_TOTEM);
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	84 e2       	ldi	r24, 0x24	; 36
     b66:	61 de       	rcall	.-830    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir  (BT_RTS_PIN, IOPORT_DIR_OUTPUT);
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	81 e2       	ldi	r24, 0x21	; 33
     b6c:	a1 de       	rcall	.-702    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_RTS_PIN, IOPORT_MODE_TOTEM);
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	81 e2       	ldi	r24, 0x21	; 33
     b72:	5b de       	rcall	.-842    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(BT_TX_PIN, true); // Hold it high.
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	83 e2       	ldi	r24, 0x23	; 35
     b78:	f4 de       	rcall	.-536    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_TX_PIN, IOPORT_DIR_OUTPUT);
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	83 e2       	ldi	r24, 0x23	; 35
     b7e:	98 de       	rcall	.-720    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_TX_PIN, IOPORT_MODE_TOTEM);
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	83 e2       	ldi	r24, 0x23	; 35
     b84:	52 de       	rcall	.-860    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(BT_RX_PIN, true);
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	82 e2       	ldi	r24, 0x22	; 34
     b8a:	eb de       	rcall	.-554    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_RX_PIN, IOPORT_DIR_INPUT);
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	82 e2       	ldi	r24, 0x22	; 34
     b90:	8f de       	rcall	.-738    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_RX_PIN, IOPORT_MODE_TOTEM);
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	82 e2       	ldi	r24, 0x22	; 34
     b96:	49 de       	rcall	.-878    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(BT_ENABLE_PIN, false); // Hold power off (low)
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	85 e2       	ldi	r24, 0x25	; 37
     b9c:	e2 de       	rcall	.-572    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BT_ENABLE_PIN, IOPORT_DIR_OUTPUT);
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	85 e2       	ldi	r24, 0x25	; 37
     ba2:	86 de       	rcall	.-756    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BT_ENABLE_PIN, IOPORT_MODE_TOTEM);
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	85 e2       	ldi	r24, 0x25	; 37
     ba8:	40 de       	rcall	.-896    	; 0x82a <ioport_set_pin_mode>

	// Setup led pins: (Default: off)
	ioport_set_pin_level(RED_LED_PIN, true); 
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	89 e2       	ldi	r24, 0x29	; 41
     bae:	d9 de       	rcall	.-590    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (RED_LED_PIN,   IOPORT_DIR_OUTPUT);
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	89 e2       	ldi	r24, 0x29	; 41
     bb4:	7d de       	rcall	.-774    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (RED_LED_PIN,   IOPORT_MODE_TOTEM);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	89 e2       	ldi	r24, 0x29	; 41
     bba:	37 de       	rcall	.-914    	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_level(GREEN_LED_PIN, true);
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	88 e1       	ldi	r24, 0x18	; 24
     bc0:	d0 de       	rcall	.-608    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (GREEN_LED_PIN, IOPORT_DIR_OUTPUT);
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	88 e1       	ldi	r24, 0x18	; 24
     bc6:	74 de       	rcall	.-792    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (GREEN_LED_PIN, IOPORT_MODE_TOTEM);
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	88 e1       	ldi	r24, 0x18	; 24
     bcc:	2e de       	rcall	.-932    	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_level(BLUE_LED_PIN, true);
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	89 e1       	ldi	r24, 0x19	; 25
     bd2:	c7 de       	rcall	.-626    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (BLUE_LED_PIN,  IOPORT_DIR_OUTPUT);
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	89 e1       	ldi	r24, 0x19	; 25
     bd8:	6b de       	rcall	.-810    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (BLUE_LED_PIN,  IOPORT_MODE_TOTEM);
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	89 e1       	ldi	r24, 0x19	; 25
     bde:	25 de       	rcall	.-950    	; 0x82a <ioport_set_pin_mode>

	// Setup USB:
	ioport_set_pin_dir  (USB_5V_PIN, IOPORT_DIR_INPUT);
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	8a e0       	ldi	r24, 0x0A	; 10
     be4:	65 de       	rcall	.-822    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (USB_5V_PIN, IOPORT_MODE_PULLUP);
     be6:	68 e1       	ldi	r22, 0x18	; 24
     be8:	8a e0       	ldi	r24, 0x0A	; 10
     bea:	1f de       	rcall	.-962    	; 0x82a <ioport_set_pin_mode>
	
	// Setup USB UART:
	ioport_set_pin_level(USB_TX_PIN, true); // Hold it high.
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	83 e1       	ldi	r24, 0x13	; 19
     bf0:	b8 de       	rcall	.-656    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (USB_TX_PIN, IOPORT_DIR_OUTPUT);
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	83 e1       	ldi	r24, 0x13	; 19
     bf6:	5c de       	rcall	.-840    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (USB_TX_PIN, IOPORT_MODE_TOTEM);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	83 e1       	ldi	r24, 0x13	; 19
     bfc:	16 de       	rcall	.-980    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(USB_RX_PIN, true);
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	82 e1       	ldi	r24, 0x12	; 18
     c02:	af de       	rcall	.-674    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (USB_RX_PIN, IOPORT_DIR_INPUT);
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	82 e1       	ldi	r24, 0x12	; 18
     c08:	53 de       	rcall	.-858    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (USB_RX_PIN, IOPORT_MODE_TOTEM);
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	82 e1       	ldi	r24, 0x12	; 18
     c0e:	0d de       	rcall	.-998    	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_level(USB_RESET_PIN, true); // Release it from reset.
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	87 e2       	ldi	r24, 0x27	; 39
     c14:	a6 de       	rcall	.-692    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (USB_RESET_PIN, IOPORT_DIR_OUTPUT);
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	87 e2       	ldi	r24, 0x27	; 39
     c1a:	4a de       	rcall	.-876    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (USB_RESET_PIN, IOPORT_MODE_TOTEM);
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	87 e2       	ldi	r24, 0x27	; 39
     c20:	04 de       	rcall	.-1016   	; 0x82a <ioport_set_pin_mode>

	// Setup debug UART:
	ioport_set_pin_level(DEBUG_TX_PIN, true); // Hold it high.
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	8b e1       	ldi	r24, 0x1B	; 27
     c26:	9d de       	rcall	.-710    	; 0x962 <ioport_set_pin_level>
	ioport_set_pin_dir  (DEBUG_TX_PIN, IOPORT_DIR_OUTPUT);
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	8b e1       	ldi	r24, 0x1B	; 27
     c2c:	41 de       	rcall	.-894    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (DEBUG_TX_PIN, IOPORT_MODE_TOTEM);
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	8b e1       	ldi	r24, 0x1B	; 27
     c32:	fb dd       	rcall	.-1034   	; 0x82a <ioport_set_pin_mode>

	ioport_set_pin_dir  (DEBUG_RX_PIN, IOPORT_DIR_INPUT);
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	8a e1       	ldi	r24, 0x1A	; 26
     c38:	3b de       	rcall	.-906    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode (DEBUG_RX_PIN, IOPORT_MODE_TOTEM);
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	8a e1       	ldi	r24, 0x1A	; 26
     c3e:	f5 dd       	rcall	.-1046   	; 0x82a <ioport_set_pin_mode>
	
	// Manufacture Test Pins
	ioport_set_pin_dir(IsManufactureTestMode, IOPORT_DIR_INPUT); // Input from Test Jig
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	8f e1       	ldi	r24, 0x1F	; 31
     c44:	35 de       	rcall	.-918    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(IsManufactureTestMode, IOPORT_MODE_PULLDOWN);	
     c46:	60 e1       	ldi	r22, 0x10	; 16
     c48:	8f e1       	ldi	r24, 0x1F	; 31
     c4a:	ef dd       	rcall	.-1058   	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(DRONE_GPIO_0, IOPORT_DIR_INPUT);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	84 e1       	ldi	r24, 0x14	; 20
     c50:	2f de       	rcall	.-930    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(DRONE_GPIO_0, IOPORT_MODE_PULLDOWN);
     c52:	60 e1       	ldi	r22, 0x10	; 16
     c54:	84 e1       	ldi	r24, 0x14	; 20
     c56:	e9 dd       	rcall	.-1070   	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(DRONE_GPIO_1, IOPORT_DIR_INPUT);
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	85 e1       	ldi	r24, 0x15	; 21
     c5c:	29 de       	rcall	.-942    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(DRONE_GPIO_1, IOPORT_MODE_PULLDOWN);
     c5e:	60 e1       	ldi	r22, 0x10	; 16
     c60:	85 e1       	ldi	r24, 0x15	; 21
     c62:	e3 dd       	rcall	.-1082   	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(DRONE_GPIO_2, IOPORT_DIR_INPUT);
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	86 e1       	ldi	r24, 0x16	; 22
     c68:	23 de       	rcall	.-954    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(DRONE_GPIO_2, IOPORT_MODE_PULLDOWN);
     c6a:	60 e1       	ldi	r22, 0x10	; 16
     c6c:	86 e1       	ldi	r24, 0x16	; 22
     c6e:	dd dd       	rcall	.-1094   	; 0x82a <ioport_set_pin_mode>
	
	ioport_set_pin_dir(DRONE_GPIO_3, IOPORT_DIR_INPUT);
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	87 e1       	ldi	r24, 0x17	; 23
     c74:	1d de       	rcall	.-966    	; 0x8b0 <ioport_set_pin_dir>
	ioport_set_pin_mode(DRONE_GPIO_3, IOPORT_MODE_PULLDOWN);
     c76:	60 e1       	ldi	r22, 0x10	; 16
     c78:	87 e1       	ldi	r24, 0x17	; 23
     c7a:	d7 dd       	rcall	.-1106   	; 0x82a <ioport_set_pin_mode>
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <cpu_irq_save>:
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	1f 92       	push	r1
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	8f e3       	ldi	r24, 0x3F	; 63
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	fc 01       	movw	r30, r24
     c92:	80 81       	ld	r24, Z
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	f8 94       	cli
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	0f 90       	pop	r0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <cpu_irq_restore>:
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	1f 92       	push	r1
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	8f e3       	ldi	r24, 0x3F	; 63
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	29 81       	ldd	r18, Y+1	; 0x01
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18
     cb8:	0f 90       	pop	r0
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <ioport_set_pin_mode>:
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	2a 97       	sbiw	r28, 0x0a	; 10
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	89 87       	std	Y+9, r24	; 0x09
     cd0:	6a 87       	std	Y+10, r22	; 0x0a
     cd2:	89 85       	ldd	r24, Y+9	; 0x09
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd8:	8a 83       	std	Y+2, r24	; 0x02
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	8b 83       	std	Y+3, r24	; 0x03
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	8c 83       	std	Y+4, r24	; 0x04
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	86 95       	lsr	r24
     ce6:	86 95       	lsr	r24
     ce8:	86 95       	lsr	r24
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	82 95       	swap	r24
     cf8:	92 95       	swap	r25
     cfa:	90 7f       	andi	r25, 0xF0	; 240
     cfc:	98 27       	eor	r25, r24
     cfe:	80 7f       	andi	r24, 0xF0	; 240
     d00:	98 27       	eor	r25, r24
     d02:	9a 5f       	subi	r25, 0xFA	; 250
     d04:	8e 83       	std	Y+6, r24	; 0x06
     d06:	9f 83       	std	Y+7, r25	; 0x07
     d08:	80 eb       	ldi	r24, 0xB0	; 176
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	29 81       	ldd	r18, Y+1	; 0x01
     d0e:	28 87       	std	Y+8, r18	; 0x08
     d10:	28 85       	ldd	r18, Y+8	; 0x08
     d12:	22 2f       	mov	r18, r18
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	a9 01       	movw	r20, r18
     d18:	47 70       	andi	r20, 0x07	; 7
     d1a:	55 27       	eor	r21, r21
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	04 2e       	mov	r0, r20
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <ioport_set_pin_mode+0x68>
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <ioport_set_pin_mode+0x64>
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
     d30:	8e 81       	ldd	r24, Y+6	; 0x06
     d32:	9f 81       	ldd	r25, Y+7	; 0x07
     d34:	2a 81       	ldd	r18, Y+2	; 0x02
     d36:	fc 01       	movw	r30, r24
     d38:	20 8b       	std	Z+16, r18	; 0x10
     d3a:	2a 96       	adiw	r28, 0x0a	; 10
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <ioport_get_pin_level>:
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	28 97       	sbiw	r28, 0x08	; 8
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	88 87       	std	Y+8, r24	; 0x08
     d56:	88 85       	ldd	r24, Y+8	; 0x08
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	8a 83       	std	Y+2, r24	; 0x02
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	8b 83       	std	Y+3, r24	; 0x03
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	86 95       	lsr	r24
     d66:	86 95       	lsr	r24
     d68:	86 95       	lsr	r24
     d6a:	8c 83       	std	Y+4, r24	; 0x04
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	82 95       	swap	r24
     d78:	92 95       	swap	r25
     d7a:	90 7f       	andi	r25, 0xF0	; 240
     d7c:	98 27       	eor	r25, r24
     d7e:	80 7f       	andi	r24, 0xF0	; 240
     d80:	98 27       	eor	r25, r24
     d82:	9a 5f       	subi	r25, 0xFA	; 250
     d84:	8d 83       	std	Y+5, r24	; 0x05
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	fc 01       	movw	r30, r24
     d8e:	40 85       	ldd	r20, Z+8	; 0x08
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	8f 83       	std	Y+7, r24	; 0x07
     d94:	8f 81       	ldd	r24, Y+7	; 0x07
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9c 01       	movw	r18, r24
     d9c:	27 70       	andi	r18, 0x07	; 7
     d9e:	33 27       	eor	r19, r19
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <ioport_get_pin_level+0x66>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <ioport_get_pin_level+0x62>
     db0:	94 2f       	mov	r25, r20
     db2:	98 23       	and	r25, r24
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	99 23       	and	r25, r25
     db8:	09 f4       	brne	.+2      	; 0xdbc <ioport_get_pin_level+0x76>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	28 96       	adiw	r28, 0x08	; 8
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <reset_do_soft_reset>:
{
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	89 e7       	ldi	r24, 0x79	; 121
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <ccp_write_io>

	while (1) {
		/* Intentionally empty. */
	}
     dda:	ff cf       	rjmp	.-2      	; 0xdda <reset_do_soft_reset+0x12>

00000ddc <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     ddc:	61 50       	subi	r22, 0x01	; 1
     dde:	71 09       	sbc	r23, r1
     de0:	81 09       	sbc	r24, r1
     de2:	91 09       	sbc	r25, r1
     de4:	d9 f7       	brne	.-10     	; 0xddc <__portable_avr_delay_cycles>
}
     de6:	08 95       	ret

00000de8 <IsChargingDone>:
}
*/


bool IsChargingDone(void)
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	1f 92       	push	r1
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	bool chargingDone;
	ioport_set_pin_mode(CHRG_STAT_PIN, IOPORT_MODE_PULLDOWN); //set pulldown mode
     df2:	60 e1       	ldi	r22, 0x10	; 16
     df4:	80 e1       	ldi	r24, 0x10	; 16
     df6:	64 df       	rcall	.-312    	; 0xcc0 <ioport_set_pin_mode>
	delay_us(PIN_CHECK_DELAY_US);
     df8:	6a e6       	ldi	r22, 0x6A	; 106
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	ed df       	rcall	.-38     	; 0xddc <__portable_avr_delay_cycles>
	chargingDone = ioport_get_pin_level(CHRG_STAT_PIN);
     e02:	80 e1       	ldi	r24, 0x10	; 16
     e04:	a0 df       	rcall	.-192    	; 0xd46 <ioport_get_pin_level>
     e06:	89 83       	std	Y+1, r24	; 0x01
	ioport_set_pin_mode(CHRG_STAT_PIN, IOPORT_MODE_TOTEM); //set pin to normal (low power) mode
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	80 e1       	ldi	r24, 0x10	; 16
     e0c:	59 df       	rcall	.-334    	; 0xcc0 <ioport_set_pin_mode>
	return chargingDone;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e10:	0f 90       	pop	r0
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <MaintainControllerStatus>:
const uint16_t BATTERY_HIGH_THRESHOLD = BAT_DET_4P10V; //~85%

const uint8_t BATTERY_DEAD_INDICATOR = 3;

void MaintainControllerStatus(bool pulse, bool chargingDone, uint16_t battery_level)
{
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	29 97       	sbiw	r28, 0x09	; 9
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	8e 83       	std	Y+6, r24	; 0x06
     e28:	6f 83       	std	Y+7, r22	; 0x07
     e2a:	48 87       	std	Y+8, r20	; 0x08
     e2c:	59 87       	std	Y+9, r21	; 0x09
	bool bluetoothConnected = btIsConnected();
     e2e:	0e 94 51 40 	call	0x80a2	; 0x80a2 <btIsConnected>
     e32:	8d 83       	std	Y+5, r24	; 0x05
	
	uint8_t r = LED_OFF;
     e34:	19 82       	std	Y+1, r1	; 0x01
	uint8_t g = LED_OFF;
     e36:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t b = LED_OFF;
     e38:	1b 82       	std	Y+3, r1	; 0x03
	
	//ChargeState_t batteryChargeState = !ioport_get_pin_level(CHRG_STAT_PIN) ? FULLY_CHARGED : CHARGING;
	//ChargeState_t batteryChargeState = getChargeState();
	//batteryChargeState = NOT_CHARGING; //TODO: getChargeState() can't differentiate between 0 and HiZ -- comment this to reenable

	if(chargingDone)
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	88 23       	and	r24, r24
     e3e:	39 f0       	breq	.+14     	; 0xe4e <MaintainControllerStatus+0x36>
	{
		r = g = b = LED_DIM; // White
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	8b 83       	std	Y+3, r24	; 0x03
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	8a 83       	std	Y+2, r24	; 0x02
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	57 c0       	rjmp	.+174    	; 0xefc <MaintainControllerStatus+0xe4>
	}
	else // Not Charging
	{
		if(battery_level < BATTERY_SAFE_THRESHOLD)
     e4e:	80 91 8d 22 	lds	r24, 0x228D
     e52:	90 91 8e 22 	lds	r25, 0x228E
     e56:	28 85       	ldd	r18, Y+8	; 0x08
     e58:	39 85       	ldd	r19, Y+9	; 0x09
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	90 f5       	brcc	.+100    	; 0xec4 <MaintainControllerStatus+0xac>
		{
			for( uint8_t i=0; i<BATTERY_DEAD_INDICATOR; i++)
     e60:	1c 82       	std	Y+4, r1	; 0x04
     e62:	17 c0       	rjmp	.+46     	; 0xe92 <MaintainControllerStatus+0x7a>
			{
				setLEDValue(LED_DIM, LED_OFF, LED_OFF);
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
				delay_ms(200);
     e6e:	6a ea       	ldi	r22, 0xAA	; 170
     e70:	76 e4       	ldi	r23, 0x46	; 70
     e72:	80 e1       	ldi	r24, 0x10	; 16
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	b2 df       	rcall	.-156    	; 0xddc <__portable_avr_delay_cycles>
				setLEDValue(LED_OFF, LED_OFF, LED_OFF);
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
				delay_ms(200);
     e82:	6a ea       	ldi	r22, 0xAA	; 170
     e84:	76 e4       	ldi	r23, 0x46	; 70
     e86:	80 e1       	ldi	r24, 0x10	; 16
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	a8 df       	rcall	.-176    	; 0xddc <__portable_avr_delay_cycles>
	}
	else // Not Charging
	{
		if(battery_level < BATTERY_SAFE_THRESHOLD)
		{
			for( uint8_t i=0; i<BATTERY_DEAD_INDICATOR; i++)
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	8c 83       	std	Y+4, r24	; 0x04
     e92:	80 91 93 22 	lds	r24, 0x2293
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	98 17       	cp	r25, r24
     e9a:	20 f3       	brcs	.-56     	; 0xe64 <MaintainControllerStatus+0x4c>
				setLEDValue(LED_DIM, LED_OFF, LED_OFF);
				delay_ms(200);
				setLEDValue(LED_OFF, LED_OFF, LED_OFF);
				delay_ms(200);
			}
			powerOff(global_header.powerOffSoftware);
     e9c:	80 91 54 28 	lds	r24, 0x2854
     ea0:	88 1f       	adc	r24, r24
     ea2:	88 27       	eor	r24, r24
     ea4:	88 1f       	adc	r24, r24
     ea6:	90 91 55 28 	lds	r25, 0x2855
     eaa:	9f 73       	andi	r25, 0x3F	; 63
     eac:	99 0f       	add	r25, r25
     eae:	89 2b       	or	r24, r25
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	21 e0       	ldi	r18, 0x01	; 1
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	09 f4       	brne	.+2      	; 0xebc <MaintainControllerStatus+0xa4>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	82 2f       	mov	r24, r18
     ebe:	0e 94 91 23 	call	0x4722	; 0x4722 <powerOff>
     ec2:	1c c0       	rjmp	.+56     	; 0xefc <MaintainControllerStatus+0xe4>
		}
		else if (battery_level < BATTERY_LOW_THRESHOLD)
     ec4:	80 91 8f 22 	lds	r24, 0x228F
     ec8:	90 91 90 22 	lds	r25, 0x2290
     ecc:	28 85       	ldd	r18, Y+8	; 0x08
     ece:	39 85       	ldd	r19, Y+9	; 0x09
     ed0:	28 17       	cp	r18, r24
     ed2:	39 07       	cpc	r19, r25
     ed4:	18 f4       	brcc	.+6      	; 0xedc <MaintainControllerStatus+0xc4>
		{
			//Needs Charging
			r = LED_DIM; // Red
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	10 c0       	rjmp	.+32     	; 0xefc <MaintainControllerStatus+0xe4>
		}
		else if(battery_level < BATTERY_MED_THRESHOLD)
     edc:	80 91 91 22 	lds	r24, 0x2291
     ee0:	90 91 92 22 	lds	r25, 0x2292
     ee4:	28 85       	ldd	r18, Y+8	; 0x08
     ee6:	39 85       	ldd	r19, Y+9	; 0x09
     ee8:	28 17       	cp	r18, r24
     eea:	39 07       	cpc	r19, r25
     eec:	28 f4       	brcc	.+10     	; 0xef8 <MaintainControllerStatus+0xe0>
		{
			//Needs Charging
			r = g = LED_DIM; // Yellow
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <MaintainControllerStatus+0xe4>
		}
		else
		{
			// Normal - Ideal State
			b = LED_DIM; // Default to blue
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	//If Bluetooth not connected, blink
	if (!bluetoothConnected && !pulse)
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	89 27       	eor	r24, r25
     f02:	88 23       	and	r24, r24
     f04:	51 f0       	breq	.+20     	; 0xf1a <MaintainControllerStatus+0x102>
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	89 27       	eor	r24, r25
     f0c:	88 23       	and	r24, r24
     f0e:	29 f0       	breq	.+10     	; 0xf1a <MaintainControllerStatus+0x102>
	{
		r = g = b = LED_OFF;
     f10:	1b 82       	std	Y+3, r1	; 0x03
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	8a 83       	std	Y+2, r24	; 0x02
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
	}
	
	setLEDValue(r,g,b);
     f1a:	4b 81       	ldd	r20, Y+3	; 0x03
     f1c:	6a 81       	ldd	r22, Y+2	; 0x02
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
}
     f24:	29 96       	adiw	r28, 0x09	; 9
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <SetupChrgStatPinExternalInterrupt>:


//Setup CHRG_STAT_PIN external interrupt
void SetupChrgStatPinExternalInterrupt(void)
{
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	2a 97       	sbiw	r28, 0x0a	; 10
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	de bf       	out	0x3e, r29	; 62
	irqflags_t flags;
	flags = cpu_irq_save();
     f3e:	a1 de       	rcall	.-702    	; 0xc82 <cpu_irq_save>
     f40:	89 83       	std	Y+1, r24	; 0x01
	
	PORTC_INT0MASK = 1u<<0; //Set PORTC interrupt on PORTC.0 pin
     f42:	8a e4       	ldi	r24, 0x4A	; 74
     f44:	96 e0       	ldi	r25, 0x06	; 6
     f46:	21 e0       	ldi	r18, 0x01	; 1
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
     f4c:	80 e1       	ldi	r24, 0x10	; 16
     f4e:	8a 83       	std	Y+2, r24	; 0x02
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	8b 83       	std	Y+3, r24	; 0x03
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	8c 83       	std	Y+4, r24	; 0x04
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	8d 83       	std	Y+5, r24	; 0x05
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static inline ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	86 95       	lsr	r24
     f60:	86 95       	lsr	r24
     f62:	86 95       	lsr	r24
     f64:	8e 83       	std	Y+6, r24	; 0x06
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     f66:	8e 81       	ldd	r24, Y+6	; 0x06
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	82 95       	swap	r24
     f72:	92 95       	swap	r25
     f74:	90 7f       	andi	r25, 0xF0	; 240
     f76:	98 27       	eor	r25, r24
     f78:	80 7f       	andi	r24, 0xF0	; 240
     f7a:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     f7c:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     f7e:	8f 83       	std	Y+7, r24	; 0x07
     f80:	98 87       	std	Y+8, r25	; 0x08

	uint8_t flags = cpu_irq_save();
     f82:	7f de       	rcall	.-770    	; 0xc82 <cpu_irq_save>
     f84:	89 87       	std	Y+9, r24	; 0x09

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     f86:	80 eb       	ldi	r24, 0xB0	; 176
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	2a 81       	ldd	r18, Y+2	; 0x02
     f8c:	2a 87       	std	Y+10, r18	; 0x0a
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     f8e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f90:	22 2f       	mov	r18, r18
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	a9 01       	movw	r20, r18
     f96:	47 70       	andi	r20, 0x07	; 7
     f98:	55 27       	eor	r21, r21
     f9a:	21 e0       	ldi	r18, 0x01	; 1
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <SetupChrgStatPinExternalInterrupt+0x74>
     fa0:	22 0f       	add	r18, r18
     fa2:	33 1f       	adc	r19, r19
     fa4:	4a 95       	dec	r20
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <SetupChrgStatPinExternalInterrupt+0x70>
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	uint8_t flags = cpu_irq_save();

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18

	base->PIN0CTRL &= ~PORT_ISC_gm;
     fac:	8f 81       	ldd	r24, Y+7	; 0x07
     fae:	98 85       	ldd	r25, Y+8	; 0x08
     fb0:	fc 01       	movw	r30, r24
     fb2:	80 89       	ldd	r24, Z+16	; 0x10
     fb4:	28 2f       	mov	r18, r24
     fb6:	28 7f       	andi	r18, 0xF8	; 248
     fb8:	8f 81       	ldd	r24, Y+7	; 0x07
     fba:	98 85       	ldd	r25, Y+8	; 0x08
     fbc:	fc 01       	movw	r30, r24
     fbe:	20 8b       	std	Z+16, r18	; 0x10
	base->PIN0CTRL |= (pin_sense & PORT_ISC_gm);
     fc0:	8f 81       	ldd	r24, Y+7	; 0x07
     fc2:	98 85       	ldd	r25, Y+8	; 0x08
     fc4:	fc 01       	movw	r30, r24
     fc6:	80 89       	ldd	r24, Z+16	; 0x10
     fc8:	98 2f       	mov	r25, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	87 70       	andi	r24, 0x07	; 7
     fce:	89 2b       	or	r24, r25
     fd0:	28 2f       	mov	r18, r24
     fd2:	8f 81       	ldd	r24, Y+7	; 0x07
     fd4:	98 85       	ldd	r25, Y+8	; 0x08
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 8b       	std	Z+16, r18	; 0x10

	cpu_irq_restore(flags);
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	62 de       	rcall	.-828    	; 0xca2 <cpu_irq_restore>
	arch_ioport_set_pin_sense_mode(CHRG_STAT_PIN,IOPORT_SENSE_RISING);
	PORTC_INTCTRL = 2u; //Enable medium level external interrupt
     fde:	89 e4       	ldi	r24, 0x49	; 73
     fe0:	96 e0       	ldi	r25, 0x06	; 6
     fe2:	22 e0       	ldi	r18, 0x02	; 2
     fe4:	fc 01       	movw	r30, r24
     fe6:	20 83       	st	Z, r18
	
	cpu_irq_restore(flags);
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	5b de       	rcall	.-842    	; 0xca2 <cpu_irq_restore>
}
     fec:	2a 96       	adiw	r28, 0x0a	; 10
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <__vector_2>:

// PORTF interrupt vector, Vector 0 is the reset vector
ISR(PORTC_INT0_vect)
{
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	00 90 3f 00 	lds	r0, 0x003F
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	00 90 3b 00 	lds	r0, 0x003B
    1008:	0f 92       	push	r0
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	1f 92       	push	r1
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags;
	flags = cpu_irq_save();
    102c:	2a de       	rcall	.-940    	; 0xc82 <cpu_irq_save>
    102e:	89 83       	std	Y+1, r24	; 0x01
	
	// If interrupt0 flag is set, clear it
	#define INT0IF 1u<<0
	#define INT1IF 1u<<1
	if( PORTC_INTFLAGS & INT0IF )
    1030:	8c e4       	ldi	r24, 0x4C	; 76
    1032:	96 e0       	ldi	r25, 0x06	; 6
    1034:	fc 01       	movw	r30, r24
    1036:	80 81       	ld	r24, Z
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	81 70       	andi	r24, 0x01	; 1
    103e:	99 27       	eor	r25, r25
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	29 f0       	breq	.+10     	; 0x104e <__vector_2+0x56>
	{
		PORTC_INTFLAGS = INT0IF; // write-1-to-clear - to clear interrupt flag write a '1'
    1044:	8c e4       	ldi	r24, 0x4C	; 76
    1046:	96 e0       	ldi	r25, 0x06	; 6
    1048:	21 e0       	ldi	r18, 0x01	; 1
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18
	}
    
	setLEDValue(LED_DIM,LED_DIM,LED_DIM);
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
	
	if( SLEEP_MODE_PWR_DOWN==(SLEEP.CTRL & SLEEP_SMODE_gm) )
    1058:	88 e4       	ldi	r24, 0x48	; 72
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	fc 01       	movw	r30, r24
    105e:	80 81       	ld	r24, Z
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	8e 70       	andi	r24, 0x0E	; 14
    1066:	99 27       	eor	r25, r25
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	91 05       	cpc	r25, r1
    106c:	51 f4       	brne	.+20     	; 0x1082 <__vector_2+0x8a>
	{
		sleep_disable();
    106e:	88 e4       	ldi	r24, 0x48	; 72
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	28 e4       	ldi	r18, 0x48	; 72
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	f9 01       	movw	r30, r18
    1078:	20 81       	ld	r18, Z
    107a:	2e 7f       	andi	r18, 0xFE	; 254
    107c:	fc 01       	movw	r30, r24
    107e:	20 83       	st	Z, r18
		reset_do_soft_reset(); // don't want to continue in powerOff() - checks that the START button was pressed
    1080:	a3 de       	rcall	.-698    	; 0xdc8 <reset_do_soft_reset>
	}
	
	cpu_irq_restore(flags);
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	0e de       	rcall	.-996    	; 0xca2 <cpu_irq_restore>
}
    1086:	0f 90       	pop	r0
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	00 92 3b 00 	sts	0x003B, r0
    10aa:	0f 90       	pop	r0
    10ac:	00 92 3f 00 	sts	0x003F, r0
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <reset_do_soft_reset>:
{
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	89 e7       	ldi	r24, 0x79	; 121
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <ccp_write_io>

	while (1) {
		/* Intentionally empty. */
	}
    10c8:	ff cf       	rjmp	.-2      	; 0x10c8 <reset_do_soft_reset+0x12>

000010ca <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    10ca:	61 50       	subi	r22, 0x01	; 1
    10cc:	71 09       	sbc	r23, r1
    10ce:	81 09       	sbc	r24, r1
    10d0:	91 09       	sbc	r25, r1
    10d2:	d9 f7       	brne	.-10     	; 0x10ca <__portable_avr_delay_cycles>
}
    10d4:	08 95       	ret

000010d6 <biosMain>:

const static uint16_xy * center[2] = {(uint16_xy*)&(joysticks[JOYSTICK_LEFT].center_x),(uint16_xy*)&(joysticks[JOYSTICK_RIGHT].center_x)};
const static int16_xy deadzone = {(int16_t)JOYSTICK_TEST_DEADZONE_X,(int16_t)JOYSTICK_TEST_DEADZONE_Y};

void biosMain(void)
{
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	00 d0       	rcall	.+0      	; 0x10dc <biosMain+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	//Follows same left,right ordering defined in JoystickName
	//uint16_xy * center[2] = {&(joysticks[JOYSTICK_LEFT].center_x),&(joysticks[JOYSTICK_RIGHT].center_x)};
	//deadzone->x = JOYSTICK_TEST_DEADZONE_X;
	//deadzone->y = JOYSTICK_TEST_DEADZONE_Y;
	
	setupLEDs(false);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	0e 94 fd 24 	call	0x49fa	; 0x49fa <setupLEDs>
	
	for( int i=0; i<TEST_MODE_NUM_BLINKS; i++)
    10e6:	19 82       	std	Y+1, r1	; 0x01
    10e8:	1a 82       	std	Y+2, r1	; 0x02
    10ea:	19 c0       	rjmp	.+50     	; 0x111e <biosMain+0x48>
	{
		setLEDValue(LED_DIM, LED_OFF, LED_OFF);
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
		delay_ms(200);
    10f6:	6a ea       	ldi	r22, 0xAA	; 170
    10f8:	76 e4       	ldi	r23, 0x46	; 70
    10fa:	80 e1       	ldi	r24, 0x10	; 16
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	e5 df       	rcall	.-54     	; 0x10ca <__portable_avr_delay_cycles>
		setLEDValue(LED_OFF, LED_OFF, LED_OFF);
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
		delay_ms(200);
    110a:	6a ea       	ldi	r22, 0xAA	; 170
    110c:	76 e4       	ldi	r23, 0x46	; 70
    110e:	80 e1       	ldi	r24, 0x10	; 16
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	db df       	rcall	.-74     	; 0x10ca <__portable_avr_delay_cycles>
	//deadzone->x = JOYSTICK_TEST_DEADZONE_X;
	//deadzone->y = JOYSTICK_TEST_DEADZONE_Y;
	
	setupLEDs(false);
	
	for( int i=0; i<TEST_MODE_NUM_BLINKS; i++)
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	83 30       	cpi	r24, 0x03	; 3
    1124:	91 05       	cpc	r25, r1
    1126:	14 f3       	brlt	.-60     	; 0x10ec <biosMain+0x16>
		delay_ms(200);
		setLEDValue(LED_OFF, LED_OFF, LED_OFF);
		delay_ms(200);
	}
	
	turnBTOn(); //Joysticks are on the same power rail island as the Bluetooth module, so turn BT on
    1128:	0e 94 65 3f 	call	0x7eca	; 0x7eca <turnBTOn>
	
	ManufactureTestButtonPress();
    112c:	05 d0       	rcall	.+10     	; 0x1138 <ManufactureTestButtonPress>
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <ManufactureTestButtonPress>:


void ManufactureTestButtonPress(void)
{
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	2c 97       	sbiw	r28, 0x0c	; 12
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	de bf       	out	0x3e, r29	; 62
	startTimeout(&biosUnused, BIOS_UNUSED_MS);
    114a:	40 ef       	ldi	r20, 0xF0	; 240
    114c:	59 e4       	ldi	r21, 0x49	; 73
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	87 e5       	ldi	r24, 0x57	; 87
    1154:	98 e2       	ldi	r25, 0x28	; 40
    1156:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
	while(1)
	{
		uint8_t red = LED_OFF;
    115a:	19 82       	std	Y+1, r1	; 0x01
		uint8_t green = LED_OFF;
    115c:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t blue = LED_OFF;		
    115e:	1b 82       	std	Y+3, r1	; 0x03
		
		WatchdogPet();
    1160:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
		
		if (buttonActivated(B_START) & buttonActivated(B_SELECT))
    1164:	88 e0       	ldi	r24, 0x08	; 8
    1166:	3f d1       	rcall	.+638    	; 0x13e6 <buttonActivated>
    1168:	08 2f       	mov	r16, r24
    116a:	10 e0       	ldi	r17, 0x00	; 0
    116c:	89 e0       	ldi	r24, 0x09	; 9
    116e:	3b d1       	rcall	.+630    	; 0x13e6 <buttonActivated>
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	80 23       	and	r24, r16
    1176:	91 23       	and	r25, r17
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	31 f0       	breq	.+12     	; 0x1188 <ManufactureTestButtonPress+0x50>
		{
			delay_ms(500);
    117c:	6a ea       	ldi	r22, 0xAA	; 170
    117e:	70 eb       	ldi	r23, 0xB0	; 176
    1180:	88 e2       	ldi	r24, 0x28	; 40
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a2 df       	rcall	.-188    	; 0x10ca <__portable_avr_delay_cycles>
			reset_do_soft_reset();
    1186:	97 df       	rcall	.-210    	; 0x10b6 <reset_do_soft_reset>
		}
		
		if(checkTimeout(&biosUnused))
    1188:	87 e5       	ldi	r24, 0x57	; 87
    118a:	98 e2       	ldi	r25, 0x28	; 40
    118c:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    1190:	88 23       	and	r24, r24
    1192:	e1 f0       	breq	.+56     	; 0x11cc <ManufactureTestButtonPress+0x94>
		{
			cancelTimeout(&biosUnused);
    1194:	87 e5       	ldi	r24, 0x57	; 87
    1196:	98 e2       	ldi	r25, 0x28	; 40
    1198:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <cancelTimeout>
			setLEDValue(0, 0, 0);
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
			powerOff(global_header.powerOffSoftware);
    11a6:	80 91 54 28 	lds	r24, 0x2854
    11aa:	88 1f       	adc	r24, r24
    11ac:	88 27       	eor	r24, r24
    11ae:	88 1f       	adc	r24, r24
    11b0:	90 91 55 28 	lds	r25, 0x2855
    11b4:	9f 73       	andi	r25, 0x3F	; 63
    11b6:	99 0f       	add	r25, r25
    11b8:	89 2b       	or	r24, r25
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	21 e0       	ldi	r18, 0x01	; 1
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <ManufactureTestButtonPress+0x8e>
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	82 2f       	mov	r24, r18
    11c8:	0e 94 91 23 	call	0x4722	; 0x4722 <powerOff>
		}

		if( buttonActivated(B_UP) ||
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	0b d1       	rcall	.+534    	; 0x13e6 <buttonActivated>
    11d0:	88 23       	and	r24, r24
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <ManufactureTestButtonPress+0x9e>
    11d4:	3f c0       	rjmp	.+126    	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_DOWN) ||
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	06 d1       	rcall	.+524    	; 0x13e6 <buttonActivated>
			cancelTimeout(&biosUnused);
			setLEDValue(0, 0, 0);
			powerOff(global_header.powerOffSoftware);
		}

		if( buttonActivated(B_UP) ||
    11da:	88 23       	and	r24, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <ManufactureTestButtonPress+0xa8>
    11de:	3a c0       	rjmp	.+116    	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	01 d1       	rcall	.+514    	; 0x13e6 <buttonActivated>
			setLEDValue(0, 0, 0);
			powerOff(global_header.powerOffSoftware);
		}

		if( buttonActivated(B_UP) ||
			buttonActivated(B_DOWN) ||
    11e4:	88 23       	and	r24, r24
    11e6:	09 f0       	breq	.+2      	; 0x11ea <ManufactureTestButtonPress+0xb2>
    11e8:	35 c0       	rjmp	.+106    	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	fc d0       	rcall	.+504    	; 0x13e6 <buttonActivated>
			powerOff(global_header.powerOffSoftware);
		}

		if( buttonActivated(B_UP) ||
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
    11ee:	88 23       	and	r24, r24
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <ManufactureTestButtonPress+0xbc>
    11f2:	30 c0       	rjmp	.+96     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
    11f4:	84 e0       	ldi	r24, 0x04	; 4
    11f6:	f7 d0       	rcall	.+494    	; 0x13e6 <buttonActivated>
		}

		if( buttonActivated(B_UP) ||
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
    11f8:	88 23       	and	r24, r24
    11fa:	61 f5       	brne	.+88     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
    11fc:	85 e0       	ldi	r24, 0x05	; 5
    11fe:	f3 d0       	rcall	.+486    	; 0x13e6 <buttonActivated>

		if( buttonActivated(B_UP) ||
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
    1200:	88 23       	and	r24, r24
    1202:	41 f5       	brne	.+80     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
    1204:	86 e0       	ldi	r24, 0x06	; 6
    1206:	ef d0       	rcall	.+478    	; 0x13e6 <buttonActivated>
		if( buttonActivated(B_UP) ||
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
    1208:	88 23       	and	r24, r24
    120a:	21 f5       	brne	.+72     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
    120c:	87 e0       	ldi	r24, 0x07	; 7
    120e:	eb d0       	rcall	.+470    	; 0x13e6 <buttonActivated>
			buttonActivated(B_DOWN) ||
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
    1210:	88 23       	and	r24, r24
    1212:	01 f5       	brne	.+64     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	e7 d0       	rcall	.+462    	; 0x13e6 <buttonActivated>
			buttonActivated(B_LEFT) ||
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
    1218:	88 23       	and	r24, r24
    121a:	e1 f4       	brne	.+56     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
    121c:	89 e0       	ldi	r24, 0x09	; 9
    121e:	e3 d0       	rcall	.+454    	; 0x13e6 <buttonActivated>
			buttonActivated(B_RIGHT) ||
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
    1220:	88 23       	and	r24, r24
    1222:	c1 f4       	brne	.+48     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
    1224:	8b e0       	ldi	r24, 0x0B	; 11
    1226:	df d0       	rcall	.+446    	; 0x13e6 <buttonActivated>
			buttonActivated(B_A) ||
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
    1228:	88 23       	and	r24, r24
    122a:	a1 f4       	brne	.+40     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_LB) ||
			buttonActivated(B_RB) ||
    122c:	8a e0       	ldi	r24, 0x0A	; 10
    122e:	db d0       	rcall	.+438    	; 0x13e6 <buttonActivated>
			buttonActivated(B_B) ||
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
    1230:	88 23       	and	r24, r24
    1232:	81 f4       	brne	.+32     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_RB) ||
			buttonActivated(B_LT) ||
    1234:	8d e0       	ldi	r24, 0x0D	; 13
    1236:	d7 d0       	rcall	.+430    	; 0x13e6 <buttonActivated>
			buttonActivated(B_X) ||
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
			buttonActivated(B_RB) ||
    1238:	88 23       	and	r24, r24
    123a:	61 f4       	brne	.+24     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_LT) ||
			buttonActivated(B_RT) ||
    123c:	8c e0       	ldi	r24, 0x0C	; 12
    123e:	d3 d0       	rcall	.+422    	; 0x13e6 <buttonActivated>
			buttonActivated(B_Y) ||
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
			buttonActivated(B_RB) ||
			buttonActivated(B_LT) ||
    1240:	88 23       	and	r24, r24
    1242:	41 f4       	brne	.+16     	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_RT) ||
			buttonActivated(B_JL) ||
    1244:	8e e0       	ldi	r24, 0x0E	; 14
    1246:	cf d0       	rcall	.+414    	; 0x13e6 <buttonActivated>
			buttonActivated(B_START) ||
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
			buttonActivated(B_RB) ||
			buttonActivated(B_LT) ||
			buttonActivated(B_RT) ||
    1248:	88 23       	and	r24, r24
    124a:	21 f4       	brne	.+8      	; 0x1254 <ManufactureTestButtonPress+0x11c>
			buttonActivated(B_JL) ||
			buttonActivated(B_JR)
    124c:	8f e0       	ldi	r24, 0x0F	; 15
    124e:	cb d0       	rcall	.+406    	; 0x13e6 <buttonActivated>
			buttonActivated(B_SELECT) ||
			buttonActivated(B_LB) ||
			buttonActivated(B_RB) ||
			buttonActivated(B_LT) ||
			buttonActivated(B_RT) ||
			buttonActivated(B_JL) ||
    1250:	88 23       	and	r24, r24
    1252:	11 f0       	breq	.+4      	; 0x1258 <ManufactureTestButtonPress+0x120>
			buttonActivated(B_JR)
		)
		{
			green = LED_DIM;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		for(uint8_t idx = 0 ; idx<NUM_JOYSTICKS; idx++) 
    1258:	1c 82       	std	Y+4, r1	; 0x04
    125a:	7a c0       	rjmp	.+244    	; 0x1350 <ManufactureTestButtonPress+0x218>
		{
			uint16_xy raw;
			raw.x = sampleAnalogChannel(joysticks[idx].adc_channel_x);
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	9c 01       	movw	r18, r24
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	22 0f       	add	r18, r18
    1272:	33 1f       	adc	r19, r19
    1274:	28 1b       	sub	r18, r24
    1276:	39 0b       	sbc	r19, r25
    1278:	c9 01       	movw	r24, r18
    127a:	8a 5a       	subi	r24, 0xAA	; 170
    127c:	9f 4d       	sbci	r25, 0xDF	; 223
    127e:	fc 01       	movw	r30, r24
    1280:	80 81       	ld	r24, Z
    1282:	ad da       	rcall	.-2726   	; 0x7de <sampleAnalogChannel>
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	9e 83       	std	Y+6, r25	; 0x06
			raw.y = sampleAnalogChannel(joysticks[idx].adc_channel_y);
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	9c 01       	movw	r18, r24
    1294:	22 0f       	add	r18, r18
    1296:	33 1f       	adc	r19, r19
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	22 0f       	add	r18, r18
    129e:	33 1f       	adc	r19, r19
    12a0:	28 1b       	sub	r18, r24
    12a2:	39 0b       	sbc	r19, r25
    12a4:	c9 01       	movw	r24, r18
    12a6:	89 5a       	subi	r24, 0xA9	; 169
    12a8:	9f 4d       	sbci	r25, 0xDF	; 223
    12aa:	fc 01       	movw	r30, r24
    12ac:	80 81       	ld	r24, Z
    12ae:	97 da       	rcall	.-2770   	; 0x7de <sampleAnalogChannel>
    12b0:	8f 83       	std	Y+7, r24	; 0x07
    12b2:	98 87       	std	Y+8, r25	; 0x08
			
			int16_xy out;
			SimpleJoystickAdj( center[idx], &deadzone, &raw, &out );
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	80 50       	subi	r24, 0x00	; 0
    12c0:	90 4e       	sbci	r25, 0xE0	; 224
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	9e 01       	movw	r18, r28
    12ca:	27 5f       	subi	r18, 0xF7	; 247
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	ae 01       	movw	r20, r28
    12d0:	4b 5f       	subi	r20, 0xFB	; 251
    12d2:	5f 4f       	sbci	r21, 0xFF	; 255
    12d4:	64 e9       	ldi	r22, 0x94	; 148
    12d6:	72 e2       	ldi	r23, 0x22	; 34
    12d8:	0e 94 c5 20 	call	0x418a	; 0x418a <SimpleJoystickAdj>
			
			//Write raw and adjusted X,Y values to USB serial port
			PrintXY(raw.x,raw.y);
    12dc:	8f 81       	ldd	r24, Y+7	; 0x07
    12de:	98 85       	ldd	r25, Y+8	; 0x08
    12e0:	9c 01       	movw	r18, r24
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	b9 01       	movw	r22, r18
    12e8:	0e 94 5f 29 	call	0x52be	; 0x52be <PrintXY>
			sendUSBString("->", false);
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	8d e7       	ldi	r24, 0x7D	; 125
    12f0:	90 e2       	ldi	r25, 0x20	; 32
    12f2:	0e 94 80 28 	call	0x5100	; 0x5100 <sendUSBString>
			PrintXY(out.x,out.y);
    12f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    12f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    12fa:	89 85       	ldd	r24, Y+9	; 0x09
    12fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fe:	b9 01       	movw	r22, r18
    1300:	0e 94 5f 29 	call	0x52be	; 0x52be <PrintXY>
			sendUSBLine("");
    1304:	80 e8       	ldi	r24, 0x80	; 128
    1306:	90 e2       	ldi	r25, 0x20	; 32
    1308:	0e 94 a7 28 	call	0x514e	; 0x514e <sendUSBLine>
			
			if( out.y<0 )
    130c:	8b 85       	ldd	r24, Y+11	; 0x0b
    130e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1310:	99 23       	and	r25, r25
    1312:	2c f4       	brge	.+10     	; 0x131e <ManufactureTestButtonPress+0x1e6>
			{
				//up is yellow
				red = LED_DIM;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
				green = LED_DIM;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	16 c0       	rjmp	.+44     	; 0x134a <ManufactureTestButtonPress+0x212>
			}
			else if( out.y>0 )
    131e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1320:	9c 85       	ldd	r25, Y+12	; 0x0c
    1322:	18 16       	cp	r1, r24
    1324:	19 06       	cpc	r1, r25
    1326:	1c f4       	brge	.+6      	; 0x132e <ManufactureTestButtonPress+0x1f6>
			{
				//down is blue
				blue = LED_DIM;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	8b 83       	std	Y+3, r24	; 0x03
    132c:	0e c0       	rjmp	.+28     	; 0x134a <ManufactureTestButtonPress+0x212>
			}
			else if( out.x>0 )
    132e:	89 85       	ldd	r24, Y+9	; 0x09
    1330:	9a 85       	ldd	r25, Y+10	; 0x0a
    1332:	18 16       	cp	r1, r24
    1334:	19 06       	cpc	r1, r25
    1336:	1c f4       	brge	.+6      	; 0x133e <ManufactureTestButtonPress+0x206>
			{
				//right is Red
				red = LED_DIM;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	06 c0       	rjmp	.+12     	; 0x134a <ManufactureTestButtonPress+0x212>
			}
			else if( out.x<0 )
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	99 23       	and	r25, r25
    1344:	14 f4       	brge	.+4      	; 0x134a <ManufactureTestButtonPress+0x212>
			{
				//left is green
				green = LED_DIM;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	8a 83       	std	Y+2, r24	; 0x02
		)
		{
			green = LED_DIM;
		}
		
		for(uint8_t idx = 0 ; idx<NUM_JOYSTICKS; idx++) 
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	8c 83       	std	Y+4, r24	; 0x04
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	82 30       	cpi	r24, 0x02	; 2
    1354:	08 f4       	brcc	.+2      	; 0x1358 <ManufactureTestButtonPress+0x220>
    1356:	82 cf       	rjmp	.-252    	; 0x125c <ManufactureTestButtonPress+0x124>
				//left is green
				green = LED_DIM;
			}
		}
		
		setLEDValue(red, green, blue);
    1358:	4b 81       	ldd	r20, Y+3	; 0x03
    135a:	6a 81       	ldd	r22, Y+2	; 0x02
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
				
	} // end while(1)
    1362:	fb ce       	rjmp	.-522    	; 0x115a <ManufactureTestButtonPress+0x22>

00001364 <ioport_get_pin_level>:
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	28 97       	sbiw	r28, 0x08	; 8
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	88 87       	std	Y+8, r24	; 0x08
    1374:	88 85       	ldd	r24, Y+8	; 0x08
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	8a 83       	std	Y+2, r24	; 0x02
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	8b 83       	std	Y+3, r24	; 0x03
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	86 95       	lsr	r24
    1384:	86 95       	lsr	r24
    1386:	86 95       	lsr	r24
    1388:	8c 83       	std	Y+4, r24	; 0x04
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	82 95       	swap	r24
    1396:	92 95       	swap	r25
    1398:	90 7f       	andi	r25, 0xF0	; 240
    139a:	98 27       	eor	r25, r24
    139c:	80 7f       	andi	r24, 0xF0	; 240
    139e:	98 27       	eor	r25, r24
    13a0:	9a 5f       	subi	r25, 0xFA	; 250
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	fc 01       	movw	r30, r24
    13ac:	40 85       	ldd	r20, Z+8	; 0x08
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	8f 83       	std	Y+7, r24	; 0x07
    13b2:	8f 81       	ldd	r24, Y+7	; 0x07
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9c 01       	movw	r18, r24
    13ba:	27 70       	andi	r18, 0x07	; 7
    13bc:	33 27       	eor	r19, r19
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <ioport_get_pin_level+0x66>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <ioport_get_pin_level+0x62>
    13ce:	94 2f       	mov	r25, r20
    13d0:	98 23       	and	r25, r24
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	99 23       	and	r25, r25
    13d6:	09 f4       	brne	.+2      	; 0x13da <ioport_get_pin_level+0x76>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	28 96       	adiw	r28, 0x08	; 8
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <buttonActivated>:
{ LT_PIN,			0, BUTTON_RELEASED, ACTIVE_LOW},
{ JOYSTICK_L_CLICK, 0, BUTTON_RELEASED, ACTIVE_LOW},
{ JOYSTICK_R_CLICK, 0, BUTTON_RELEASED, ACTIVE_LOW}
};

bool buttonActivated(enum ButtonName bn) {
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	1f 92       	push	r1
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	89 83       	std	Y+1, r24	; 0x01
	if(ioport_get_pin_level(buttons[bn].pin)) {
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	8c 5f       	subi	r24, 0xFC	; 252
    1402:	9f 4d       	sbci	r25, 0xDF	; 223
    1404:	fc 01       	movw	r30, r24
    1406:	80 81       	ld	r24, Z
    1408:	ad df       	rcall	.-166    	; 0x1364 <ioport_get_pin_level>
    140a:	88 23       	and	r24, r24
    140c:	81 f0       	breq	.+32     	; 0x142e <buttonActivated+0x48>
		return buttons[bn].polarity;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	89 5f       	subi	r24, 0xF9	; 249
    141e:	9f 4d       	sbci	r25, 0xDF	; 223
    1420:	fc 01       	movw	r30, r24
    1422:	90 81       	ld	r25, Z
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	99 23       	and	r25, r25
    1428:	89 f4       	brne	.+34     	; 0x144c <buttonActivated+0x66>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0f c0       	rjmp	.+30     	; 0x144c <buttonActivated+0x66>
	}
	else {
		return !buttons[bn].polarity;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	89 5f       	subi	r24, 0xF9	; 249
    143e:	9f 4d       	sbci	r25, 0xDF	; 223
    1440:	fc 01       	movw	r30, r24
    1442:	90 81       	ld	r25, Z
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	99 23       	and	r25, r25
    1448:	09 f0       	breq	.+2      	; 0x144c <buttonActivated+0x66>
    144a:	80 e0       	ldi	r24, 0x00	; 0
	}	
    144c:	0f 90       	pop	r0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <keyboardiOSInit>:
#include "configurations.h"

// Local pointer to the current controller configuration.
static struct ControllerConfiguration *my_cc;

void keyboardiOSInit(struct ControllerConfiguration *cc) {
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	00 d0       	rcall	.+0      	; 0x145a <keyboardiOSInit+0x6>
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	9a 83       	std	Y+2, r25	; 0x02
	my_cc = cc;
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	80 93 87 26 	sts	0x2687, r24
    146a:	90 93 88 26 	sts	0x2688, r25
    BluetoothKeyboardMode();
    146e:	0e 94 72 40 	call	0x80e4	; 0x80e4 <BluetoothKeyboardMode>
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <keyboardiOSButtonHandler>:

void keyboardiOSButtonHandler(enum ButtonName name, enum ButtonState state) {
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	00 d0       	rcall	.+0      	; 0x1482 <keyboardiOSButtonHandler+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <keyboardiOSButtonHandler+0x8>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8b 83       	std	Y+3, r24	; 0x03
    148a:	6c 83       	std	Y+4, r22	; 0x04
	char key;
	unsigned char i;
	
	// Get the ASCII character to press:
	if (state == BUTTON_PRESSED) {
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	b9 f4       	brne	.+46     	; 0x14c0 <keyboardiOSButtonHandler+0x44>
		key = my_cc->button_configs[name].button_down.scan_code;
    1492:	40 91 87 26 	lds	r20, 0x2687
    1496:	50 91 88 26 	lds	r21, 0x2688
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	c9 01       	movw	r24, r18
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	84 0f       	add	r24, r20
    14b4:	95 1f       	adc	r25, r21
    14b6:	06 96       	adiw	r24, 0x06	; 6
    14b8:	fc 01       	movw	r30, r24
    14ba:	80 81       	ld	r24, Z
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	16 c0       	rjmp	.+44     	; 0x14ec <keyboardiOSButtonHandler+0x70>
	}
	else {
		key = my_cc->button_configs[name].button_up.scan_code;
    14c0:	40 91 87 26 	lds	r20, 0x2687
    14c4:	50 91 88 26 	lds	r21, 0x2688
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	c9 01       	movw	r24, r18
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	82 0f       	add	r24, r18
    14de:	93 1f       	adc	r25, r19
    14e0:	84 0f       	add	r24, r20
    14e2:	95 1f       	adc	r25, r21
    14e4:	04 96       	adiw	r24, 0x04	; 4
    14e6:	fc 01       	movw	r30, r24
    14e8:	80 81       	ld	r24, Z
    14ea:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if (key != 0) {
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	88 23       	and	r24, r24
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <keyboardiOSButtonHandler+0x78>
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <keyboardiOSButtonHandler+0xf6>
		sendDBGChar(key);
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	0e 94 84 20 	call	0x4108	; 0x4108 <sendDBGChar>
			sendBTChar(0);
		}
		
		#else
		// Send the identifier:
		sendBTString("BC:KR=A1,01,00,");
    14fa:	81 e8       	ldi	r24, 0x81	; 129
    14fc:	90 e2       	ldi	r25, 0x20	; 32
    14fe:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <sendBTString>
		
		// Send the modifiers:
		sendBTHexPair(0);
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
		
		// send the scan code as the first code
		sendBTChar(',');
    1508:	8c e2       	ldi	r24, 0x2C	; 44
    150a:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
		sendBTHexPair(key);
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
		
		// Pad the other scan codes with 0
		for (i=0;i < 5; i++) {
    1514:	1a 82       	std	Y+2, r1	; 0x02
    1516:	09 c0       	rjmp	.+18     	; 0x152a <keyboardiOSButtonHandler+0xae>
			sendBTChar(',');
    1518:	8c e2       	ldi	r24, 0x2C	; 44
    151a:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
			sendBTHexPair(0);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
		// send the scan code as the first code
		sendBTChar(',');
		sendBTHexPair(key);
		
		// Pad the other scan codes with 0
		for (i=0;i < 5; i++) {
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	8a 83       	std	Y+2, r24	; 0x02
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	85 30       	cpi	r24, 0x05	; 5
    152e:	a0 f3       	brcs	.-24     	; 0x1518 <keyboardiOSButtonHandler+0x9c>
			sendBTChar(',');
			sendBTHexPair(0);
		}
		sendBTChar('\r'); 
    1530:	8d e0       	ldi	r24, 0x0D	; 13
    1532:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
		sendBTChar('\n');
    1536:	8a e0       	ldi	r24, 0x0A	; 10
    1538:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
		
		// Now send the no-scan-code so the button released is recognized
		// Send the identifier:
		sendBTString("BC:KR=A1,01,00,");
    153c:	81 e8       	ldi	r24, 0x81	; 129
    153e:	90 e2       	ldi	r25, 0x20	; 32
    1540:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <sendBTString>
		
		// Send the modifiers:
		sendBTHexPair(0);
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
		
		// Pad the scan codes with 0s
		for (i=0;i < 6; i++) {
    154a:	1a 82       	std	Y+2, r1	; 0x02
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <keyboardiOSButtonHandler+0xe4>
			sendBTChar(',');
    154e:	8c e2       	ldi	r24, 0x2C	; 44
    1550:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
			sendBTHexPair(0);
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
		
		// Send the modifiers:
		sendBTHexPair(0);
		
		// Pad the scan codes with 0s
		for (i=0;i < 6; i++) {
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	8a 83       	std	Y+2, r24	; 0x02
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	86 30       	cpi	r24, 0x06	; 6
    1564:	a0 f3       	brcs	.-24     	; 0x154e <keyboardiOSButtonHandler+0xd2>
			sendBTChar(',');
			sendBTHexPair(0);
		}
		sendBTChar('\r'); 
    1566:	8d e0       	ldi	r24, 0x0D	; 13
    1568:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
		sendBTChar('\n');
    156c:	8a e0       	ldi	r24, 0x0A	; 10
    156e:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
		#endif
	}
};
    1572:	24 96       	adiw	r28, 0x04	; 4
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <flushCB>:
	while (temp < count && addByteToCB(cb, src[temp])) {
		temp++;
	}
	
	return temp;
}
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	00 d0       	rcall	.+0      	; 0x1584 <flushCB+0x6>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	fc 01       	movw	r30, r24
    1592:	14 82       	std	Z+4, r1	; 0x04
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	fc 01       	movw	r30, r24
    159a:	22 81       	ldd	r18, Z+2	; 0x02
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	fc 01       	movw	r30, r24
    15a2:	23 83       	std	Z+3, r18	; 0x03
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	08 95       	ret

000015ae <cpu_irq_save>:
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	1f 92       	push	r1
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8f e3       	ldi	r24, 0x3F	; 63
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	fc 01       	movw	r30, r24
    15be:	80 81       	ld	r24, Z
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	f8 94       	cli
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	0f 90       	pop	r0
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <cpu_irq_restore>:
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	1f 92       	push	r1
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	8f e3       	ldi	r24, 0x3F	; 63
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	29 81       	ldd	r18, Y+1	; 0x01
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 83       	st	Z, r18
    15e4:	0f 90       	pop	r0
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <initCB>:
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	25 97       	sbiw	r28, 0x05	; 5
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	6b 83       	std	Y+3, r22	; 0x03
    1600:	7c 83       	std	Y+4, r23	; 0x04
    1602:	4d 83       	std	Y+5, r20	; 0x05
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	2b 81       	ldd	r18, Y+3	; 0x03
    160a:	3c 81       	ldd	r19, Y+4	; 0x04
    160c:	fc 01       	movw	r30, r24
    160e:	20 83       	st	Z, r18
    1610:	31 83       	std	Z+1, r19	; 0x01
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	2d 81       	ldd	r18, Y+5	; 0x05
    1618:	fc 01       	movw	r30, r24
    161a:	25 83       	std	Z+5, r18	; 0x05
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	fc 01       	movw	r30, r24
    1622:	12 82       	std	Z+2, r1	; 0x02
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	aa df       	rcall	.-172    	; 0x157e <flushCB>
    162a:	25 96       	adiw	r28, 0x05	; 5
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <addByteToCB>:
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	25 97       	sbiw	r28, 0x05	; 5
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	8b 83       	std	Y+3, r24	; 0x03
    1646:	9c 83       	std	Y+4, r25	; 0x04
    1648:	6d 83       	std	Y+5, r22	; 0x05
    164a:	19 82       	std	Y+1, r1	; 0x01
    164c:	b0 df       	rcall	.-160    	; 0x15ae <cpu_irq_save>
    164e:	8a 83       	std	Y+2, r24	; 0x02
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	fc 01       	movw	r30, r24
    1656:	24 81       	ldd	r18, Z+4	; 0x04
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	fc 01       	movw	r30, r24
    165e:	85 81       	ldd	r24, Z+5	; 0x05
    1660:	28 17       	cp	r18, r24
    1662:	80 f5       	brcc	.+96     	; 0x16c4 <addByteToCB+0x8e>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	fc 01       	movw	r30, r24
    166a:	20 81       	ld	r18, Z
    166c:	31 81       	ldd	r19, Z+1	; 0x01
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	fc 01       	movw	r30, r24
    1674:	42 81       	ldd	r20, Z+2	; 0x02
    1676:	84 2f       	mov	r24, r20
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	82 0f       	add	r24, r18
    167c:	93 1f       	adc	r25, r19
    167e:	2d 81       	ldd	r18, Y+5	; 0x05
    1680:	fc 01       	movw	r30, r24
    1682:	20 83       	st	Z, r18
    1684:	24 2f       	mov	r18, r20
    1686:	2f 5f       	subi	r18, 0xFF	; 255
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	fc 01       	movw	r30, r24
    168e:	22 83       	std	Z+2, r18	; 0x02
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	fc 01       	movw	r30, r24
    1696:	84 81       	ldd	r24, Z+4	; 0x04
    1698:	28 2f       	mov	r18, r24
    169a:	2f 5f       	subi	r18, 0xFF	; 255
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	fc 01       	movw	r30, r24
    16a2:	24 83       	std	Z+4, r18	; 0x04
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	fc 01       	movw	r30, r24
    16aa:	22 81       	ldd	r18, Z+2	; 0x02
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	fc 01       	movw	r30, r24
    16b2:	85 81       	ldd	r24, Z+5	; 0x05
    16b4:	28 17       	cp	r18, r24
    16b6:	20 f0       	brcs	.+8      	; 0x16c0 <addByteToCB+0x8a>
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	fc 01       	movw	r30, r24
    16be:	12 82       	std	Z+2, r1	; 0x02
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	83 df       	rcall	.-250    	; 0x15ce <cpu_irq_restore>
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	25 96       	adiw	r28, 0x05	; 5
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <readByteFromCB>:

bool readByteFromCB(struct CircularBuffer* cb, uint8_t *dst) {
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	26 97       	sbiw	r28, 0x06	; 6
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	8b 83       	std	Y+3, r24	; 0x03
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	6d 83       	std	Y+5, r22	; 0x05
    16ea:	7e 83       	std	Y+6, r23	; 0x06
	bool success = false;
    16ec:	19 82       	std	Y+1, r1	; 0x01
	// Save the interrupt state and disable interrupts:
	irqflags_t flags = cpu_irq_save();
    16ee:	5f df       	rcall	.-322    	; 0x15ae <cpu_irq_save>
    16f0:	8a 83       	std	Y+2, r24	; 0x02

	// Is there available data?
	if (cb->count > 0) {
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	fc 01       	movw	r30, r24
    16f8:	84 81       	ldd	r24, Z+4	; 0x04
    16fa:	88 23       	and	r24, r24
    16fc:	99 f1       	breq	.+102    	; 0x1764 <readByteFromCB+0x8e>
		// Remove the data from the back and update counters:
		*dst = cb->buffer[cb->back++];
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	fc 01       	movw	r30, r24
    1704:	20 81       	ld	r18, Z
    1706:	31 81       	ldd	r19, Z+1	; 0x01
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	fc 01       	movw	r30, r24
    170e:	43 81       	ldd	r20, Z+3	; 0x03
    1710:	84 2f       	mov	r24, r20
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	82 0f       	add	r24, r18
    1716:	93 1f       	adc	r25, r19
    1718:	fc 01       	movw	r30, r24
    171a:	20 81       	ld	r18, Z
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	fc 01       	movw	r30, r24
    1722:	20 83       	st	Z, r18
    1724:	24 2f       	mov	r18, r20
    1726:	2f 5f       	subi	r18, 0xFF	; 255
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	fc 01       	movw	r30, r24
    172e:	23 83       	std	Z+3, r18	; 0x03
		cb->count--;
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	fc 01       	movw	r30, r24
    1736:	84 81       	ldd	r24, Z+4	; 0x04
    1738:	28 2f       	mov	r18, r24
    173a:	21 50       	subi	r18, 0x01	; 1
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	fc 01       	movw	r30, r24
    1742:	24 83       	std	Z+4, r18	; 0x04
		
		// Has the back value overflown?
		if (cb->back >= cb->size) {
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	fc 01       	movw	r30, r24
    174a:	23 81       	ldd	r18, Z+3	; 0x03
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	fc 01       	movw	r30, r24
    1752:	85 81       	ldd	r24, Z+5	; 0x05
    1754:	28 17       	cp	r18, r24
    1756:	20 f0       	brcs	.+8      	; 0x1760 <readByteFromCB+0x8a>
			cb->back = 0;
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	fc 01       	movw	r30, r24
    175e:	13 82       	std	Z+3, r1	; 0x03
		}
		
		// Hooray!
		success = true;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
	}

	// Restore the interrupt state:
	cpu_irq_restore(flags);
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	33 df       	rcall	.-410    	; 0x15ce <cpu_irq_restore>
	
	return success;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
}
    176a:	26 96       	adiw	r28, 0x06	; 6
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <readFromCB>:

uint8_t readFromCB(struct CircularBuffer* cb, uint8_t* dst, uint8_t max_count) {
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	26 97       	sbiw	r28, 0x06	; 6
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	9b 83       	std	Y+3, r25	; 0x03
    1788:	6c 83       	std	Y+4, r22	; 0x04
    178a:	7d 83       	std	Y+5, r23	; 0x05
    178c:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t temp = 0;
    178e:	19 82       	std	Y+1, r1	; 0x01
		
	while (temp < max_count && readByteFromCB(cb, dst + temp)) {
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <readFromCB+0x22>
		temp++;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	89 83       	std	Y+1, r24	; 0x01
}

uint8_t readFromCB(struct CircularBuffer* cb, uint8_t* dst, uint8_t max_count) {
	uint8_t temp = 0;
		
	while (temp < max_count && readByteFromCB(cb, dst + temp)) {
    1798:	99 81       	ldd	r25, Y+1	; 0x01
    179a:	8e 81       	ldd	r24, Y+6	; 0x06
    179c:	98 17       	cp	r25, r24
    179e:	68 f4       	brcc	.+26     	; 0x17ba <readFromCB+0x44>
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	2c 81       	ldd	r18, Y+4	; 0x04
    17a8:	3d 81       	ldd	r19, Y+5	; 0x05
    17aa:	28 0f       	add	r18, r24
    17ac:	39 1f       	adc	r19, r25
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	9b 81       	ldd	r25, Y+3	; 0x03
    17b2:	b9 01       	movw	r22, r18
    17b4:	90 df       	rcall	.-224    	; 0x16d6 <readByteFromCB>
    17b6:	88 23       	and	r24, r24
    17b8:	61 f7       	brne	.-40     	; 0x1792 <readFromCB+0x1c>
		temp++;
	}		
		
	return temp;
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    17bc:	26 96       	adiw	r28, 0x06	; 6
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <readStringFromCB>:

bool readStringFromCB(struct CircularBuffer *cb, char* dst, uint8_t max_count) {
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	2a 97       	sbiw	r28, 0x0a	; 10
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	8e 83       	std	Y+6, r24	; 0x06
    17d8:	9f 83       	std	Y+7, r25	; 0x07
    17da:	68 87       	std	Y+8, r22	; 0x08
    17dc:	79 87       	std	Y+9, r23	; 0x09
    17de:	4a 87       	std	Y+10, r20	; 0x0a
	uint8_t temp, idx, count;
	bool found = false;
    17e0:	1b 82       	std	Y+3, r1	; 0x03
	// Save the interrupt state and disable interrupts:
	irqflags_t flags = cpu_irq_save();
    17e2:	e5 de       	rcall	.-566    	; 0x15ae <cpu_irq_save>
    17e4:	8c 83       	std	Y+4, r24	; 0x04
	
	// Start at the back for the circular buffer:
	idx = cb->back;
    17e6:	8e 81       	ldd	r24, Y+6	; 0x06
    17e8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ea:	fc 01       	movw	r30, r24
    17ec:	83 81       	ldd	r24, Z+3	; 0x03
    17ee:	8a 83       	std	Y+2, r24	; 0x02
	
	// Pick the minimum search area:
	count = MIN(cb->count, max_count);
    17f0:	8e 81       	ldd	r24, Y+6	; 0x06
    17f2:	9f 81       	ldd	r25, Y+7	; 0x07
    17f4:	fc 01       	movw	r30, r24
    17f6:	94 81       	ldd	r25, Z+4	; 0x04
    17f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fa:	98 17       	cp	r25, r24
    17fc:	28 f4       	brcc	.+10     	; 0x1808 <readStringFromCB+0x40>
    17fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1800:	9f 81       	ldd	r25, Y+7	; 0x07
    1802:	fc 01       	movw	r30, r24
    1804:	84 81       	ldd	r24, Z+4	; 0x04
    1806:	01 c0       	rjmp	.+2      	; 0x180a <readStringFromCB+0x42>
    1808:	8a 85       	ldd	r24, Y+10	; 0x0a
    180a:	8d 83       	std	Y+5, r24	; 0x05
	
	// Search for the first CB_STRING_TERMINATOR:
	for (temp = 0; temp < count; temp++) {
    180c:	19 82       	std	Y+1, r1	; 0x01
    180e:	1f c0       	rjmp	.+62     	; 0x184e <readStringFromCB+0x86>
		// Has it been found?
		if (cb->buffer[idx] == CB_STRING_TERMINATOR) {
    1810:	8e 81       	ldd	r24, Y+6	; 0x06
    1812:	9f 81       	ldd	r25, Y+7	; 0x07
    1814:	fc 01       	movw	r30, r24
    1816:	20 81       	ld	r18, Z
    1818:	31 81       	ldd	r19, Z+1	; 0x01
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	82 0f       	add	r24, r18
    1822:	93 1f       	adc	r25, r19
    1824:	fc 01       	movw	r30, r24
    1826:	80 81       	ld	r24, Z
    1828:	88 23       	and	r24, r24
    182a:	19 f4       	brne	.+6      	; 0x1832 <readStringFromCB+0x6a>
			// Then stop searching:
			found = true;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	8b 83       	std	Y+3, r24	; 0x03
			break;
    1830:	12 c0       	rjmp	.+36     	; 0x1856 <readStringFromCB+0x8e>
		}
		
		// Increment:
		idx++;
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	8a 83       	std	Y+2, r24	; 0x02
		if (idx >= cb->size) {
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	9f 81       	ldd	r25, Y+7	; 0x07
    183c:	fc 01       	movw	r30, r24
    183e:	95 81       	ldd	r25, Z+5	; 0x05
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	89 17       	cp	r24, r25
    1844:	08 f0       	brcs	.+2      	; 0x1848 <readStringFromCB+0x80>
			idx = 0;
    1846:	1a 82       	std	Y+2, r1	; 0x02
	
	// Pick the minimum search area:
	count = MIN(cb->count, max_count);
	
	// Search for the first CB_STRING_TERMINATOR:
	for (temp = 0; temp < count; temp++) {
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	99 81       	ldd	r25, Y+1	; 0x01
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	98 17       	cp	r25, r24
    1854:	e8 f2       	brcs	.-70     	; 0x1810 <readStringFromCB+0x48>
			idx = 0;
		}
	}

	// Restore the interrupt state:
	cpu_irq_restore(flags);
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	ba de       	rcall	.-652    	; 0x15ce <cpu_irq_restore>
	
	// Make sure there is room for the terminator:
	found &= (temp + 1) < max_count;
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	ac 01       	movw	r20, r24
    1868:	4f 5f       	subi	r20, 0xFF	; 255
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	8a 85       	ldd	r24, Y+10	; 0x0a
    186e:	88 2f       	mov	r24, r24
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	48 17       	cp	r20, r24
    1876:	59 07       	cpc	r21, r25
    1878:	0c f0       	brlt	.+2      	; 0x187c <readStringFromCB+0xb4>
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	86 2f       	mov	r24, r22
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	82 23       	and	r24, r18
    1882:	93 23       	and	r25, r19
    1884:	21 e0       	ldi	r18, 0x01	; 1
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	09 f4       	brne	.+2      	; 0x188c <readStringFromCB+0xc4>
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	2b 83       	std	Y+3, r18	; 0x03
	
	// Read the line:
	if (found) {
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	88 23       	and	r24, r24
    1892:	49 f0       	breq	.+18     	; 0x18a6 <readStringFromCB+0xde>
		readFromCB(cb, dst, temp + 1);
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	48 2f       	mov	r20, r24
    1898:	4f 5f       	subi	r20, 0xFF	; 255
    189a:	28 85       	ldd	r18, Y+8	; 0x08
    189c:	39 85       	ldd	r19, Y+9	; 0x09
    189e:	8e 81       	ldd	r24, Y+6	; 0x06
    18a0:	9f 81       	ldd	r25, Y+7	; 0x07
    18a2:	b9 01       	movw	r22, r18
    18a4:	68 df       	rcall	.-304    	; 0x1776 <readFromCB>
	}
	
	return found;
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18a8:	2a 96       	adiw	r28, 0x0a	; 10
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <ioport_set_pin_level>:
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	2b 97       	sbiw	r28, 0x0b	; 11
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	8a 87       	std	Y+10, r24	; 0x0a
    18c4:	6b 87       	std	Y+11, r22	; 0x0b
    18c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    18cc:	8a 83       	std	Y+2, r24	; 0x02
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	8b 83       	std	Y+3, r24	; 0x03
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	8c 83       	std	Y+4, r24	; 0x04
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	86 95       	lsr	r24
    18da:	86 95       	lsr	r24
    18dc:	86 95       	lsr	r24
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	8d 81       	ldd	r24, Y+5	; 0x05
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	82 95       	swap	r24
    18ec:	92 95       	swap	r25
    18ee:	90 7f       	andi	r25, 0xF0	; 240
    18f0:	98 27       	eor	r25, r24
    18f2:	80 7f       	andi	r24, 0xF0	; 240
    18f4:	98 27       	eor	r25, r24
    18f6:	9a 5f       	subi	r25, 0xFA	; 250
    18f8:	8e 83       	std	Y+6, r24	; 0x06
    18fa:	9f 83       	std	Y+7, r25	; 0x07
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	88 23       	and	r24, r24
    1900:	a9 f0       	breq	.+42     	; 0x192c <ioport_set_pin_level+0x78>
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	88 87       	std	Y+8, r24	; 0x08
    1906:	88 85       	ldd	r24, Y+8	; 0x08
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 01       	movw	r18, r24
    190e:	27 70       	andi	r18, 0x07	; 7
    1910:	33 27       	eor	r19, r19
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <ioport_set_pin_level+0x68>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	2a 95       	dec	r18
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <ioport_set_pin_level+0x64>
    1920:	28 2f       	mov	r18, r24
    1922:	8e 81       	ldd	r24, Y+6	; 0x06
    1924:	9f 81       	ldd	r25, Y+7	; 0x07
    1926:	fc 01       	movw	r30, r24
    1928:	25 83       	std	Z+5, r18	; 0x05
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <ioport_set_pin_level+0xa0>
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	89 87       	std	Y+9, r24	; 0x09
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 01       	movw	r18, r24
    1938:	27 70       	andi	r18, 0x07	; 7
    193a:	33 27       	eor	r19, r19
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <ioport_set_pin_level+0x92>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	2a 95       	dec	r18
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <ioport_set_pin_level+0x8e>
    194a:	28 2f       	mov	r18, r24
    194c:	8e 81       	ldd	r24, Y+6	; 0x06
    194e:	9f 81       	ldd	r25, Y+7	; 0x07
    1950:	fc 01       	movw	r30, r24
    1952:	26 83       	std	Z+6, r18	; 0x06
    1954:	2b 96       	adiw	r28, 0x0b	; 11
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <reset_do_soft_reset>:
{
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	89 e7       	ldi	r24, 0x79	; 121
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <ccp_write_io>

	while (1) {
		/* Intentionally empty. */
	}
    1972:	ff cf       	rjmp	.-2      	; 0x1972 <reset_do_soft_reset+0x12>

00001974 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1974:	61 50       	subi	r22, 0x01	; 1
    1976:	71 09       	sbc	r23, r1
    1978:	81 09       	sbc	r24, r1
    197a:	91 09       	sbc	r25, r1
    197c:	d9 f7       	brne	.-10     	; 0x1974 <__portable_avr_delay_cycles>
}
    197e:	08 95       	ret

00001980 <byteToASCIIHex>:

// Local "pointers" for the working sets:
static uint8_t ghAddr;
static uint8_t ccAddr;

void byteToASCIIHex(const uint8_t b, char* high, char* low) {
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	25 97       	sbiw	r28, 0x05	; 5
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	6a 83       	std	Y+2, r22	; 0x02
    1992:	7b 83       	std	Y+3, r23	; 0x03
    1994:	4c 83       	std	Y+4, r20	; 0x04
    1996:	5d 83       	std	Y+5, r21	; 0x05
	*low = b & 0x0F;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	28 2f       	mov	r18, r24
    199c:	2f 70       	andi	r18, 0x0F	; 15
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
    19a0:	9d 81       	ldd	r25, Y+5	; 0x05
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18
	*high = (b>>4) & 0x0F;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	82 95       	swap	r24
    19aa:	8f 70       	andi	r24, 0x0F	; 15
    19ac:	28 2f       	mov	r18, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	9b 81       	ldd	r25, Y+3	; 0x03
    19b2:	fc 01       	movw	r30, r24
    19b4:	20 83       	st	Z, r18
	
	if (*low > 9) {
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ba:	fc 01       	movw	r30, r24
    19bc:	80 81       	ld	r24, Z
    19be:	8a 30       	cpi	r24, 0x0A	; 10
    19c0:	5c f0       	brlt	.+22     	; 0x19d8 <byteToASCIIHex+0x58>
		*low = 'a' + *low - 0x0A;
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	9d 81       	ldd	r25, Y+5	; 0x05
    19c6:	fc 01       	movw	r30, r24
    19c8:	80 81       	ld	r24, Z
    19ca:	89 5a       	subi	r24, 0xA9	; 169
    19cc:	28 2f       	mov	r18, r24
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	9d 81       	ldd	r25, Y+5	; 0x05
    19d2:	fc 01       	movw	r30, r24
    19d4:	20 83       	st	Z, r18
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <byteToASCIIHex+0x6c>
	}
	else {
		*low = '0' + *low;
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	fc 01       	movw	r30, r24
    19de:	80 81       	ld	r24, Z
    19e0:	80 5d       	subi	r24, 0xD0	; 208
    19e2:	28 2f       	mov	r18, r24
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	9d 81       	ldd	r25, Y+5	; 0x05
    19e8:	fc 01       	movw	r30, r24
    19ea:	20 83       	st	Z, r18
	}

	if (*high > 9) {
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	9b 81       	ldd	r25, Y+3	; 0x03
    19f0:	fc 01       	movw	r30, r24
    19f2:	80 81       	ld	r24, Z
    19f4:	8a 30       	cpi	r24, 0x0A	; 10
    19f6:	5c f0       	brlt	.+22     	; 0x1a0e <byteToASCIIHex+0x8e>
		*high = 'a' + *high - 0x0A;
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	9b 81       	ldd	r25, Y+3	; 0x03
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	89 5a       	subi	r24, 0xA9	; 169
    1a02:	28 2f       	mov	r18, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	fc 01       	movw	r30, r24
    1a0a:	20 83       	st	Z, r18
    1a0c:	0a c0       	rjmp	.+20     	; 0x1a22 <byteToASCIIHex+0xa2>
	}
	else {
		*high = '0' + *high;
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	9b 81       	ldd	r25, Y+3	; 0x03
    1a12:	fc 01       	movw	r30, r24
    1a14:	80 81       	ld	r24, Z
    1a16:	80 5d       	subi	r24, 0xD0	; 208
    1a18:	28 2f       	mov	r18, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1e:	fc 01       	movw	r30, r24
    1a20:	20 83       	st	Z, r18
	}
}
    1a22:	25 96       	adiw	r28, 0x05	; 5
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <ASCIIHexToByte>:

uint8_t ASCIIHexToByte(char high, char low) {
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <ASCIIHexToByte+0x6>
    1a34:	1f 92       	push	r1
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
    1a3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t temp;
	
	// Make high and low lower case:
	high |= 0x20;
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	80 62       	ori	r24, 0x20	; 32
    1a42:	8a 83       	std	Y+2, r24	; 0x02
	low  |= 0x20;
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	80 62       	ori	r24, 0x20	; 32
    1a48:	8b 83       	std	Y+3, r24	; 0x03
	
	if (high >= 'a') {
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	81 36       	cpi	r24, 0x61	; 97
    1a4e:	24 f0       	brlt	.+8      	; 0x1a58 <ASCIIHexToByte+0x2a>
		temp = 0x0A + high - 'a';
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	87 55       	subi	r24, 0x57	; 87
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	03 c0       	rjmp	.+6      	; 0x1a5e <ASCIIHexToByte+0x30>
	}
	else {
		temp = high - '0';
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	80 53       	subi	r24, 0x30	; 48
    1a5c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	temp <<= 4;
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	82 95       	swap	r24
    1a62:	80 7f       	andi	r24, 0xF0	; 240
    1a64:	89 83       	std	Y+1, r24	; 0x01
	
	if (low >= 'a') {
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	81 36       	cpi	r24, 0x61	; 97
    1a6a:	34 f0       	brlt	.+12     	; 0x1a78 <ASCIIHexToByte+0x4a>
		temp += 0x0A + low - 'a';
    1a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	89 0f       	add	r24, r25
    1a72:	87 55       	subi	r24, 0x57	; 87
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <ASCIIHexToByte+0x54>
	}
	else {
		temp += low - '0';
    1a78:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	89 0f       	add	r24, r25
    1a7e:	80 53       	subi	r24, 0x30	; 48
    1a80:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return temp;
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a84:	23 96       	adiw	r28, 0x03	; 3
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <processComm>:

void processComm(void) {
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	c5 54       	subi	r28, 0x45	; 69
    1a9a:	d1 09       	sbc	r29, r1
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	de bf       	out	0x3e, r29	; 62
	uint8_t i;
	char str[USB_SERIAL_RX_BUFFER_SIZE];
	char cmd[3];
	bool match = false;
    1aa0:	1a 82       	std	Y+2, r1	; 0x02
	
	// Was a string transmitted?
	if (recvUSBString(str, USB_SERIAL_RX_BUFFER_SIZE)) {
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	03 96       	adiw	r24, 0x03	; 3
    1aa6:	60 e4       	ldi	r22, 0x40	; 64
    1aa8:	0e 94 bb 28 	call	0x5176	; 0x5176 <recvUSBString>
    1aac:	88 23       	and	r24, r24
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <processComm+0x22>
    1ab0:	6f c0       	rjmp	.+222    	; 0x1b90 <processComm+0x100>
		cmd[0] = str[0];
    1ab2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	8d 5b       	subi	r24, 0xBD	; 189
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	fc 01       	movw	r30, r24
    1abc:	20 83       	st	Z, r18
		cmd[1] = str[1];
    1abe:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	8d 5b       	subi	r24, 0xBD	; 189
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	21 83       	std	Z+1, r18	; 0x01
		cmd[2] = '\0';
    1aca:	ce 01       	movw	r24, r28
    1acc:	8d 5b       	subi	r24, 0xBD	; 189
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	12 82       	std	Z+2, r1	; 0x02
		sendDBGLine("USB:rcv" + *cmd);
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	8d 5b       	subi	r24, 0xBD	; 189
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	fc 01       	movw	r30, r24
    1adc:	80 81       	ld	r24, Z
    1ade:	99 27       	eor	r25, r25
    1ae0:	87 fd       	sbrc	r24, 7
    1ae2:	90 95       	com	r25
    1ae4:	8e 54       	subi	r24, 0x4E	; 78
    1ae6:	9f 4d       	sbci	r25, 0xDF	; 223
    1ae8:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
		// Search for the command:
		for (i = 0; i < NUM_COMMANDS; i++) {
    1aec:	19 82       	std	Y+1, r1	; 0x01
    1aee:	3d c0       	rjmp	.+122    	; 0x1b6a <processComm+0xda>
			// Is this a match?
			if (0 == strcmp(COMMANDS[i].CMD, cmd)) {
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	88 56       	subi	r24, 0x68	; 104
    1b00:	9d 4d       	sbci	r25, 0xDD	; 221
    1b02:	fc 01       	movw	r30, r24
    1b04:	80 81       	ld	r24, Z
    1b06:	91 81       	ldd	r25, Z+1	; 0x01
    1b08:	9e 01       	movw	r18, r28
    1b0a:	2d 5b       	subi	r18, 0xBD	; 189
    1b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0e:	b9 01       	movw	r22, r18
    1b10:	0e 94 76 48 	call	0x90ec	; 0x90ec <strcmp>
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	31 f5       	brne	.+76     	; 0x1b64 <processComm+0xd4>
				sendDBGString("Command match ");
    1b18:	8a eb       	ldi	r24, 0xBA	; 186
    1b1a:	90 e2       	ldi	r25, 0x20	; 32
    1b1c:	0e 94 93 20 	call	0x4126	; 0x4126 <sendDBGString>
				sendDBGLine(COMMANDS[i].CMD);
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	88 56       	subi	r24, 0x68	; 104
    1b30:	9d 4d       	sbci	r25, 0xDD	; 221
    1b32:	fc 01       	movw	r30, r24
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
				// Then execute the command passing it the rest of the string:
				match = true;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	8a 83       	std	Y+2, r24	; 0x02
				COMMANDS[i].action(str+2);
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	86 56       	subi	r24, 0x66	; 102
    1b50:	9d 4d       	sbci	r25, 0xDD	; 221
    1b52:	fc 01       	movw	r30, r24
    1b54:	20 81       	ld	r18, Z
    1b56:	31 81       	ldd	r19, Z+1	; 0x01
    1b58:	ce 01       	movw	r24, r28
    1b5a:	03 96       	adiw	r24, 0x03	; 3
    1b5c:	02 96       	adiw	r24, 0x02	; 2
    1b5e:	f9 01       	movw	r30, r18
    1b60:	09 95       	icall
				break;
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <processComm+0xe2>
		cmd[0] = str[0];
		cmd[1] = str[1];
		cmd[2] = '\0';
		sendDBGLine("USB:rcv" + *cmd);
		// Search for the command:
		for (i = 0; i < NUM_COMMANDS; i++) {
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	8b 30       	cpi	r24, 0x0B	; 11
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <processComm+0xe2>
    1b70:	bf cf       	rjmp	.-130    	; 0x1af0 <processComm+0x60>
				break;
			}
		}
		
		// If the command was not found, Then send a NO:
		if (!match) {
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	89 27       	eor	r24, r25
    1b78:	88 23       	and	r24, r24
    1b7a:	51 f0       	breq	.+20     	; 0x1b90 <processComm+0x100>
			sendDBGString("No command matching ");
    1b7c:	89 ec       	ldi	r24, 0xC9	; 201
    1b7e:	90 e2       	ldi	r25, 0x20	; 32
    1b80:	0e 94 93 20 	call	0x4126	; 0x4126 <sendDBGString>
			sendDBGLine(cmd);
    1b84:	ce 01       	movw	r24, r28
    1b86:	8d 5b       	subi	r24, 0xBD	; 189
    1b88:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8a:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
			sendCommNO();
    1b8e:	13 d0       	rcall	.+38     	; 0x1bb6 <sendCommNO>
		}
	}
}
    1b90:	cb 5b       	subi	r28, 0xBB	; 187
    1b92:	df 4f       	sbci	r29, 0xFF	; 255
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <sendCommOK>:

void sendCommOK(void) {
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	sendUSBString("OK", true);
    1ba6:	61 e0       	ldi	r22, 0x01	; 1
    1ba8:	8e ed       	ldi	r24, 0xDE	; 222
    1baa:	90 e2       	ldi	r25, 0x20	; 32
    1bac:	0e 94 80 28 	call	0x5100	; 0x5100 <sendUSBString>
}
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <sendCommNO>:

void sendCommNO(void) {
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
	sendUSBString("NO", true);
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	81 ee       	ldi	r24, 0xE1	; 225
    1bc2:	90 e2       	ldi	r25, 0x20	; 32
    1bc4:	0e 94 80 28 	call	0x5100	; 0x5100 <sendUSBString>
}
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <commRG>:

void commRG(char* args) {
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	25 97       	sbiw	r28, 0x05	; 5
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	8c 83       	std	Y+4, r24	; 0x04
    1bde:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t i;
	char high, low;
	
	// Read the global header:
	readGlobalHeader(&ghTemp);
    1be0:	89 e8       	ldi	r24, 0x89	; 137
    1be2:	96 e2       	ldi	r25, 0x26	; 38
    1be4:	39 d2       	rcall	.+1138   	; 0x2058 <readGlobalHeader>
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct GlobalHeader); i++) {
    1be6:	19 82       	std	Y+1, r1	; 0x01
    1be8:	19 c0       	rjmp	.+50     	; 0x1c1c <commRG+0x4e>
		byteToASCIIHex(((uint8_t*)&ghTemp)[i], &high, &low);
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	87 57       	subi	r24, 0x77	; 119
    1bf2:	99 4d       	sbci	r25, 0xD9	; 217
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	ec 91       	ld	r30, X
    1bf8:	9e 01       	movw	r18, r28
    1bfa:	2d 5f       	subi	r18, 0xFD	; 253
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	ce 01       	movw	r24, r28
    1c00:	02 96       	adiw	r24, 0x02	; 2
    1c02:	a9 01       	movw	r20, r18
    1c04:	bc 01       	movw	r22, r24
    1c06:	8e 2f       	mov	r24, r30
    1c08:	bb de       	rcall	.-650    	; 0x1980 <byteToASCIIHex>
		sendUSBChar(high);
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	0e 94 67 28 	call	0x50ce	; 0x50ce <sendUSBChar>
		sendUSBChar(low);
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	0e 94 67 28 	call	0x50ce	; 0x50ce <sendUSBChar>
	
	// Read the global header:
	readGlobalHeader(&ghTemp);
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct GlobalHeader); i++) {
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	88 30       	cpi	r24, 0x08	; 8
    1c20:	20 f3       	brcs	.-56     	; 0x1bea <commRG+0x1c>
		sendUSBChar(high);
		sendUSBChar(low);
	}
	
	// Add the terminator:
	sendUSBChar('\0');
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0e 94 67 28 	call	0x50ce	; 0x50ce <sendUSBChar>
	
	// Send an OK:
	sendCommOK();
    1c28:	ba df       	rcall	.-140    	; 0x1b9e <sendCommOK>
	
	// Reset the working copy address:
	ghAddr = 0;
    1c2a:	10 92 4e 27 	sts	0x274E, r1
}
    1c2e:	25 96       	adiw	r28, 0x05	; 5
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	08 95       	ret

00001c3a <commAG>:

void commAG(char* args) {
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <commAG+0x6>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	9a 83       	std	Y+2, r25	; 0x02
	// Check for the argument:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	80 81       	ld	r24, Z
    1c50:	88 23       	and	r24, r24
    1c52:	71 f0       	breq	.+28     	; 0x1c70 <commAG+0x36>
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	01 96       	adiw	r24, 0x01	; 1
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	39 f0       	breq	.+14     	; 0x1c70 <commAG+0x36>
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	02 96       	adiw	r24, 0x02	; 2
    1c68:	fc 01       	movw	r30, r24
    1c6a:	80 81       	ld	r24, Z
    1c6c:	88 23       	and	r24, r24
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <commAG+0x3a>
		sendCommNO();
    1c70:	a2 df       	rcall	.-188    	; 0x1bb6 <sendCommNO>
    1c72:	0e c0       	rjmp	.+28     	; 0x1c90 <commAG+0x56>
	}
	else {
		// Set the new address:
		ghAddr = ASCIIHexToByte(args[0], args[1]);
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	20 81       	ld	r18, Z
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	fc 01       	movw	r30, r24
    1c84:	80 81       	ld	r24, Z
    1c86:	62 2f       	mov	r22, r18
    1c88:	d2 de       	rcall	.-604    	; 0x1a2e <ASCIIHexToByte>
    1c8a:	80 93 4e 27 	sts	0x274E, r24
		
		// Send an OK:
		sendCommOK();
    1c8e:	87 df       	rcall	.-242    	; 0x1b9e <sendCommOK>
	}
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	08 95       	ret

00001c9a <commWG>:

void commWG(char* args) {
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <commWG+0xc>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <commWG+0xe>
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    1cae:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t length;
	uint8_t temp = 0;
    1cb0:	19 82       	std	Y+1, r1	; 0x01
	
	// How much data is being written?
	length = strlen(args);
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	0e 94 7f 48 	call	0x90fe	; 0x90fe <strlen>
    1cba:	8a 83       	std	Y+2, r24	; 0x02
	
	// Length must be an even number since it represents ASCII coded hex.
	if ((length & 1) == 1) {
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	81 70       	andi	r24, 0x01	; 1
    1cc4:	99 27       	eor	r25, r25
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	39 f1       	breq	.+78     	; 0x1d18 <commWG+0x7e>
		sendCommNO();
    1cca:	75 df       	rcall	.-278    	; 0x1bb6 <sendCommNO>
		return;
    1ccc:	34 c0       	rjmp	.+104    	; 0x1d36 <commWG+0x9c>
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ghAddr < sizeof(struct GlobalHeader)) {
		((uint8_t*)&ghTemp)[ghAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
    1cce:	f0 90 4e 27 	lds	r15, 0x274E
    1cd2:	8f 2d       	mov	r24, r15
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	8c 01       	movw	r16, r24
    1cd8:	07 57       	subi	r16, 0x77	; 119
    1cda:	19 4d       	sbci	r17, 0xD9	; 217
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce8:	82 0f       	add	r24, r18
    1cea:	93 1f       	adc	r25, r19
    1cec:	fc 01       	movw	r30, r24
    1cee:	40 81       	ld	r20, Z
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	fc 01       	movw	r30, r24
    1d00:	80 81       	ld	r24, Z
    1d02:	64 2f       	mov	r22, r20
    1d04:	94 de       	rcall	.-728    	; 0x1a2e <ASCIIHexToByte>
    1d06:	f8 01       	movw	r30, r16
    1d08:	80 83       	st	Z, r24
    1d0a:	8f 2d       	mov	r24, r15
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	80 93 4e 27 	sts	0x274E, r24
		temp += 2;
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	8e 5f       	subi	r24, 0xFE	; 254
    1d16:	89 83       	std	Y+1, r24	; 0x01
		sendCommNO();
		return;
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ghAddr < sizeof(struct GlobalHeader)) {
    1d18:	99 81       	ldd	r25, Y+1	; 0x01
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	98 17       	cp	r25, r24
    1d1e:	20 f4       	brcc	.+8      	; 0x1d28 <commWG+0x8e>
    1d20:	80 91 4e 27 	lds	r24, 0x274E
    1d24:	88 30       	cpi	r24, 0x08	; 8
    1d26:	98 f2       	brcs	.-90     	; 0x1cce <commWG+0x34>
		((uint8_t*)&ghTemp)[ghAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
		temp += 2;
	}
	
	// Did the copy complete?
	if (temp == length) {
    1d28:	99 81       	ldd	r25, Y+1	; 0x01
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	98 17       	cp	r25, r24
    1d2e:	11 f4       	brne	.+4      	; 0x1d34 <commWG+0x9a>
		sendCommOK();
    1d30:	36 df       	rcall	.-404    	; 0x1b9e <sendCommOK>
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <commWG+0x9c>
	}
	else {
		sendCommNO();
    1d34:	40 df       	rcall	.-384    	; 0x1bb6 <sendCommNO>
	}
}
    1d36:	24 96       	adiw	r28, 0x04	; 4
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	ff 90       	pop	r15
    1d46:	08 95       	ret

00001d48 <commSG>:

void commSG(char* args) {
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <commSG+0x6>
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t i;
	char high, low;
	
	// Read the global header:
	writeGlobalHeader(&ghTemp);
    1d56:	89 e8       	ldi	r24, 0x89	; 137
    1d58:	96 e2       	ldi	r25, 0x26	; 38
    1d5a:	93 d1       	rcall	.+806    	; 0x2082 <writeGlobalHeader>
	
	// Send an OK:
	sendCommOK();
    1d5c:	20 df       	rcall	.-448    	; 0x1b9e <sendCommOK>
	
	// Reset the working copy address:
	ghAddr = 0;
    1d5e:	10 92 4e 27 	sts	0x274E, r1
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <commRC>:

void commRC(char* args) {
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	26 97       	sbiw	r28, 0x06	; 6
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
	uint8_t i, which;
	char high, low;
	
	// Check for the argument and terminator:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	dc 01       	movw	r26, r24
    1d84:	8c 91       	ld	r24, X
    1d86:	88 23       	and	r24, r24
    1d88:	71 f0       	breq	.+28     	; 0x1da6 <commRC+0x3a>
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	fc 01       	movw	r30, r24
    1d92:	80 81       	ld	r24, Z
    1d94:	88 23       	and	r24, r24
    1d96:	39 f0       	breq	.+14     	; 0x1da6 <commRC+0x3a>
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	02 96       	adiw	r24, 0x02	; 2
    1d9e:	dc 01       	movw	r26, r24
    1da0:	8c 91       	ld	r24, X
    1da2:	88 23       	and	r24, r24
    1da4:	11 f0       	breq	.+4      	; 0x1daa <commRC+0x3e>
		sendCommNO();
    1da6:	07 df       	rcall	.-498    	; 0x1bb6 <sendCommNO>
    1da8:	34 c0       	rjmp	.+104    	; 0x1e12 <commRC+0xa6>
		return;
	}
	
	// Get the argument:
	which = ASCIIHexToByte(args[0], args[1]);
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	fc 01       	movw	r30, r24
    1db2:	20 81       	ld	r18, Z
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	dc 01       	movw	r26, r24
    1dba:	8c 91       	ld	r24, X
    1dbc:	62 2f       	mov	r22, r18
    1dbe:	37 de       	rcall	.-914    	; 0x1a2e <ASCIIHexToByte>
    1dc0:	8a 83       	std	Y+2, r24	; 0x02
	
	// Read the controller configuration:
	readControllerConfig(which, &ccTemp);
    1dc2:	61 e9       	ldi	r22, 0x91	; 145
    1dc4:	76 e2       	ldi	r23, 0x26	; 38
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	71 d1       	rcall	.+738    	; 0x20ac <readControllerConfig>
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct ControllerConfiguration); i++) {
    1dca:	19 82       	std	Y+1, r1	; 0x01
    1dcc:	19 c0       	rjmp	.+50     	; 0x1e00 <commRC+0x94>
		byteToASCIIHex(((uint8_t*)&ccTemp)[i], &high, &low);
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	8f 56       	subi	r24, 0x6F	; 111
    1dd6:	99 4d       	sbci	r25, 0xD9	; 217
    1dd8:	dc 01       	movw	r26, r24
    1dda:	ec 91       	ld	r30, X
    1ddc:	9e 01       	movw	r18, r28
    1dde:	2c 5f       	subi	r18, 0xFC	; 252
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	ce 01       	movw	r24, r28
    1de4:	03 96       	adiw	r24, 0x03	; 3
    1de6:	a9 01       	movw	r20, r18
    1de8:	bc 01       	movw	r22, r24
    1dea:	8e 2f       	mov	r24, r30
    1dec:	c9 dd       	rcall	.-1134   	; 0x1980 <byteToASCIIHex>
		sendUSBChar(high);
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	0e 94 67 28 	call	0x50ce	; 0x50ce <sendUSBChar>
		sendUSBChar(low);
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	0e 94 67 28 	call	0x50ce	; 0x50ce <sendUSBChar>
	
	// Read the controller configuration:
	readControllerConfig(which, &ccTemp);
	
	// Write each ASCII byte:
	for (i = 0; i < sizeof(struct ControllerConfiguration); i++) {
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	8f 5f       	subi	r24, 0xFF	; 255
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	8d 3b       	cpi	r24, 0xBD	; 189
    1e04:	20 f3       	brcs	.-56     	; 0x1dce <commRC+0x62>
		sendUSBChar(high);
		sendUSBChar(low);
	}
	
	// Add the terminator:
	sendUSBChar('\0');
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	0e 94 67 28 	call	0x50ce	; 0x50ce <sendUSBChar>
	
	// Send an OK:
	sendCommOK();
    1e0c:	c8 de       	rcall	.-624    	; 0x1b9e <sendCommOK>
	
	// Reset the working copy address:
	ccAddr = 0;
    1e0e:	10 92 4f 27 	sts	0x274F, r1
}
    1e12:	26 96       	adiw	r28, 0x06	; 6
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <commAC>:

void commAC(char* args) {
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <commAC+0x6>
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
	// Check for the argument:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	fc 01       	movw	r30, r24
    1e32:	80 81       	ld	r24, Z
    1e34:	88 23       	and	r24, r24
    1e36:	71 f0       	breq	.+28     	; 0x1e54 <commAC+0x36>
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	fc 01       	movw	r30, r24
    1e40:	80 81       	ld	r24, Z
    1e42:	88 23       	and	r24, r24
    1e44:	39 f0       	breq	.+14     	; 0x1e54 <commAC+0x36>
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	02 96       	adiw	r24, 0x02	; 2
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 23       	and	r24, r24
    1e52:	11 f0       	breq	.+4      	; 0x1e58 <commAC+0x3a>
		sendCommNO();
    1e54:	b0 de       	rcall	.-672    	; 0x1bb6 <sendCommNO>
    1e56:	0e c0       	rjmp	.+28     	; 0x1e74 <commAC+0x56>
	}
	else {
		// Set the new address:
		ccAddr = ASCIIHexToByte(args[0], args[1]);
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	fc 01       	movw	r30, r24
    1e60:	20 81       	ld	r18, Z
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	fc 01       	movw	r30, r24
    1e68:	80 81       	ld	r24, Z
    1e6a:	62 2f       	mov	r22, r18
    1e6c:	e0 dd       	rcall	.-1088   	; 0x1a2e <ASCIIHexToByte>
    1e6e:	80 93 4f 27 	sts	0x274F, r24
	
		// Send an OK:
		sendCommOK();
    1e72:	95 de       	rcall	.-726    	; 0x1b9e <sendCommOK>
	}
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	08 95       	ret

00001e7e <commWC>:

void commWC(char* args) {
    1e7e:	ff 92       	push	r15
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <commWC+0xc>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <commWC+0xe>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	8b 83       	std	Y+3, r24	; 0x03
    1e92:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t length;
	uint8_t temp = 0;
    1e94:	19 82       	std	Y+1, r1	; 0x01
	
	// How much data is being written?
	length = strlen(args);
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	0e 94 7f 48 	call	0x90fe	; 0x90fe <strlen>
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
	
	// Length must be an even number since it represents ASCII coded hex.
	if ((length & 1) == 1) {
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	81 70       	andi	r24, 0x01	; 1
    1ea8:	99 27       	eor	r25, r25
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	39 f1       	breq	.+78     	; 0x1efc <commWC+0x7e>
		sendCommNO();
    1eae:	83 de       	rcall	.-762    	; 0x1bb6 <sendCommNO>
		return;
    1eb0:	34 c0       	rjmp	.+104    	; 0x1f1a <commWC+0x9c>
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ccAddr < sizeof(struct ControllerConfiguration)) {
		((uint8_t*)&ccTemp)[ccAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
    1eb2:	f0 90 4f 27 	lds	r15, 0x274F
    1eb6:	8f 2d       	mov	r24, r15
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	8c 01       	movw	r16, r24
    1ebc:	0f 56       	subi	r16, 0x6F	; 111
    1ebe:	19 4d       	sbci	r17, 0xD9	; 217
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	82 0f       	add	r24, r18
    1ece:	93 1f       	adc	r25, r19
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	40 81       	ld	r20, Z
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	2b 81       	ldd	r18, Y+3	; 0x03
    1edc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ede:	82 0f       	add	r24, r18
    1ee0:	93 1f       	adc	r25, r19
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	80 81       	ld	r24, Z
    1ee6:	64 2f       	mov	r22, r20
    1ee8:	a2 dd       	rcall	.-1212   	; 0x1a2e <ASCIIHexToByte>
    1eea:	f8 01       	movw	r30, r16
    1eec:	80 83       	st	Z, r24
    1eee:	8f 2d       	mov	r24, r15
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	80 93 4f 27 	sts	0x274F, r24
		temp += 2;
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	8e 5f       	subi	r24, 0xFE	; 254
    1efa:	89 83       	std	Y+1, r24	; 0x01
		sendCommNO();
		return;
	}
	
	// Translate the ASCII to hex and write it to the working copy as long as there is room:
	while (temp < length && ccAddr < sizeof(struct ControllerConfiguration)) {
    1efc:	99 81       	ldd	r25, Y+1	; 0x01
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	98 17       	cp	r25, r24
    1f02:	20 f4       	brcc	.+8      	; 0x1f0c <commWC+0x8e>
    1f04:	80 91 4f 27 	lds	r24, 0x274F
    1f08:	8d 3b       	cpi	r24, 0xBD	; 189
    1f0a:	98 f2       	brcs	.-90     	; 0x1eb2 <commWC+0x34>
		((uint8_t*)&ccTemp)[ccAddr++] = ASCIIHexToByte(args[temp], args[temp+1]);
		temp += 2;
	}
	
	// Did the copy complete?
	if (temp == length) {
    1f0c:	99 81       	ldd	r25, Y+1	; 0x01
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	98 17       	cp	r25, r24
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <commWC+0x9a>
		sendCommOK();
    1f14:	44 de       	rcall	.-888    	; 0x1b9e <sendCommOK>
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <commWC+0x9c>
	}
	else {
		sendCommNO();
    1f18:	4e de       	rcall	.-868    	; 0x1bb6 <sendCommNO>
	}
}
    1f1a:	24 96       	adiw	r28, 0x04	; 4
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	08 95       	ret

00001f2c <commSC>:

void commSC(char* args) {
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <commSC+0x6>
    1f32:	1f 92       	push	r1
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    1f3a:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t which;
	
	// Check for the argument and terminator:
	if (args[0] == '\0' || args[1] == '\0' || args[2] != '\0') {
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f40:	fc 01       	movw	r30, r24
    1f42:	80 81       	ld	r24, Z
    1f44:	88 23       	and	r24, r24
    1f46:	71 f0       	breq	.+28     	; 0x1f64 <commSC+0x38>
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	88 23       	and	r24, r24
    1f54:	39 f0       	breq	.+14     	; 0x1f64 <commSC+0x38>
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	02 96       	adiw	r24, 0x02	; 2
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	80 81       	ld	r24, Z
    1f60:	88 23       	and	r24, r24
    1f62:	11 f0       	breq	.+4      	; 0x1f68 <commSC+0x3c>
		sendCommNO();
    1f64:	28 de       	rcall	.-944    	; 0x1bb6 <sendCommNO>
		return;
    1f66:	13 c0       	rjmp	.+38     	; 0x1f8e <commSC+0x62>
	}
	
	// Get the argument:
	which = ASCIIHexToByte(args[0], args[1]);
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	01 96       	adiw	r24, 0x01	; 1
    1f6e:	fc 01       	movw	r30, r24
    1f70:	20 81       	ld	r18, Z
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	fc 01       	movw	r30, r24
    1f78:	80 81       	ld	r24, Z
    1f7a:	62 2f       	mov	r22, r18
    1f7c:	58 dd       	rcall	.-1360   	; 0x1a2e <ASCIIHexToByte>
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	
	// Write the controller configuration:
	writeControllerConfig(which, &ccTemp);
    1f80:	61 e9       	ldi	r22, 0x91	; 145
    1f82:	76 e2       	ldi	r23, 0x26	; 38
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	be d0       	rcall	.+380    	; 0x2104 <writeControllerConfig>

	// Send an OK:
	sendCommOK();
    1f88:	0a de       	rcall	.-1004   	; 0x1b9e <sendCommOK>

	// Reset the working copy address:
	ccAddr = 0;
    1f8a:	10 92 4f 27 	sts	0x274F, r1
}
    1f8e:	23 96       	adiw	r28, 0x03	; 3
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	08 95       	ret

00001f9a <commRS>:

void commRS(char* args)
{	
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <commRS+0x6>
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
	// Send an OK:
	sendCommOK();
    1fa8:	fa dd       	rcall	.-1036   	; 0x1b9e <sendCommOK>
	delay_ms(10);
    1faa:	65 e5       	ldi	r22, 0x55	; 85
    1fac:	70 ed       	ldi	r23, 0xD0	; 208
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	e0 dc       	rcall	.-1600   	; 0x1974 <__portable_avr_delay_cycles>
	reset_do_soft_reset();
    1fb4:	d5 dc       	rcall	.-1622   	; 0x1960 <reset_do_soft_reset>
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	08 95       	ret

00001fc0 <commBL>:

void commBL(char* args)
{
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <commBL+0x6>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
	sendCommOK();
    1fce:	e7 dd       	rcall	.-1074   	; 0x1b9e <sendCommOK>
	delay_ms(10);
    1fd0:	65 e5       	ldi	r22, 0x55	; 85
    1fd2:	70 ed       	ldi	r23, 0xD0	; 208
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	cd dc       	rcall	.-1638   	; 0x1974 <__portable_avr_delay_cycles>
	bootloader();
    1fda:	0e 94 ce 13 	call	0x279c	; 0x279c <gamepadButtonHandler+0x2dc>
}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	08 95       	ret

00001fe8 <commBU>:

void commBU(char* args)
{	 
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <commBU+0x6>
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
	
	ioport_set_pin_level(BT_FACTORY_RESET_PIN, true);
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	88 e2       	ldi	r24, 0x28	; 40
    1ffa:	5c dc       	rcall	.-1864   	; 0x18b4 <ioport_set_pin_level>
	delay_ms(1);
    1ffc:	65 ed       	ldi	r22, 0xD5	; 213
    1ffe:	74 e1       	ldi	r23, 0x14	; 20
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	b7 dc       	rcall	.-1682   	; 0x1974 <__portable_avr_delay_cycles>
	ioport_set_pin_level(BT_FACTORY_RESET_PIN, false);
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	88 e2       	ldi	r24, 0x28	; 40
    200a:	54 dc       	rcall	.-1880   	; 0x18b4 <ioport_set_pin_level>
	delay_ms(1);
    200c:	65 ed       	ldi	r22, 0xD5	; 213
    200e:	74 e1       	ldi	r23, 0x14	; 20
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	af dc       	rcall	.-1698   	; 0x1974 <__portable_avr_delay_cycles>
	ioport_set_pin_level(BT_FACTORY_RESET_PIN, true);
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	88 e2       	ldi	r24, 0x28	; 40
    201a:	4c dc       	rcall	.-1896   	; 0x18b4 <ioport_set_pin_level>
	delay_ms(1);
    201c:	65 ed       	ldi	r22, 0xD5	; 213
    201e:	74 e1       	ldi	r23, 0x14	; 20
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a7 dc       	rcall	.-1714   	; 0x1974 <__portable_avr_delay_cycles>
	ioport_set_pin_level(BT_FACTORY_RESET_PIN, false);
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	88 e2       	ldi	r24, 0x28	; 40
    202a:	44 dc       	rcall	.-1912   	; 0x18b4 <ioport_set_pin_level>
	delay_ms(1);
    202c:	65 ed       	ldi	r22, 0xD5	; 213
    202e:	74 e1       	ldi	r23, 0x14	; 20
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9f dc       	rcall	.-1730   	; 0x1974 <__portable_avr_delay_cycles>
	ioport_set_pin_level(BT_FACTORY_RESET_PIN, true);
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	88 e2       	ldi	r24, 0x28	; 40
    203a:	3c dc       	rcall	.-1928   	; 0x18b4 <ioport_set_pin_level>
	delay_ms(1);
    203c:	65 ed       	ldi	r22, 0xD5	; 213
    203e:	74 e1       	ldi	r23, 0x14	; 20
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	97 dc       	rcall	.-1746   	; 0x1974 <__portable_avr_delay_cycles>
	sendBTCmd("BC:FU");
    2046:	84 ee       	ldi	r24, 0xE4	; 228
    2048:	90 e2       	ldi	r25, 0x20	; 32
    204a:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <sendBTCmd>
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	08 95       	ret

00002058 <readGlobalHeader>:
#define GLOBAL_HEADER_EEPROM_SIZE (GLOBAL_HEADER_EEPROM_PAGE_COUNT * EEPROM_PAGE_SIZE)
#define CONTROLLER_CONFIGURATION_EEPROM_START_ADDRESS (GLOBAL_HEADER_EEPROM_ADDRESS + GLOBAL_HEADER_EEPROM_SIZE)
#define CONTROLLER_CONFIGURATION_EEPROM_PAGE_COUNT ((sizeof(struct ControllerConfiguration) + (EEPROM_PAGE_SIZE-1)) / EEPROM_PAGE_SIZE)
#define CONTROLLER_CONFIGURATION_EEPROM_SIZE (CONTROLLER_CONFIGURATION_EEPROM_PAGE_COUNT * EEPROM_PAGE_SIZE)

void readGlobalHeader(struct GlobalHeader *gh) {
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	00 d0       	rcall	.+0      	; 0x205e <readGlobalHeader+0x6>
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	9a 83       	std	Y+2, r25	; 0x02
	nvm_eeprom_read_buffer(GLOBAL_HEADER_EEPROM_ADDRESS, (void *)gh, sizeof(struct GlobalHeader));
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	48 e0       	ldi	r20, 0x08	; 8
    206c:	50 e0       	ldi	r21, 0x00	; 0
    206e:	bc 01       	movw	r22, r24
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <nvm_eeprom_read_buffer>
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	08 95       	ret

00002082 <writeGlobalHeader>:

void writeGlobalHeader(const struct GlobalHeader *gh) {
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	00 d0       	rcall	.+0      	; 0x2088 <writeGlobalHeader+0x6>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	9a 83       	std	Y+2, r25	; 0x02
	nvm_eeprom_erase_and_write_buffer(GLOBAL_HEADER_EEPROM_ADDRESS, (const void *) gh, sizeof(struct GlobalHeader));
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	48 e0       	ldi	r20, 0x08	; 8
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	bc 01       	movw	r22, r24
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <nvm_eeprom_erase_and_write_buffer>
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	08 95       	ret

000020ac <readControllerConfig>:

void readControllerConfig(uint8_t index, struct ControllerConfiguration *cc) {
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	25 97       	sbiw	r28, 0x05	; 5
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	8b 83       	std	Y+3, r24	; 0x03
    20bc:	6c 83       	std	Y+4, r22	; 0x04
    20be:	7d 83       	std	Y+5, r23	; 0x05
	eeprom_addr_t addr = CONTROLLER_CONFIGURATION_EEPROM_START_ADDRESS;
    20c0:	80 e2       	ldi	r24, 0x20	; 32
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	9a 83       	std	Y+2, r25	; 0x02
	addr += index * CONTROLLER_CONFIGURATION_EEPROM_SIZE;
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 ec       	ldi	r20, 0xC0	; 192
    20d0:	42 9f       	mul	r20, r18
    20d2:	c0 01       	movw	r24, r0
    20d4:	43 9f       	mul	r20, r19
    20d6:	90 0d       	add	r25, r0
    20d8:	11 24       	eor	r1, r1
    20da:	29 81       	ldd	r18, Y+1	; 0x01
    20dc:	3a 81       	ldd	r19, Y+2	; 0x02
    20de:	82 0f       	add	r24, r18
    20e0:	93 1f       	adc	r25, r19
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	9a 83       	std	Y+2, r25	; 0x02
	nvm_eeprom_read_buffer(addr, (void *)cc, sizeof(struct ControllerConfiguration));
    20e6:	2c 81       	ldd	r18, Y+4	; 0x04
    20e8:	3d 81       	ldd	r19, Y+5	; 0x05
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	4d eb       	ldi	r20, 0xBD	; 189
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	b9 01       	movw	r22, r18
    20f4:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <nvm_eeprom_read_buffer>
}
    20f8:	25 96       	adiw	r28, 0x05	; 5
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	08 95       	ret

00002104 <writeControllerConfig>:

void writeControllerConfig(uint8_t index, const struct ControllerConfiguration *cc) {
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	25 97       	sbiw	r28, 0x05	; 5
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	8b 83       	std	Y+3, r24	; 0x03
    2114:	6c 83       	std	Y+4, r22	; 0x04
    2116:	7d 83       	std	Y+5, r23	; 0x05
	eeprom_addr_t addr = CONTROLLER_CONFIGURATION_EEPROM_START_ADDRESS;
    2118:	80 e2       	ldi	r24, 0x20	; 32
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	9a 83       	std	Y+2, r25	; 0x02
	addr += index * CONTROLLER_CONFIGURATION_EEPROM_SIZE;
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 ec       	ldi	r20, 0xC0	; 192
    2128:	42 9f       	mul	r20, r18
    212a:	c0 01       	movw	r24, r0
    212c:	43 9f       	mul	r20, r19
    212e:	90 0d       	add	r25, r0
    2130:	11 24       	eor	r1, r1
    2132:	29 81       	ldd	r18, Y+1	; 0x01
    2134:	3a 81       	ldd	r19, Y+2	; 0x02
    2136:	82 0f       	add	r24, r18
    2138:	93 1f       	adc	r25, r19
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	9a 83       	std	Y+2, r25	; 0x02
	nvm_eeprom_erase_and_write_buffer(addr, (const void *)cc, sizeof(struct ControllerConfiguration));
    213e:	2c 81       	ldd	r18, Y+4	; 0x04
    2140:	3d 81       	ldd	r19, Y+5	; 0x05
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	9a 81       	ldd	r25, Y+2	; 0x02
    2146:	4d eb       	ldi	r20, 0xBD	; 189
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	b9 01       	movw	r22, r18
    214c:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <nvm_eeprom_erase_and_write_buffer>
}
    2150:	25 96       	adiw	r28, 0x05	; 5
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	08 95       	ret

0000215c <loadConfiguration>:

void loadConfiguration(cfgsel_t which_configuration) {
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	1f 92       	push	r1
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	89 83       	std	Y+1, r24	; 0x01
	
	if(which_configuration==CFG_SELECT)
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	8a 30       	cpi	r24, 0x0A	; 10
    216c:	31 f4       	brne	.+12     	; 0x217a <loadConfiguration+0x1e>
	{
		sendDBGLine("BIOS");
    216e:	8a ee       	ldi	r24, 0xEA	; 234
    2170:	90 e2       	ldi	r25, 0x20	; 32
    2172:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
		biosMain();
    2176:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <biosMain>
	}
	
	readGlobalHeader(&global_header); // Load the global header:
    217a:	8f e4       	ldi	r24, 0x4F	; 79
    217c:	98 e2       	ldi	r25, 0x28	; 40
    217e:	6c df       	rcall	.-296    	; 0x2058 <readGlobalHeader>

	// Do the default configurations need to be written?	
	if (global_header.first_run == 1) {
    2180:	80 91 54 28 	lds	r24, 0x2854
    2184:	80 71       	andi	r24, 0x10	; 16
    2186:	88 23       	and	r24, r24
    2188:	49 f1       	breq	.+82     	; 0x21dc <loadConfiguration+0x80>

		//Write the default controller configurations to EEPROM:
		writeControllerConfig(CFG_A,     &DRONE_GAMEPAD_CONFIG);		// B_A
    218a:	64 ec       	ldi	r22, 0xC4	; 196
    218c:	72 e2       	ldi	r23, 0x22	; 34
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	b9 df       	rcall	.-142    	; 0x2104 <writeControllerConfig>
		writeControllerConfig(CFG_B,     &DRONE_IOS_CONFIG);			// B_B
    2192:	69 e8       	ldi	r22, 0x89	; 137
    2194:	73 e2       	ldi	r23, 0x23	; 35
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	b5 df       	rcall	.-150    	; 0x2104 <writeControllerConfig>
		writeControllerConfig(CFG_X,     &DRONE_KEYBOARD_CONFIG);		// B_X
    219a:	63 e0       	ldi	r22, 0x03	; 3
    219c:	75 e2       	ldi	r23, 0x25	; 37
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	b1 df       	rcall	.-158    	; 0x2104 <writeControllerConfig>
		writeControllerConfig(CFG_Y,     &DRONE_KEYBOARD_MOUSE_CONFIG);	// B_Y
    21a2:	60 ec       	ldi	r22, 0xC0	; 192
    21a4:	75 e2       	ldi	r23, 0x25	; 37
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	ad df       	rcall	.-166    	; 0x2104 <writeControllerConfig>
		writeControllerConfig(CFG_RB,    &DRONE_JOYSTICK_CONFIG);		// B_RB
    21aa:	66 e4       	ldi	r22, 0x46	; 70
    21ac:	74 e2       	ldi	r23, 0x24	; 36
    21ae:	84 e0       	ldi	r24, 0x04	; 4
    21b0:	a9 df       	rcall	.-174    	; 0x2104 <writeControllerConfig>
		//writeControllerConfig(CFG_UP,    &DRONE_OPEN_CONFIG_3);			// B_UP
		//writeControllerConfig(CFG_LEFT,  &DRONE_OPEN_CONFIG_4);			// B_LEFT
		//writeControllerConfig(CFG_LB,	 &DRONE_OPEN_CONFIG_5);				// B_LB
		
		// Write the default header to EEPROM:
		memcpy(&global_header, &DEFAULT_HEADER, sizeof(struct GlobalHeader));
    21b2:	88 e0       	ldi	r24, 0x08	; 8
    21b4:	e1 e8       	ldi	r30, 0x81	; 129
    21b6:	f3 e2       	ldi	r31, 0x23	; 35
    21b8:	af e4       	ldi	r26, 0x4F	; 79
    21ba:	b8 e2       	ldi	r27, 0x28	; 40
    21bc:	01 90       	ld	r0, Z+
    21be:	0d 92       	st	X+, r0
    21c0:	8a 95       	dec	r24
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <loadConfiguration+0x60>
		global_header.first_run = 0;
    21c4:	80 91 54 28 	lds	r24, 0x2854
    21c8:	8f 7e       	andi	r24, 0xEF	; 239
    21ca:	80 93 54 28 	sts	0x2854, r24
		writeGlobalHeader(&global_header);
    21ce:	8f e4       	ldi	r24, 0x4F	; 79
    21d0:	98 e2       	ldi	r25, 0x28	; 40
    21d2:	57 df       	rcall	.-338    	; 0x2082 <writeGlobalHeader>
		btFactoryReset();
    21d4:	0e 94 3d 40 	call	0x807a	; 0x807a <btFactoryReset>
		btFirstRun();
    21d8:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <btFirstRun>
	}
	
	sendDBGString("Loading configuration ");
    21dc:	8f ee       	ldi	r24, 0xEF	; 239
    21de:	90 e2       	ldi	r25, 0x20	; 32
    21e0:	0e 94 93 20 	call	0x4126	; 0x4126 <sendDBGString>
	sendDBGChar('0' + which_configuration);
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	80 5d       	subi	r24, 0xD0	; 208
    21e8:	0e 94 84 20 	call	0x4108	; 0x4108 <sendDBGChar>
	sendDBGString("");
    21ec:	86 e0       	ldi	r24, 0x06	; 6
    21ee:	91 e2       	ldi	r25, 0x21	; 33
    21f0:	0e 94 93 20 	call	0x4126	; 0x4126 <sendDBGString>
	readControllerConfig(which_configuration, &ccc);
    21f4:	6c e7       	ldi	r22, 0x7C	; 124
    21f6:	78 e2       	ldi	r23, 0x28	; 40
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	58 df       	rcall	.-336    	; 0x20ac <readControllerConfig>
}	
    21fc:	0f 90       	pop	r0
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	08 95       	ret

00002204 <displayWhichConfiguration>:
void displayWhichConfiguration(cfgsel_t configuration)
{
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	1f 92       	push	r1
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	89 83       	std	Y+1, r24	; 0x01
	switch (configuration)
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	85 30       	cpi	r24, 0x05	; 5
    2218:	91 05       	cpc	r25, r1
    221a:	09 f4       	brne	.+2      	; 0x221e <displayWhichConfiguration+0x1a>
    221c:	51 c0       	rjmp	.+162    	; 0x22c0 <displayWhichConfiguration+0xbc>
    221e:	86 30       	cpi	r24, 0x06	; 6
    2220:	91 05       	cpc	r25, r1
    2222:	9c f4       	brge	.+38     	; 0x224a <displayWhichConfiguration+0x46>
    2224:	82 30       	cpi	r24, 0x02	; 2
    2226:	91 05       	cpc	r25, r1
    2228:	c9 f1       	breq	.+114    	; 0x229c <displayWhichConfiguration+0x98>
    222a:	83 30       	cpi	r24, 0x03	; 3
    222c:	91 05       	cpc	r25, r1
    222e:	34 f4       	brge	.+12     	; 0x223c <displayWhichConfiguration+0x38>
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	41 f1       	breq	.+80     	; 0x2284 <displayWhichConfiguration+0x80>
    2234:	81 30       	cpi	r24, 0x01	; 1
    2236:	91 05       	cpc	r25, r1
    2238:	59 f1       	breq	.+86     	; 0x2290 <displayWhichConfiguration+0x8c>
    223a:	60 c0       	rjmp	.+192    	; 0x22fc <displayWhichConfiguration+0xf8>
    223c:	83 30       	cpi	r24, 0x03	; 3
    223e:	91 05       	cpc	r25, r1
    2240:	99 f1       	breq	.+102    	; 0x22a8 <displayWhichConfiguration+0xa4>
    2242:	84 30       	cpi	r24, 0x04	; 4
    2244:	91 05       	cpc	r25, r1
    2246:	b1 f1       	breq	.+108    	; 0x22b4 <displayWhichConfiguration+0xb0>
    2248:	59 c0       	rjmp	.+178    	; 0x22fc <displayWhichConfiguration+0xf8>
    224a:	88 30       	cpi	r24, 0x08	; 8
    224c:	91 05       	cpc	r25, r1
    224e:	09 f4       	brne	.+2      	; 0x2252 <displayWhichConfiguration+0x4e>
    2250:	43 c0       	rjmp	.+134    	; 0x22d8 <displayWhichConfiguration+0xd4>
    2252:	89 30       	cpi	r24, 0x09	; 9
    2254:	91 05       	cpc	r25, r1
    2256:	44 f4       	brge	.+16     	; 0x2268 <displayWhichConfiguration+0x64>
    2258:	86 30       	cpi	r24, 0x06	; 6
    225a:	91 05       	cpc	r25, r1
    225c:	b9 f1       	breq	.+110    	; 0x22cc <displayWhichConfiguration+0xc8>
    225e:	87 30       	cpi	r24, 0x07	; 7
    2260:	91 05       	cpc	r25, r1
    2262:	09 f4       	brne	.+2      	; 0x2266 <displayWhichConfiguration+0x62>
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <displayWhichConfiguration+0xe0>
    2266:	4a c0       	rjmp	.+148    	; 0x22fc <displayWhichConfiguration+0xf8>
    2268:	89 30       	cpi	r24, 0x09	; 9
    226a:	91 05       	cpc	r25, r1
    226c:	09 f4       	brne	.+2      	; 0x2270 <displayWhichConfiguration+0x6c>
    226e:	40 c0       	rjmp	.+128    	; 0x22f0 <displayWhichConfiguration+0xec>
    2270:	8a 30       	cpi	r24, 0x0A	; 10
    2272:	91 05       	cpc	r25, r1
    2274:	09 f0       	breq	.+2      	; 0x2278 <displayWhichConfiguration+0x74>
    2276:	42 c0       	rjmp	.+132    	; 0x22fc <displayWhichConfiguration+0xf8>
	{
		case CFG_SELECT:	setLEDValue(LED_OFF, LED_OFF, LED_OFF); break;
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	60 e0       	ldi	r22, 0x00	; 0
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    2282:	3c c0       	rjmp	.+120    	; 0x22fc <displayWhichConfiguration+0xf8>
		case CFG_A:			setLEDValue(LED_OFF, LED_OFF, LED_DIM); break;
    2284:	41 e0       	ldi	r20, 0x01	; 1
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    228e:	36 c0       	rjmp	.+108    	; 0x22fc <displayWhichConfiguration+0xf8>
		case CFG_B:			setLEDValue(LED_DIM, LED_OFF, LED_OFF); break;
    2290:	40 e0       	ldi	r20, 0x00	; 0
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    229a:	30 c0       	rjmp	.+96     	; 0x22fc <displayWhichConfiguration+0xf8>
		case CFG_X:			setLEDValue(LED_OFF, LED_DIM, LED_OFF); break;
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    22a6:	2a c0       	rjmp	.+84     	; 0x22fc <displayWhichConfiguration+0xf8>
		case CFG_Y:			setLEDValue(LED_DIM, LED_DIM, LED_OFF); break;
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	61 e0       	ldi	r22, 0x01	; 1
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    22b2:	24 c0       	rjmp	.+72     	; 0x22fc <displayWhichConfiguration+0xf8>
		case CFG_RB:		setLEDValue(LED_DIM, LED_OFF, LED_DIM); break;
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    22be:	1e c0       	rjmp	.+60     	; 0x22fc <displayWhichConfiguration+0xf8>
		case CFG_DOWN:		setLEDValue(LED_OFF, LED_OFF, LED_DIM); break;
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    22ca:	18 c0       	rjmp	.+48     	; 0x22fc <displayWhichConfiguration+0xf8>
		case CFG_RIGHT:		setLEDValue(LED_DIM, LED_OFF, LED_OFF); break;
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    22d6:	12 c0       	rjmp	.+36     	; 0x22fc <displayWhichConfiguration+0xf8>
		case CFG_LEFT:		setLEDValue(LED_OFF, LED_DIM, LED_OFF); break;
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	61 e0       	ldi	r22, 0x01	; 1
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    22e2:	0c c0       	rjmp	.+24     	; 0x22fc <displayWhichConfiguration+0xf8>
		case CFG_UP:		setLEDValue(LED_DIM, LED_DIM, LED_OFF); break;
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	61 e0       	ldi	r22, 0x01	; 1
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    22ee:	06 c0       	rjmp	.+12     	; 0x22fc <displayWhichConfiguration+0xf8>
		case CFG_LB:		setLEDValue(LED_DIM, LED_OFF, LED_DIM); break;		
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
    22fa:	00 00       	nop
	}
}
    22fc:	0f 90       	pop	r0
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	08 95       	ret

00002304 <whichConfiguration>:

cfgsel_t whichConfiguration(void){
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	1f 92       	push	r1
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
	cfgsel_t which_configuration;
	
	if (buttonActivated(B_SELECT))
    230e:	89 e0       	ldi	r24, 0x09	; 9
    2310:	6a d8       	rcall	.-3884   	; 0x13e6 <buttonActivated>
    2312:	88 23       	and	r24, r24
    2314:	19 f0       	breq	.+6      	; 0x231c <whichConfiguration+0x18>
	{
		which_configuration = CFG_SELECT;
    2316:	8a e0       	ldi	r24, 0x0A	; 10
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	49 c0       	rjmp	.+146    	; 0x23ae <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_A)) {
    231c:	84 e0       	ldi	r24, 0x04	; 4
    231e:	63 d8       	rcall	.-3898   	; 0x13e6 <buttonActivated>
    2320:	88 23       	and	r24, r24
    2322:	11 f0       	breq	.+4      	; 0x2328 <whichConfiguration+0x24>
		which_configuration = CFG_A;
    2324:	19 82       	std	Y+1, r1	; 0x01
    2326:	43 c0       	rjmp	.+134    	; 0x23ae <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_B)) {
    2328:	85 e0       	ldi	r24, 0x05	; 5
    232a:	5d d8       	rcall	.-3910   	; 0x13e6 <buttonActivated>
    232c:	88 23       	and	r24, r24
    232e:	19 f0       	breq	.+6      	; 0x2336 <whichConfiguration+0x32>
		which_configuration = CFG_B;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	3c c0       	rjmp	.+120    	; 0x23ae <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_X)) {
    2336:	86 e0       	ldi	r24, 0x06	; 6
    2338:	56 d8       	rcall	.-3924   	; 0x13e6 <buttonActivated>
    233a:	88 23       	and	r24, r24
    233c:	19 f0       	breq	.+6      	; 0x2344 <whichConfiguration+0x40>
		which_configuration = CFG_X;
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	35 c0       	rjmp	.+106    	; 0x23ae <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_Y)) {
    2344:	87 e0       	ldi	r24, 0x07	; 7
    2346:	4f d8       	rcall	.-3938   	; 0x13e6 <buttonActivated>
    2348:	88 23       	and	r24, r24
    234a:	19 f0       	breq	.+6      	; 0x2352 <whichConfiguration+0x4e>
		which_configuration = CFG_Y; 
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	2e c0       	rjmp	.+92     	; 0x23ae <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_RB)) {
    2352:	8a e0       	ldi	r24, 0x0A	; 10
    2354:	48 d8       	rcall	.-3952   	; 0x13e6 <buttonActivated>
    2356:	88 23       	and	r24, r24
    2358:	19 f0       	breq	.+6      	; 0x2360 <whichConfiguration+0x5c>
		which_configuration = CFG_RB;
    235a:	84 e0       	ldi	r24, 0x04	; 4
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	27 c0       	rjmp	.+78     	; 0x23ae <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_DOWN)) {
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	41 d8       	rcall	.-3966   	; 0x13e6 <buttonActivated>
    2364:	88 23       	and	r24, r24
    2366:	19 f0       	breq	.+6      	; 0x236e <whichConfiguration+0x6a>
		which_configuration = CFG_DOWN;
    2368:	85 e0       	ldi	r24, 0x05	; 5
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	20 c0       	rjmp	.+64     	; 0x23ae <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_RIGHT)) {
    236e:	83 e0       	ldi	r24, 0x03	; 3
    2370:	3a d8       	rcall	.-3980   	; 0x13e6 <buttonActivated>
    2372:	88 23       	and	r24, r24
    2374:	19 f0       	breq	.+6      	; 0x237c <whichConfiguration+0x78>
		which_configuration = CFG_RIGHT;
    2376:	86 e0       	ldi	r24, 0x06	; 6
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	19 c0       	rjmp	.+50     	; 0x23ae <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_LEFT)) {
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	33 d8       	rcall	.-3994   	; 0x13e6 <buttonActivated>
    2380:	88 23       	and	r24, r24
    2382:	19 f0       	breq	.+6      	; 0x238a <whichConfiguration+0x86>
		which_configuration = CFG_LEFT;
    2384:	88 e0       	ldi	r24, 0x08	; 8
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	12 c0       	rjmp	.+36     	; 0x23ae <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_UP)) {
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	2c d8       	rcall	.-4008   	; 0x13e6 <buttonActivated>
    238e:	88 23       	and	r24, r24
    2390:	19 f0       	breq	.+6      	; 0x2398 <whichConfiguration+0x94>
		which_configuration = CFG_UP;
    2392:	87 e0       	ldi	r24, 0x07	; 7
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	0b c0       	rjmp	.+22     	; 0x23ae <whichConfiguration+0xaa>
	}
	else if (buttonActivated(B_LB)) {
    2398:	8b e0       	ldi	r24, 0x0B	; 11
    239a:	25 d8       	rcall	.-4022   	; 0x13e6 <buttonActivated>
    239c:	88 23       	and	r24, r24
    239e:	19 f0       	breq	.+6      	; 0x23a6 <whichConfiguration+0xa2>
		which_configuration = CFG_LB;
    23a0:	89 e0       	ldi	r24, 0x09	; 9
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	04 c0       	rjmp	.+8      	; 0x23ae <whichConfiguration+0xaa>
	}	
	else {
		which_configuration = global_header.default_configuration;
    23a6:	80 91 54 28 	lds	r24, 0x2854
    23aa:	8f 70       	andi	r24, 0x0F	; 15
    23ac:	89 83       	std	Y+1, r24	; 0x01
	}
	displayWhichConfiguration(which_configuration);	
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	29 df       	rcall	.-430    	; 0x2204 <displayWhichConfiguration>
	return which_configuration;
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b4:	0f 90       	pop	r0
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	08 95       	ret

000023bc <gamepadInit>:
}

void GamepadButtonEvent(enum ButtonName name, enum ButtonState state)
{

};
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	2c 97       	sbiw	r28, 0x0c	; 12
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	8b 87       	std	Y+11, r24	; 0x0b
    23cc:	9c 87       	std	Y+12, r25	; 0x0c
    23ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    23d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    23d2:	80 93 50 27 	sts	0x2750, r24
    23d6:	90 93 51 27 	sts	0x2751, r25
    23da:	2a e0       	ldi	r18, 0x0A	; 10
    23dc:	e7 e0       	ldi	r30, 0x07	; 7
    23de:	f1 e2       	ldi	r31, 0x21	; 33
    23e0:	ce 01       	movw	r24, r28
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	dc 01       	movw	r26, r24
    23e6:	01 90       	ld	r0, Z+
    23e8:	0d 92       	st	X+, r0
    23ea:	2a 95       	dec	r18
    23ec:	e1 f7       	brne	.-8      	; 0x23e6 <gamepadInit+0x2a>
    23ee:	2a e0       	ldi	r18, 0x0A	; 10
    23f0:	ce 01       	movw	r24, r28
    23f2:	01 96       	adiw	r24, 0x01	; 1
    23f4:	fc 01       	movw	r30, r24
    23f6:	af e5       	ldi	r26, 0x5F	; 95
    23f8:	b8 e2       	ldi	r27, 0x28	; 40
    23fa:	01 90       	ld	r0, Z+
    23fc:	0d 92       	st	X+, r0
    23fe:	2a 95       	dec	r18
    2400:	e1 f7       	brne	.-8      	; 0x23fa <gamepadInit+0x3e>
    2402:	8a e0       	ldi	r24, 0x0A	; 10
    2404:	ef e5       	ldi	r30, 0x5F	; 95
    2406:	f8 e2       	ldi	r31, 0x28	; 40
    2408:	a9 e6       	ldi	r26, 0x69	; 105
    240a:	b8 e2       	ldi	r27, 0x28	; 40
    240c:	01 90       	ld	r0, Z+
    240e:	0d 92       	st	X+, r0
    2410:	8a 95       	dec	r24
    2412:	e1 f7       	brne	.-8      	; 0x240c <gamepadInit+0x50>
    2414:	0e 94 86 40 	call	0x810c	; 0x810c <BluetoothGamePadMode>
    2418:	2c 96       	adiw	r28, 0x0c	; 12
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	08 95       	ret

00002424 <GamepadButtonChanged>:

bool GamepadButtonChanged()
{
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
	// Send a report if the buttons have changed:
	if(
		prev_report.dpad != report.dpad ||
    242c:	90 91 70 28 	lds	r25, 0x2870
    2430:	80 91 66 28 	lds	r24, 0x2866
};

bool GamepadButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
    2434:	98 17       	cp	r25, r24
    2436:	61 f4       	brne	.+24     	; 0x2450 <GamepadButtonChanged+0x2c>
		prev_report.dpad != report.dpad ||
		prev_report.buttons1 != report.buttons1 ||
    2438:	90 91 71 28 	lds	r25, 0x2871
    243c:	80 91 67 28 	lds	r24, 0x2867

bool GamepadButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
		prev_report.dpad != report.dpad ||
    2440:	98 17       	cp	r25, r24
    2442:	31 f4       	brne	.+12     	; 0x2450 <GamepadButtonChanged+0x2c>
		prev_report.buttons1 != report.buttons1 ||
		prev_report.buttons2 != report.buttons2
    2444:	90 91 72 28 	lds	r25, 0x2872
    2448:	80 91 68 28 	lds	r24, 0x2868
bool GamepadButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
		prev_report.dpad != report.dpad ||
		prev_report.buttons1 != report.buttons1 ||
    244c:	98 17       	cp	r25, r24
    244e:	51 f0       	breq	.+20     	; 0x2464 <GamepadButtonChanged+0x40>
		prev_report.buttons2 != report.buttons2
	)
	{
		memcpy( &(prev_report.dpad), &(report.dpad), GAMEPAD_RPT_B_BYTES); // Update the previous values
    2450:	43 e0       	ldi	r20, 0x03	; 3
    2452:	50 e0       	ldi	r21, 0x00	; 0
    2454:	66 e6       	ldi	r22, 0x66	; 102
    2456:	78 e2       	ldi	r23, 0x28	; 40
    2458:	80 e7       	ldi	r24, 0x70	; 112
    245a:	98 e2       	ldi	r25, 0x28	; 40
    245c:	0e 94 6d 48 	call	0x90da	; 0x90da <memcpy>
		return true;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <GamepadButtonChanged+0x42>
	}
	return false;
    2464:	80 e0       	ldi	r24, 0x00	; 0
}
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	08 95       	ret

0000246c <GamepadJoystickChanged>:

bool GamepadJoystickChanged(void); //Prototype
bool GamepadJoystickChanged()
{
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
	if(
	prev_report.leftx != report.leftx   ||
    2474:	90 91 6c 28 	lds	r25, 0x286C
    2478:	80 91 62 28 	lds	r24, 0x2862
}

bool GamepadJoystickChanged(void); //Prototype
bool GamepadJoystickChanged()
{
	if(
    247c:	98 17       	cp	r25, r24
    247e:	91 f4       	brne	.+36     	; 0x24a4 <GamepadJoystickChanged+0x38>
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
    2480:	90 91 6d 28 	lds	r25, 0x286D
    2484:	80 91 63 28 	lds	r24, 0x2863

bool GamepadJoystickChanged(void); //Prototype
bool GamepadJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
    2488:	98 17       	cp	r25, r24
    248a:	61 f4       	brne	.+24     	; 0x24a4 <GamepadJoystickChanged+0x38>
	prev_report.lefty  != report.lefty  ||
	prev_report.rightx != report.rightx ||
    248c:	90 91 6e 28 	lds	r25, 0x286E
    2490:	80 91 64 28 	lds	r24, 0x2864
bool GamepadJoystickChanged(void); //Prototype
bool GamepadJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
    2494:	98 17       	cp	r25, r24
    2496:	31 f4       	brne	.+12     	; 0x24a4 <GamepadJoystickChanged+0x38>
	prev_report.rightx != report.rightx ||
	prev_report.righty != report.righty
    2498:	90 91 6f 28 	lds	r25, 0x286F
    249c:	80 91 65 28 	lds	r24, 0x2865
bool GamepadJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
	prev_report.rightx != report.rightx ||
    24a0:	98 17       	cp	r25, r24
    24a2:	51 f0       	breq	.+20     	; 0x24b8 <GamepadJoystickChanged+0x4c>
	prev_report.righty != report.righty
	)
	{
		memcpy(&(prev_report.leftx), &(report.leftx), GAMEPAD_RPT_J_BYTES); // Update the previous values
    24a4:	44 e0       	ldi	r20, 0x04	; 4
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	62 e6       	ldi	r22, 0x62	; 98
    24aa:	78 e2       	ldi	r23, 0x28	; 40
    24ac:	8c e6       	ldi	r24, 0x6C	; 108
    24ae:	98 e2       	ldi	r25, 0x28	; 40
    24b0:	0e 94 6d 48 	call	0x90da	; 0x90da <memcpy>
		return true;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <GamepadJoystickChanged+0x4e>
	}	
	return false;
    24b8:	80 e0       	ldi	r24, 0x00	; 0
}
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	08 95       	ret

000024c0 <gamepadButtonHandler>:

void gamepadButtonHandler(enum ButtonName name, enum ButtonState state) {
    24c0:	ef 92       	push	r14
    24c2:	ff 92       	push	r15
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <gamepadButtonHandler+0xe>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	6a 83       	std	Y+2, r22	; 0x02
	
	//Move to ButtonChange()
	if (state == BUTTON_PRESSED) {
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	81 30       	cpi	r24, 0x01	; 1
    24da:	31 f5       	brne	.+76     	; 0x2528 <gamepadButtonHandler+0x68>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	a0 e0       	ldi	r26, 0x00	; 0
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	7c 01       	movw	r14, r24
    24ec:	8d 01       	movw	r16, r26
    24ee:	04 c0       	rjmp	.+8      	; 0x24f8 <gamepadButtonHandler+0x38>
    24f0:	ee 0c       	add	r14, r14
    24f2:	ff 1c       	adc	r15, r15
    24f4:	00 1f       	adc	r16, r16
    24f6:	11 1f       	adc	r17, r17
    24f8:	2a 95       	dec	r18
    24fa:	d2 f7       	brpl	.-12     	; 0x24f0 <gamepadButtonHandler+0x30>
    24fc:	a8 01       	movw	r20, r16
    24fe:	97 01       	movw	r18, r14
    2500:	80 91 52 27 	lds	r24, 0x2752
    2504:	90 91 53 27 	lds	r25, 0x2753
    2508:	a0 91 54 27 	lds	r26, 0x2754
    250c:	b0 91 55 27 	lds	r27, 0x2755
    2510:	82 2b       	or	r24, r18
    2512:	93 2b       	or	r25, r19
    2514:	a4 2b       	or	r26, r20
    2516:	b5 2b       	or	r27, r21
    2518:	80 93 52 27 	sts	0x2752, r24
    251c:	90 93 53 27 	sts	0x2753, r25
    2520:	a0 93 54 27 	sts	0x2754, r26
    2524:	b0 93 55 27 	sts	0x2755, r27
	}

	if (state == BUTTON_RELEASED) {
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	88 23       	and	r24, r24
    252c:	41 f5       	brne	.+80     	; 0x257e <gamepadButtonHandler+0xbe>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	a0 e0       	ldi	r26, 0x00	; 0
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <gamepadButtonHandler+0x86>
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	aa 1f       	adc	r26, r26
    2544:	bb 1f       	adc	r27, r27
    2546:	2a 95       	dec	r18
    2548:	d2 f7       	brpl	.-12     	; 0x253e <gamepadButtonHandler+0x7e>
    254a:	9c 01       	movw	r18, r24
    254c:	ad 01       	movw	r20, r26
    254e:	20 95       	com	r18
    2550:	30 95       	com	r19
    2552:	40 95       	com	r20
    2554:	50 95       	com	r21
    2556:	80 91 52 27 	lds	r24, 0x2752
    255a:	90 91 53 27 	lds	r25, 0x2753
    255e:	a0 91 54 27 	lds	r26, 0x2754
    2562:	b0 91 55 27 	lds	r27, 0x2755
    2566:	82 23       	and	r24, r18
    2568:	93 23       	and	r25, r19
    256a:	a4 23       	and	r26, r20
    256c:	b5 23       	and	r27, r21
    256e:	80 93 52 27 	sts	0x2752, r24
    2572:	90 93 53 27 	sts	0x2753, r25
    2576:	a0 93 54 27 	sts	0x2754, r26
    257a:	b0 93 55 27 	sts	0x2755, r27
	}
	
	if(name==REPORT)
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	81 31       	cpi	r24, 0x11	; 17
    2582:	09 f0       	breq	.+2      	; 0x2586 <gamepadButtonHandler+0xc6>
    2584:	d1 c2       	rjmp	.+1442   	; 0x2b28 <gamepadButtonHandler+0x668>
	{
		BIT_SET(gamepad_buttonsLOW, Button_A, BIT_GET(pressed_buttons, BIT(B_A)));
    2586:	80 91 52 27 	lds	r24, 0x2752
    258a:	90 91 53 27 	lds	r25, 0x2753
    258e:	a0 91 54 27 	lds	r26, 0x2754
    2592:	b0 91 55 27 	lds	r27, 0x2755
    2596:	80 71       	andi	r24, 0x10	; 16
    2598:	99 27       	eor	r25, r25
    259a:	aa 27       	eor	r26, r26
    259c:	bb 27       	eor	r27, r27
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	a1 05       	cpc	r26, r1
    25a2:	b1 05       	cpc	r27, r1
    25a4:	91 f0       	breq	.+36     	; 0x25ca <gamepadButtonHandler+0x10a>
    25a6:	80 91 56 27 	lds	r24, 0x2756
    25aa:	90 91 57 27 	lds	r25, 0x2757
    25ae:	a0 91 58 27 	lds	r26, 0x2758
    25b2:	b0 91 59 27 	lds	r27, 0x2759
    25b6:	81 60       	ori	r24, 0x01	; 1
    25b8:	80 93 56 27 	sts	0x2756, r24
    25bc:	90 93 57 27 	sts	0x2757, r25
    25c0:	a0 93 58 27 	sts	0x2758, r26
    25c4:	b0 93 59 27 	sts	0x2759, r27
    25c8:	11 c0       	rjmp	.+34     	; 0x25ec <gamepadButtonHandler+0x12c>
    25ca:	80 91 56 27 	lds	r24, 0x2756
    25ce:	90 91 57 27 	lds	r25, 0x2757
    25d2:	a0 91 58 27 	lds	r26, 0x2758
    25d6:	b0 91 59 27 	lds	r27, 0x2759
    25da:	8e 7f       	andi	r24, 0xFE	; 254
    25dc:	80 93 56 27 	sts	0x2756, r24
    25e0:	90 93 57 27 	sts	0x2757, r25
    25e4:	a0 93 58 27 	sts	0x2758, r26
    25e8:	b0 93 59 27 	sts	0x2759, r27
		BIT_SET(gamepad_buttonsLOW, Button_B, BIT_GET(pressed_buttons, BIT(B_B)));
    25ec:	80 91 52 27 	lds	r24, 0x2752
    25f0:	90 91 53 27 	lds	r25, 0x2753
    25f4:	a0 91 54 27 	lds	r26, 0x2754
    25f8:	b0 91 55 27 	lds	r27, 0x2755
    25fc:	80 72       	andi	r24, 0x20	; 32
    25fe:	99 27       	eor	r25, r25
    2600:	aa 27       	eor	r26, r26
    2602:	bb 27       	eor	r27, r27
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	a1 05       	cpc	r26, r1
    2608:	b1 05       	cpc	r27, r1
    260a:	91 f0       	breq	.+36     	; 0x2630 <gamepadButtonHandler+0x170>
    260c:	80 91 56 27 	lds	r24, 0x2756
    2610:	90 91 57 27 	lds	r25, 0x2757
    2614:	a0 91 58 27 	lds	r26, 0x2758
    2618:	b0 91 59 27 	lds	r27, 0x2759
    261c:	82 60       	ori	r24, 0x02	; 2
    261e:	80 93 56 27 	sts	0x2756, r24
    2622:	90 93 57 27 	sts	0x2757, r25
    2626:	a0 93 58 27 	sts	0x2758, r26
    262a:	b0 93 59 27 	sts	0x2759, r27
    262e:	11 c0       	rjmp	.+34     	; 0x2652 <gamepadButtonHandler+0x192>
    2630:	80 91 56 27 	lds	r24, 0x2756
    2634:	90 91 57 27 	lds	r25, 0x2757
    2638:	a0 91 58 27 	lds	r26, 0x2758
    263c:	b0 91 59 27 	lds	r27, 0x2759
    2640:	8d 7f       	andi	r24, 0xFD	; 253
    2642:	80 93 56 27 	sts	0x2756, r24
    2646:	90 93 57 27 	sts	0x2757, r25
    264a:	a0 93 58 27 	sts	0x2758, r26
    264e:	b0 93 59 27 	sts	0x2759, r27
		BIT_SET(gamepad_buttonsLOW, Button_X, BIT_GET(pressed_buttons, BIT(B_X)));
    2652:	80 91 52 27 	lds	r24, 0x2752
    2656:	90 91 53 27 	lds	r25, 0x2753
    265a:	a0 91 54 27 	lds	r26, 0x2754
    265e:	b0 91 55 27 	lds	r27, 0x2755
    2662:	80 74       	andi	r24, 0x40	; 64
    2664:	99 27       	eor	r25, r25
    2666:	aa 27       	eor	r26, r26
    2668:	bb 27       	eor	r27, r27
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	a1 05       	cpc	r26, r1
    266e:	b1 05       	cpc	r27, r1
    2670:	91 f0       	breq	.+36     	; 0x2696 <gamepadButtonHandler+0x1d6>
    2672:	80 91 56 27 	lds	r24, 0x2756
    2676:	90 91 57 27 	lds	r25, 0x2757
    267a:	a0 91 58 27 	lds	r26, 0x2758
    267e:	b0 91 59 27 	lds	r27, 0x2759
    2682:	88 60       	ori	r24, 0x08	; 8
    2684:	80 93 56 27 	sts	0x2756, r24
    2688:	90 93 57 27 	sts	0x2757, r25
    268c:	a0 93 58 27 	sts	0x2758, r26
    2690:	b0 93 59 27 	sts	0x2759, r27
    2694:	11 c0       	rjmp	.+34     	; 0x26b8 <gamepadButtonHandler+0x1f8>
    2696:	80 91 56 27 	lds	r24, 0x2756
    269a:	90 91 57 27 	lds	r25, 0x2757
    269e:	a0 91 58 27 	lds	r26, 0x2758
    26a2:	b0 91 59 27 	lds	r27, 0x2759
    26a6:	87 7f       	andi	r24, 0xF7	; 247
    26a8:	80 93 56 27 	sts	0x2756, r24
    26ac:	90 93 57 27 	sts	0x2757, r25
    26b0:	a0 93 58 27 	sts	0x2758, r26
    26b4:	b0 93 59 27 	sts	0x2759, r27
		BIT_SET(gamepad_buttonsLOW, Button_Y, BIT_GET(pressed_buttons, BIT(B_Y)));
    26b8:	80 91 52 27 	lds	r24, 0x2752
    26bc:	90 91 53 27 	lds	r25, 0x2753
    26c0:	a0 91 54 27 	lds	r26, 0x2754
    26c4:	b0 91 55 27 	lds	r27, 0x2755
    26c8:	80 78       	andi	r24, 0x80	; 128
    26ca:	99 27       	eor	r25, r25
    26cc:	aa 27       	eor	r26, r26
    26ce:	bb 27       	eor	r27, r27
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	a1 05       	cpc	r26, r1
    26d4:	b1 05       	cpc	r27, r1
    26d6:	91 f0       	breq	.+36     	; 0x26fc <gamepadButtonHandler+0x23c>
    26d8:	80 91 56 27 	lds	r24, 0x2756
    26dc:	90 91 57 27 	lds	r25, 0x2757
    26e0:	a0 91 58 27 	lds	r26, 0x2758
    26e4:	b0 91 59 27 	lds	r27, 0x2759
    26e8:	80 61       	ori	r24, 0x10	; 16
    26ea:	80 93 56 27 	sts	0x2756, r24
    26ee:	90 93 57 27 	sts	0x2757, r25
    26f2:	a0 93 58 27 	sts	0x2758, r26
    26f6:	b0 93 59 27 	sts	0x2759, r27
    26fa:	11 c0       	rjmp	.+34     	; 0x271e <gamepadButtonHandler+0x25e>
    26fc:	80 91 56 27 	lds	r24, 0x2756
    2700:	90 91 57 27 	lds	r25, 0x2757
    2704:	a0 91 58 27 	lds	r26, 0x2758
    2708:	b0 91 59 27 	lds	r27, 0x2759
    270c:	8f 7e       	andi	r24, 0xEF	; 239
    270e:	80 93 56 27 	sts	0x2756, r24
    2712:	90 93 57 27 	sts	0x2757, r25
    2716:	a0 93 58 27 	sts	0x2758, r26
    271a:	b0 93 59 27 	sts	0x2759, r27

		BIT_SET(gamepad_buttonsLOW, Button_LBumper, BIT_GET(pressed_buttons, BIT(B_LB)));
    271e:	80 91 52 27 	lds	r24, 0x2752
    2722:	90 91 53 27 	lds	r25, 0x2753
    2726:	a0 91 54 27 	lds	r26, 0x2754
    272a:	b0 91 55 27 	lds	r27, 0x2755
    272e:	88 27       	eor	r24, r24
    2730:	98 70       	andi	r25, 0x08	; 8
    2732:	aa 27       	eor	r26, r26
    2734:	bb 27       	eor	r27, r27
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	a1 05       	cpc	r26, r1
    273a:	b1 05       	cpc	r27, r1
    273c:	91 f0       	breq	.+36     	; 0x2762 <gamepadButtonHandler+0x2a2>
    273e:	80 91 56 27 	lds	r24, 0x2756
    2742:	90 91 57 27 	lds	r25, 0x2757
    2746:	a0 91 58 27 	lds	r26, 0x2758
    274a:	b0 91 59 27 	lds	r27, 0x2759
    274e:	80 64       	ori	r24, 0x40	; 64
    2750:	80 93 56 27 	sts	0x2756, r24
    2754:	90 93 57 27 	sts	0x2757, r25
    2758:	a0 93 58 27 	sts	0x2758, r26
    275c:	b0 93 59 27 	sts	0x2759, r27
    2760:	11 c0       	rjmp	.+34     	; 0x2784 <gamepadButtonHandler+0x2c4>
    2762:	80 91 56 27 	lds	r24, 0x2756
    2766:	90 91 57 27 	lds	r25, 0x2757
    276a:	a0 91 58 27 	lds	r26, 0x2758
    276e:	b0 91 59 27 	lds	r27, 0x2759
    2772:	8f 7b       	andi	r24, 0xBF	; 191
    2774:	80 93 56 27 	sts	0x2756, r24
    2778:	90 93 57 27 	sts	0x2757, r25
    277c:	a0 93 58 27 	sts	0x2758, r26
    2780:	b0 93 59 27 	sts	0x2759, r27
		BIT_SET(gamepad_buttonsLOW, Button_RBumper, BIT_GET(pressed_buttons, BIT(B_RB)));
    2784:	80 91 52 27 	lds	r24, 0x2752
    2788:	90 91 53 27 	lds	r25, 0x2753
    278c:	a0 91 54 27 	lds	r26, 0x2754
    2790:	b0 91 55 27 	lds	r27, 0x2755
    2794:	88 27       	eor	r24, r24
    2796:	94 70       	andi	r25, 0x04	; 4
    2798:	aa 27       	eor	r26, r26
    279a:	bb 27       	eor	r27, r27
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	a1 05       	cpc	r26, r1
    27a0:	b1 05       	cpc	r27, r1
    27a2:	91 f0       	breq	.+36     	; 0x27c8 <gamepadButtonHandler+0x308>
    27a4:	80 91 56 27 	lds	r24, 0x2756
    27a8:	90 91 57 27 	lds	r25, 0x2757
    27ac:	a0 91 58 27 	lds	r26, 0x2758
    27b0:	b0 91 59 27 	lds	r27, 0x2759
    27b4:	80 68       	ori	r24, 0x80	; 128
    27b6:	80 93 56 27 	sts	0x2756, r24
    27ba:	90 93 57 27 	sts	0x2757, r25
    27be:	a0 93 58 27 	sts	0x2758, r26
    27c2:	b0 93 59 27 	sts	0x2759, r27
    27c6:	11 c0       	rjmp	.+34     	; 0x27ea <gamepadButtonHandler+0x32a>
    27c8:	80 91 56 27 	lds	r24, 0x2756
    27cc:	90 91 57 27 	lds	r25, 0x2757
    27d0:	a0 91 58 27 	lds	r26, 0x2758
    27d4:	b0 91 59 27 	lds	r27, 0x2759
    27d8:	8f 77       	andi	r24, 0x7F	; 127
    27da:	80 93 56 27 	sts	0x2756, r24
    27de:	90 93 57 27 	sts	0x2757, r25
    27e2:	a0 93 58 27 	sts	0x2758, r26
    27e6:	b0 93 59 27 	sts	0x2759, r27
		
		BIT_SET(gamepad_buttonsHIGH, Button_LTrigger, BIT_GET(pressed_buttons, BIT(B_LT)));
    27ea:	80 91 52 27 	lds	r24, 0x2752
    27ee:	90 91 53 27 	lds	r25, 0x2753
    27f2:	a0 91 54 27 	lds	r26, 0x2754
    27f6:	b0 91 55 27 	lds	r27, 0x2755
    27fa:	88 27       	eor	r24, r24
    27fc:	90 72       	andi	r25, 0x20	; 32
    27fe:	aa 27       	eor	r26, r26
    2800:	bb 27       	eor	r27, r27
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	a1 05       	cpc	r26, r1
    2806:	b1 05       	cpc	r27, r1
    2808:	91 f0       	breq	.+36     	; 0x282e <gamepadButtonHandler+0x36e>
    280a:	80 91 5a 27 	lds	r24, 0x275A
    280e:	90 91 5b 27 	lds	r25, 0x275B
    2812:	a0 91 5c 27 	lds	r26, 0x275C
    2816:	b0 91 5d 27 	lds	r27, 0x275D
    281a:	81 60       	ori	r24, 0x01	; 1
    281c:	80 93 5a 27 	sts	0x275A, r24
    2820:	90 93 5b 27 	sts	0x275B, r25
    2824:	a0 93 5c 27 	sts	0x275C, r26
    2828:	b0 93 5d 27 	sts	0x275D, r27
    282c:	11 c0       	rjmp	.+34     	; 0x2850 <gamepadButtonHandler+0x390>
    282e:	80 91 5a 27 	lds	r24, 0x275A
    2832:	90 91 5b 27 	lds	r25, 0x275B
    2836:	a0 91 5c 27 	lds	r26, 0x275C
    283a:	b0 91 5d 27 	lds	r27, 0x275D
    283e:	8e 7f       	andi	r24, 0xFE	; 254
    2840:	80 93 5a 27 	sts	0x275A, r24
    2844:	90 93 5b 27 	sts	0x275B, r25
    2848:	a0 93 5c 27 	sts	0x275C, r26
    284c:	b0 93 5d 27 	sts	0x275D, r27
		BIT_SET(gamepad_buttonsHIGH, Button_RTrigger, BIT_GET(pressed_buttons, BIT(B_RT)));
    2850:	80 91 52 27 	lds	r24, 0x2752
    2854:	90 91 53 27 	lds	r25, 0x2753
    2858:	a0 91 54 27 	lds	r26, 0x2754
    285c:	b0 91 55 27 	lds	r27, 0x2755
    2860:	88 27       	eor	r24, r24
    2862:	90 71       	andi	r25, 0x10	; 16
    2864:	aa 27       	eor	r26, r26
    2866:	bb 27       	eor	r27, r27
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	a1 05       	cpc	r26, r1
    286c:	b1 05       	cpc	r27, r1
    286e:	91 f0       	breq	.+36     	; 0x2894 <gamepadButtonHandler+0x3d4>
    2870:	80 91 5a 27 	lds	r24, 0x275A
    2874:	90 91 5b 27 	lds	r25, 0x275B
    2878:	a0 91 5c 27 	lds	r26, 0x275C
    287c:	b0 91 5d 27 	lds	r27, 0x275D
    2880:	82 60       	ori	r24, 0x02	; 2
    2882:	80 93 5a 27 	sts	0x275A, r24
    2886:	90 93 5b 27 	sts	0x275B, r25
    288a:	a0 93 5c 27 	sts	0x275C, r26
    288e:	b0 93 5d 27 	sts	0x275D, r27
    2892:	11 c0       	rjmp	.+34     	; 0x28b6 <gamepadButtonHandler+0x3f6>
    2894:	80 91 5a 27 	lds	r24, 0x275A
    2898:	90 91 5b 27 	lds	r25, 0x275B
    289c:	a0 91 5c 27 	lds	r26, 0x275C
    28a0:	b0 91 5d 27 	lds	r27, 0x275D
    28a4:	8d 7f       	andi	r24, 0xFD	; 253
    28a6:	80 93 5a 27 	sts	0x275A, r24
    28aa:	90 93 5b 27 	sts	0x275B, r25
    28ae:	a0 93 5c 27 	sts	0x275C, r26
    28b2:	b0 93 5d 27 	sts	0x275D, r27
		
		BIT_SET(gamepad_buttonsHIGH, Button_Select, BIT_GET(pressed_buttons, BIT(B_SELECT)));
    28b6:	80 91 52 27 	lds	r24, 0x2752
    28ba:	90 91 53 27 	lds	r25, 0x2753
    28be:	a0 91 54 27 	lds	r26, 0x2754
    28c2:	b0 91 55 27 	lds	r27, 0x2755
    28c6:	88 27       	eor	r24, r24
    28c8:	92 70       	andi	r25, 0x02	; 2
    28ca:	aa 27       	eor	r26, r26
    28cc:	bb 27       	eor	r27, r27
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	a1 05       	cpc	r26, r1
    28d2:	b1 05       	cpc	r27, r1
    28d4:	91 f0       	breq	.+36     	; 0x28fa <gamepadButtonHandler+0x43a>
    28d6:	80 91 5a 27 	lds	r24, 0x275A
    28da:	90 91 5b 27 	lds	r25, 0x275B
    28de:	a0 91 5c 27 	lds	r26, 0x275C
    28e2:	b0 91 5d 27 	lds	r27, 0x275D
    28e6:	84 60       	ori	r24, 0x04	; 4
    28e8:	80 93 5a 27 	sts	0x275A, r24
    28ec:	90 93 5b 27 	sts	0x275B, r25
    28f0:	a0 93 5c 27 	sts	0x275C, r26
    28f4:	b0 93 5d 27 	sts	0x275D, r27
    28f8:	11 c0       	rjmp	.+34     	; 0x291c <gamepadButtonHandler+0x45c>
    28fa:	80 91 5a 27 	lds	r24, 0x275A
    28fe:	90 91 5b 27 	lds	r25, 0x275B
    2902:	a0 91 5c 27 	lds	r26, 0x275C
    2906:	b0 91 5d 27 	lds	r27, 0x275D
    290a:	8b 7f       	andi	r24, 0xFB	; 251
    290c:	80 93 5a 27 	sts	0x275A, r24
    2910:	90 93 5b 27 	sts	0x275B, r25
    2914:	a0 93 5c 27 	sts	0x275C, r26
    2918:	b0 93 5d 27 	sts	0x275D, r27
		BIT_SET(gamepad_buttonsHIGH, Button_Start, BIT_GET(pressed_buttons, BIT(B_START)));
    291c:	80 91 52 27 	lds	r24, 0x2752
    2920:	90 91 53 27 	lds	r25, 0x2753
    2924:	a0 91 54 27 	lds	r26, 0x2754
    2928:	b0 91 55 27 	lds	r27, 0x2755
    292c:	88 27       	eor	r24, r24
    292e:	91 70       	andi	r25, 0x01	; 1
    2930:	aa 27       	eor	r26, r26
    2932:	bb 27       	eor	r27, r27
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	a1 05       	cpc	r26, r1
    2938:	b1 05       	cpc	r27, r1
    293a:	91 f0       	breq	.+36     	; 0x2960 <gamepadButtonHandler+0x4a0>
    293c:	80 91 5a 27 	lds	r24, 0x275A
    2940:	90 91 5b 27 	lds	r25, 0x275B
    2944:	a0 91 5c 27 	lds	r26, 0x275C
    2948:	b0 91 5d 27 	lds	r27, 0x275D
    294c:	88 60       	ori	r24, 0x08	; 8
    294e:	80 93 5a 27 	sts	0x275A, r24
    2952:	90 93 5b 27 	sts	0x275B, r25
    2956:	a0 93 5c 27 	sts	0x275C, r26
    295a:	b0 93 5d 27 	sts	0x275D, r27
    295e:	11 c0       	rjmp	.+34     	; 0x2982 <gamepadButtonHandler+0x4c2>
    2960:	80 91 5a 27 	lds	r24, 0x275A
    2964:	90 91 5b 27 	lds	r25, 0x275B
    2968:	a0 91 5c 27 	lds	r26, 0x275C
    296c:	b0 91 5d 27 	lds	r27, 0x275D
    2970:	87 7f       	andi	r24, 0xF7	; 247
    2972:	80 93 5a 27 	sts	0x275A, r24
    2976:	90 93 5b 27 	sts	0x275B, r25
    297a:	a0 93 5c 27 	sts	0x275C, r26
    297e:	b0 93 5d 27 	sts	0x275D, r27
		
		BIT_SET(gamepad_buttonsHIGH, Button_LThumb, BIT_GET(pressed_buttons, BIT(B_JL)));
    2982:	80 91 52 27 	lds	r24, 0x2752
    2986:	90 91 53 27 	lds	r25, 0x2753
    298a:	a0 91 54 27 	lds	r26, 0x2754
    298e:	b0 91 55 27 	lds	r27, 0x2755
    2992:	88 27       	eor	r24, r24
    2994:	90 74       	andi	r25, 0x40	; 64
    2996:	aa 27       	eor	r26, r26
    2998:	bb 27       	eor	r27, r27
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	a1 05       	cpc	r26, r1
    299e:	b1 05       	cpc	r27, r1
    29a0:	91 f0       	breq	.+36     	; 0x29c6 <gamepadButtonHandler+0x506>
    29a2:	80 91 5a 27 	lds	r24, 0x275A
    29a6:	90 91 5b 27 	lds	r25, 0x275B
    29aa:	a0 91 5c 27 	lds	r26, 0x275C
    29ae:	b0 91 5d 27 	lds	r27, 0x275D
    29b2:	80 62       	ori	r24, 0x20	; 32
    29b4:	80 93 5a 27 	sts	0x275A, r24
    29b8:	90 93 5b 27 	sts	0x275B, r25
    29bc:	a0 93 5c 27 	sts	0x275C, r26
    29c0:	b0 93 5d 27 	sts	0x275D, r27
    29c4:	11 c0       	rjmp	.+34     	; 0x29e8 <gamepadButtonHandler+0x528>
    29c6:	80 91 5a 27 	lds	r24, 0x275A
    29ca:	90 91 5b 27 	lds	r25, 0x275B
    29ce:	a0 91 5c 27 	lds	r26, 0x275C
    29d2:	b0 91 5d 27 	lds	r27, 0x275D
    29d6:	8f 7d       	andi	r24, 0xDF	; 223
    29d8:	80 93 5a 27 	sts	0x275A, r24
    29dc:	90 93 5b 27 	sts	0x275B, r25
    29e0:	a0 93 5c 27 	sts	0x275C, r26
    29e4:	b0 93 5d 27 	sts	0x275D, r27
		BIT_SET(gamepad_buttonsHIGH, Button_RThumb, BIT_GET(pressed_buttons, BIT(B_JR)));
    29e8:	80 91 52 27 	lds	r24, 0x2752
    29ec:	90 91 53 27 	lds	r25, 0x2753
    29f0:	a0 91 54 27 	lds	r26, 0x2754
    29f4:	b0 91 55 27 	lds	r27, 0x2755
    29f8:	88 27       	eor	r24, r24
    29fa:	90 78       	andi	r25, 0x80	; 128
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	a1 05       	cpc	r26, r1
    2a00:	b1 05       	cpc	r27, r1
    2a02:	91 f0       	breq	.+36     	; 0x2a28 <gamepadButtonHandler+0x568>
    2a04:	80 91 5a 27 	lds	r24, 0x275A
    2a08:	90 91 5b 27 	lds	r25, 0x275B
    2a0c:	a0 91 5c 27 	lds	r26, 0x275C
    2a10:	b0 91 5d 27 	lds	r27, 0x275D
    2a14:	80 64       	ori	r24, 0x40	; 64
    2a16:	80 93 5a 27 	sts	0x275A, r24
    2a1a:	90 93 5b 27 	sts	0x275B, r25
    2a1e:	a0 93 5c 27 	sts	0x275C, r26
    2a22:	b0 93 5d 27 	sts	0x275D, r27
    2a26:	11 c0       	rjmp	.+34     	; 0x2a4a <gamepadButtonHandler+0x58a>
    2a28:	80 91 5a 27 	lds	r24, 0x275A
    2a2c:	90 91 5b 27 	lds	r25, 0x275B
    2a30:	a0 91 5c 27 	lds	r26, 0x275C
    2a34:	b0 91 5d 27 	lds	r27, 0x275D
    2a38:	8f 7b       	andi	r24, 0xBF	; 191
    2a3a:	80 93 5a 27 	sts	0x275A, r24
    2a3e:	90 93 5b 27 	sts	0x275B, r25
    2a42:	a0 93 5c 27 	sts	0x275C, r26
    2a46:	b0 93 5d 27 	sts	0x275D, r27
		
		dpad_buttons = DPadNoAction;
    2a4a:	88 e0       	ldi	r24, 0x08	; 8
    2a4c:	80 93 48 20 	sts	0x2048, r24
		
		if (BIT_GET(pressed_buttons, BIT(B_UP)))
    2a50:	80 91 52 27 	lds	r24, 0x2752
    2a54:	90 91 53 27 	lds	r25, 0x2753
    2a58:	a0 91 54 27 	lds	r26, 0x2754
    2a5c:	b0 91 55 27 	lds	r27, 0x2755
    2a60:	81 70       	andi	r24, 0x01	; 1
    2a62:	99 27       	eor	r25, r25
    2a64:	aa 27       	eor	r26, r26
    2a66:	bb 27       	eor	r27, r27
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	a1 05       	cpc	r26, r1
    2a6c:	b1 05       	cpc	r27, r1
    2a6e:	19 f0       	breq	.+6      	; 0x2a76 <gamepadButtonHandler+0x5b6>
		{
			dpad_buttons = DPadUP;
    2a70:	10 92 48 20 	sts	0x2048, r1
    2a74:	3b c0       	rjmp	.+118    	; 0x2aec <gamepadButtonHandler+0x62c>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_LEFT)))
    2a76:	80 91 52 27 	lds	r24, 0x2752
    2a7a:	90 91 53 27 	lds	r25, 0x2753
    2a7e:	a0 91 54 27 	lds	r26, 0x2754
    2a82:	b0 91 55 27 	lds	r27, 0x2755
    2a86:	84 70       	andi	r24, 0x04	; 4
    2a88:	99 27       	eor	r25, r25
    2a8a:	aa 27       	eor	r26, r26
    2a8c:	bb 27       	eor	r27, r27
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	a1 05       	cpc	r26, r1
    2a92:	b1 05       	cpc	r27, r1
    2a94:	21 f0       	breq	.+8      	; 0x2a9e <gamepadButtonHandler+0x5de>
		{
			dpad_buttons = DPadLeft;
    2a96:	86 e0       	ldi	r24, 0x06	; 6
    2a98:	80 93 48 20 	sts	0x2048, r24
    2a9c:	27 c0       	rjmp	.+78     	; 0x2aec <gamepadButtonHandler+0x62c>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_DOWN)))
    2a9e:	80 91 52 27 	lds	r24, 0x2752
    2aa2:	90 91 53 27 	lds	r25, 0x2753
    2aa6:	a0 91 54 27 	lds	r26, 0x2754
    2aaa:	b0 91 55 27 	lds	r27, 0x2755
    2aae:	82 70       	andi	r24, 0x02	; 2
    2ab0:	99 27       	eor	r25, r25
    2ab2:	aa 27       	eor	r26, r26
    2ab4:	bb 27       	eor	r27, r27
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	a1 05       	cpc	r26, r1
    2aba:	b1 05       	cpc	r27, r1
    2abc:	21 f0       	breq	.+8      	; 0x2ac6 <gamepadButtonHandler+0x606>
		{
			dpad_buttons = DPadDown;
    2abe:	84 e0       	ldi	r24, 0x04	; 4
    2ac0:	80 93 48 20 	sts	0x2048, r24
    2ac4:	13 c0       	rjmp	.+38     	; 0x2aec <gamepadButtonHandler+0x62c>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_RIGHT)))
    2ac6:	80 91 52 27 	lds	r24, 0x2752
    2aca:	90 91 53 27 	lds	r25, 0x2753
    2ace:	a0 91 54 27 	lds	r26, 0x2754
    2ad2:	b0 91 55 27 	lds	r27, 0x2755
    2ad6:	88 70       	andi	r24, 0x08	; 8
    2ad8:	99 27       	eor	r25, r25
    2ada:	aa 27       	eor	r26, r26
    2adc:	bb 27       	eor	r27, r27
    2ade:	00 97       	sbiw	r24, 0x00	; 0
    2ae0:	a1 05       	cpc	r26, r1
    2ae2:	b1 05       	cpc	r27, r1
    2ae4:	19 f0       	breq	.+6      	; 0x2aec <gamepadButtonHandler+0x62c>
		{
			dpad_buttons = DPadRight;
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	80 93 48 20 	sts	0x2048, r24
		}
		
		report.dpad = dpad_buttons;
    2aec:	80 91 48 20 	lds	r24, 0x2048
    2af0:	80 93 66 28 	sts	0x2866, r24
		report.buttons1 = gamepad_buttonsLOW;
    2af4:	80 91 56 27 	lds	r24, 0x2756
    2af8:	90 91 57 27 	lds	r25, 0x2757
    2afc:	a0 91 58 27 	lds	r26, 0x2758
    2b00:	b0 91 59 27 	lds	r27, 0x2759
    2b04:	80 93 67 28 	sts	0x2867, r24
		report.buttons2 = gamepad_buttonsHIGH;
    2b08:	80 91 5a 27 	lds	r24, 0x275A
    2b0c:	90 91 5b 27 	lds	r25, 0x275B
    2b10:	a0 91 5c 27 	lds	r26, 0x275C
    2b14:	b0 91 5d 27 	lds	r27, 0x275D
    2b18:	80 93 68 28 	sts	0x2868, r24
		
        if( GamepadButtonChanged() )
    2b1c:	83 dc       	rcall	.-1786   	; 0x2424 <GamepadButtonChanged>
    2b1e:	88 23       	and	r24, r24
    2b20:	19 f0       	breq	.+6      	; 0x2b28 <gamepadButtonHandler+0x668>
		{
			delta = true;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	80 93 5e 27 	sts	0x275E, r24
		}
	}
		
}
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	ff 90       	pop	r15
    2b36:	ef 90       	pop	r14
    2b38:	08 95       	ret

00002b3a <gamepadJoystickHandler>:

void gamepadJoystickHandler(enum JoystickName name, int16_t x, int16_t y) {
    2b3a:	cf 93       	push	r28
    2b3c:	df 93       	push	r29
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
    2b42:	2f 97       	sbiw	r28, 0x0f	; 15
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	8b 87       	std	Y+11, r24	; 0x0b
    2b4a:	6c 87       	std	Y+12, r22	; 0x0c
    2b4c:	7d 87       	std	Y+13, r23	; 0x0d
    2b4e:	4e 87       	std	Y+14, r20	; 0x0e
    2b50:	5f 87       	std	Y+15, r21	; 0x0f
	struct Joystick *this_joystick = &joysticks[name];
    2b52:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b54:	88 2f       	mov	r24, r24
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	88 0f       	add	r24, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	9c 01       	movw	r18, r24
    2b5e:	22 0f       	add	r18, r18
    2b60:	33 1f       	adc	r19, r19
    2b62:	22 0f       	add	r18, r18
    2b64:	33 1f       	adc	r19, r19
    2b66:	22 0f       	add	r18, r18
    2b68:	33 1f       	adc	r19, r19
    2b6a:	28 1b       	sub	r18, r24
    2b6c:	39 0b       	sbc	r19, r25
    2b6e:	c9 01       	movw	r24, r18
    2b70:	8a 5a       	subi	r24, 0xAA	; 170
    2b72:	9f 4d       	sbci	r25, 0xDF	; 223
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	9a 83       	std	Y+2, r25	; 0x02
	JoystickConfiguration *this_joystick_cfg = &my_cc->joystick_configs[name];
    2b78:	20 91 50 27 	lds	r18, 0x2750
    2b7c:	30 91 51 27 	lds	r19, 0x2751
    2b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b82:	48 2f       	mov	r20, r24
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	66 e1       	ldi	r22, 0x16	; 22
    2b88:	64 9f       	mul	r22, r20
    2b8a:	c0 01       	movw	r24, r0
    2b8c:	65 9f       	mul	r22, r21
    2b8e:	90 0d       	add	r25, r0
    2b90:	11 24       	eor	r1, r1
    2b92:	8f 56       	subi	r24, 0x6F	; 111
    2b94:	9f 4f       	sbci	r25, 0xFF	; 255
    2b96:	82 0f       	add	r24, r18
    2b98:	93 1f       	adc	r25, r19
    2b9a:	8b 83       	std	Y+3, r24	; 0x03
    2b9c:	9c 83       	std	Y+4, r25	; 0x04
	
	uint16_xy raw = {x,y};
    2b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ba0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ba2:	8d 83       	std	Y+5, r24	; 0x05
    2ba4:	9e 83       	std	Y+6, r25	; 0x06
    2ba6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2baa:	8f 83       	std	Y+7, r24	; 0x07
    2bac:	98 87       	std	Y+8, r25	; 0x08
    int8_xy out;
	AnalogJoystickAdj( center[name], this_joystick_cfg, &raw, &out );
    2bae:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bb0:	88 2f       	mov	r24, r24
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	8c 5b       	subi	r24, 0xBC	; 188
    2bba:	9f 4d       	sbci	r25, 0xDF	; 223
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	80 81       	ld	r24, Z
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	9e 01       	movw	r18, r28
    2bc4:	27 5f       	subi	r18, 0xF7	; 247
    2bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc8:	ae 01       	movw	r20, r28
    2bca:	4b 5f       	subi	r20, 0xFB	; 251
    2bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bce:	6b 81       	ldd	r22, Y+3	; 0x03
    2bd0:	7c 81       	ldd	r23, Y+4	; 0x04
    2bd2:	0e 94 4e 21 	call	0x429c	; 0x429c <AnalogJoystickAdj>
	
	if( name==JOYSTICK_LEFT)
    2bd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bd8:	88 23       	and	r24, r24
    2bda:	39 f4       	brne	.+14     	; 0x2bea <gamepadJoystickHandler+0xb0>
	{
		report.leftx = out.x;
    2bdc:	89 85       	ldd	r24, Y+9	; 0x09
    2bde:	80 93 62 28 	sts	0x2862, r24
		report.lefty = out.y;
    2be2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2be4:	80 93 63 28 	sts	0x2863, r24
    2be8:	0c c0       	rjmp	.+24     	; 0x2c02 <gamepadJoystickHandler+0xc8>
	}
	else 
	{	
		//assert(name==JOYSTICK_RIGHT);
		report.rightx = out.x;
    2bea:	89 85       	ldd	r24, Y+9	; 0x09
    2bec:	80 93 64 28 	sts	0x2864, r24
		report.righty = out.y;
    2bf0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bf2:	80 93 65 28 	sts	0x2865, r24
		
		if(GamepadJoystickChanged())
    2bf6:	3a dc       	rcall	.-1932   	; 0x246c <GamepadJoystickChanged>
    2bf8:	88 23       	and	r24, r24
    2bfa:	19 f0       	breq	.+6      	; 0x2c02 <gamepadJoystickHandler+0xc8>
		{
			delta = true; //sets do_send_rpt if not already set
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	80 93 5e 27 	sts	0x275E, r24
		}
	}
}
    2c02:	2f 96       	adiw	r28, 0x0f	; 15
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	df 91       	pop	r29
    2c0a:	cf 91       	pop	r28
    2c0c:	08 95       	ret

00002c0e <GamepadSendReport>:

// Sends a gamepad report when needed:
void GamepadSendReport(void) {
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <GamepadSendReport+0x6>
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <GamepadSendReport+0x8>
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
  int i;
  unsigned char * u;
  
  u = (unsigned char *) &report;
    2c1a:	8f e5       	ldi	r24, 0x5F	; 95
    2c1c:	98 e2       	ldi	r25, 0x28	; 40
    2c1e:	8b 83       	std	Y+3, r24	; 0x03
    2c20:	9c 83       	std	Y+4, r25	; 0x04
  
  for(i=0; i<GAMEPAD_RPT_BYTES; i++)
    2c22:	19 82       	std	Y+1, r1	; 0x01
    2c24:	1a 82       	std	Y+2, r1	; 0x02
    2c26:	10 c0       	rjmp	.+32     	; 0x2c48 <GamepadSendReport+0x3a>
  {
	  sendBTChar(*u);
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	80 81       	ld	r24, Z
    2c30:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
	  u++;
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	01 96       	adiw	r24, 0x01	; 1
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
    2c3c:	9c 83       	std	Y+4, r25	; 0x04
  int i;
  unsigned char * u;
  
  u = (unsigned char *) &report;
  
  for(i=0; i<GAMEPAD_RPT_BYTES; i++)
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	9a 81       	ldd	r25, Y+2	; 0x02
    2c42:	01 96       	adiw	r24, 0x01	; 1
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	9a 83       	std	Y+2, r25	; 0x02
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	8a 30       	cpi	r24, 0x0A	; 10
    2c4e:	91 05       	cpc	r25, r1
    2c50:	5c f3       	brlt	.-42     	; 0x2c28 <GamepadSendReport+0x1a>
  {
	  sendBTChar(*u);
	  u++;
  }
    2c52:	24 96       	adiw	r28, 0x04	; 4
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	08 95       	ret

00002c5e <jStickInit>:
}

void jStickButtonEvent(enum ButtonName name, enum ButtonState state)
{

};
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	2c 97       	sbiw	r28, 0x0c	; 12
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	8b 87       	std	Y+11, r24	; 0x0b
    2c6e:	9c 87       	std	Y+12, r25	; 0x0c
    2c70:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c72:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c74:	80 93 5f 27 	sts	0x275F, r24
    2c78:	90 93 60 27 	sts	0x2760, r25
    2c7c:	2a e0       	ldi	r18, 0x0A	; 10
    2c7e:	e1 e1       	ldi	r30, 0x11	; 17
    2c80:	f1 e2       	ldi	r31, 0x21	; 33
    2c82:	ce 01       	movw	r24, r28
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	dc 01       	movw	r26, r24
    2c88:	01 90       	ld	r0, Z+
    2c8a:	0d 92       	st	X+, r0
    2c8c:	2a 95       	dec	r18
    2c8e:	e1 f7       	brne	.-8      	; 0x2c88 <jStickInit+0x2a>
    2c90:	2a e0       	ldi	r18, 0x0A	; 10
    2c92:	ce 01       	movw	r24, r28
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	fc 01       	movw	r30, r24
    2c98:	af e5       	ldi	r26, 0x5F	; 95
    2c9a:	b8 e2       	ldi	r27, 0x28	; 40
    2c9c:	01 90       	ld	r0, Z+
    2c9e:	0d 92       	st	X+, r0
    2ca0:	2a 95       	dec	r18
    2ca2:	e1 f7       	brne	.-8      	; 0x2c9c <jStickInit+0x3e>
    2ca4:	8a e0       	ldi	r24, 0x0A	; 10
    2ca6:	ef e5       	ldi	r30, 0x5F	; 95
    2ca8:	f8 e2       	ldi	r31, 0x28	; 40
    2caa:	a9 e6       	ldi	r26, 0x69	; 105
    2cac:	b8 e2       	ldi	r27, 0x28	; 40
    2cae:	01 90       	ld	r0, Z+
    2cb0:	0d 92       	st	X+, r0
    2cb2:	8a 95       	dec	r24
    2cb4:	e1 f7       	brne	.-8      	; 0x2cae <jStickInit+0x50>
    2cb6:	0e 94 90 40 	call	0x8120	; 0x8120 <BluetoothJoystickMode>
    2cba:	2c 96       	adiw	r28, 0x0c	; 12
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	08 95       	ret

00002cc6 <jStickButtonChanged>:

bool jStickButtonChanged()
{
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
	// Send a report if the buttons have changed:
	if(
	prev_report.dpad != report.dpad ||
    2cce:	90 91 70 28 	lds	r25, 0x2870
    2cd2:	80 91 66 28 	lds	r24, 0x2866
};

bool jStickButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
    2cd6:	98 17       	cp	r25, r24
    2cd8:	61 f4       	brne	.+24     	; 0x2cf2 <jStickButtonChanged+0x2c>
	prev_report.dpad != report.dpad ||
	prev_report.buttons1 != report.buttons1 ||
    2cda:	90 91 71 28 	lds	r25, 0x2871
    2cde:	80 91 67 28 	lds	r24, 0x2867

bool jStickButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
	prev_report.dpad != report.dpad ||
    2ce2:	98 17       	cp	r25, r24
    2ce4:	31 f4       	brne	.+12     	; 0x2cf2 <jStickButtonChanged+0x2c>
	prev_report.buttons1 != report.buttons1 ||
	prev_report.buttons2 != report.buttons2
    2ce6:	90 91 72 28 	lds	r25, 0x2872
    2cea:	80 91 68 28 	lds	r24, 0x2868
bool jStickButtonChanged()
{
	// Send a report if the buttons have changed:
	if(
	prev_report.dpad != report.dpad ||
	prev_report.buttons1 != report.buttons1 ||
    2cee:	98 17       	cp	r25, r24
    2cf0:	51 f0       	breq	.+20     	; 0x2d06 <jStickButtonChanged+0x40>
	prev_report.buttons2 != report.buttons2
	)
	{
		memcpy( &(prev_report.dpad), &(report.dpad), JSTICK_RPT_B_BYTES); // Update the previous values
    2cf2:	43 e0       	ldi	r20, 0x03	; 3
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	66 e6       	ldi	r22, 0x66	; 102
    2cf8:	78 e2       	ldi	r23, 0x28	; 40
    2cfa:	80 e7       	ldi	r24, 0x70	; 112
    2cfc:	98 e2       	ldi	r25, 0x28	; 40
    2cfe:	0e 94 6d 48 	call	0x90da	; 0x90da <memcpy>
		return true;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	01 c0       	rjmp	.+2      	; 0x2d08 <jStickButtonChanged+0x42>
	}
	return false;
    2d06:	80 e0       	ldi	r24, 0x00	; 0
}
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	08 95       	ret

00002d0e <jStickJoystickChanged>:

bool jStickJoystickChanged(void); //Prototype
bool jStickJoystickChanged()
{
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
	if(
	prev_report.leftx != report.leftx   ||
    2d16:	90 91 6c 28 	lds	r25, 0x286C
    2d1a:	80 91 62 28 	lds	r24, 0x2862
}

bool jStickJoystickChanged(void); //Prototype
bool jStickJoystickChanged()
{
	if(
    2d1e:	98 17       	cp	r25, r24
    2d20:	91 f4       	brne	.+36     	; 0x2d46 <jStickJoystickChanged+0x38>
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
    2d22:	90 91 6d 28 	lds	r25, 0x286D
    2d26:	80 91 63 28 	lds	r24, 0x2863

bool jStickJoystickChanged(void); //Prototype
bool jStickJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
    2d2a:	98 17       	cp	r25, r24
    2d2c:	61 f4       	brne	.+24     	; 0x2d46 <jStickJoystickChanged+0x38>
	prev_report.lefty  != report.lefty  ||
	prev_report.rightx != report.rightx ||
    2d2e:	90 91 6e 28 	lds	r25, 0x286E
    2d32:	80 91 64 28 	lds	r24, 0x2864
bool jStickJoystickChanged(void); //Prototype
bool jStickJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
    2d36:	98 17       	cp	r25, r24
    2d38:	31 f4       	brne	.+12     	; 0x2d46 <jStickJoystickChanged+0x38>
	prev_report.rightx != report.rightx ||
	prev_report.righty != report.righty
    2d3a:	90 91 6f 28 	lds	r25, 0x286F
    2d3e:	80 91 65 28 	lds	r24, 0x2865
bool jStickJoystickChanged()
{
	if(
	prev_report.leftx != report.leftx   ||
	prev_report.lefty  != report.lefty  ||
	prev_report.rightx != report.rightx ||
    2d42:	98 17       	cp	r25, r24
    2d44:	51 f0       	breq	.+20     	; 0x2d5a <jStickJoystickChanged+0x4c>
	prev_report.righty != report.righty
	)
	{
		memcpy(&(prev_report.leftx), &(report.leftx), JSTICK_RPT_J_BYTES); // Update the previous values
    2d46:	44 e0       	ldi	r20, 0x04	; 4
    2d48:	50 e0       	ldi	r21, 0x00	; 0
    2d4a:	62 e6       	ldi	r22, 0x62	; 98
    2d4c:	78 e2       	ldi	r23, 0x28	; 40
    2d4e:	8c e6       	ldi	r24, 0x6C	; 108
    2d50:	98 e2       	ldi	r25, 0x28	; 40
    2d52:	0e 94 6d 48 	call	0x90da	; 0x90da <memcpy>
		return true;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	01 c0       	rjmp	.+2      	; 0x2d5c <jStickJoystickChanged+0x4e>
	}
	return false;
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
}
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	08 95       	ret

00002d62 <jStickButtonHandler>:

void jStickButtonHandler(enum ButtonName name, enum ButtonState state) {
    2d62:	ef 92       	push	r14
    2d64:	ff 92       	push	r15
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <jStickButtonHandler+0xe>
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	6a 83       	std	Y+2, r22	; 0x02
	
	//Move to ButtonChange()
	if (state == BUTTON_PRESSED) {
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	31 f5       	brne	.+76     	; 0x2dca <jStickButtonHandler+0x68>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a0 e0       	ldi	r26, 0x00	; 0
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	7c 01       	movw	r14, r24
    2d8e:	8d 01       	movw	r16, r26
    2d90:	04 c0       	rjmp	.+8      	; 0x2d9a <jStickButtonHandler+0x38>
    2d92:	ee 0c       	add	r14, r14
    2d94:	ff 1c       	adc	r15, r15
    2d96:	00 1f       	adc	r16, r16
    2d98:	11 1f       	adc	r17, r17
    2d9a:	2a 95       	dec	r18
    2d9c:	d2 f7       	brpl	.-12     	; 0x2d92 <jStickButtonHandler+0x30>
    2d9e:	a8 01       	movw	r20, r16
    2da0:	97 01       	movw	r18, r14
    2da2:	80 91 61 27 	lds	r24, 0x2761
    2da6:	90 91 62 27 	lds	r25, 0x2762
    2daa:	a0 91 63 27 	lds	r26, 0x2763
    2dae:	b0 91 64 27 	lds	r27, 0x2764
    2db2:	82 2b       	or	r24, r18
    2db4:	93 2b       	or	r25, r19
    2db6:	a4 2b       	or	r26, r20
    2db8:	b5 2b       	or	r27, r21
    2dba:	80 93 61 27 	sts	0x2761, r24
    2dbe:	90 93 62 27 	sts	0x2762, r25
    2dc2:	a0 93 63 27 	sts	0x2763, r26
    2dc6:	b0 93 64 27 	sts	0x2764, r27
	}

	if (state == BUTTON_RELEASED) {
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	88 23       	and	r24, r24
    2dce:	41 f5       	brne	.+80     	; 0x2e20 <jStickButtonHandler+0xbe>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	a0 e0       	ldi	r26, 0x00	; 0
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	04 c0       	rjmp	.+8      	; 0x2de8 <jStickButtonHandler+0x86>
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	aa 1f       	adc	r26, r26
    2de6:	bb 1f       	adc	r27, r27
    2de8:	2a 95       	dec	r18
    2dea:	d2 f7       	brpl	.-12     	; 0x2de0 <jStickButtonHandler+0x7e>
    2dec:	9c 01       	movw	r18, r24
    2dee:	ad 01       	movw	r20, r26
    2df0:	20 95       	com	r18
    2df2:	30 95       	com	r19
    2df4:	40 95       	com	r20
    2df6:	50 95       	com	r21
    2df8:	80 91 61 27 	lds	r24, 0x2761
    2dfc:	90 91 62 27 	lds	r25, 0x2762
    2e00:	a0 91 63 27 	lds	r26, 0x2763
    2e04:	b0 91 64 27 	lds	r27, 0x2764
    2e08:	82 23       	and	r24, r18
    2e0a:	93 23       	and	r25, r19
    2e0c:	a4 23       	and	r26, r20
    2e0e:	b5 23       	and	r27, r21
    2e10:	80 93 61 27 	sts	0x2761, r24
    2e14:	90 93 62 27 	sts	0x2762, r25
    2e18:	a0 93 63 27 	sts	0x2763, r26
    2e1c:	b0 93 64 27 	sts	0x2764, r27
	}
	
	if(name==REPORT)
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	81 31       	cpi	r24, 0x11	; 17
    2e24:	09 f0       	breq	.+2      	; 0x2e28 <jStickButtonHandler+0xc6>
    2e26:	a5 c1       	rjmp	.+842    	; 0x3172 <__stack+0x173>
	{
	
		BIT_SET(joystick_buttonsLOW, Button_A, BIT_GET(pressed_buttons, BIT(B_A)));
    2e28:	80 91 61 27 	lds	r24, 0x2761
    2e2c:	90 91 62 27 	lds	r25, 0x2762
    2e30:	a0 91 63 27 	lds	r26, 0x2763
    2e34:	b0 91 64 27 	lds	r27, 0x2764
    2e38:	80 71       	andi	r24, 0x10	; 16
    2e3a:	99 27       	eor	r25, r25
    2e3c:	aa 27       	eor	r26, r26
    2e3e:	bb 27       	eor	r27, r27
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	a1 05       	cpc	r26, r1
    2e44:	b1 05       	cpc	r27, r1
    2e46:	31 f0       	breq	.+12     	; 0x2e54 <jStickButtonHandler+0xf2>
    2e48:	80 91 65 27 	lds	r24, 0x2765
    2e4c:	81 60       	ori	r24, 0x01	; 1
    2e4e:	80 93 65 27 	sts	0x2765, r24
    2e52:	05 c0       	rjmp	.+10     	; 0x2e5e <jStickButtonHandler+0xfc>
    2e54:	80 91 65 27 	lds	r24, 0x2765
    2e58:	8e 7f       	andi	r24, 0xFE	; 254
    2e5a:	80 93 65 27 	sts	0x2765, r24
		BIT_SET(joystick_buttonsLOW, Button_B, BIT_GET(pressed_buttons, BIT(B_B)));
    2e5e:	80 91 61 27 	lds	r24, 0x2761
    2e62:	90 91 62 27 	lds	r25, 0x2762
    2e66:	a0 91 63 27 	lds	r26, 0x2763
    2e6a:	b0 91 64 27 	lds	r27, 0x2764
    2e6e:	80 72       	andi	r24, 0x20	; 32
    2e70:	99 27       	eor	r25, r25
    2e72:	aa 27       	eor	r26, r26
    2e74:	bb 27       	eor	r27, r27
    2e76:	00 97       	sbiw	r24, 0x00	; 0
    2e78:	a1 05       	cpc	r26, r1
    2e7a:	b1 05       	cpc	r27, r1
    2e7c:	31 f0       	breq	.+12     	; 0x2e8a <jStickButtonHandler+0x128>
    2e7e:	80 91 65 27 	lds	r24, 0x2765
    2e82:	82 60       	ori	r24, 0x02	; 2
    2e84:	80 93 65 27 	sts	0x2765, r24
    2e88:	05 c0       	rjmp	.+10     	; 0x2e94 <jStickButtonHandler+0x132>
    2e8a:	80 91 65 27 	lds	r24, 0x2765
    2e8e:	8d 7f       	andi	r24, 0xFD	; 253
    2e90:	80 93 65 27 	sts	0x2765, r24
		BIT_SET(joystick_buttonsLOW, Button_X, BIT_GET(pressed_buttons, BIT(B_X)));
    2e94:	80 91 61 27 	lds	r24, 0x2761
    2e98:	90 91 62 27 	lds	r25, 0x2762
    2e9c:	a0 91 63 27 	lds	r26, 0x2763
    2ea0:	b0 91 64 27 	lds	r27, 0x2764
    2ea4:	80 74       	andi	r24, 0x40	; 64
    2ea6:	99 27       	eor	r25, r25
    2ea8:	aa 27       	eor	r26, r26
    2eaa:	bb 27       	eor	r27, r27
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	a1 05       	cpc	r26, r1
    2eb0:	b1 05       	cpc	r27, r1
    2eb2:	31 f0       	breq	.+12     	; 0x2ec0 <jStickButtonHandler+0x15e>
    2eb4:	80 91 65 27 	lds	r24, 0x2765
    2eb8:	88 60       	ori	r24, 0x08	; 8
    2eba:	80 93 65 27 	sts	0x2765, r24
    2ebe:	05 c0       	rjmp	.+10     	; 0x2eca <jStickButtonHandler+0x168>
    2ec0:	80 91 65 27 	lds	r24, 0x2765
    2ec4:	87 7f       	andi	r24, 0xF7	; 247
    2ec6:	80 93 65 27 	sts	0x2765, r24
		BIT_SET(joystick_buttonsLOW, Button_Y, BIT_GET(pressed_buttons, BIT(B_Y)));
    2eca:	80 91 61 27 	lds	r24, 0x2761
    2ece:	90 91 62 27 	lds	r25, 0x2762
    2ed2:	a0 91 63 27 	lds	r26, 0x2763
    2ed6:	b0 91 64 27 	lds	r27, 0x2764
    2eda:	80 78       	andi	r24, 0x80	; 128
    2edc:	99 27       	eor	r25, r25
    2ede:	aa 27       	eor	r26, r26
    2ee0:	bb 27       	eor	r27, r27
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	a1 05       	cpc	r26, r1
    2ee6:	b1 05       	cpc	r27, r1
    2ee8:	31 f0       	breq	.+12     	; 0x2ef6 <jStickButtonHandler+0x194>
    2eea:	80 91 65 27 	lds	r24, 0x2765
    2eee:	80 61       	ori	r24, 0x10	; 16
    2ef0:	80 93 65 27 	sts	0x2765, r24
    2ef4:	05 c0       	rjmp	.+10     	; 0x2f00 <jStickButtonHandler+0x19e>
    2ef6:	80 91 65 27 	lds	r24, 0x2765
    2efa:	8f 7e       	andi	r24, 0xEF	; 239
    2efc:	80 93 65 27 	sts	0x2765, r24

		BIT_SET(joystick_buttonsLOW, Button_LBumper, BIT_GET(pressed_buttons, BIT(B_LB)));
    2f00:	80 91 61 27 	lds	r24, 0x2761
    2f04:	90 91 62 27 	lds	r25, 0x2762
    2f08:	a0 91 63 27 	lds	r26, 0x2763
    2f0c:	b0 91 64 27 	lds	r27, 0x2764
    2f10:	88 27       	eor	r24, r24
    2f12:	98 70       	andi	r25, 0x08	; 8
    2f14:	aa 27       	eor	r26, r26
    2f16:	bb 27       	eor	r27, r27
    2f18:	00 97       	sbiw	r24, 0x00	; 0
    2f1a:	a1 05       	cpc	r26, r1
    2f1c:	b1 05       	cpc	r27, r1
    2f1e:	31 f0       	breq	.+12     	; 0x2f2c <jStickButtonHandler+0x1ca>
    2f20:	80 91 65 27 	lds	r24, 0x2765
    2f24:	80 64       	ori	r24, 0x40	; 64
    2f26:	80 93 65 27 	sts	0x2765, r24
    2f2a:	05 c0       	rjmp	.+10     	; 0x2f36 <jStickButtonHandler+0x1d4>
    2f2c:	80 91 65 27 	lds	r24, 0x2765
    2f30:	8f 7b       	andi	r24, 0xBF	; 191
    2f32:	80 93 65 27 	sts	0x2765, r24
		BIT_SET(joystick_buttonsLOW, Button_RBumper, BIT_GET(pressed_buttons, BIT(B_RB)));
    2f36:	80 91 61 27 	lds	r24, 0x2761
    2f3a:	90 91 62 27 	lds	r25, 0x2762
    2f3e:	a0 91 63 27 	lds	r26, 0x2763
    2f42:	b0 91 64 27 	lds	r27, 0x2764
    2f46:	88 27       	eor	r24, r24
    2f48:	94 70       	andi	r25, 0x04	; 4
    2f4a:	aa 27       	eor	r26, r26
    2f4c:	bb 27       	eor	r27, r27
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	a1 05       	cpc	r26, r1
    2f52:	b1 05       	cpc	r27, r1
    2f54:	31 f0       	breq	.+12     	; 0x2f62 <jStickButtonHandler+0x200>
    2f56:	80 91 65 27 	lds	r24, 0x2765
    2f5a:	80 68       	ori	r24, 0x80	; 128
    2f5c:	80 93 65 27 	sts	0x2765, r24
    2f60:	05 c0       	rjmp	.+10     	; 0x2f6c <jStickButtonHandler+0x20a>
    2f62:	80 91 65 27 	lds	r24, 0x2765
    2f66:	8f 77       	andi	r24, 0x7F	; 127
    2f68:	80 93 65 27 	sts	0x2765, r24
	
		BIT_SET(joystick_buttonsHIGH, Button_LTrigger, BIT_GET(pressed_buttons, BIT(B_LT)));
    2f6c:	80 91 61 27 	lds	r24, 0x2761
    2f70:	90 91 62 27 	lds	r25, 0x2762
    2f74:	a0 91 63 27 	lds	r26, 0x2763
    2f78:	b0 91 64 27 	lds	r27, 0x2764
    2f7c:	88 27       	eor	r24, r24
    2f7e:	90 72       	andi	r25, 0x20	; 32
    2f80:	aa 27       	eor	r26, r26
    2f82:	bb 27       	eor	r27, r27
    2f84:	00 97       	sbiw	r24, 0x00	; 0
    2f86:	a1 05       	cpc	r26, r1
    2f88:	b1 05       	cpc	r27, r1
    2f8a:	31 f0       	breq	.+12     	; 0x2f98 <jStickButtonHandler+0x236>
    2f8c:	80 91 66 27 	lds	r24, 0x2766
    2f90:	81 60       	ori	r24, 0x01	; 1
    2f92:	80 93 66 27 	sts	0x2766, r24
    2f96:	05 c0       	rjmp	.+10     	; 0x2fa2 <jStickButtonHandler+0x240>
    2f98:	80 91 66 27 	lds	r24, 0x2766
    2f9c:	8e 7f       	andi	r24, 0xFE	; 254
    2f9e:	80 93 66 27 	sts	0x2766, r24
		BIT_SET(joystick_buttonsHIGH, Button_RTrigger, BIT_GET(pressed_buttons, BIT(B_RT)));
    2fa2:	80 91 61 27 	lds	r24, 0x2761
    2fa6:	90 91 62 27 	lds	r25, 0x2762
    2faa:	a0 91 63 27 	lds	r26, 0x2763
    2fae:	b0 91 64 27 	lds	r27, 0x2764
    2fb2:	88 27       	eor	r24, r24
    2fb4:	90 71       	andi	r25, 0x10	; 16
    2fb6:	aa 27       	eor	r26, r26
    2fb8:	bb 27       	eor	r27, r27
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	a1 05       	cpc	r26, r1
    2fbe:	b1 05       	cpc	r27, r1
    2fc0:	31 f0       	breq	.+12     	; 0x2fce <jStickButtonHandler+0x26c>
    2fc2:	80 91 66 27 	lds	r24, 0x2766
    2fc6:	82 60       	ori	r24, 0x02	; 2
    2fc8:	80 93 66 27 	sts	0x2766, r24
    2fcc:	05 c0       	rjmp	.+10     	; 0x2fd8 <jStickButtonHandler+0x276>
    2fce:	80 91 66 27 	lds	r24, 0x2766
    2fd2:	8d 7f       	andi	r24, 0xFD	; 253
    2fd4:	80 93 66 27 	sts	0x2766, r24
	
		BIT_SET(joystick_buttonsHIGH, Button_Select, BIT_GET(pressed_buttons, BIT(B_SELECT)));
    2fd8:	80 91 61 27 	lds	r24, 0x2761
    2fdc:	90 91 62 27 	lds	r25, 0x2762
    2fe0:	a0 91 63 27 	lds	r26, 0x2763
    2fe4:	b0 91 64 27 	lds	r27, 0x2764
    2fe8:	88 27       	eor	r24, r24
    2fea:	92 70       	andi	r25, 0x02	; 2
    2fec:	aa 27       	eor	r26, r26
    2fee:	bb 27       	eor	r27, r27
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	a1 05       	cpc	r26, r1
    2ff4:	b1 05       	cpc	r27, r1
    2ff6:	31 f0       	breq	.+12     	; 0x3004 <__stack+0x5>
    2ff8:	80 91 66 27 	lds	r24, 0x2766
    2ffc:	84 60       	ori	r24, 0x04	; 4
    2ffe:	80 93 66 27 	sts	0x2766, r24
    3002:	05 c0       	rjmp	.+10     	; 0x300e <__stack+0xf>
    3004:	80 91 66 27 	lds	r24, 0x2766
    3008:	8b 7f       	andi	r24, 0xFB	; 251
    300a:	80 93 66 27 	sts	0x2766, r24
		BIT_SET(joystick_buttonsHIGH, Button_Start, BIT_GET(pressed_buttons, BIT(B_START)));
    300e:	80 91 61 27 	lds	r24, 0x2761
    3012:	90 91 62 27 	lds	r25, 0x2762
    3016:	a0 91 63 27 	lds	r26, 0x2763
    301a:	b0 91 64 27 	lds	r27, 0x2764
    301e:	88 27       	eor	r24, r24
    3020:	91 70       	andi	r25, 0x01	; 1
    3022:	aa 27       	eor	r26, r26
    3024:	bb 27       	eor	r27, r27
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	a1 05       	cpc	r26, r1
    302a:	b1 05       	cpc	r27, r1
    302c:	31 f0       	breq	.+12     	; 0x303a <__stack+0x3b>
    302e:	80 91 66 27 	lds	r24, 0x2766
    3032:	88 60       	ori	r24, 0x08	; 8
    3034:	80 93 66 27 	sts	0x2766, r24
    3038:	05 c0       	rjmp	.+10     	; 0x3044 <__stack+0x45>
    303a:	80 91 66 27 	lds	r24, 0x2766
    303e:	87 7f       	andi	r24, 0xF7	; 247
    3040:	80 93 66 27 	sts	0x2766, r24
	
		BIT_SET(joystick_buttonsHIGH, Button_LThumb, BIT_GET(pressed_buttons, BIT(B_JL)));
    3044:	80 91 61 27 	lds	r24, 0x2761
    3048:	90 91 62 27 	lds	r25, 0x2762
    304c:	a0 91 63 27 	lds	r26, 0x2763
    3050:	b0 91 64 27 	lds	r27, 0x2764
    3054:	88 27       	eor	r24, r24
    3056:	90 74       	andi	r25, 0x40	; 64
    3058:	aa 27       	eor	r26, r26
    305a:	bb 27       	eor	r27, r27
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	a1 05       	cpc	r26, r1
    3060:	b1 05       	cpc	r27, r1
    3062:	31 f0       	breq	.+12     	; 0x3070 <__stack+0x71>
    3064:	80 91 66 27 	lds	r24, 0x2766
    3068:	80 62       	ori	r24, 0x20	; 32
    306a:	80 93 66 27 	sts	0x2766, r24
    306e:	05 c0       	rjmp	.+10     	; 0x307a <__stack+0x7b>
    3070:	80 91 66 27 	lds	r24, 0x2766
    3074:	8f 7d       	andi	r24, 0xDF	; 223
    3076:	80 93 66 27 	sts	0x2766, r24
		BIT_SET(joystick_buttonsHIGH, Button_RThumb, BIT_GET(pressed_buttons, BIT(B_JR)));
    307a:	80 91 61 27 	lds	r24, 0x2761
    307e:	90 91 62 27 	lds	r25, 0x2762
    3082:	a0 91 63 27 	lds	r26, 0x2763
    3086:	b0 91 64 27 	lds	r27, 0x2764
    308a:	88 27       	eor	r24, r24
    308c:	90 78       	andi	r25, 0x80	; 128
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	a1 05       	cpc	r26, r1
    3092:	b1 05       	cpc	r27, r1
    3094:	31 f0       	breq	.+12     	; 0x30a2 <__stack+0xa3>
    3096:	80 91 66 27 	lds	r24, 0x2766
    309a:	80 64       	ori	r24, 0x40	; 64
    309c:	80 93 66 27 	sts	0x2766, r24
    30a0:	05 c0       	rjmp	.+10     	; 0x30ac <__stack+0xad>
    30a2:	80 91 66 27 	lds	r24, 0x2766
    30a6:	8f 7b       	andi	r24, 0xBF	; 191
    30a8:	80 93 66 27 	sts	0x2766, r24
	
		dpad_buttons = DPadNoAction;
    30ac:	88 e0       	ldi	r24, 0x08	; 8
    30ae:	80 93 4d 20 	sts	0x204D, r24
	
		if (BIT_GET(pressed_buttons, BIT(B_UP)))
    30b2:	80 91 61 27 	lds	r24, 0x2761
    30b6:	90 91 62 27 	lds	r25, 0x2762
    30ba:	a0 91 63 27 	lds	r26, 0x2763
    30be:	b0 91 64 27 	lds	r27, 0x2764
    30c2:	81 70       	andi	r24, 0x01	; 1
    30c4:	99 27       	eor	r25, r25
    30c6:	aa 27       	eor	r26, r26
    30c8:	bb 27       	eor	r27, r27
    30ca:	00 97       	sbiw	r24, 0x00	; 0
    30cc:	a1 05       	cpc	r26, r1
    30ce:	b1 05       	cpc	r27, r1
    30d0:	19 f0       	breq	.+6      	; 0x30d8 <__stack+0xd9>
		{
			dpad_buttons = DPadUP;
    30d2:	10 92 4d 20 	sts	0x204D, r1
    30d6:	3b c0       	rjmp	.+118    	; 0x314e <__stack+0x14f>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_LEFT)))
    30d8:	80 91 61 27 	lds	r24, 0x2761
    30dc:	90 91 62 27 	lds	r25, 0x2762
    30e0:	a0 91 63 27 	lds	r26, 0x2763
    30e4:	b0 91 64 27 	lds	r27, 0x2764
    30e8:	84 70       	andi	r24, 0x04	; 4
    30ea:	99 27       	eor	r25, r25
    30ec:	aa 27       	eor	r26, r26
    30ee:	bb 27       	eor	r27, r27
    30f0:	00 97       	sbiw	r24, 0x00	; 0
    30f2:	a1 05       	cpc	r26, r1
    30f4:	b1 05       	cpc	r27, r1
    30f6:	21 f0       	breq	.+8      	; 0x3100 <__stack+0x101>
		{
			dpad_buttons = DPadLeft;
    30f8:	86 e0       	ldi	r24, 0x06	; 6
    30fa:	80 93 4d 20 	sts	0x204D, r24
    30fe:	27 c0       	rjmp	.+78     	; 0x314e <__stack+0x14f>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_DOWN)))
    3100:	80 91 61 27 	lds	r24, 0x2761
    3104:	90 91 62 27 	lds	r25, 0x2762
    3108:	a0 91 63 27 	lds	r26, 0x2763
    310c:	b0 91 64 27 	lds	r27, 0x2764
    3110:	82 70       	andi	r24, 0x02	; 2
    3112:	99 27       	eor	r25, r25
    3114:	aa 27       	eor	r26, r26
    3116:	bb 27       	eor	r27, r27
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	a1 05       	cpc	r26, r1
    311c:	b1 05       	cpc	r27, r1
    311e:	21 f0       	breq	.+8      	; 0x3128 <__stack+0x129>
		{
			dpad_buttons = DPadDown;
    3120:	84 e0       	ldi	r24, 0x04	; 4
    3122:	80 93 4d 20 	sts	0x204D, r24
    3126:	13 c0       	rjmp	.+38     	; 0x314e <__stack+0x14f>
		}
		else if (BIT_GET(pressed_buttons, BIT(B_RIGHT)))
    3128:	80 91 61 27 	lds	r24, 0x2761
    312c:	90 91 62 27 	lds	r25, 0x2762
    3130:	a0 91 63 27 	lds	r26, 0x2763
    3134:	b0 91 64 27 	lds	r27, 0x2764
    3138:	88 70       	andi	r24, 0x08	; 8
    313a:	99 27       	eor	r25, r25
    313c:	aa 27       	eor	r26, r26
    313e:	bb 27       	eor	r27, r27
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	a1 05       	cpc	r26, r1
    3144:	b1 05       	cpc	r27, r1
    3146:	19 f0       	breq	.+6      	; 0x314e <__stack+0x14f>
		{
			dpad_buttons = DPadRight;
    3148:	82 e0       	ldi	r24, 0x02	; 2
    314a:	80 93 4d 20 	sts	0x204D, r24
	}
	
		report.dpad = dpad_buttons;
    314e:	80 91 4d 20 	lds	r24, 0x204D
    3152:	80 93 66 28 	sts	0x2866, r24
		report.buttons1 = joystick_buttonsLOW;
    3156:	80 91 65 27 	lds	r24, 0x2765
    315a:	80 93 67 28 	sts	0x2867, r24
		report.buttons2 = joystick_buttonsHIGH;
    315e:	80 91 66 27 	lds	r24, 0x2766
    3162:	80 93 68 28 	sts	0x2868, r24
		
		if( jStickButtonChanged() )
    3166:	af dd       	rcall	.-1186   	; 0x2cc6 <jStickButtonChanged>
    3168:	88 23       	and	r24, r24
    316a:	19 f0       	breq	.+6      	; 0x3172 <__stack+0x173>
		{
			jdelta = true;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	80 93 67 27 	sts	0x2767, r24
		}
	}
	
}
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	df 91       	pop	r29
    3178:	cf 91       	pop	r28
    317a:	1f 91       	pop	r17
    317c:	0f 91       	pop	r16
    317e:	ff 90       	pop	r15
    3180:	ef 90       	pop	r14
    3182:	08 95       	ret

00003184 <jStickJoystickHandler>:

void jStickJoystickHandler(enum JoystickName name, int16_t x, int16_t y) {
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	2f 97       	sbiw	r28, 0x0f	; 15
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	8b 87       	std	Y+11, r24	; 0x0b
    3194:	6c 87       	std	Y+12, r22	; 0x0c
    3196:	7d 87       	std	Y+13, r23	; 0x0d
    3198:	4e 87       	std	Y+14, r20	; 0x0e
    319a:	5f 87       	std	Y+15, r21	; 0x0f
	struct Joystick *this_joystick = &joysticks[name];
    319c:	8b 85       	ldd	r24, Y+11	; 0x0b
    319e:	88 2f       	mov	r24, r24
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	9c 01       	movw	r18, r24
    31a8:	22 0f       	add	r18, r18
    31aa:	33 1f       	adc	r19, r19
    31ac:	22 0f       	add	r18, r18
    31ae:	33 1f       	adc	r19, r19
    31b0:	22 0f       	add	r18, r18
    31b2:	33 1f       	adc	r19, r19
    31b4:	28 1b       	sub	r18, r24
    31b6:	39 0b       	sbc	r19, r25
    31b8:	c9 01       	movw	r24, r18
    31ba:	8a 5a       	subi	r24, 0xAA	; 170
    31bc:	9f 4d       	sbci	r25, 0xDF	; 223
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	9a 83       	std	Y+2, r25	; 0x02
	JoystickConfiguration *this_joystick_cfg = &my_cc->joystick_configs[name];
    31c2:	20 91 5f 27 	lds	r18, 0x275F
    31c6:	30 91 60 27 	lds	r19, 0x2760
    31ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    31cc:	48 2f       	mov	r20, r24
    31ce:	50 e0       	ldi	r21, 0x00	; 0
    31d0:	66 e1       	ldi	r22, 0x16	; 22
    31d2:	64 9f       	mul	r22, r20
    31d4:	c0 01       	movw	r24, r0
    31d6:	65 9f       	mul	r22, r21
    31d8:	90 0d       	add	r25, r0
    31da:	11 24       	eor	r1, r1
    31dc:	8f 56       	subi	r24, 0x6F	; 111
    31de:	9f 4f       	sbci	r25, 0xFF	; 255
    31e0:	82 0f       	add	r24, r18
    31e2:	93 1f       	adc	r25, r19
    31e4:	8b 83       	std	Y+3, r24	; 0x03
    31e6:	9c 83       	std	Y+4, r25	; 0x04
	
	uint16_xy raw = {x,y};
    31e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    31ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    31ec:	8d 83       	std	Y+5, r24	; 0x05
    31ee:	9e 83       	std	Y+6, r25	; 0x06
    31f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    31f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    31f4:	8f 83       	std	Y+7, r24	; 0x07
    31f6:	98 87       	std	Y+8, r25	; 0x08
	int8_xy out;
	AnalogJoystickAdj( center[name], this_joystick_cfg, &raw, &out );
    31f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    31fa:	88 2f       	mov	r24, r24
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	87 5b       	subi	r24, 0xB7	; 183
    3204:	9f 4d       	sbci	r25, 0xDF	; 223
    3206:	fc 01       	movw	r30, r24
    3208:	80 81       	ld	r24, Z
    320a:	91 81       	ldd	r25, Z+1	; 0x01
    320c:	9e 01       	movw	r18, r28
    320e:	27 5f       	subi	r18, 0xF7	; 247
    3210:	3f 4f       	sbci	r19, 0xFF	; 255
    3212:	ae 01       	movw	r20, r28
    3214:	4b 5f       	subi	r20, 0xFB	; 251
    3216:	5f 4f       	sbci	r21, 0xFF	; 255
    3218:	6b 81       	ldd	r22, Y+3	; 0x03
    321a:	7c 81       	ldd	r23, Y+4	; 0x04
    321c:	0e 94 4e 21 	call	0x429c	; 0x429c <AnalogJoystickAdj>
	
	if( name==JOYSTICK_LEFT)
    3220:	8b 85       	ldd	r24, Y+11	; 0x0b
    3222:	88 23       	and	r24, r24
    3224:	39 f4       	brne	.+14     	; 0x3234 <jStickJoystickHandler+0xb0>
	{
		report.leftx = out.x;
    3226:	89 85       	ldd	r24, Y+9	; 0x09
    3228:	80 93 62 28 	sts	0x2862, r24
		report.lefty = out.y;
    322c:	8a 85       	ldd	r24, Y+10	; 0x0a
    322e:	80 93 63 28 	sts	0x2863, r24
    3232:	0c c0       	rjmp	.+24     	; 0x324c <jStickJoystickHandler+0xc8>
	}
	else
	{
		//assert(name==JOYSTICK_RIGHT);
		report.rightx = out.x;
    3234:	89 85       	ldd	r24, Y+9	; 0x09
    3236:	80 93 64 28 	sts	0x2864, r24
		report.righty = out.y;
    323a:	8a 85       	ldd	r24, Y+10	; 0x0a
    323c:	80 93 65 28 	sts	0x2865, r24
	
		if(jStickJoystickChanged())
    3240:	66 dd       	rcall	.-1332   	; 0x2d0e <jStickJoystickChanged>
    3242:	88 23       	and	r24, r24
    3244:	19 f0       	breq	.+6      	; 0x324c <jStickJoystickHandler+0xc8>
		{
			jdelta = true; //sets do_send_rpt if not already set
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	80 93 67 27 	sts	0x2767, r24
		}
	}
}
    324c:	2f 96       	adiw	r28, 0x0f	; 15
    324e:	cd bf       	out	0x3d, r28	; 61
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	df 91       	pop	r29
    3254:	cf 91       	pop	r28
    3256:	08 95       	ret

00003258 <jStickSendReport>:

// Sends a joystick report when needed:
void jStickSendReport(void) {
    3258:	cf 93       	push	r28
    325a:	df 93       	push	r29
    325c:	00 d0       	rcall	.+0      	; 0x325e <jStickSendReport+0x6>
    325e:	00 d0       	rcall	.+0      	; 0x3260 <jStickSendReport+0x8>
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
	int i;
	unsigned char * u;
	
	u = (unsigned char *) &report;
    3264:	8f e5       	ldi	r24, 0x5F	; 95
    3266:	98 e2       	ldi	r25, 0x28	; 40
    3268:	8b 83       	std	Y+3, r24	; 0x03
    326a:	9c 83       	std	Y+4, r25	; 0x04
	
	for(i=0; i<JSTICK_RPT_BYTES; i++)
    326c:	19 82       	std	Y+1, r1	; 0x01
    326e:	1a 82       	std	Y+2, r1	; 0x02
    3270:	10 c0       	rjmp	.+32     	; 0x3292 <jStickSendReport+0x3a>
	{
		sendBTChar(*u);
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	9c 81       	ldd	r25, Y+4	; 0x04
    3276:	fc 01       	movw	r30, r24
    3278:	80 81       	ld	r24, Z
    327a:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
		u++;
    327e:	8b 81       	ldd	r24, Y+3	; 0x03
    3280:	9c 81       	ldd	r25, Y+4	; 0x04
    3282:	01 96       	adiw	r24, 0x01	; 1
    3284:	8b 83       	std	Y+3, r24	; 0x03
    3286:	9c 83       	std	Y+4, r25	; 0x04
	int i;
	unsigned char * u;
	
	u = (unsigned char *) &report;
	
	for(i=0; i<JSTICK_RPT_BYTES; i++)
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	9a 81       	ldd	r25, Y+2	; 0x02
    328c:	01 96       	adiw	r24, 0x01	; 1
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	9a 81       	ldd	r25, Y+2	; 0x02
    3296:	8a 30       	cpi	r24, 0x0A	; 10
    3298:	91 05       	cpc	r25, r1
    329a:	5c f3       	brlt	.-42     	; 0x3272 <jStickSendReport+0x1a>
	{
		sendBTChar(*u);
		u++;
	}
    329c:	24 96       	adiw	r28, 0x04	; 4
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	de bf       	out	0x3e, r29	; 62
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	08 95       	ret

000032a8 <keyboardInit>:
static uint32_t pressed_buttons = 0;

// Local function to handle keyboard button presses.
void ChangeButtonPressState(uint8_t name, enum ButtonState state);

void keyboardInit(struct ControllerConfiguration *cc) {
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <keyboardInit+0x6>
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	9a 83       	std	Y+2, r25	; 0x02
	my_cc = cc;
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ba:	80 93 68 27 	sts	0x2768, r24
    32be:	90 93 69 27 	sts	0x2769, r25
	BluetoothKeyboardMode();
    32c2:	0e 94 72 40 	call	0x80e4	; 0x80e4 <BluetoothKeyboardMode>
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	08 95       	ret

000032d0 <keyboardButtonHandler>:

void keyboardButtonHandler(enum ButtonName name, enum ButtonState state) {
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <keyboardButtonHandler+0x6>
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	6a 83       	std	Y+2, r22	; 0x02
	ChangeButtonPressState((uint8_t)name, state);
    32de:	6a 81       	ldd	r22, Y+2	; 0x02
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	1d d1       	rcall	.+570    	; 0x351e <ChangeButtonPressState>
}
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	df 91       	pop	r29
    32ea:	cf 91       	pop	r28
    32ec:	08 95       	ret

000032ee <keyboardJoystickHandler>:

void keyboardJoystickHandler(enum JoystickName name, uint16_t x, uint16_t y) {
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    32f6:	62 97       	sbiw	r28, 0x12	; 18
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	8e 87       	std	Y+14, r24	; 0x0e
    32fe:	6f 87       	std	Y+15, r22	; 0x0f
    3300:	78 8b       	std	Y+16, r23	; 0x10
    3302:	49 8b       	std	Y+17, r20	; 0x11
    3304:	5a 8b       	std	Y+18, r21	; 0x12
	static enum JoystickButtonState state_y[NUM_JOYSTICKS];
	JoystickConfiguration *this_joystick;
	uint8_t joystick_button_base;

	// Get information about this joystick:
	this_joystick = &(my_cc->joystick_configs[name]);
    3306:	20 91 68 27 	lds	r18, 0x2768
    330a:	30 91 69 27 	lds	r19, 0x2769
    330e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3310:	48 2f       	mov	r20, r24
    3312:	50 e0       	ldi	r21, 0x00	; 0
    3314:	66 e1       	ldi	r22, 0x16	; 22
    3316:	64 9f       	mul	r22, r20
    3318:	c0 01       	movw	r24, r0
    331a:	65 9f       	mul	r22, r21
    331c:	90 0d       	add	r25, r0
    331e:	11 24       	eor	r1, r1
    3320:	8f 56       	subi	r24, 0x6F	; 111
    3322:	9f 4f       	sbci	r25, 0xFF	; 255
    3324:	82 0f       	add	r24, r18
    3326:	93 1f       	adc	r25, r19
    3328:	89 83       	std	Y+1, r24	; 0x01
    332a:	9a 83       	std	Y+2, r25	; 0x02

	// Get the base index for these joystick buttons:
	joystick_button_base = NUM_BUTTONS + 4 * name;
    332c:	8e 85       	ldd	r24, Y+14	; 0x0e
    332e:	88 2f       	mov	r24, r24
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	04 96       	adiw	r24, 0x04	; 4
    3334:	88 0f       	add	r24, r24
    3336:	88 0f       	add	r24, r24
    3338:	8b 83       	std	Y+3, r24	; 0x03
	
	uint16_xy raw = {x,y};
    333a:	8f 85       	ldd	r24, Y+15	; 0x0f
    333c:	98 89       	ldd	r25, Y+16	; 0x10
    333e:	8e 83       	std	Y+6, r24	; 0x06
    3340:	9f 83       	std	Y+7, r25	; 0x07
    3342:	89 89       	ldd	r24, Y+17	; 0x11
    3344:	9a 89       	ldd	r25, Y+18	; 0x12
    3346:	88 87       	std	Y+8, r24	; 0x08
    3348:	99 87       	std	Y+9, r25	; 0x09
		
		int16_xy * deadzone = (int16_xy *) &(this_joystick->x_deadzone);
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	9a 81       	ldd	r25, Y+2	; 0x02
    334e:	42 96       	adiw	r24, 0x12	; 18
    3350:	8c 83       	std	Y+4, r24	; 0x04
    3352:	9d 83       	std	Y+5, r25	; 0x05
		int16_xy out;
		SimpleJoystickAdj( center[name], deadzone, &raw, &out );
    3354:	8e 85       	ldd	r24, Y+14	; 0x0e
    3356:	88 2f       	mov	r24, r24
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	82 5b       	subi	r24, 0xB2	; 178
    3360:	9f 4d       	sbci	r25, 0xDF	; 223
    3362:	fc 01       	movw	r30, r24
    3364:	80 81       	ld	r24, Z
    3366:	91 81       	ldd	r25, Z+1	; 0x01
    3368:	9e 01       	movw	r18, r28
    336a:	26 5f       	subi	r18, 0xF6	; 246
    336c:	3f 4f       	sbci	r19, 0xFF	; 255
    336e:	ae 01       	movw	r20, r28
    3370:	4a 5f       	subi	r20, 0xFA	; 250
    3372:	5f 4f       	sbci	r21, 0xFF	; 255
    3374:	6c 81       	ldd	r22, Y+4	; 0x04
    3376:	7d 81       	ldd	r23, Y+5	; 0x05
    3378:	08 d7       	rcall	.+3600   	; 0x418a <SimpleJoystickAdj>
		
		// Check the X axis:
		switch (state_x[name]) {
    337a:	8e 85       	ldd	r24, Y+14	; 0x0e
    337c:	88 2f       	mov	r24, r24
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	82 59       	subi	r24, 0x92	; 146
    3382:	98 4d       	sbci	r25, 0xD8	; 216
    3384:	fc 01       	movw	r30, r24
    3386:	80 81       	ld	r24, Z
    3388:	88 2f       	mov	r24, r24
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	83 30       	cpi	r24, 0x03	; 3
    338e:	91 05       	cpc	r25, r1
    3390:	09 f4       	brne	.+2      	; 0x3394 <keyboardJoystickHandler+0xa6>
    3392:	3b c0       	rjmp	.+118    	; 0x340a <keyboardJoystickHandler+0x11c>
    3394:	84 30       	cpi	r24, 0x04	; 4
    3396:	91 05       	cpc	r25, r1
    3398:	21 f0       	breq	.+8      	; 0x33a2 <keyboardJoystickHandler+0xb4>
    339a:	82 30       	cpi	r24, 0x02	; 2
    339c:	91 05       	cpc	r25, r1
    339e:	21 f1       	breq	.+72     	; 0x33e8 <keyboardJoystickHandler+0xfa>
    33a0:	46 c0       	rjmp	.+140    	; 0x342e <keyboardJoystickHandler+0x140>
			case JBSTATE_IDLE:
			// Do we need to enter the left state?
			if( out.x<0 )
    33a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    33a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    33a6:	99 23       	and	r25, r25
    33a8:	6c f4       	brge	.+26     	; 0x33c4 <keyboardJoystickHandler+0xd6>
			{
				state_x[name] = JBSTATE_LEFT;
    33aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    33ac:	88 2f       	mov	r24, r24
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	82 59       	subi	r24, 0x92	; 146
    33b2:	98 4d       	sbci	r25, 0xD8	; 216
    33b4:	22 e0       	ldi	r18, 0x02	; 2
    33b6:	fc 01       	movw	r30, r24
    33b8:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_LEFT, BUTTON_PRESSED);
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	8e 5f       	subi	r24, 0xFE	; 254
    33be:	61 e0       	ldi	r22, 0x01	; 1
    33c0:	ae d0       	rcall	.+348    	; 0x351e <ChangeButtonPressState>
			else if( out.x>0 )
			{
				state_x[name] = JBSTATE_RIGHT;
				ChangeButtonPressState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
			}
			break;
    33c2:	3e c0       	rjmp	.+124    	; 0x3440 <keyboardJoystickHandler+0x152>
			{
				state_x[name] = JBSTATE_LEFT;
				ChangeButtonPressState(joystick_button_base + JBSTATE_LEFT, BUTTON_PRESSED);
			}
			// Do we need to enter the right state?
			else if( out.x>0 )
    33c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    33c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    33c8:	18 16       	cp	r1, r24
    33ca:	19 06       	cpc	r1, r25
    33cc:	cc f5       	brge	.+114    	; 0x3440 <keyboardJoystickHandler+0x152>
			{
				state_x[name] = JBSTATE_RIGHT;
    33ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    33d0:	88 2f       	mov	r24, r24
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	82 59       	subi	r24, 0x92	; 146
    33d6:	98 4d       	sbci	r25, 0xD8	; 216
    33d8:	23 e0       	ldi	r18, 0x03	; 3
    33da:	fc 01       	movw	r30, r24
    33dc:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	8d 5f       	subi	r24, 0xFD	; 253
    33e2:	61 e0       	ldi	r22, 0x01	; 1
    33e4:	9c d0       	rcall	.+312    	; 0x351e <ChangeButtonPressState>
			}
			break;
    33e6:	2c c0       	rjmp	.+88     	; 0x3440 <keyboardJoystickHandler+0x152>
			case JBSTATE_LEFT:
			// Do we need to leave the left state?
			if( out.x>=0 )
    33e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    33ec:	99 23       	and	r25, r25
    33ee:	54 f1       	brlt	.+84     	; 0x3444 <keyboardJoystickHandler+0x156>
			{
				state_x[name] = JBSTATE_IDLE;
    33f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    33f2:	88 2f       	mov	r24, r24
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	82 59       	subi	r24, 0x92	; 146
    33f8:	98 4d       	sbci	r25, 0xD8	; 216
    33fa:	24 e0       	ldi	r18, 0x04	; 4
    33fc:	fc 01       	movw	r30, r24
    33fe:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_LEFT, BUTTON_RELEASED);
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	8e 5f       	subi	r24, 0xFE	; 254
    3404:	60 e0       	ldi	r22, 0x00	; 0
    3406:	8b d0       	rcall	.+278    	; 0x351e <ChangeButtonPressState>
			}
			break;
    3408:	1d c0       	rjmp	.+58     	; 0x3444 <keyboardJoystickHandler+0x156>
			case JBSTATE_RIGHT:
			// Do we need to leave the right state?
			if( out.x<=0 )
    340a:	8a 85       	ldd	r24, Y+10	; 0x0a
    340c:	9b 85       	ldd	r25, Y+11	; 0x0b
    340e:	18 16       	cp	r1, r24
    3410:	19 06       	cpc	r1, r25
    3412:	d4 f0       	brlt	.+52     	; 0x3448 <keyboardJoystickHandler+0x15a>
			{
				state_x[name] = JBSTATE_IDLE;
    3414:	8e 85       	ldd	r24, Y+14	; 0x0e
    3416:	88 2f       	mov	r24, r24
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	82 59       	subi	r24, 0x92	; 146
    341c:	98 4d       	sbci	r25, 0xD8	; 216
    341e:	24 e0       	ldi	r18, 0x04	; 4
    3420:	fc 01       	movw	r30, r24
    3422:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_RIGHT, BUTTON_RELEASED);
    3424:	8b 81       	ldd	r24, Y+3	; 0x03
    3426:	8d 5f       	subi	r24, 0xFD	; 253
    3428:	60 e0       	ldi	r22, 0x00	; 0
    342a:	79 d0       	rcall	.+242    	; 0x351e <ChangeButtonPressState>
			}
			break;
    342c:	0d c0       	rjmp	.+26     	; 0x3448 <keyboardJoystickHandler+0x15a>
			default:
			state_x[name] = JBSTATE_IDLE;
    342e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3430:	88 2f       	mov	r24, r24
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	82 59       	subi	r24, 0x92	; 146
    3436:	98 4d       	sbci	r25, 0xD8	; 216
    3438:	24 e0       	ldi	r18, 0x04	; 4
    343a:	fc 01       	movw	r30, r24
    343c:	20 83       	st	Z, r18
			break;
    343e:	05 c0       	rjmp	.+10     	; 0x344a <keyboardJoystickHandler+0x15c>
			else if( out.x>0 )
			{
				state_x[name] = JBSTATE_RIGHT;
				ChangeButtonPressState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
			}
			break;
    3440:	00 00       	nop
    3442:	03 c0       	rjmp	.+6      	; 0x344a <keyboardJoystickHandler+0x15c>
			if( out.x>=0 )
			{
				state_x[name] = JBSTATE_IDLE;
				ChangeButtonPressState(joystick_button_base + JBSTATE_LEFT, BUTTON_RELEASED);
			}
			break;
    3444:	00 00       	nop
    3446:	01 c0       	rjmp	.+2      	; 0x344a <keyboardJoystickHandler+0x15c>
			if( out.x<=0 )
			{
				state_x[name] = JBSTATE_IDLE;
				ChangeButtonPressState(joystick_button_base + JBSTATE_RIGHT, BUTTON_RELEASED);
			}
			break;
    3448:	00 00       	nop
			state_x[name] = JBSTATE_IDLE;
			break;
		};

		// Check the Y axis:
		switch (state_y[name]) {
    344a:	8e 85       	ldd	r24, Y+14	; 0x0e
    344c:	88 2f       	mov	r24, r24
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	80 59       	subi	r24, 0x90	; 144
    3452:	98 4d       	sbci	r25, 0xD8	; 216
    3454:	fc 01       	movw	r30, r24
    3456:	80 81       	ld	r24, Z
    3458:	88 2f       	mov	r24, r24
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	81 30       	cpi	r24, 0x01	; 1
    345e:	91 05       	cpc	r25, r1
    3460:	b9 f1       	breq	.+110    	; 0x34d0 <keyboardJoystickHandler+0x1e2>
    3462:	84 30       	cpi	r24, 0x04	; 4
    3464:	91 05       	cpc	r25, r1
    3466:	19 f0       	breq	.+6      	; 0x346e <keyboardJoystickHandler+0x180>
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	11 f1       	breq	.+68     	; 0x34b0 <keyboardJoystickHandler+0x1c2>
    346c:	43 c0       	rjmp	.+134    	; 0x34f4 <keyboardJoystickHandler+0x206>
			case JBSTATE_IDLE:
			// Do we need to enter the up state?
			if( out.y<0 )
    346e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3470:	9d 85       	ldd	r25, Y+13	; 0x0d
    3472:	99 23       	and	r25, r25
    3474:	5c f4       	brge	.+22     	; 0x348c <keyboardJoystickHandler+0x19e>
			{
				state_y[name] = JBSTATE_UP;
    3476:	8e 85       	ldd	r24, Y+14	; 0x0e
    3478:	88 2f       	mov	r24, r24
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	80 59       	subi	r24, 0x90	; 144
    347e:	98 4d       	sbci	r25, 0xD8	; 216
    3480:	fc 01       	movw	r30, r24
    3482:	10 82       	st	Z, r1
				ChangeButtonPressState(joystick_button_base + JBSTATE_UP, BUTTON_PRESSED);
    3484:	61 e0       	ldi	r22, 0x01	; 1
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	4a d0       	rcall	.+148    	; 0x351e <ChangeButtonPressState>
			else if( out.y>0 )
			{
				state_y[name] = JBSTATE_DOWN;
				ChangeButtonPressState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
			}
			break;
    348a:	3e c0       	rjmp	.+124    	; 0x3508 <keyboardJoystickHandler+0x21a>
			{
				state_y[name] = JBSTATE_UP;
				ChangeButtonPressState(joystick_button_base + JBSTATE_UP, BUTTON_PRESSED);
			}
			// Do we need to enter the down state?
			else if( out.y>0 )
    348c:	8c 85       	ldd	r24, Y+12	; 0x0c
    348e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3490:	18 16       	cp	r1, r24
    3492:	19 06       	cpc	r1, r25
    3494:	cc f5       	brge	.+114    	; 0x3508 <keyboardJoystickHandler+0x21a>
			{
				state_y[name] = JBSTATE_DOWN;
    3496:	8e 85       	ldd	r24, Y+14	; 0x0e
    3498:	88 2f       	mov	r24, r24
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	80 59       	subi	r24, 0x90	; 144
    349e:	98 4d       	sbci	r25, 0xD8	; 216
    34a0:	21 e0       	ldi	r18, 0x01	; 1
    34a2:	fc 01       	movw	r30, r24
    34a4:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
    34a6:	8b 81       	ldd	r24, Y+3	; 0x03
    34a8:	8f 5f       	subi	r24, 0xFF	; 255
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	38 d0       	rcall	.+112    	; 0x351e <ChangeButtonPressState>
			}
			break;
    34ae:	2c c0       	rjmp	.+88     	; 0x3508 <keyboardJoystickHandler+0x21a>
			case JBSTATE_UP:
			// Do we need to leave the up state?
			if( out.y>=0 )
    34b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    34b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    34b4:	99 23       	and	r25, r25
    34b6:	54 f1       	brlt	.+84     	; 0x350c <keyboardJoystickHandler+0x21e>
			{
				state_y[name] = JBSTATE_IDLE;
    34b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    34ba:	88 2f       	mov	r24, r24
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	80 59       	subi	r24, 0x90	; 144
    34c0:	98 4d       	sbci	r25, 0xD8	; 216
    34c2:	24 e0       	ldi	r18, 0x04	; 4
    34c4:	fc 01       	movw	r30, r24
    34c6:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_UP, BUTTON_RELEASED);
    34c8:	60 e0       	ldi	r22, 0x00	; 0
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	28 d0       	rcall	.+80     	; 0x351e <ChangeButtonPressState>
			}
			break;
    34ce:	1e c0       	rjmp	.+60     	; 0x350c <keyboardJoystickHandler+0x21e>
			case JBSTATE_DOWN:
			// Do we need to leave the down state?
			if( out.y<=0 )
    34d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    34d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    34d4:	18 16       	cp	r1, r24
    34d6:	19 06       	cpc	r1, r25
    34d8:	dc f0       	brlt	.+54     	; 0x3510 <keyboardJoystickHandler+0x222>
			{
				state_y[name] = JBSTATE_IDLE;
    34da:	8e 85       	ldd	r24, Y+14	; 0x0e
    34dc:	88 2f       	mov	r24, r24
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	80 59       	subi	r24, 0x90	; 144
    34e2:	98 4d       	sbci	r25, 0xD8	; 216
    34e4:	24 e0       	ldi	r18, 0x04	; 4
    34e6:	fc 01       	movw	r30, r24
    34e8:	20 83       	st	Z, r18
				ChangeButtonPressState(joystick_button_base + JBSTATE_DOWN, BUTTON_RELEASED);
    34ea:	8b 81       	ldd	r24, Y+3	; 0x03
    34ec:	8f 5f       	subi	r24, 0xFF	; 255
    34ee:	60 e0       	ldi	r22, 0x00	; 0
    34f0:	16 d0       	rcall	.+44     	; 0x351e <ChangeButtonPressState>
			}
			break;
    34f2:	0e c0       	rjmp	.+28     	; 0x3510 <keyboardJoystickHandler+0x222>
			default:
			state_y[name] = JBSTATE_IDLE;
    34f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    34f6:	88 2f       	mov	r24, r24
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	80 59       	subi	r24, 0x90	; 144
    34fc:	98 4d       	sbci	r25, 0xD8	; 216
    34fe:	24 e0       	ldi	r18, 0x04	; 4
    3500:	fc 01       	movw	r30, r24
    3502:	20 83       	st	Z, r18
			break;
    3504:	00 00       	nop
    3506:	05 c0       	rjmp	.+10     	; 0x3512 <keyboardJoystickHandler+0x224>
			else if( out.y>0 )
			{
				state_y[name] = JBSTATE_DOWN;
				ChangeButtonPressState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
			}
			break;
    3508:	00 00       	nop
    350a:	03 c0       	rjmp	.+6      	; 0x3512 <keyboardJoystickHandler+0x224>
			if( out.y>=0 )
			{
				state_y[name] = JBSTATE_IDLE;
				ChangeButtonPressState(joystick_button_base + JBSTATE_UP, BUTTON_RELEASED);
			}
			break;
    350c:	00 00       	nop
    350e:	01 c0       	rjmp	.+2      	; 0x3512 <keyboardJoystickHandler+0x224>
			if( out.y<=0 )
			{
				state_y[name] = JBSTATE_IDLE;
				ChangeButtonPressState(joystick_button_base + JBSTATE_DOWN, BUTTON_RELEASED);
			}
			break;
    3510:	00 00       	nop
			default:
			state_y[name] = JBSTATE_IDLE;
			break;
		};	
}
    3512:	62 96       	adiw	r28, 0x12	; 18
    3514:	cd bf       	out	0x3d, r28	; 61
    3516:	de bf       	out	0x3e, r29	; 62
    3518:	df 91       	pop	r29
    351a:	cf 91       	pop	r28
    351c:	08 95       	ret

0000351e <ChangeButtonPressState>:

void ChangeButtonPressState(uint8_t name, enum ButtonState state) {
    351e:	ef 92       	push	r14
    3520:	ff 92       	push	r15
    3522:	0f 93       	push	r16
    3524:	1f 93       	push	r17
    3526:	cf 93       	push	r28
    3528:	df 93       	push	r29
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	2f 97       	sbiw	r28, 0x0f	; 15
    3530:	cd bf       	out	0x3d, r28	; 61
    3532:	de bf       	out	0x3e, r29	; 62
    3534:	8e 87       	std	Y+14, r24	; 0x0e
    3536:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t scan_codes[MAX_SCANCODES];
	uint8_t modifiers = 0;
    3538:	19 82       	std	Y+1, r1	; 0x01
	uint8_t count;
	struct ButtonConfiguration *this_button;
	struct HIDReport *this_joystick_button;
	uint8_t i;
	
	if (state == BUTTON_PRESSED) {
    353a:	8f 85       	ldd	r24, Y+15	; 0x0f
    353c:	81 30       	cpi	r24, 0x01	; 1
    353e:	31 f5       	brne	.+76     	; 0x358c <ChangeButtonPressState+0x6e>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    3540:	8e 85       	ldd	r24, Y+14	; 0x0e
    3542:	28 2f       	mov	r18, r24
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	a0 e0       	ldi	r26, 0x00	; 0
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	7c 01       	movw	r14, r24
    3550:	8d 01       	movw	r16, r26
    3552:	04 c0       	rjmp	.+8      	; 0x355c <ChangeButtonPressState+0x3e>
    3554:	ee 0c       	add	r14, r14
    3556:	ff 1c       	adc	r15, r15
    3558:	00 1f       	adc	r16, r16
    355a:	11 1f       	adc	r17, r17
    355c:	2a 95       	dec	r18
    355e:	d2 f7       	brpl	.-12     	; 0x3554 <ChangeButtonPressState+0x36>
    3560:	a8 01       	movw	r20, r16
    3562:	97 01       	movw	r18, r14
    3564:	80 91 6a 27 	lds	r24, 0x276A
    3568:	90 91 6b 27 	lds	r25, 0x276B
    356c:	a0 91 6c 27 	lds	r26, 0x276C
    3570:	b0 91 6d 27 	lds	r27, 0x276D
    3574:	82 2b       	or	r24, r18
    3576:	93 2b       	or	r25, r19
    3578:	a4 2b       	or	r26, r20
    357a:	b5 2b       	or	r27, r21
    357c:	80 93 6a 27 	sts	0x276A, r24
    3580:	90 93 6b 27 	sts	0x276B, r25
    3584:	a0 93 6c 27 	sts	0x276C, r26
    3588:	b0 93 6d 27 	sts	0x276D, r27
	}

	if (state == BUTTON_RELEASED) {
    358c:	8f 85       	ldd	r24, Y+15	; 0x0f
    358e:	88 23       	and	r24, r24
    3590:	41 f5       	brne	.+80     	; 0x35e2 <ChangeButtonPressState+0xc4>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    3592:	8e 85       	ldd	r24, Y+14	; 0x0e
    3594:	28 2f       	mov	r18, r24
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	a0 e0       	ldi	r26, 0x00	; 0
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <ChangeButtonPressState+0x8c>
    35a2:	88 0f       	add	r24, r24
    35a4:	99 1f       	adc	r25, r25
    35a6:	aa 1f       	adc	r26, r26
    35a8:	bb 1f       	adc	r27, r27
    35aa:	2a 95       	dec	r18
    35ac:	d2 f7       	brpl	.-12     	; 0x35a2 <ChangeButtonPressState+0x84>
    35ae:	9c 01       	movw	r18, r24
    35b0:	ad 01       	movw	r20, r26
    35b2:	20 95       	com	r18
    35b4:	30 95       	com	r19
    35b6:	40 95       	com	r20
    35b8:	50 95       	com	r21
    35ba:	80 91 6a 27 	lds	r24, 0x276A
    35be:	90 91 6b 27 	lds	r25, 0x276B
    35c2:	a0 91 6c 27 	lds	r26, 0x276C
    35c6:	b0 91 6d 27 	lds	r27, 0x276D
    35ca:	82 23       	and	r24, r18
    35cc:	93 23       	and	r25, r19
    35ce:	a4 23       	and	r26, r20
    35d0:	b5 23       	and	r27, r21
    35d2:	80 93 6a 27 	sts	0x276A, r24
    35d6:	90 93 6b 27 	sts	0x276B, r25
    35da:	a0 93 6c 27 	sts	0x276C, r26
    35de:	b0 93 6d 27 	sts	0x276D, r27
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
    35e2:	1d 82       	std	Y+5, r1	; 0x05
    35e4:	1a 82       	std	Y+2, r1	; 0x02
    35e6:	69 c0       	rjmp	.+210    	; 0x36ba <ChangeButtonPressState+0x19c>
		// Is this button pressed?
		if (pressed_buttons & (1ul<<i)) {
    35e8:	80 91 6a 27 	lds	r24, 0x276A
    35ec:	90 91 6b 27 	lds	r25, 0x276B
    35f0:	a0 91 6c 27 	lds	r26, 0x276C
    35f4:	b0 91 6d 27 	lds	r27, 0x276D
    35f8:	2d 81       	ldd	r18, Y+5	; 0x05
    35fa:	22 2f       	mov	r18, r18
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	02 2e       	mov	r0, r18
    3600:	04 c0       	rjmp	.+8      	; 0x360a <ChangeButtonPressState+0xec>
    3602:	b6 95       	lsr	r27
    3604:	a7 95       	ror	r26
    3606:	97 95       	ror	r25
    3608:	87 95       	ror	r24
    360a:	0a 94       	dec	r0
    360c:	d2 f7       	brpl	.-12     	; 0x3602 <ChangeButtonPressState+0xe4>
    360e:	81 70       	andi	r24, 0x01	; 1
    3610:	99 27       	eor	r25, r25
    3612:	aa 27       	eor	r26, r26
    3614:	bb 27       	eor	r27, r27
    3616:	00 97       	sbiw	r24, 0x00	; 0
    3618:	a1 05       	cpc	r26, r1
    361a:	b1 05       	cpc	r27, r1
    361c:	09 f4       	brne	.+2      	; 0x3620 <ChangeButtonPressState+0x102>
    361e:	4a c0       	rjmp	.+148    	; 0x36b4 <ChangeButtonPressState+0x196>
			// Get information about this button:
			this_button = &(my_cc->button_configs[i]);
    3620:	40 91 68 27 	lds	r20, 0x2768
    3624:	50 91 69 27 	lds	r21, 0x2769
    3628:	8d 81       	ldd	r24, Y+5	; 0x05
    362a:	28 2f       	mov	r18, r24
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	c9 01       	movw	r24, r18
    3630:	88 0f       	add	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	88 0f       	add	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	88 0f       	add	r24, r24
    363a:	99 1f       	adc	r25, r25
    363c:	82 0f       	add	r24, r18
    363e:	93 1f       	adc	r25, r19
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	84 0f       	add	r24, r20
    3644:	95 1f       	adc	r25, r21
    3646:	8e 83       	std	Y+6, r24	; 0x06
    3648:	9f 83       	std	Y+7, r25	; 0x07
			
			// Is it a keyboard button?
			if (this_button->keyboard_and_mouse.input_type == INPUT_TYPE_KEYBOARD) {
    364a:	8e 81       	ldd	r24, Y+6	; 0x06
    364c:	9f 81       	ldd	r25, Y+7	; 0x07
    364e:	fc 01       	movw	r30, r24
    3650:	81 81       	ldd	r24, Z+1	; 0x01
    3652:	88 70       	andi	r24, 0x08	; 8
    3654:	88 23       	and	r24, r24
    3656:	71 f5       	brne	.+92     	; 0x36b4 <ChangeButtonPressState+0x196>
				// Does this button have a scancode associated with it?
				if (this_button->button_down.scan_code != 0) {
    3658:	8e 81       	ldd	r24, Y+6	; 0x06
    365a:	9f 81       	ldd	r25, Y+7	; 0x07
    365c:	fc 01       	movw	r30, r24
    365e:	85 81       	ldd	r24, Z+5	; 0x05
    3660:	88 23       	and	r24, r24
    3662:	09 f1       	breq	.+66     	; 0x36a6 <ChangeButtonPressState+0x188>
					// Is this a new scancode for the list?
					if (memchr(&scan_codes, this_button->button_down.scan_code, count) == NULL) {
    3664:	8a 81       	ldd	r24, Y+2	; 0x02
    3666:	48 2f       	mov	r20, r24
    3668:	50 e0       	ldi	r21, 0x00	; 0
    366a:	8e 81       	ldd	r24, Y+6	; 0x06
    366c:	9f 81       	ldd	r25, Y+7	; 0x07
    366e:	fc 01       	movw	r30, r24
    3670:	85 81       	ldd	r24, Z+5	; 0x05
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	ce 01       	movw	r24, r28
    3678:	08 96       	adiw	r24, 0x08	; 8
    367a:	b9 01       	movw	r22, r18
    367c:	0e 94 60 48 	call	0x90c0	; 0x90c0 <memchr>
    3680:	00 97       	sbiw	r24, 0x00	; 0
    3682:	89 f4       	brne	.+34     	; 0x36a6 <ChangeButtonPressState+0x188>
						// Then add it to the hid report:
						scan_codes[count] = this_button->button_down.scan_code;
    3684:	8a 81       	ldd	r24, Y+2	; 0x02
    3686:	88 2f       	mov	r24, r24
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	2e 81       	ldd	r18, Y+6	; 0x06
    368c:	3f 81       	ldd	r19, Y+7	; 0x07
    368e:	f9 01       	movw	r30, r18
    3690:	45 81       	ldd	r20, Z+5	; 0x05
    3692:	9e 01       	movw	r18, r28
    3694:	28 5f       	subi	r18, 0xF8	; 248
    3696:	3f 4f       	sbci	r19, 0xFF	; 255
    3698:	82 0f       	add	r24, r18
    369a:	93 1f       	adc	r25, r19
    369c:	fc 01       	movw	r30, r24
    369e:	40 83       	st	Z, r20
						
						// Increment the count:
						count++;
    36a0:	8a 81       	ldd	r24, Y+2	; 0x02
    36a2:	8f 5f       	subi	r24, 0xFF	; 255
    36a4:	8a 83       	std	Y+2, r24	; 0x02
					}
				}
				
				// OR any modifiers for this button:
				modifiers |= this_button->button_down.modifier;
    36a6:	8e 81       	ldd	r24, Y+6	; 0x06
    36a8:	9f 81       	ldd	r25, Y+7	; 0x07
    36aa:	fc 01       	movw	r30, r24
    36ac:	84 81       	ldd	r24, Z+4	; 0x04
    36ae:	99 81       	ldd	r25, Y+1	; 0x01
    36b0:	89 2b       	or	r24, r25
    36b2:	89 83       	std	Y+1, r24	; 0x01
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
    36b4:	8d 81       	ldd	r24, Y+5	; 0x05
    36b6:	8f 5f       	subi	r24, 0xFF	; 255
    36b8:	8d 83       	std	Y+5, r24	; 0x05
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	80 31       	cpi	r24, 0x10	; 16
    36be:	20 f4       	brcc	.+8      	; 0x36c8 <ChangeButtonPressState+0x1aa>
    36c0:	8a 81       	ldd	r24, Y+2	; 0x02
    36c2:	86 30       	cpi	r24, 0x06	; 6
    36c4:	08 f4       	brcc	.+2      	; 0x36c8 <ChangeButtonPressState+0x1aa>
    36c6:	90 cf       	rjmp	.-224    	; 0x35e8 <ChangeButtonPressState+0xca>
			}
		}
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
    36c8:	80 e1       	ldi	r24, 0x10	; 16
    36ca:	8d 83       	std	Y+5, r24	; 0x05
    36cc:	b7 c0       	rjmp	.+366    	; 0x383c <ChangeButtonPressState+0x31e>
		// Is this joystick direction pressed?
		if (pressed_buttons & (1ul<<i)) {
    36ce:	80 91 6a 27 	lds	r24, 0x276A
    36d2:	90 91 6b 27 	lds	r25, 0x276B
    36d6:	a0 91 6c 27 	lds	r26, 0x276C
    36da:	b0 91 6d 27 	lds	r27, 0x276D
    36de:	2d 81       	ldd	r18, Y+5	; 0x05
    36e0:	22 2f       	mov	r18, r18
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	02 2e       	mov	r0, r18
    36e6:	04 c0       	rjmp	.+8      	; 0x36f0 <ChangeButtonPressState+0x1d2>
    36e8:	b6 95       	lsr	r27
    36ea:	a7 95       	ror	r26
    36ec:	97 95       	ror	r25
    36ee:	87 95       	ror	r24
    36f0:	0a 94       	dec	r0
    36f2:	d2 f7       	brpl	.-12     	; 0x36e8 <ChangeButtonPressState+0x1ca>
    36f4:	81 70       	andi	r24, 0x01	; 1
    36f6:	99 27       	eor	r25, r25
    36f8:	aa 27       	eor	r26, r26
    36fa:	bb 27       	eor	r27, r27
    36fc:	00 97       	sbiw	r24, 0x00	; 0
    36fe:	a1 05       	cpc	r26, r1
    3700:	b1 05       	cpc	r27, r1
    3702:	09 f4       	brne	.+2      	; 0x3706 <ChangeButtonPressState+0x1e8>
    3704:	98 c0       	rjmp	.+304    	; 0x3836 <ChangeButtonPressState+0x318>
			// Get information about this joystick direction:
			switch (i) {
    3706:	8d 81       	ldd	r24, Y+5	; 0x05
    3708:	88 2f       	mov	r24, r24
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	83 31       	cpi	r24, 0x13	; 19
    370e:	91 05       	cpc	r25, r1
    3710:	b1 f1       	breq	.+108    	; 0x377e <ChangeButtonPressState+0x260>
    3712:	84 31       	cpi	r24, 0x14	; 20
    3714:	91 05       	cpc	r25, r1
    3716:	54 f4       	brge	.+20     	; 0x372c <ChangeButtonPressState+0x20e>
    3718:	81 31       	cpi	r24, 0x11	; 17
    371a:	91 05       	cpc	r25, r1
    371c:	f1 f0       	breq	.+60     	; 0x375a <ChangeButtonPressState+0x23c>
    371e:	82 31       	cpi	r24, 0x12	; 18
    3720:	91 05       	cpc	r25, r1
    3722:	24 f5       	brge	.+72     	; 0x376c <ChangeButtonPressState+0x24e>
    3724:	80 31       	cpi	r24, 0x10	; 16
    3726:	91 05       	cpc	r25, r1
    3728:	79 f0       	breq	.+30     	; 0x3748 <ChangeButtonPressState+0x22a>
    372a:	56 c0       	rjmp	.+172    	; 0x37d8 <ChangeButtonPressState+0x2ba>
    372c:	85 31       	cpi	r24, 0x15	; 21
    372e:	91 05       	cpc	r25, r1
    3730:	c1 f1       	breq	.+112    	; 0x37a2 <ChangeButtonPressState+0x284>
    3732:	85 31       	cpi	r24, 0x15	; 21
    3734:	91 05       	cpc	r25, r1
    3736:	64 f1       	brlt	.+88     	; 0x3790 <ChangeButtonPressState+0x272>
    3738:	86 31       	cpi	r24, 0x16	; 22
    373a:	91 05       	cpc	r25, r1
    373c:	d9 f1       	breq	.+118    	; 0x37b4 <ChangeButtonPressState+0x296>
    373e:	87 31       	cpi	r24, 0x17	; 23
    3740:	91 05       	cpc	r25, r1
    3742:	09 f4       	brne	.+2      	; 0x3746 <ChangeButtonPressState+0x228>
    3744:	40 c0       	rjmp	.+128    	; 0x37c6 <ChangeButtonPressState+0x2a8>
    3746:	48 c0       	rjmp	.+144    	; 0x37d8 <ChangeButtonPressState+0x2ba>
				case B_JOYSTICK_LEFT_UP:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_up);
    3748:	80 91 68 27 	lds	r24, 0x2768
    374c:	90 91 69 27 	lds	r25, 0x2769
    3750:	8d 56       	subi	r24, 0x6D	; 109
    3752:	9f 4f       	sbci	r25, 0xFF	; 255
    3754:	8b 83       	std	Y+3, r24	; 0x03
    3756:	9c 83       	std	Y+4, r25	; 0x04
				break;
    3758:	40 c0       	rjmp	.+128    	; 0x37da <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_LEFT_DOWN:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_down);
    375a:	80 91 68 27 	lds	r24, 0x2768
    375e:	90 91 69 27 	lds	r25, 0x2769
    3762:	8b 56       	subi	r24, 0x6B	; 107
    3764:	9f 4f       	sbci	r25, 0xFF	; 255
    3766:	8b 83       	std	Y+3, r24	; 0x03
    3768:	9c 83       	std	Y+4, r25	; 0x04
				break;
    376a:	37 c0       	rjmp	.+110    	; 0x37da <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_LEFT_LEFT:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_left);
    376c:	80 91 68 27 	lds	r24, 0x2768
    3770:	90 91 69 27 	lds	r25, 0x2769
    3774:	89 56       	subi	r24, 0x69	; 105
    3776:	9f 4f       	sbci	r25, 0xFF	; 255
    3778:	8b 83       	std	Y+3, r24	; 0x03
    377a:	9c 83       	std	Y+4, r25	; 0x04
				break;
    377c:	2e c0       	rjmp	.+92     	; 0x37da <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_LEFT_RIGHT:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_right);
    377e:	80 91 68 27 	lds	r24, 0x2768
    3782:	90 91 69 27 	lds	r25, 0x2769
    3786:	87 56       	subi	r24, 0x67	; 103
    3788:	9f 4f       	sbci	r25, 0xFF	; 255
    378a:	8b 83       	std	Y+3, r24	; 0x03
    378c:	9c 83       	std	Y+4, r25	; 0x04
				break;
    378e:	25 c0       	rjmp	.+74     	; 0x37da <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_RIGHT_UP:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_up);
    3790:	80 91 68 27 	lds	r24, 0x2768
    3794:	90 91 69 27 	lds	r25, 0x2769
    3798:	87 55       	subi	r24, 0x57	; 87
    379a:	9f 4f       	sbci	r25, 0xFF	; 255
    379c:	8b 83       	std	Y+3, r24	; 0x03
    379e:	9c 83       	std	Y+4, r25	; 0x04
				break;
    37a0:	1c c0       	rjmp	.+56     	; 0x37da <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_RIGHT_DOWN:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_down);
    37a2:	80 91 68 27 	lds	r24, 0x2768
    37a6:	90 91 69 27 	lds	r25, 0x2769
    37aa:	85 55       	subi	r24, 0x55	; 85
    37ac:	9f 4f       	sbci	r25, 0xFF	; 255
    37ae:	8b 83       	std	Y+3, r24	; 0x03
    37b0:	9c 83       	std	Y+4, r25	; 0x04
				break;
    37b2:	13 c0       	rjmp	.+38     	; 0x37da <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_RIGHT_LEFT:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_left);
    37b4:	80 91 68 27 	lds	r24, 0x2768
    37b8:	90 91 69 27 	lds	r25, 0x2769
    37bc:	83 55       	subi	r24, 0x53	; 83
    37be:	9f 4f       	sbci	r25, 0xFF	; 255
    37c0:	8b 83       	std	Y+3, r24	; 0x03
    37c2:	9c 83       	std	Y+4, r25	; 0x04
				break;
    37c4:	0a c0       	rjmp	.+20     	; 0x37da <ChangeButtonPressState+0x2bc>
				case B_JOYSTICK_RIGHT_RIGHT:
				this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_right);
    37c6:	80 91 68 27 	lds	r24, 0x2768
    37ca:	90 91 69 27 	lds	r25, 0x2769
    37ce:	81 55       	subi	r24, 0x51	; 81
    37d0:	9f 4f       	sbci	r25, 0xFF	; 255
    37d2:	8b 83       	std	Y+3, r24	; 0x03
    37d4:	9c 83       	std	Y+4, r25	; 0x04
				break;
    37d6:	01 c0       	rjmp	.+2      	; 0x37da <ChangeButtonPressState+0x2bc>
				default:
				continue;
    37d8:	2e c0       	rjmp	.+92     	; 0x3836 <ChangeButtonPressState+0x318>
			};
			
			// Is there a button press associated with this direction?
			if (this_joystick_button->scan_code != 0) {
    37da:	8b 81       	ldd	r24, Y+3	; 0x03
    37dc:	9c 81       	ldd	r25, Y+4	; 0x04
    37de:	fc 01       	movw	r30, r24
    37e0:	81 81       	ldd	r24, Z+1	; 0x01
    37e2:	88 23       	and	r24, r24
    37e4:	09 f1       	breq	.+66     	; 0x3828 <ChangeButtonPressState+0x30a>
				// Is this a new scancode for the list?
				if (memchr(scan_codes, this_joystick_button->scan_code, count) == NULL) {
    37e6:	8a 81       	ldd	r24, Y+2	; 0x02
    37e8:	48 2f       	mov	r20, r24
    37ea:	50 e0       	ldi	r21, 0x00	; 0
    37ec:	8b 81       	ldd	r24, Y+3	; 0x03
    37ee:	9c 81       	ldd	r25, Y+4	; 0x04
    37f0:	fc 01       	movw	r30, r24
    37f2:	81 81       	ldd	r24, Z+1	; 0x01
    37f4:	28 2f       	mov	r18, r24
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	ce 01       	movw	r24, r28
    37fa:	08 96       	adiw	r24, 0x08	; 8
    37fc:	b9 01       	movw	r22, r18
    37fe:	0e 94 60 48 	call	0x90c0	; 0x90c0 <memchr>
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	89 f4       	brne	.+34     	; 0x3828 <ChangeButtonPressState+0x30a>
					// Then add it to the hid report:
					scan_codes[count] = this_joystick_button->scan_code;
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	88 2f       	mov	r24, r24
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	2b 81       	ldd	r18, Y+3	; 0x03
    380e:	3c 81       	ldd	r19, Y+4	; 0x04
    3810:	f9 01       	movw	r30, r18
    3812:	41 81       	ldd	r20, Z+1	; 0x01
    3814:	9e 01       	movw	r18, r28
    3816:	28 5f       	subi	r18, 0xF8	; 248
    3818:	3f 4f       	sbci	r19, 0xFF	; 255
    381a:	82 0f       	add	r24, r18
    381c:	93 1f       	adc	r25, r19
    381e:	fc 01       	movw	r30, r24
    3820:	40 83       	st	Z, r20
					
					// Increment the count:
					count++;
    3822:	8a 81       	ldd	r24, Y+2	; 0x02
    3824:	8f 5f       	subi	r24, 0xFF	; 255
    3826:	8a 83       	std	Y+2, r24	; 0x02
				}
			}
			
			// OR any modifiers for this button:
			modifiers |= this_joystick_button->modifier;
    3828:	8b 81       	ldd	r24, Y+3	; 0x03
    382a:	9c 81       	ldd	r25, Y+4	; 0x04
    382c:	fc 01       	movw	r30, r24
    382e:	80 81       	ld	r24, Z
    3830:	99 81       	ldd	r25, Y+1	; 0x01
    3832:	89 2b       	or	r24, r25
    3834:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
    3836:	8d 81       	ldd	r24, Y+5	; 0x05
    3838:	8f 5f       	subi	r24, 0xFF	; 255
    383a:	8d 83       	std	Y+5, r24	; 0x05
    383c:	8d 81       	ldd	r24, Y+5	; 0x05
    383e:	88 31       	cpi	r24, 0x18	; 24
    3840:	20 f4       	brcc	.+8      	; 0x384a <ChangeButtonPressState+0x32c>
    3842:	8a 81       	ldd	r24, Y+2	; 0x02
    3844:	86 30       	cpi	r24, 0x06	; 6
    3846:	08 f4       	brcc	.+2      	; 0x384a <ChangeButtonPressState+0x32c>
    3848:	42 cf       	rjmp	.-380    	; 0x36ce <ChangeButtonPressState+0x1b0>
	* Scancode 5
	* Scancode 6
	*/

	// Send the identifier:
	sendBTChar('\xA1');
    384a:	81 ea       	ldi	r24, 0xA1	; 161
    384c:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
	sendBTChar('\x01');
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
	sendBTChar('\x00');
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
	sendBTChar(modifiers);
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    3862:	1d 82       	std	Y+5, r1	; 0x05
    3864:	17 c0       	rjmp	.+46     	; 0x3894 <ChangeButtonPressState+0x376>
		if (i < count) {
    3866:	9d 81       	ldd	r25, Y+5	; 0x05
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	98 17       	cp	r25, r24
    386c:	68 f4       	brcc	.+26     	; 0x3888 <ChangeButtonPressState+0x36a>
			sendBTChar(scan_codes[i]);
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	88 2f       	mov	r24, r24
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	9e 01       	movw	r18, r28
    3876:	28 5f       	subi	r18, 0xF8	; 248
    3878:	3f 4f       	sbci	r19, 0xFF	; 255
    387a:	82 0f       	add	r24, r18
    387c:	93 1f       	adc	r25, r19
    387e:	fc 01       	movw	r30, r24
    3880:	80 81       	ld	r24, Z
    3882:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
    3886:	03 c0       	rjmp	.+6      	; 0x388e <ChangeButtonPressState+0x370>
		}
		// Otherwise send the no-keys-pressed event:
		else {
			// Send the no-keys-pressed event:
			sendBTChar(0);
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
	sendBTChar('\xA1');
	sendBTChar('\x01');
	sendBTChar('\x00');
	sendBTChar(modifiers);
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    388e:	8d 81       	ldd	r24, Y+5	; 0x05
    3890:	8f 5f       	subi	r24, 0xFF	; 255
    3892:	8d 83       	std	Y+5, r24	; 0x05
    3894:	8d 81       	ldd	r24, Y+5	; 0x05
    3896:	86 30       	cpi	r24, 0x06	; 6
    3898:	30 f3       	brcs	.-52     	; 0x3866 <ChangeButtonPressState+0x348>
		else {
			// Send the no-keys-pressed event:
			sendBTChar(0);
		}
	}
    389a:	2f 96       	adiw	r28, 0x0f	; 15
    389c:	cd bf       	out	0x3d, r28	; 61
    389e:	de bf       	out	0x3e, r29	; 62
    38a0:	df 91       	pop	r29
    38a2:	cf 91       	pop	r28
    38a4:	1f 91       	pop	r17
    38a6:	0f 91       	pop	r16
    38a8:	ff 90       	pop	r15
    38aa:	ef 90       	pop	r14
    38ac:	08 95       	ret

000038ae <keyboardMouseInit>:
void changeButtonState(uint8_t name, enum ButtonState state);

// External reference to system time
extern uint32_t getSystemTime(void);

void keyboardMouseInit(struct ControllerConfiguration *cc) {
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
    38b2:	00 d0       	rcall	.+0      	; 0x38b4 <keyboardMouseInit+0x6>
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    38b8:	89 83       	std	Y+1, r24	; 0x01
    38ba:	9a 83       	std	Y+2, r25	; 0x02
	my_cc = cc;
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	9a 81       	ldd	r25, Y+2	; 0x02
    38c0:	80 93 72 27 	sts	0x2772, r24
    38c4:	90 93 73 27 	sts	0x2773, r25
	BluetoothComboMode();
    38c8:	0e 94 7c 40 	call	0x80f8	; 0x80f8 <BluetoothComboMode>
	startTimeout(&mouse_timeout, MOUSE_REPORT_INTERVAL_MS);
    38cc:	44 e1       	ldi	r20, 0x14	; 20
    38ce:	50 e0       	ldi	r21, 0x00	; 0
    38d0:	60 e0       	ldi	r22, 0x00	; 0
    38d2:	70 e0       	ldi	r23, 0x00	; 0
    38d4:	89 e7       	ldi	r24, 0x79	; 121
    38d6:	97 e2       	ldi	r25, 0x27	; 39
    38d8:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
}
    38dc:	0f 90       	pop	r0
    38de:	0f 90       	pop	r0
    38e0:	df 91       	pop	r29
    38e2:	cf 91       	pop	r28
    38e4:	08 95       	ret

000038e6 <keyboadMouseButtonHandler>:

void keyboadMouseButtonHandler(enum ButtonName name, enum ButtonState state) {
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	00 d0       	rcall	.+0      	; 0x38ec <keyboadMouseButtonHandler+0x6>
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62
    38f0:	89 83       	std	Y+1, r24	; 0x01
    38f2:	6a 83       	std	Y+2, r22	; 0x02
	changeButtonState((uint8_t)name, state);
    38f4:	6a 81       	ldd	r22, Y+2	; 0x02
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	de d1       	rcall	.+956    	; 0x3cb6 <changeButtonState>
}
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	df 91       	pop	r29
    3900:	cf 91       	pop	r28
    3902:	08 95       	ret

00003904 <keyboardMouseJoystickHandler>:

void keyboardMouseJoystickHandler(enum JoystickName name, uint16_t x, uint16_t y) {
    3904:	cf 93       	push	r28
    3906:	df 93       	push	r29
    3908:	cd b7       	in	r28, 0x3d	; 61
    390a:	de b7       	in	r29, 0x3e	; 62
    390c:	67 97       	sbiw	r28, 0x17	; 23
    390e:	cd bf       	out	0x3d, r28	; 61
    3910:	de bf       	out	0x3e, r29	; 62
    3912:	8b 8b       	std	Y+19, r24	; 0x13
    3914:	6c 8b       	std	Y+20, r22	; 0x14
    3916:	7d 8b       	std	Y+21, r23	; 0x15
    3918:	4e 8b       	std	Y+22, r20	; 0x16
    391a:	5f 8b       	std	Y+23, r21	; 0x17
	static uint8_t last_mouse_buttons = 0;
	static enum JoystickButtonState state_x[NUM_JOYSTICKS];
	static enum JoystickButtonState state_y[NUM_JOYSTICKS];
	JoystickConfiguration *this_joystick;
	//static int8_t mouse_x = 0, mouse_y = 0;
	int16_xy mouse = {0,0};
    391c:	1f 82       	std	Y+7, r1	; 0x07
    391e:	18 86       	std	Y+8, r1	; 0x08
    3920:	19 86       	std	Y+9, r1	; 0x09
    3922:	1a 86       	std	Y+10, r1	; 0x0a
	uint8_t joystick_button_base;
	//uint16_t x_center, y_center;
	uint8_t mouseTmp;
	
	uint16_xy raw = {x,y};
    3924:	8c 89       	ldd	r24, Y+20	; 0x14
    3926:	9d 89       	ldd	r25, Y+21	; 0x15
    3928:	8b 87       	std	Y+11, r24	; 0x0b
    392a:	9c 87       	std	Y+12, r25	; 0x0c
    392c:	8e 89       	ldd	r24, Y+22	; 0x16
    392e:	9f 89       	ldd	r25, Y+23	; 0x17
    3930:	8d 87       	std	Y+13, r24	; 0x0d
    3932:	9e 87       	std	Y+14, r25	; 0x0e
	
	// Get information about this joystick:
	this_joystick = &(my_cc->joystick_configs[name]);
    3934:	20 91 72 27 	lds	r18, 0x2772
    3938:	30 91 73 27 	lds	r19, 0x2773
    393c:	8b 89       	ldd	r24, Y+19	; 0x13
    393e:	48 2f       	mov	r20, r24
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	66 e1       	ldi	r22, 0x16	; 22
    3944:	64 9f       	mul	r22, r20
    3946:	c0 01       	movw	r24, r0
    3948:	65 9f       	mul	r22, r21
    394a:	90 0d       	add	r25, r0
    394c:	11 24       	eor	r1, r1
    394e:	8f 56       	subi	r24, 0x6F	; 111
    3950:	9f 4f       	sbci	r25, 0xFF	; 255
    3952:	82 0f       	add	r24, r18
    3954:	93 1f       	adc	r25, r19
    3956:	89 83       	std	Y+1, r24	; 0x01
    3958:	9a 83       	std	Y+2, r25	; 0x02

	// Get the base index for these joystick buttons:	
	joystick_button_base = NUM_BUTTONS + 4 * name;
    395a:	8b 89       	ldd	r24, Y+19	; 0x13
    395c:	88 2f       	mov	r24, r24
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	04 96       	adiw	r24, 0x04	; 4
    3962:	88 0f       	add	r24, r24
    3964:	88 0f       	add	r24, r24
    3966:	8b 83       	std	Y+3, r24	; 0x03

	// Find the center locations of the joysticks:
	//x_center = joysticks[name].center_x;
	//y_center = joysticks[name].center_y;
	
	if (this_joystick->config.button_type == BUTTON_TYPE_ANALOG) 
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	9a 81       	ldd	r25, Y+2	; 0x02
    396c:	fc 01       	movw	r30, r24
    396e:	80 81       	ld	r24, Z
    3970:	80 74       	andi	r24, 0x40	; 64
    3972:	88 23       	and	r24, r24
    3974:	99 f5       	brne	.+102    	; 0x39dc <keyboardMouseJoystickHandler+0xd8>
	{
		// Is this joystick analog?
		
		//TODO: add scaling (by MOUSE_RESOLUTION) in AnalogJoystickAdj - pre-working gamepad joysticks?
		MouseJoystickAdj( center[name], this_joystick, &raw, &mouse );	
    3976:	8b 89       	ldd	r24, Y+19	; 0x13
    3978:	88 2f       	mov	r24, r24
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	88 0f       	add	r24, r24
    397e:	99 1f       	adc	r25, r25
    3980:	8e 5a       	subi	r24, 0xAE	; 174
    3982:	9f 4d       	sbci	r25, 0xDF	; 223
    3984:	fc 01       	movw	r30, r24
    3986:	80 81       	ld	r24, Z
    3988:	91 81       	ldd	r25, Z+1	; 0x01
    398a:	9e 01       	movw	r18, r28
    398c:	29 5f       	subi	r18, 0xF9	; 249
    398e:	3f 4f       	sbci	r19, 0xFF	; 255
    3990:	ae 01       	movw	r20, r28
    3992:	45 5f       	subi	r20, 0xF5	; 245
    3994:	5f 4f       	sbci	r21, 0xFF	; 255
    3996:	69 81       	ldd	r22, Y+1	; 0x01
    3998:	7a 81       	ldd	r23, Y+2	; 0x02
    399a:	a8 d5       	rcall	.+2896   	; 0x44ec <MouseJoystickAdj>
		//#endif
		
		//mouse.x /= MOUSE_RESOLUTION;
		//mouse.y /= MOUSE_RESOLUTION;
		
        if(mouse.x)
    399c:	8f 81       	ldd	r24, Y+7	; 0x07
    399e:	98 85       	ldd	r25, Y+8	; 0x08
    39a0:	00 97       	sbiw	r24, 0x00	; 0
    39a2:	59 f0       	breq	.+22     	; 0x39ba <keyboardMouseJoystickHandler+0xb6>
		{
			mouse.x /= MOUSE_RESOLUTION;
    39a4:	8f 81       	ldd	r24, Y+7	; 0x07
    39a6:	98 85       	ldd	r25, Y+8	; 0x08
    39a8:	2e e6       	ldi	r18, 0x6E	; 110
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	b9 01       	movw	r22, r18
    39ae:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <__divmodhi4>
    39b2:	9b 01       	movw	r18, r22
    39b4:	c9 01       	movw	r24, r18
    39b6:	8f 83       	std	Y+7, r24	; 0x07
    39b8:	98 87       	std	Y+8, r25	; 0x08
		}
		
		if(mouse.y)
    39ba:	89 85       	ldd	r24, Y+9	; 0x09
    39bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39be:	00 97       	sbiw	r24, 0x00	; 0
    39c0:	09 f4       	brne	.+2      	; 0x39c4 <keyboardMouseJoystickHandler+0xc0>
    39c2:	f0 c0       	rjmp	.+480    	; 0x3ba4 <keyboardMouseJoystickHandler+0x2a0>
		{
			mouse.y /= MOUSE_RESOLUTION;
    39c4:	89 85       	ldd	r24, Y+9	; 0x09
    39c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c8:	2e e6       	ldi	r18, 0x6E	; 110
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	b9 01       	movw	r22, r18
    39ce:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <__divmodhi4>
    39d2:	9b 01       	movw	r18, r22
    39d4:	c9 01       	movw	r24, r18
    39d6:	89 87       	std	Y+9, r24	; 0x09
    39d8:	9a 87       	std	Y+10, r25	; 0x0a
    39da:	e4 c0       	rjmp	.+456    	; 0x3ba4 <keyboardMouseJoystickHandler+0x2a0>
	else 
	{
		// Otherwise it must be a digital joystick.
		
		//int16_xy deadzone = {this_joystick->x_deadzone,this_joystick->y_deadzone};
		int16_xy * deadzone = (int16_xy *) &(this_joystick->x_deadzone);
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
    39de:	9a 81       	ldd	r25, Y+2	; 0x02
    39e0:	42 96       	adiw	r24, 0x12	; 18
    39e2:	8c 83       	std	Y+4, r24	; 0x04
    39e4:	9d 83       	std	Y+5, r25	; 0x05
		
		int16_xy out;
		SimpleJoystickAdj( center[name], deadzone, &raw, &out );
    39e6:	8b 89       	ldd	r24, Y+19	; 0x13
    39e8:	88 2f       	mov	r24, r24
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	8e 5a       	subi	r24, 0xAE	; 174
    39f2:	9f 4d       	sbci	r25, 0xDF	; 223
    39f4:	fc 01       	movw	r30, r24
    39f6:	80 81       	ld	r24, Z
    39f8:	91 81       	ldd	r25, Z+1	; 0x01
    39fa:	9e 01       	movw	r18, r28
    39fc:	21 5f       	subi	r18, 0xF1	; 241
    39fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3a00:	ae 01       	movw	r20, r28
    3a02:	45 5f       	subi	r20, 0xF5	; 245
    3a04:	5f 4f       	sbci	r21, 0xFF	; 255
    3a06:	6c 81       	ldd	r22, Y+4	; 0x04
    3a08:	7d 81       	ldd	r23, Y+5	; 0x05
    3a0a:	bf d3       	rcall	.+1918   	; 0x418a <SimpleJoystickAdj>
		
		// Check the X axis:
		switch (state_x[name]) {
    3a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a0e:	88 2f       	mov	r24, r24
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	8f 57       	subi	r24, 0x7F	; 127
    3a14:	98 4d       	sbci	r25, 0xD8	; 216
    3a16:	fc 01       	movw	r30, r24
    3a18:	80 81       	ld	r24, Z
    3a1a:	88 2f       	mov	r24, r24
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	83 30       	cpi	r24, 0x03	; 3
    3a20:	91 05       	cpc	r25, r1
    3a22:	09 f4       	brne	.+2      	; 0x3a26 <keyboardMouseJoystickHandler+0x122>
    3a24:	3b c0       	rjmp	.+118    	; 0x3a9c <keyboardMouseJoystickHandler+0x198>
    3a26:	84 30       	cpi	r24, 0x04	; 4
    3a28:	91 05       	cpc	r25, r1
    3a2a:	21 f0       	breq	.+8      	; 0x3a34 <keyboardMouseJoystickHandler+0x130>
    3a2c:	82 30       	cpi	r24, 0x02	; 2
    3a2e:	91 05       	cpc	r25, r1
    3a30:	21 f1       	breq	.+72     	; 0x3a7a <keyboardMouseJoystickHandler+0x176>
    3a32:	46 c0       	rjmp	.+140    	; 0x3ac0 <keyboardMouseJoystickHandler+0x1bc>
			case JBSTATE_IDLE:
				// Do we need to enter the left state?
				if( out.x<0 )	
    3a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a36:	98 89       	ldd	r25, Y+16	; 0x10
    3a38:	99 23       	and	r25, r25
    3a3a:	6c f4       	brge	.+26     	; 0x3a56 <keyboardMouseJoystickHandler+0x152>
				{
					state_x[name] = JBSTATE_LEFT;
    3a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a3e:	88 2f       	mov	r24, r24
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	8f 57       	subi	r24, 0x7F	; 127
    3a44:	98 4d       	sbci	r25, 0xD8	; 216
    3a46:	22 e0       	ldi	r18, 0x02	; 2
    3a48:	fc 01       	movw	r30, r24
    3a4a:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_LEFT, BUTTON_PRESSED);
    3a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4e:	8e 5f       	subi	r24, 0xFE	; 254
    3a50:	61 e0       	ldi	r22, 0x01	; 1
    3a52:	31 d1       	rcall	.+610    	; 0x3cb6 <changeButtonState>
				else if( out.x>0 )
				{
					state_x[name] = JBSTATE_RIGHT;
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
				}
				break;
    3a54:	3e c0       	rjmp	.+124    	; 0x3ad2 <keyboardMouseJoystickHandler+0x1ce>
				{
					state_x[name] = JBSTATE_LEFT;
					changeButtonState(joystick_button_base + JBSTATE_LEFT, BUTTON_PRESSED);
				}
				// Do we need to enter the right state?
				else if( out.x>0 )
    3a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a58:	98 89       	ldd	r25, Y+16	; 0x10
    3a5a:	18 16       	cp	r1, r24
    3a5c:	19 06       	cpc	r1, r25
    3a5e:	cc f5       	brge	.+114    	; 0x3ad2 <keyboardMouseJoystickHandler+0x1ce>
				{
					state_x[name] = JBSTATE_RIGHT;
    3a60:	8b 89       	ldd	r24, Y+19	; 0x13
    3a62:	88 2f       	mov	r24, r24
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	8f 57       	subi	r24, 0x7F	; 127
    3a68:	98 4d       	sbci	r25, 0xD8	; 216
    3a6a:	23 e0       	ldi	r18, 0x03	; 3
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
    3a70:	8b 81       	ldd	r24, Y+3	; 0x03
    3a72:	8d 5f       	subi	r24, 0xFD	; 253
    3a74:	61 e0       	ldi	r22, 0x01	; 1
    3a76:	1f d1       	rcall	.+574    	; 0x3cb6 <changeButtonState>
				}
				break;
    3a78:	2c c0       	rjmp	.+88     	; 0x3ad2 <keyboardMouseJoystickHandler+0x1ce>
			case JBSTATE_LEFT:
				// Do we need to leave the left state?
				//if (x > this_joystick->x_min) {
				if( out.x>=0 )
    3a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a7c:	98 89       	ldd	r25, Y+16	; 0x10
    3a7e:	99 23       	and	r25, r25
    3a80:	54 f1       	brlt	.+84     	; 0x3ad6 <keyboardMouseJoystickHandler+0x1d2>
				{
					state_x[name] = JBSTATE_IDLE;
    3a82:	8b 89       	ldd	r24, Y+19	; 0x13
    3a84:	88 2f       	mov	r24, r24
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	8f 57       	subi	r24, 0x7F	; 127
    3a8a:	98 4d       	sbci	r25, 0xD8	; 216
    3a8c:	24 e0       	ldi	r18, 0x04	; 4
    3a8e:	fc 01       	movw	r30, r24
    3a90:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_LEFT, BUTTON_RELEASED);
    3a92:	8b 81       	ldd	r24, Y+3	; 0x03
    3a94:	8e 5f       	subi	r24, 0xFE	; 254
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	0e d1       	rcall	.+540    	; 0x3cb6 <changeButtonState>
				}
				break;
    3a9a:	1d c0       	rjmp	.+58     	; 0x3ad6 <keyboardMouseJoystickHandler+0x1d2>
			case JBSTATE_RIGHT:
				// Do we need to leave the right state?
				if( out.x<=0 )
    3a9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a9e:	98 89       	ldd	r25, Y+16	; 0x10
    3aa0:	18 16       	cp	r1, r24
    3aa2:	19 06       	cpc	r1, r25
    3aa4:	d4 f0       	brlt	.+52     	; 0x3ada <keyboardMouseJoystickHandler+0x1d6>
				{
					state_x[name] = JBSTATE_IDLE;
    3aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    3aa8:	88 2f       	mov	r24, r24
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	8f 57       	subi	r24, 0x7F	; 127
    3aae:	98 4d       	sbci	r25, 0xD8	; 216
    3ab0:	24 e0       	ldi	r18, 0x04	; 4
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_RELEASED);
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	8d 5f       	subi	r24, 0xFD	; 253
    3aba:	60 e0       	ldi	r22, 0x00	; 0
    3abc:	fc d0       	rcall	.+504    	; 0x3cb6 <changeButtonState>
				}
				break;
    3abe:	0d c0       	rjmp	.+26     	; 0x3ada <keyboardMouseJoystickHandler+0x1d6>
			default:
				state_x[name] = JBSTATE_IDLE;
    3ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac2:	88 2f       	mov	r24, r24
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	8f 57       	subi	r24, 0x7F	; 127
    3ac8:	98 4d       	sbci	r25, 0xD8	; 216
    3aca:	24 e0       	ldi	r18, 0x04	; 4
    3acc:	fc 01       	movw	r30, r24
    3ace:	20 83       	st	Z, r18
				break;
    3ad0:	05 c0       	rjmp	.+10     	; 0x3adc <keyboardMouseJoystickHandler+0x1d8>
				else if( out.x>0 )
				{
					state_x[name] = JBSTATE_RIGHT;
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_PRESSED);
				}
				break;
    3ad2:	00 00       	nop
    3ad4:	03 c0       	rjmp	.+6      	; 0x3adc <keyboardMouseJoystickHandler+0x1d8>
				if( out.x>=0 )
				{
					state_x[name] = JBSTATE_IDLE;
					changeButtonState(joystick_button_base + JBSTATE_LEFT, BUTTON_RELEASED);
				}
				break;
    3ad6:	00 00       	nop
    3ad8:	01 c0       	rjmp	.+2      	; 0x3adc <keyboardMouseJoystickHandler+0x1d8>
				if( out.x<=0 )
				{
					state_x[name] = JBSTATE_IDLE;
					changeButtonState(joystick_button_base + JBSTATE_RIGHT, BUTTON_RELEASED);
				}
				break;
    3ada:	00 00       	nop
				state_x[name] = JBSTATE_IDLE;
				break;
		};

		// Check the Y axis:
		switch (state_y[name]) {
    3adc:	8b 89       	ldd	r24, Y+19	; 0x13
    3ade:	88 2f       	mov	r24, r24
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	8d 57       	subi	r24, 0x7D	; 125
    3ae4:	98 4d       	sbci	r25, 0xD8	; 216
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	80 81       	ld	r24, Z
    3aea:	88 2f       	mov	r24, r24
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	81 30       	cpi	r24, 0x01	; 1
    3af0:	91 05       	cpc	r25, r1
    3af2:	b9 f1       	breq	.+110    	; 0x3b62 <keyboardMouseJoystickHandler+0x25e>
    3af4:	84 30       	cpi	r24, 0x04	; 4
    3af6:	91 05       	cpc	r25, r1
    3af8:	19 f0       	breq	.+6      	; 0x3b00 <keyboardMouseJoystickHandler+0x1fc>
    3afa:	00 97       	sbiw	r24, 0x00	; 0
    3afc:	11 f1       	breq	.+68     	; 0x3b42 <keyboardMouseJoystickHandler+0x23e>
    3afe:	43 c0       	rjmp	.+134    	; 0x3b86 <keyboardMouseJoystickHandler+0x282>
			case JBSTATE_IDLE:
				// Do we need to enter the up state?
				if( out.y<0 )
    3b00:	89 89       	ldd	r24, Y+17	; 0x11
    3b02:	9a 89       	ldd	r25, Y+18	; 0x12
    3b04:	99 23       	and	r25, r25
    3b06:	5c f4       	brge	.+22     	; 0x3b1e <keyboardMouseJoystickHandler+0x21a>
				{
					state_y[name] = JBSTATE_UP;
    3b08:	8b 89       	ldd	r24, Y+19	; 0x13
    3b0a:	88 2f       	mov	r24, r24
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	8d 57       	subi	r24, 0x7D	; 125
    3b10:	98 4d       	sbci	r25, 0xD8	; 216
    3b12:	fc 01       	movw	r30, r24
    3b14:	10 82       	st	Z, r1
					changeButtonState(joystick_button_base + JBSTATE_UP, BUTTON_PRESSED);
    3b16:	61 e0       	ldi	r22, 0x01	; 1
    3b18:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1a:	cd d0       	rcall	.+410    	; 0x3cb6 <changeButtonState>
				else if( out.y>0 )
				{
					state_y[name] = JBSTATE_DOWN;
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
				}
				break;
    3b1c:	3e c0       	rjmp	.+124    	; 0x3b9a <keyboardMouseJoystickHandler+0x296>
				{
					state_y[name] = JBSTATE_UP;
					changeButtonState(joystick_button_base + JBSTATE_UP, BUTTON_PRESSED);
				}
				// Do we need to enter the down state?
				else if( out.y>0 )
    3b1e:	89 89       	ldd	r24, Y+17	; 0x11
    3b20:	9a 89       	ldd	r25, Y+18	; 0x12
    3b22:	18 16       	cp	r1, r24
    3b24:	19 06       	cpc	r1, r25
    3b26:	cc f5       	brge	.+114    	; 0x3b9a <keyboardMouseJoystickHandler+0x296>
				{
					state_y[name] = JBSTATE_DOWN;
    3b28:	8b 89       	ldd	r24, Y+19	; 0x13
    3b2a:	88 2f       	mov	r24, r24
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	8d 57       	subi	r24, 0x7D	; 125
    3b30:	98 4d       	sbci	r25, 0xD8	; 216
    3b32:	21 e0       	ldi	r18, 0x01	; 1
    3b34:	fc 01       	movw	r30, r24
    3b36:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
    3b38:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3a:	8f 5f       	subi	r24, 0xFF	; 255
    3b3c:	61 e0       	ldi	r22, 0x01	; 1
    3b3e:	bb d0       	rcall	.+374    	; 0x3cb6 <changeButtonState>
				}
				break;
    3b40:	2c c0       	rjmp	.+88     	; 0x3b9a <keyboardMouseJoystickHandler+0x296>
			case JBSTATE_UP:
				// Do we need to leave the up state?
				if( out.y>=0 )
    3b42:	89 89       	ldd	r24, Y+17	; 0x11
    3b44:	9a 89       	ldd	r25, Y+18	; 0x12
    3b46:	99 23       	and	r25, r25
    3b48:	54 f1       	brlt	.+84     	; 0x3b9e <keyboardMouseJoystickHandler+0x29a>
				{
					state_y[name] = JBSTATE_IDLE;
    3b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b4c:	88 2f       	mov	r24, r24
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	8d 57       	subi	r24, 0x7D	; 125
    3b52:	98 4d       	sbci	r25, 0xD8	; 216
    3b54:	24 e0       	ldi	r18, 0x04	; 4
    3b56:	fc 01       	movw	r30, r24
    3b58:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_UP, BUTTON_RELEASED);
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5e:	ab d0       	rcall	.+342    	; 0x3cb6 <changeButtonState>
				}
				break;
    3b60:	1e c0       	rjmp	.+60     	; 0x3b9e <keyboardMouseJoystickHandler+0x29a>
			case JBSTATE_DOWN:
				// Do we need to leave the down state?
				if( out.y<=0 )
    3b62:	89 89       	ldd	r24, Y+17	; 0x11
    3b64:	9a 89       	ldd	r25, Y+18	; 0x12
    3b66:	18 16       	cp	r1, r24
    3b68:	19 06       	cpc	r1, r25
    3b6a:	dc f0       	brlt	.+54     	; 0x3ba2 <keyboardMouseJoystickHandler+0x29e>
				{
					state_y[name] = JBSTATE_IDLE;
    3b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b6e:	88 2f       	mov	r24, r24
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	8d 57       	subi	r24, 0x7D	; 125
    3b74:	98 4d       	sbci	r25, 0xD8	; 216
    3b76:	24 e0       	ldi	r18, 0x04	; 4
    3b78:	fc 01       	movw	r30, r24
    3b7a:	20 83       	st	Z, r18
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_RELEASED);
    3b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7e:	8f 5f       	subi	r24, 0xFF	; 255
    3b80:	60 e0       	ldi	r22, 0x00	; 0
    3b82:	99 d0       	rcall	.+306    	; 0x3cb6 <changeButtonState>
				}
				break;
    3b84:	0e c0       	rjmp	.+28     	; 0x3ba2 <keyboardMouseJoystickHandler+0x29e>
			default:
				state_y[name] = JBSTATE_IDLE;
    3b86:	8b 89       	ldd	r24, Y+19	; 0x13
    3b88:	88 2f       	mov	r24, r24
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	8d 57       	subi	r24, 0x7D	; 125
    3b8e:	98 4d       	sbci	r25, 0xD8	; 216
    3b90:	24 e0       	ldi	r18, 0x04	; 4
    3b92:	fc 01       	movw	r30, r24
    3b94:	20 83       	st	Z, r18
				break;
    3b96:	00 00       	nop
    3b98:	05 c0       	rjmp	.+10     	; 0x3ba4 <keyboardMouseJoystickHandler+0x2a0>
				else if( out.y>0 )
				{
					state_y[name] = JBSTATE_DOWN;
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_PRESSED);
				}
				break;
    3b9a:	00 00       	nop
    3b9c:	03 c0       	rjmp	.+6      	; 0x3ba4 <keyboardMouseJoystickHandler+0x2a0>
				if( out.y>=0 )
				{
					state_y[name] = JBSTATE_IDLE;
					changeButtonState(joystick_button_base + JBSTATE_UP, BUTTON_RELEASED);
				}
				break;
    3b9e:	00 00       	nop
    3ba0:	01 c0       	rjmp	.+2      	; 0x3ba4 <keyboardMouseJoystickHandler+0x2a0>
				if( out.y<=0 )
				{
					state_y[name] = JBSTATE_IDLE;
					changeButtonState(joystick_button_base + JBSTATE_DOWN, BUTTON_RELEASED);
				}
				break;
    3ba2:	00 00       	nop
				break;
		};
	}

	// Do we need to notify the host of a mouse change?
	if (mouse.x != 0 || mouse.y != 0 || mouse_buttons != last_mouse_buttons) {
    3ba4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ba6:	98 85       	ldd	r25, Y+8	; 0x08
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	59 f4       	brne	.+22     	; 0x3bc2 <keyboardMouseJoystickHandler+0x2be>
    3bac:	89 85       	ldd	r24, Y+9	; 0x09
    3bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb0:	00 97       	sbiw	r24, 0x00	; 0
    3bb2:	39 f4       	brne	.+14     	; 0x3bc2 <keyboardMouseJoystickHandler+0x2be>
    3bb4:	90 91 78 27 	lds	r25, 0x2778
    3bb8:	80 91 85 27 	lds	r24, 0x2785
    3bbc:	98 17       	cp	r25, r24
    3bbe:	09 f4       	brne	.+2      	; 0x3bc2 <keyboardMouseJoystickHandler+0x2be>
    3bc0:	74 c0       	rjmp	.+232    	; 0x3caa <keyboardMouseJoystickHandler+0x3a6>
		
		#if DEBUG
			//Write raw and adjusted X,Y values to USB serial port
			PrintXY(raw.x,raw.y);
    3bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc6:	9c 01       	movw	r18, r24
    3bc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bca:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bcc:	b9 01       	movw	r22, r18
    3bce:	0e 94 5f 29 	call	0x52be	; 0x52be <PrintXY>
			sendUSBString("->", false);
    3bd2:	60 e0       	ldi	r22, 0x00	; 0
    3bd4:	8b e1       	ldi	r24, 0x1B	; 27
    3bd6:	91 e2       	ldi	r25, 0x21	; 33
    3bd8:	0e 94 80 28 	call	0x5100	; 0x5100 <sendUSBString>
			PrintXY(mouse.x,mouse.y);
    3bdc:	29 85       	ldd	r18, Y+9	; 0x09
    3bde:	3a 85       	ldd	r19, Y+10	; 0x0a
    3be0:	8f 81       	ldd	r24, Y+7	; 0x07
    3be2:	98 85       	ldd	r25, Y+8	; 0x08
    3be4:	b9 01       	movw	r22, r18
    3be6:	0e 94 5f 29 	call	0x52be	; 0x52be <PrintXY>
			sendUSBLine("");
    3bea:	8e e1       	ldi	r24, 0x1E	; 30
    3bec:	91 e2       	ldi	r25, 0x21	; 33
    3bee:	0e 94 a7 28 	call	0x514e	; 0x514e <sendUSBLine>
		#endif	
		
		// Is it time to send a mouse report?
		if (checkTimeout(&mouse_timeout)) {
    3bf2:	89 e7       	ldi	r24, 0x79	; 121
    3bf4:	97 e2       	ldi	r25, 0x27	; 39
    3bf6:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    3bfa:	88 23       	and	r24, r24
    3bfc:	09 f4       	brne	.+2      	; 0x3c00 <keyboardMouseJoystickHandler+0x2fc>
    3bfe:	55 c0       	rjmp	.+170    	; 0x3caa <keyboardMouseJoystickHandler+0x3a6>
			// Restart the timeout:
			startTimeout(&mouse_timeout, MOUSE_REPORT_INTERVAL_MS);
    3c00:	44 e1       	ldi	r20, 0x14	; 20
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	60 e0       	ldi	r22, 0x00	; 0
    3c06:	70 e0       	ldi	r23, 0x00	; 0
    3c08:	89 e7       	ldi	r24, 0x79	; 121
    3c0a:	97 e2       	ldi	r25, 0x27	; 39
    3c0c:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
			
			// Record the mouse button presses:
			last_mouse_buttons = mouse_buttons;
    3c10:	80 91 78 27 	lds	r24, 0x2778
    3c14:	80 93 85 27 	sts	0x2785, r24
			sendBTChar(mouseTmp);
			sendBTChar(0x00); // Wheel position; unused
#else			
			// Send the report. The format is
			// A1,03,buttons,XmXl,YlXh,YhYm,wheel
			sendBTString("BC:KR=A1,03,");
    3c18:	8f e1       	ldi	r24, 0x1F	; 31
    3c1a:	91 e2       	ldi	r25, 0x21	; 33
    3c1c:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <sendBTString>
			sendBTHexPair(mouse_buttons);
    3c20:	80 91 78 27 	lds	r24, 0x2778
    3c24:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
			sendBTChar(',');			
    3c28:	8c e2       	ldi	r24, 0x2C	; 44
    3c2a:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
			mouseTmp = mouse.x & 0xFF;
    3c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c30:	98 85       	ldd	r25, Y+8	; 0x08
    3c32:	8e 83       	std	Y+6, r24	; 0x06
			sendBTHexPair(mouseTmp);
    3c34:	8e 81       	ldd	r24, Y+6	; 0x06
    3c36:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
			sendBTChar(',');
    3c3a:	8c e2       	ldi	r24, 0x2C	; 44
    3c3c:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
			mouseTmp = ((mouse.x >> 8) & 0x0F) | ((mouse.y & 0x0F) << 4);
    3c40:	8f 81       	ldd	r24, Y+7	; 0x07
    3c42:	98 85       	ldd	r25, Y+8	; 0x08
    3c44:	89 2f       	mov	r24, r25
    3c46:	99 0f       	add	r25, r25
    3c48:	99 0b       	sbc	r25, r25
    3c4a:	28 2f       	mov	r18, r24
    3c4c:	2f 70       	andi	r18, 0x0F	; 15
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	82 95       	swap	r24
    3c54:	92 95       	swap	r25
    3c56:	90 7f       	andi	r25, 0xF0	; 240
    3c58:	98 27       	eor	r25, r24
    3c5a:	80 7f       	andi	r24, 0xF0	; 240
    3c5c:	98 27       	eor	r25, r24
    3c5e:	82 2b       	or	r24, r18
    3c60:	8e 83       	std	Y+6, r24	; 0x06
			sendBTHexPair(mouseTmp);
    3c62:	8e 81       	ldd	r24, Y+6	; 0x06
    3c64:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
			sendBTChar(',');
    3c68:	8c e2       	ldi	r24, 0x2C	; 44
    3c6a:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
			mouseTmp = (mouse.y >> 4) & 0xFF;
    3c6e:	89 85       	ldd	r24, Y+9	; 0x09
    3c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c72:	95 95       	asr	r25
    3c74:	87 95       	ror	r24
    3c76:	95 95       	asr	r25
    3c78:	87 95       	ror	r24
    3c7a:	95 95       	asr	r25
    3c7c:	87 95       	ror	r24
    3c7e:	95 95       	asr	r25
    3c80:	87 95       	ror	r24
    3c82:	8e 83       	std	Y+6, r24	; 0x06
			sendBTHexPair(mouseTmp);
    3c84:	8e 81       	ldd	r24, Y+6	; 0x06
    3c86:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
			sendBTChar(',');
    3c8a:	8c e2       	ldi	r24, 0x2C	; 44
    3c8c:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
			sendBTHexPair(0x00); // Wheel position; unused
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
			sendBTChar('\r');
    3c96:	8d e0       	ldi	r24, 0x0D	; 13
    3c98:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
			sendBTChar('\n');
    3c9c:	8a e0       	ldi	r24, 0x0A	; 10
    3c9e:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
#endif
			// Reset mouse x and y:
			mouse.x = 0;
    3ca2:	1f 82       	std	Y+7, r1	; 0x07
    3ca4:	18 86       	std	Y+8, r1	; 0x08
			mouse.y = 0;
    3ca6:	19 86       	std	Y+9, r1	; 0x09
    3ca8:	1a 86       	std	Y+10, r1	; 0x0a
		}		
	}
}
    3caa:	67 96       	adiw	r28, 0x17	; 23
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	de bf       	out	0x3e, r29	; 62
    3cb0:	df 91       	pop	r29
    3cb2:	cf 91       	pop	r28
    3cb4:	08 95       	ret

00003cb6 <changeButtonState>:

// Similar to keyboadMouseButtonHandler, but will handle
// both "enum ButtonName" and "enum JoystickButtonName".
void changeButtonState(uint8_t name, enum ButtonState state) {
    3cb6:	ef 92       	push	r14
    3cb8:	ff 92       	push	r15
    3cba:	0f 93       	push	r16
    3cbc:	1f 93       	push	r17
    3cbe:	cf 93       	push	r28
    3cc0:	df 93       	push	r29
    3cc2:	cd b7       	in	r28, 0x3d	; 61
    3cc4:	de b7       	in	r29, 0x3e	; 62
    3cc6:	2f 97       	sbiw	r28, 0x0f	; 15
    3cc8:	cd bf       	out	0x3d, r28	; 61
    3cca:	de bf       	out	0x3e, r29	; 62
    3ccc:	8e 87       	std	Y+14, r24	; 0x0e
    3cce:	6f 87       	std	Y+15, r22	; 0x0f
	uint8_t scan_codes[MAX_SCANCODES]; 
	uint8_t modifiers = 0;
    3cd0:	19 82       	std	Y+1, r1	; 0x01
	struct ButtonConfiguration *this_button;
	struct HIDReport *this_joystick_button;
	uint8_t i;
	
	// Clear the mouse buttons:
	mouse_buttons = 0;
    3cd2:	10 92 78 27 	sts	0x2778, r1
	
	if (state == BUTTON_PRESSED) {
    3cd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cd8:	81 30       	cpi	r24, 0x01	; 1
    3cda:	31 f5       	brne	.+76     	; 0x3d28 <changeButtonState+0x72>
		// Set the corresponding bit:
		pressed_buttons |= 1ul<<name;
    3cdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cde:	28 2f       	mov	r18, r24
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	a0 e0       	ldi	r26, 0x00	; 0
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	7c 01       	movw	r14, r24
    3cec:	8d 01       	movw	r16, r26
    3cee:	04 c0       	rjmp	.+8      	; 0x3cf8 <changeButtonState+0x42>
    3cf0:	ee 0c       	add	r14, r14
    3cf2:	ff 1c       	adc	r15, r15
    3cf4:	00 1f       	adc	r16, r16
    3cf6:	11 1f       	adc	r17, r17
    3cf8:	2a 95       	dec	r18
    3cfa:	d2 f7       	brpl	.-12     	; 0x3cf0 <changeButtonState+0x3a>
    3cfc:	a8 01       	movw	r20, r16
    3cfe:	97 01       	movw	r18, r14
    3d00:	80 91 74 27 	lds	r24, 0x2774
    3d04:	90 91 75 27 	lds	r25, 0x2775
    3d08:	a0 91 76 27 	lds	r26, 0x2776
    3d0c:	b0 91 77 27 	lds	r27, 0x2777
    3d10:	82 2b       	or	r24, r18
    3d12:	93 2b       	or	r25, r19
    3d14:	a4 2b       	or	r26, r20
    3d16:	b5 2b       	or	r27, r21
    3d18:	80 93 74 27 	sts	0x2774, r24
    3d1c:	90 93 75 27 	sts	0x2775, r25
    3d20:	a0 93 76 27 	sts	0x2776, r26
    3d24:	b0 93 77 27 	sts	0x2777, r27
	}

	if (state == BUTTON_RELEASED) {
    3d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d2a:	88 23       	and	r24, r24
    3d2c:	41 f5       	brne	.+80     	; 0x3d7e <changeButtonState+0xc8>
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
    3d2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d30:	28 2f       	mov	r18, r24
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	a0 e0       	ldi	r26, 0x00	; 0
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	04 c0       	rjmp	.+8      	; 0x3d46 <changeButtonState+0x90>
    3d3e:	88 0f       	add	r24, r24
    3d40:	99 1f       	adc	r25, r25
    3d42:	aa 1f       	adc	r26, r26
    3d44:	bb 1f       	adc	r27, r27
    3d46:	2a 95       	dec	r18
    3d48:	d2 f7       	brpl	.-12     	; 0x3d3e <changeButtonState+0x88>
    3d4a:	9c 01       	movw	r18, r24
    3d4c:	ad 01       	movw	r20, r26
    3d4e:	20 95       	com	r18
    3d50:	30 95       	com	r19
    3d52:	40 95       	com	r20
    3d54:	50 95       	com	r21
    3d56:	80 91 74 27 	lds	r24, 0x2774
    3d5a:	90 91 75 27 	lds	r25, 0x2775
    3d5e:	a0 91 76 27 	lds	r26, 0x2776
    3d62:	b0 91 77 27 	lds	r27, 0x2777
    3d66:	82 23       	and	r24, r18
    3d68:	93 23       	and	r25, r19
    3d6a:	a4 23       	and	r26, r20
    3d6c:	b5 23       	and	r27, r21
    3d6e:	80 93 74 27 	sts	0x2774, r24
    3d72:	90 93 75 27 	sts	0x2775, r25
    3d76:	a0 93 76 27 	sts	0x2776, r26
    3d7a:	b0 93 77 27 	sts	0x2777, r27
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
    3d7e:	1d 82       	std	Y+5, r1	; 0x05
    3d80:	1a 82       	std	Y+2, r1	; 0x02
    3d82:	75 c0       	rjmp	.+234    	; 0x3e6e <changeButtonState+0x1b8>
		// Is this button pressed?
		if (pressed_buttons & (1ul<<i)) {
    3d84:	80 91 74 27 	lds	r24, 0x2774
    3d88:	90 91 75 27 	lds	r25, 0x2775
    3d8c:	a0 91 76 27 	lds	r26, 0x2776
    3d90:	b0 91 77 27 	lds	r27, 0x2777
    3d94:	2d 81       	ldd	r18, Y+5	; 0x05
    3d96:	22 2f       	mov	r18, r18
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	02 2e       	mov	r0, r18
    3d9c:	04 c0       	rjmp	.+8      	; 0x3da6 <changeButtonState+0xf0>
    3d9e:	b6 95       	lsr	r27
    3da0:	a7 95       	ror	r26
    3da2:	97 95       	ror	r25
    3da4:	87 95       	ror	r24
    3da6:	0a 94       	dec	r0
    3da8:	d2 f7       	brpl	.-12     	; 0x3d9e <changeButtonState+0xe8>
    3daa:	81 70       	andi	r24, 0x01	; 1
    3dac:	99 27       	eor	r25, r25
    3dae:	aa 27       	eor	r26, r26
    3db0:	bb 27       	eor	r27, r27
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	a1 05       	cpc	r26, r1
    3db6:	b1 05       	cpc	r27, r1
    3db8:	09 f4       	brne	.+2      	; 0x3dbc <changeButtonState+0x106>
    3dba:	56 c0       	rjmp	.+172    	; 0x3e68 <changeButtonState+0x1b2>
			// Get information about this button:
			this_button = &(my_cc->button_configs[i]);
    3dbc:	40 91 72 27 	lds	r20, 0x2772
    3dc0:	50 91 73 27 	lds	r21, 0x2773
    3dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc6:	28 2f       	mov	r18, r24
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	c9 01       	movw	r24, r18
    3dcc:	88 0f       	add	r24, r24
    3dce:	99 1f       	adc	r25, r25
    3dd0:	88 0f       	add	r24, r24
    3dd2:	99 1f       	adc	r25, r25
    3dd4:	88 0f       	add	r24, r24
    3dd6:	99 1f       	adc	r25, r25
    3dd8:	82 0f       	add	r24, r18
    3dda:	93 1f       	adc	r25, r19
    3ddc:	01 96       	adiw	r24, 0x01	; 1
    3dde:	84 0f       	add	r24, r20
    3de0:	95 1f       	adc	r25, r21
    3de2:	8e 83       	std	Y+6, r24	; 0x06
    3de4:	9f 83       	std	Y+7, r25	; 0x07
			
			// Is it a keyboard button?
			if (this_button->keyboard_and_mouse.input_type == INPUT_TYPE_KEYBOARD) {
    3de6:	8e 81       	ldd	r24, Y+6	; 0x06
    3de8:	9f 81       	ldd	r25, Y+7	; 0x07
    3dea:	fc 01       	movw	r30, r24
    3dec:	81 81       	ldd	r24, Z+1	; 0x01
    3dee:	88 70       	andi	r24, 0x08	; 8
    3df0:	88 23       	and	r24, r24
    3df2:	79 f5       	brne	.+94     	; 0x3e52 <changeButtonState+0x19c>
				// Does this button have a scancode associated with it?
				if (this_button->button_down.scan_code != 0) {
    3df4:	8e 81       	ldd	r24, Y+6	; 0x06
    3df6:	9f 81       	ldd	r25, Y+7	; 0x07
    3df8:	fc 01       	movw	r30, r24
    3dfa:	85 81       	ldd	r24, Z+5	; 0x05
    3dfc:	88 23       	and	r24, r24
    3dfe:	09 f1       	breq	.+66     	; 0x3e42 <changeButtonState+0x18c>
					// Is this a new scancode for the list?
					if (memchr(&scan_codes, this_button->button_down.scan_code, count) == NULL) {
    3e00:	8a 81       	ldd	r24, Y+2	; 0x02
    3e02:	48 2f       	mov	r20, r24
    3e04:	50 e0       	ldi	r21, 0x00	; 0
    3e06:	8e 81       	ldd	r24, Y+6	; 0x06
    3e08:	9f 81       	ldd	r25, Y+7	; 0x07
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	85 81       	ldd	r24, Z+5	; 0x05
    3e0e:	28 2f       	mov	r18, r24
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	ce 01       	movw	r24, r28
    3e14:	08 96       	adiw	r24, 0x08	; 8
    3e16:	b9 01       	movw	r22, r18
    3e18:	0e 94 60 48 	call	0x90c0	; 0x90c0 <memchr>
    3e1c:	00 97       	sbiw	r24, 0x00	; 0
    3e1e:	89 f4       	brne	.+34     	; 0x3e42 <changeButtonState+0x18c>
						// Then add it to the hid report:
						scan_codes[count] = this_button->button_down.scan_code;
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	88 2f       	mov	r24, r24
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	2e 81       	ldd	r18, Y+6	; 0x06
    3e28:	3f 81       	ldd	r19, Y+7	; 0x07
    3e2a:	f9 01       	movw	r30, r18
    3e2c:	45 81       	ldd	r20, Z+5	; 0x05
    3e2e:	9e 01       	movw	r18, r28
    3e30:	28 5f       	subi	r18, 0xF8	; 248
    3e32:	3f 4f       	sbci	r19, 0xFF	; 255
    3e34:	82 0f       	add	r24, r18
    3e36:	93 1f       	adc	r25, r19
    3e38:	fc 01       	movw	r30, r24
    3e3a:	40 83       	st	Z, r20
			
						// Increment the count:
						count++;
    3e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3e:	8f 5f       	subi	r24, 0xFF	; 255
    3e40:	8a 83       	std	Y+2, r24	; 0x02
					}					
				}
			
				// OR any modifiers for this button:
				modifiers |= this_button->button_down.modifier;
    3e42:	8e 81       	ldd	r24, Y+6	; 0x06
    3e44:	9f 81       	ldd	r25, Y+7	; 0x07
    3e46:	fc 01       	movw	r30, r24
    3e48:	84 81       	ldd	r24, Z+4	; 0x04
    3e4a:	99 81       	ldd	r25, Y+1	; 0x01
    3e4c:	89 2b       	or	r24, r25
    3e4e:	89 83       	std	Y+1, r24	; 0x01
    3e50:	0b c0       	rjmp	.+22     	; 0x3e68 <changeButtonState+0x1b2>
			}
			// Otherwise this must be a mouse button.
			else {
				// OR any mouse buttons together:
				mouse_buttons |= this_button->keyboard_and_mouse.mouse_buttons;
    3e52:	8e 81       	ldd	r24, Y+6	; 0x06
    3e54:	9f 81       	ldd	r25, Y+7	; 0x07
    3e56:	fc 01       	movw	r30, r24
    3e58:	81 81       	ldd	r24, Z+1	; 0x01
    3e5a:	87 70       	andi	r24, 0x07	; 7
    3e5c:	98 2f       	mov	r25, r24
    3e5e:	80 91 78 27 	lds	r24, 0x2778
    3e62:	89 2b       	or	r24, r25
    3e64:	80 93 78 27 	sts	0x2778, r24
		// Clear the corresponding bit:
		pressed_buttons &= ~(1ul<<name);
	}

	// Find all the pressed buttons (max 6):
	for (i = 0, count = 0; i < NUM_BUTTONS && count < MAX_SCANCODES; i++) {
    3e68:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6a:	8f 5f       	subi	r24, 0xFF	; 255
    3e6c:	8d 83       	std	Y+5, r24	; 0x05
    3e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e70:	80 31       	cpi	r24, 0x10	; 16
    3e72:	20 f4       	brcc	.+8      	; 0x3e7c <changeButtonState+0x1c6>
    3e74:	8a 81       	ldd	r24, Y+2	; 0x02
    3e76:	86 30       	cpi	r24, 0x06	; 6
    3e78:	08 f4       	brcc	.+2      	; 0x3e7c <changeButtonState+0x1c6>
    3e7a:	84 cf       	rjmp	.-248    	; 0x3d84 <changeButtonState+0xce>
			}				
		}
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
    3e7c:	80 e1       	ldi	r24, 0x10	; 16
    3e7e:	8d 83       	std	Y+5, r24	; 0x05
    3e80:	b7 c0       	rjmp	.+366    	; 0x3ff0 <changeButtonState+0x33a>
		// Is this joystick direction pressed?
		if (pressed_buttons & (1ul<<i)) {
    3e82:	80 91 74 27 	lds	r24, 0x2774
    3e86:	90 91 75 27 	lds	r25, 0x2775
    3e8a:	a0 91 76 27 	lds	r26, 0x2776
    3e8e:	b0 91 77 27 	lds	r27, 0x2777
    3e92:	2d 81       	ldd	r18, Y+5	; 0x05
    3e94:	22 2f       	mov	r18, r18
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	02 2e       	mov	r0, r18
    3e9a:	04 c0       	rjmp	.+8      	; 0x3ea4 <changeButtonState+0x1ee>
    3e9c:	b6 95       	lsr	r27
    3e9e:	a7 95       	ror	r26
    3ea0:	97 95       	ror	r25
    3ea2:	87 95       	ror	r24
    3ea4:	0a 94       	dec	r0
    3ea6:	d2 f7       	brpl	.-12     	; 0x3e9c <changeButtonState+0x1e6>
    3ea8:	81 70       	andi	r24, 0x01	; 1
    3eaa:	99 27       	eor	r25, r25
    3eac:	aa 27       	eor	r26, r26
    3eae:	bb 27       	eor	r27, r27
    3eb0:	00 97       	sbiw	r24, 0x00	; 0
    3eb2:	a1 05       	cpc	r26, r1
    3eb4:	b1 05       	cpc	r27, r1
    3eb6:	09 f4       	brne	.+2      	; 0x3eba <changeButtonState+0x204>
    3eb8:	98 c0       	rjmp	.+304    	; 0x3fea <changeButtonState+0x334>
			// Get information about this joystick direction:
			switch (i) {
    3eba:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebc:	88 2f       	mov	r24, r24
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	83 31       	cpi	r24, 0x13	; 19
    3ec2:	91 05       	cpc	r25, r1
    3ec4:	b1 f1       	breq	.+108    	; 0x3f32 <changeButtonState+0x27c>
    3ec6:	84 31       	cpi	r24, 0x14	; 20
    3ec8:	91 05       	cpc	r25, r1
    3eca:	54 f4       	brge	.+20     	; 0x3ee0 <changeButtonState+0x22a>
    3ecc:	81 31       	cpi	r24, 0x11	; 17
    3ece:	91 05       	cpc	r25, r1
    3ed0:	f1 f0       	breq	.+60     	; 0x3f0e <changeButtonState+0x258>
    3ed2:	82 31       	cpi	r24, 0x12	; 18
    3ed4:	91 05       	cpc	r25, r1
    3ed6:	24 f5       	brge	.+72     	; 0x3f20 <changeButtonState+0x26a>
    3ed8:	80 31       	cpi	r24, 0x10	; 16
    3eda:	91 05       	cpc	r25, r1
    3edc:	79 f0       	breq	.+30     	; 0x3efc <changeButtonState+0x246>
    3ede:	56 c0       	rjmp	.+172    	; 0x3f8c <changeButtonState+0x2d6>
    3ee0:	85 31       	cpi	r24, 0x15	; 21
    3ee2:	91 05       	cpc	r25, r1
    3ee4:	c1 f1       	breq	.+112    	; 0x3f56 <changeButtonState+0x2a0>
    3ee6:	85 31       	cpi	r24, 0x15	; 21
    3ee8:	91 05       	cpc	r25, r1
    3eea:	64 f1       	brlt	.+88     	; 0x3f44 <changeButtonState+0x28e>
    3eec:	86 31       	cpi	r24, 0x16	; 22
    3eee:	91 05       	cpc	r25, r1
    3ef0:	d9 f1       	breq	.+118    	; 0x3f68 <changeButtonState+0x2b2>
    3ef2:	87 31       	cpi	r24, 0x17	; 23
    3ef4:	91 05       	cpc	r25, r1
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <changeButtonState+0x244>
    3ef8:	40 c0       	rjmp	.+128    	; 0x3f7a <changeButtonState+0x2c4>
    3efa:	48 c0       	rjmp	.+144    	; 0x3f8c <changeButtonState+0x2d6>
				case B_JOYSTICK_LEFT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_up);
    3efc:	80 91 72 27 	lds	r24, 0x2772
    3f00:	90 91 73 27 	lds	r25, 0x2773
    3f04:	8d 56       	subi	r24, 0x6D	; 109
    3f06:	9f 4f       	sbci	r25, 0xFF	; 255
    3f08:	8b 83       	std	Y+3, r24	; 0x03
    3f0a:	9c 83       	std	Y+4, r25	; 0x04
					break;
    3f0c:	40 c0       	rjmp	.+128    	; 0x3f8e <changeButtonState+0x2d8>
				case B_JOYSTICK_LEFT_DOWN:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_down);
    3f0e:	80 91 72 27 	lds	r24, 0x2772
    3f12:	90 91 73 27 	lds	r25, 0x2773
    3f16:	8b 56       	subi	r24, 0x6B	; 107
    3f18:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1a:	8b 83       	std	Y+3, r24	; 0x03
    3f1c:	9c 83       	std	Y+4, r25	; 0x04
					break;
    3f1e:	37 c0       	rjmp	.+110    	; 0x3f8e <changeButtonState+0x2d8>
				case B_JOYSTICK_LEFT_LEFT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_left);
    3f20:	80 91 72 27 	lds	r24, 0x2772
    3f24:	90 91 73 27 	lds	r25, 0x2773
    3f28:	89 56       	subi	r24, 0x69	; 105
    3f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f2c:	8b 83       	std	Y+3, r24	; 0x03
    3f2e:	9c 83       	std	Y+4, r25	; 0x04
					break;
    3f30:	2e c0       	rjmp	.+92     	; 0x3f8e <changeButtonState+0x2d8>
				case B_JOYSTICK_LEFT_RIGHT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_LEFT].button_right);
    3f32:	80 91 72 27 	lds	r24, 0x2772
    3f36:	90 91 73 27 	lds	r25, 0x2773
    3f3a:	87 56       	subi	r24, 0x67	; 103
    3f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3e:	8b 83       	std	Y+3, r24	; 0x03
    3f40:	9c 83       	std	Y+4, r25	; 0x04
					break;
    3f42:	25 c0       	rjmp	.+74     	; 0x3f8e <changeButtonState+0x2d8>
				case B_JOYSTICK_RIGHT_UP:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_up);
    3f44:	80 91 72 27 	lds	r24, 0x2772
    3f48:	90 91 73 27 	lds	r25, 0x2773
    3f4c:	87 55       	subi	r24, 0x57	; 87
    3f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f50:	8b 83       	std	Y+3, r24	; 0x03
    3f52:	9c 83       	std	Y+4, r25	; 0x04
					break;
    3f54:	1c c0       	rjmp	.+56     	; 0x3f8e <changeButtonState+0x2d8>
				case B_JOYSTICK_RIGHT_DOWN:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_down);
    3f56:	80 91 72 27 	lds	r24, 0x2772
    3f5a:	90 91 73 27 	lds	r25, 0x2773
    3f5e:	85 55       	subi	r24, 0x55	; 85
    3f60:	9f 4f       	sbci	r25, 0xFF	; 255
    3f62:	8b 83       	std	Y+3, r24	; 0x03
    3f64:	9c 83       	std	Y+4, r25	; 0x04
					break;
    3f66:	13 c0       	rjmp	.+38     	; 0x3f8e <changeButtonState+0x2d8>
				case B_JOYSTICK_RIGHT_LEFT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_left);
    3f68:	80 91 72 27 	lds	r24, 0x2772
    3f6c:	90 91 73 27 	lds	r25, 0x2773
    3f70:	83 55       	subi	r24, 0x53	; 83
    3f72:	9f 4f       	sbci	r25, 0xFF	; 255
    3f74:	8b 83       	std	Y+3, r24	; 0x03
    3f76:	9c 83       	std	Y+4, r25	; 0x04
					break;
    3f78:	0a c0       	rjmp	.+20     	; 0x3f8e <changeButtonState+0x2d8>
				case B_JOYSTICK_RIGHT_RIGHT:
					this_joystick_button = &(my_cc->joystick_configs[JOYSTICK_RIGHT].button_right);
    3f7a:	80 91 72 27 	lds	r24, 0x2772
    3f7e:	90 91 73 27 	lds	r25, 0x2773
    3f82:	81 55       	subi	r24, 0x51	; 81
    3f84:	9f 4f       	sbci	r25, 0xFF	; 255
    3f86:	8b 83       	std	Y+3, r24	; 0x03
    3f88:	9c 83       	std	Y+4, r25	; 0x04
					break;
    3f8a:	01 c0       	rjmp	.+2      	; 0x3f8e <changeButtonState+0x2d8>
				default:
					continue;
    3f8c:	2e c0       	rjmp	.+92     	; 0x3fea <changeButtonState+0x334>
			};
			
			// Is there a button press associated with this direction?
			if (this_joystick_button->scan_code != 0) {
    3f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f90:	9c 81       	ldd	r25, Y+4	; 0x04
    3f92:	fc 01       	movw	r30, r24
    3f94:	81 81       	ldd	r24, Z+1	; 0x01
    3f96:	88 23       	and	r24, r24
    3f98:	09 f1       	breq	.+66     	; 0x3fdc <changeButtonState+0x326>
				// Is this a new scancode for the list?
				if (memchr(scan_codes, this_joystick_button->scan_code, count) == NULL) {
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	48 2f       	mov	r20, r24
    3f9e:	50 e0       	ldi	r21, 0x00	; 0
    3fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	81 81       	ldd	r24, Z+1	; 0x01
    3fa8:	28 2f       	mov	r18, r24
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	ce 01       	movw	r24, r28
    3fae:	08 96       	adiw	r24, 0x08	; 8
    3fb0:	b9 01       	movw	r22, r18
    3fb2:	0e 94 60 48 	call	0x90c0	; 0x90c0 <memchr>
    3fb6:	00 97       	sbiw	r24, 0x00	; 0
    3fb8:	89 f4       	brne	.+34     	; 0x3fdc <changeButtonState+0x326>
					// Then add it to the hid report:
					scan_codes[count] = this_joystick_button->scan_code;
    3fba:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbc:	88 2f       	mov	r24, r24
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	2b 81       	ldd	r18, Y+3	; 0x03
    3fc2:	3c 81       	ldd	r19, Y+4	; 0x04
    3fc4:	f9 01       	movw	r30, r18
    3fc6:	41 81       	ldd	r20, Z+1	; 0x01
    3fc8:	9e 01       	movw	r18, r28
    3fca:	28 5f       	subi	r18, 0xF8	; 248
    3fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    3fce:	82 0f       	add	r24, r18
    3fd0:	93 1f       	adc	r25, r19
    3fd2:	fc 01       	movw	r30, r24
    3fd4:	40 83       	st	Z, r20
					
					// Increment the count:
					count++;
    3fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd8:	8f 5f       	subi	r24, 0xFF	; 255
    3fda:	8a 83       	std	Y+2, r24	; 0x02
				}					
			}
			
			// OR any modifiers for this button:
			modifiers |= this_joystick_button->modifier;
    3fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fde:	9c 81       	ldd	r25, Y+4	; 0x04
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	80 81       	ld	r24, Z
    3fe4:	99 81       	ldd	r25, Y+1	; 0x01
    3fe6:	89 2b       	or	r24, r25
    3fe8:	89 83       	std	Y+1, r24	; 0x01
			}				
		}
	}
	
	// Find all the "pressed" joystick directions:
	for (i = NUM_BUTTONS; i < NUM_ALL_BUTTONS && count < MAX_SCANCODES; i++) {
    3fea:	8d 81       	ldd	r24, Y+5	; 0x05
    3fec:	8f 5f       	subi	r24, 0xFF	; 255
    3fee:	8d 83       	std	Y+5, r24	; 0x05
    3ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff2:	88 31       	cpi	r24, 0x18	; 24
    3ff4:	20 f4       	brcc	.+8      	; 0x3ffe <changeButtonState+0x348>
    3ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff8:	86 30       	cpi	r24, 0x06	; 6
    3ffa:	08 f4       	brcc	.+2      	; 0x3ffe <changeButtonState+0x348>
    3ffc:	42 cf       	rjmp	.-380    	; 0x3e82 <changeButtonState+0x1cc>
			sendBTChar(0);
		}
	}
	
#else
	sendBTString("BC:KR=A1,01,00,");
    3ffe:	8c e2       	ldi	r24, 0x2C	; 44
    4000:	91 e2       	ldi	r25, 0x21	; 33
    4002:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <sendBTString>
	// Send the modifiers:
	sendBTHexPair(modifiers);
    4006:	89 81       	ldd	r24, Y+1	; 0x01
    4008:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    400c:	1d 82       	std	Y+5, r1	; 0x05
    400e:	1a c0       	rjmp	.+52     	; 0x4044 <changeButtonState+0x38e>
		sendBTChar(',');
    4010:	8c e2       	ldi	r24, 0x2C	; 44
    4012:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
		if (i < count) {
    4016:	9d 81       	ldd	r25, Y+5	; 0x05
    4018:	8a 81       	ldd	r24, Y+2	; 0x02
    401a:	98 17       	cp	r25, r24
    401c:	68 f4       	brcc	.+26     	; 0x4038 <changeButtonState+0x382>
			sendBTHexPair(scan_codes[i]);
    401e:	8d 81       	ldd	r24, Y+5	; 0x05
    4020:	88 2f       	mov	r24, r24
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	9e 01       	movw	r18, r28
    4026:	28 5f       	subi	r18, 0xF8	; 248
    4028:	3f 4f       	sbci	r19, 0xFF	; 255
    402a:	82 0f       	add	r24, r18
    402c:	93 1f       	adc	r25, r19
    402e:	fc 01       	movw	r30, r24
    4030:	80 81       	ld	r24, Z
    4032:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
    4036:	03 c0       	rjmp	.+6      	; 0x403e <changeButtonState+0x388>
		}
		// Otherwise send the no-keys-pressed event:
		else {
			// Send the no-keys-pressed event:
			sendBTHexPair(0);
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <sendBTHexPair>
#else
	sendBTString("BC:KR=A1,01,00,");
	// Send the modifiers:
	sendBTHexPair(modifiers);
	// send the 6 scan codes
	for (i=0;i < 6; i++) {
    403e:	8d 81       	ldd	r24, Y+5	; 0x05
    4040:	8f 5f       	subi	r24, 0xFF	; 255
    4042:	8d 83       	std	Y+5, r24	; 0x05
    4044:	8d 81       	ldd	r24, Y+5	; 0x05
    4046:	86 30       	cpi	r24, 0x06	; 6
    4048:	18 f3       	brcs	.-58     	; 0x4010 <changeButtonState+0x35a>
			// Send the no-keys-pressed event:
			sendBTHexPair(0);
		}
	
	}
	sendBTChar('\r');
    404a:	8d e0       	ldi	r24, 0x0D	; 13
    404c:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
	sendBTChar('\n');
    4050:	8a e0       	ldi	r24, 0x0A	; 10
    4052:	0e 94 1a 3f 	call	0x7e34	; 0x7e34 <sendBTChar>
#endif	
}
    4056:	2f 96       	adiw	r28, 0x0f	; 15
    4058:	cd bf       	out	0x3d, r28	; 61
    405a:	de bf       	out	0x3e, r29	; 62
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	1f 91       	pop	r17
    4062:	0f 91       	pop	r16
    4064:	ff 90       	pop	r15
    4066:	ef 90       	pop	r14
    4068:	08 95       	ret

0000406a <setupDbg>:
};

unsigned char recvDBGChar(void)
{
	return usart_getchar(DBG_SERIAL);
};
    406a:	1f 93       	push	r17
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
    4074:	60 97       	sbiw	r28, 0x10	; 16
    4076:	cd bf       	out	0x3d, r28	; 61
    4078:	de bf       	out	0x3e, r29	; 62
    407a:	87 e0       	ldi	r24, 0x07	; 7
    407c:	ec e3       	ldi	r30, 0x3C	; 60
    407e:	f1 e2       	ldi	r31, 0x21	; 33
    4080:	de 01       	movw	r26, r28
    4082:	1a 96       	adiw	r26, 0x0a	; 10
    4084:	01 90       	ld	r0, Z+
    4086:	0d 92       	st	X+, r0
    4088:	8a 95       	dec	r24
    408a:	e1 f7       	brne	.-8      	; 0x4084 <setupDbg+0x1a>
    408c:	60 e1       	ldi	r22, 0x10	; 16
    408e:	84 e0       	ldi	r24, 0x04	; 4
    4090:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
    4094:	81 ed       	ldi	r24, 0xD1	; 209
    4096:	91 e0       	ldi	r25, 0x01	; 1
    4098:	89 83       	std	Y+1, r24	; 0x01
    409a:	9a 83       	std	Y+2, r25	; 0x02
    409c:	89 81       	ldd	r24, Y+1	; 0x01
    409e:	9a 81       	ldd	r25, Y+2	; 0x02
    40a0:	fc 01       	movw	r30, r24
    40a2:	14 91       	lpm	r17, Z
    40a4:	1b 83       	std	Y+3, r17	; 0x03
    40a6:	8b 81       	ldd	r24, Y+3	; 0x03
    40a8:	88 2f       	mov	r24, r24
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	3c d0       	rcall	.+120    	; 0x4126 <sendDBGString>
    40ae:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
    40b2:	ce 01       	movw	r24, r28
    40b4:	0a 96       	adiw	r24, 0x0a	; 10
    40b6:	bc 01       	movw	r22, r24
    40b8:	80 ea       	ldi	r24, 0xA0	; 160
    40ba:	99 e0       	ldi	r25, 0x09	; 9
    40bc:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <usart_init_rs232>
    40c0:	88 23       	and	r24, r24
    40c2:	71 f0       	breq	.+28     	; 0x40e0 <setupDbg+0x76>
    40c4:	88 ec       	ldi	r24, 0xC8	; 200
    40c6:	91 e0       	ldi	r25, 0x01	; 1
    40c8:	8c 83       	std	Y+4, r24	; 0x04
    40ca:	9d 83       	std	Y+5, r25	; 0x05
    40cc:	8c 81       	ldd	r24, Y+4	; 0x04
    40ce:	9d 81       	ldd	r25, Y+5	; 0x05
    40d0:	fc 01       	movw	r30, r24
    40d2:	14 91       	lpm	r17, Z
    40d4:	1e 83       	std	Y+6, r17	; 0x06
    40d6:	8e 81       	ldd	r24, Y+6	; 0x06
    40d8:	88 2f       	mov	r24, r24
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	43 d0       	rcall	.+134    	; 0x4164 <sendDBGLine>
    40de:	0d c0       	rjmp	.+26     	; 0x40fa <setupDbg+0x90>
    40e0:	8d ec       	ldi	r24, 0xCD	; 205
    40e2:	91 e0       	ldi	r25, 0x01	; 1
    40e4:	8f 83       	std	Y+7, r24	; 0x07
    40e6:	98 87       	std	Y+8, r25	; 0x08
    40e8:	8f 81       	ldd	r24, Y+7	; 0x07
    40ea:	98 85       	ldd	r25, Y+8	; 0x08
    40ec:	fc 01       	movw	r30, r24
    40ee:	14 91       	lpm	r17, Z
    40f0:	19 87       	std	Y+9, r17	; 0x09
    40f2:	89 85       	ldd	r24, Y+9	; 0x09
    40f4:	88 2f       	mov	r24, r24
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	35 d0       	rcall	.+106    	; 0x4164 <sendDBGLine>
    40fa:	60 96       	adiw	r28, 0x10	; 16
    40fc:	cd bf       	out	0x3d, r28	; 61
    40fe:	de bf       	out	0x3e, r29	; 62
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	1f 91       	pop	r17
    4106:	08 95       	ret

00004108 <sendDBGChar>:
    4108:	cf 93       	push	r28
    410a:	df 93       	push	r29
    410c:	1f 92       	push	r1
    410e:	cd b7       	in	r28, 0x3d	; 61
    4110:	de b7       	in	r29, 0x3e	; 62
    4112:	89 83       	std	Y+1, r24	; 0x01
    4114:	69 81       	ldd	r22, Y+1	; 0x01
    4116:	80 ea       	ldi	r24, 0xA0	; 160
    4118:	99 e0       	ldi	r25, 0x09	; 9
    411a:	0e 94 2f 38 	call	0x705e	; 0x705e <usart_putchar>
    411e:	0f 90       	pop	r0
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	08 95       	ret

00004126 <sendDBGString>:

// write out a simple '\0' terminated string
void sendDBGString(const char *string)
{
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	00 d0       	rcall	.+0      	; 0x412c <sendDBGString+0x6>
    412c:	cd b7       	in	r28, 0x3d	; 61
    412e:	de b7       	in	r29, 0x3e	; 62
    4130:	89 83       	std	Y+1, r24	; 0x01
    4132:	9a 83       	std	Y+2, r25	; 0x02
	while(*string != 0)
    4134:	0c c0       	rjmp	.+24     	; 0x414e <sendDBGString+0x28>
	sendDBGChar(*string++);
    4136:	89 81       	ldd	r24, Y+1	; 0x01
    4138:	9a 81       	ldd	r25, Y+2	; 0x02
    413a:	fc 01       	movw	r30, r24
    413c:	80 81       	ld	r24, Z
    413e:	28 2f       	mov	r18, r24
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	9a 81       	ldd	r25, Y+2	; 0x02
    4144:	01 96       	adiw	r24, 0x01	; 1
    4146:	89 83       	std	Y+1, r24	; 0x01
    4148:	9a 83       	std	Y+2, r25	; 0x02
    414a:	82 2f       	mov	r24, r18
    414c:	dd df       	rcall	.-70     	; 0x4108 <sendDBGChar>
};

// write out a simple '\0' terminated string
void sendDBGString(const char *string)
{
	while(*string != 0)
    414e:	89 81       	ldd	r24, Y+1	; 0x01
    4150:	9a 81       	ldd	r25, Y+2	; 0x02
    4152:	fc 01       	movw	r30, r24
    4154:	80 81       	ld	r24, Z
    4156:	88 23       	and	r24, r24
    4158:	71 f7       	brne	.-36     	; 0x4136 <sendDBGString+0x10>
	sendDBGChar(*string++);
};
    415a:	0f 90       	pop	r0
    415c:	0f 90       	pop	r0
    415e:	df 91       	pop	r29
    4160:	cf 91       	pop	r28
    4162:	08 95       	ret

00004164 <sendDBGLine>:

// write out a simple '\0' terminated string and print "\n\r" at end
void sendDBGLine(const char *string)
{
    4164:	cf 93       	push	r28
    4166:	df 93       	push	r29
    4168:	00 d0       	rcall	.+0      	; 0x416a <sendDBGLine+0x6>
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
    416e:	89 83       	std	Y+1, r24	; 0x01
    4170:	9a 83       	std	Y+2, r25	; 0x02
	sendDBGString(string);
    4172:	89 81       	ldd	r24, Y+1	; 0x01
    4174:	9a 81       	ldd	r25, Y+2	; 0x02
    4176:	d7 df       	rcall	.-82     	; 0x4126 <sendDBGString>
	sendDBGChar('\r');
    4178:	8d e0       	ldi	r24, 0x0D	; 13
    417a:	c6 df       	rcall	.-116    	; 0x4108 <sendDBGChar>
	sendDBGChar('\n');
    417c:	8a e0       	ldi	r24, 0x0A	; 10
    417e:	c4 df       	rcall	.-120    	; 0x4108 <sendDBGChar>
    4180:	0f 90       	pop	r0
    4182:	0f 90       	pop	r0
    4184:	df 91       	pop	r29
    4186:	cf 91       	pop	r28
    4188:	08 95       	ret

0000418a <SimpleJoystickAdj>:


//Center calibration, Unsigned to Signed conversion, and axis flipping
//compare AnalogJoystickAdj
void SimpleJoystickAdj( const uint16_xy * center, const int16_xy * deadzone, const uint16_xy * raw, int16_xy * out )
{
    418a:	cf 93       	push	r28
    418c:	df 93       	push	r29
    418e:	cd b7       	in	r28, 0x3d	; 61
    4190:	de b7       	in	r29, 0x3e	; 62
    4192:	2c 97       	sbiw	r28, 0x0c	; 12
    4194:	cd bf       	out	0x3d, r28	; 61
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	8d 83       	std	Y+5, r24	; 0x05
    419a:	9e 83       	std	Y+6, r25	; 0x06
    419c:	6f 83       	std	Y+7, r22	; 0x07
    419e:	78 87       	std	Y+8, r23	; 0x08
    41a0:	49 87       	std	Y+9, r20	; 0x09
    41a2:	5a 87       	std	Y+10, r21	; 0x0a
    41a4:	2b 87       	std	Y+11, r18	; 0x0b
    41a6:	3c 87       	std	Y+12, r19	; 0x0c
	int16_t x_tmp = raw->x;
    41a8:	89 85       	ldd	r24, Y+9	; 0x09
    41aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ac:	fc 01       	movw	r30, r24
    41ae:	80 81       	ld	r24, Z
    41b0:	91 81       	ldd	r25, Z+1	; 0x01
    41b2:	89 83       	std	Y+1, r24	; 0x01
    41b4:	9a 83       	std	Y+2, r25	; 0x02
	int16_t y_tmp = raw->y;
    41b6:	89 85       	ldd	r24, Y+9	; 0x09
    41b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ba:	fc 01       	movw	r30, r24
    41bc:	82 81       	ldd	r24, Z+2	; 0x02
    41be:	93 81       	ldd	r25, Z+3	; 0x03
    41c0:	8b 83       	std	Y+3, r24	; 0x03
    41c2:	9c 83       	std	Y+4, r25	; 0x04
	
	// Correct for the center position:
	x_tmp -= center->x; //calibration and unsigned to signed conversion
    41c4:	29 81       	ldd	r18, Y+1	; 0x01
    41c6:	3a 81       	ldd	r19, Y+2	; 0x02
    41c8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ca:	9e 81       	ldd	r25, Y+6	; 0x06
    41cc:	fc 01       	movw	r30, r24
    41ce:	80 81       	ld	r24, Z
    41d0:	91 81       	ldd	r25, Z+1	; 0x01
    41d2:	a9 01       	movw	r20, r18
    41d4:	48 1b       	sub	r20, r24
    41d6:	59 0b       	sbc	r21, r25
    41d8:	ca 01       	movw	r24, r20
    41da:	89 83       	std	Y+1, r24	; 0x01
    41dc:	9a 83       	std	Y+2, r25	; 0x02
	y_tmp -= center->y; //calibration and unsigned to signed conversion
    41de:	2b 81       	ldd	r18, Y+3	; 0x03
    41e0:	3c 81       	ldd	r19, Y+4	; 0x04
    41e2:	8d 81       	ldd	r24, Y+5	; 0x05
    41e4:	9e 81       	ldd	r25, Y+6	; 0x06
    41e6:	fc 01       	movw	r30, r24
    41e8:	82 81       	ldd	r24, Z+2	; 0x02
    41ea:	93 81       	ldd	r25, Z+3	; 0x03
    41ec:	a9 01       	movw	r20, r18
    41ee:	48 1b       	sub	r20, r24
    41f0:	59 0b       	sbc	r21, r25
    41f2:	ca 01       	movw	r24, r20
    41f4:	8b 83       	std	Y+3, r24	; 0x03
    41f6:	9c 83       	std	Y+4, r25	; 0x04
	
	//gamepadJoystickHandler() flips axis with min/max pairing for scaling
	//we use simple flipping here:
	x_tmp = -x_tmp;
    41f8:	89 81       	ldd	r24, Y+1	; 0x01
    41fa:	9a 81       	ldd	r25, Y+2	; 0x02
    41fc:	91 95       	neg	r25
    41fe:	81 95       	neg	r24
    4200:	91 09       	sbc	r25, r1
    4202:	89 83       	std	Y+1, r24	; 0x01
    4204:	9a 83       	std	Y+2, r25	; 0x02
	y_tmp = -y_tmp;
    4206:	8b 81       	ldd	r24, Y+3	; 0x03
    4208:	9c 81       	ldd	r25, Y+4	; 0x04
    420a:	91 95       	neg	r25
    420c:	81 95       	neg	r24
    420e:	91 09       	sbc	r25, r1
    4210:	8b 83       	std	Y+3, r24	; 0x03
    4212:	9c 83       	std	Y+4, r25	; 0x04
	
	//This deadzone code looks at each axis independently - digital behavior joysticks
	//AnalogJoystickAdj looks at both axises together - analog behavior joysticks
	if(NABS(x_tmp) > -(deadzone->x))
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	99 23       	and	r25, r25
    421a:	1c f4       	brge	.+6      	; 0x4222 <SimpleJoystickAdj+0x98>
    421c:	91 95       	neg	r25
    421e:	81 95       	neg	r24
    4220:	91 09       	sbc	r25, r1
    4222:	22 27       	eor	r18, r18
    4224:	33 27       	eor	r19, r19
    4226:	28 1b       	sub	r18, r24
    4228:	39 0b       	sbc	r19, r25
    422a:	8f 81       	ldd	r24, Y+7	; 0x07
    422c:	98 85       	ldd	r25, Y+8	; 0x08
    422e:	fc 01       	movw	r30, r24
    4230:	80 81       	ld	r24, Z
    4232:	91 81       	ldd	r25, Z+1	; 0x01
    4234:	91 95       	neg	r25
    4236:	81 95       	neg	r24
    4238:	91 09       	sbc	r25, r1
    423a:	82 17       	cp	r24, r18
    423c:	93 07       	cpc	r25, r19
    423e:	14 f4       	brge	.+4      	; 0x4244 <SimpleJoystickAdj+0xba>
	{
		x_tmp=0;
    4240:	19 82       	std	Y+1, r1	; 0x01
    4242:	1a 82       	std	Y+2, r1	; 0x02
	}
			
	if(NABS(y_tmp) > -(deadzone->y))
    4244:	8b 81       	ldd	r24, Y+3	; 0x03
    4246:	9c 81       	ldd	r25, Y+4	; 0x04
    4248:	99 23       	and	r25, r25
    424a:	1c f4       	brge	.+6      	; 0x4252 <SimpleJoystickAdj+0xc8>
    424c:	91 95       	neg	r25
    424e:	81 95       	neg	r24
    4250:	91 09       	sbc	r25, r1
    4252:	22 27       	eor	r18, r18
    4254:	33 27       	eor	r19, r19
    4256:	28 1b       	sub	r18, r24
    4258:	39 0b       	sbc	r19, r25
    425a:	8f 81       	ldd	r24, Y+7	; 0x07
    425c:	98 85       	ldd	r25, Y+8	; 0x08
    425e:	fc 01       	movw	r30, r24
    4260:	82 81       	ldd	r24, Z+2	; 0x02
    4262:	93 81       	ldd	r25, Z+3	; 0x03
    4264:	91 95       	neg	r25
    4266:	81 95       	neg	r24
    4268:	91 09       	sbc	r25, r1
    426a:	82 17       	cp	r24, r18
    426c:	93 07       	cpc	r25, r19
    426e:	14 f4       	brge	.+4      	; 0x4274 <SimpleJoystickAdj+0xea>
	{
		y_tmp=0;
    4270:	1b 82       	std	Y+3, r1	; 0x03
    4272:	1c 82       	std	Y+4, r1	; 0x04
	}	
	
	out->x = x_tmp;
    4274:	8b 85       	ldd	r24, Y+11	; 0x0b
    4276:	9c 85       	ldd	r25, Y+12	; 0x0c
    4278:	29 81       	ldd	r18, Y+1	; 0x01
    427a:	3a 81       	ldd	r19, Y+2	; 0x02
    427c:	fc 01       	movw	r30, r24
    427e:	20 83       	st	Z, r18
    4280:	31 83       	std	Z+1, r19	; 0x01
	out->y = y_tmp;
    4282:	8b 85       	ldd	r24, Y+11	; 0x0b
    4284:	9c 85       	ldd	r25, Y+12	; 0x0c
    4286:	2b 81       	ldd	r18, Y+3	; 0x03
    4288:	3c 81       	ldd	r19, Y+4	; 0x04
    428a:	fc 01       	movw	r30, r24
    428c:	22 83       	std	Z+2, r18	; 0x02
    428e:	33 83       	std	Z+3, r19	; 0x03
}
    4290:	2c 96       	adiw	r28, 0x0c	; 12
    4292:	cd bf       	out	0x3d, r28	; 61
    4294:	de bf       	out	0x3e, r29	; 62
    4296:	df 91       	pop	r29
    4298:	cf 91       	pop	r28
    429a:	08 95       	ret

0000429c <AnalogJoystickAdj>:
//map from ADC range [0,4095] to joystick range [-127,+127]
//Joystick orientations:
//left:- , right:+
//up:- , down:+
void AnalogJoystickAdj( const uint16_xy * center, JoystickConfiguration *this_joystick_cfg, const uint16_xy * raw, int8_xy * out )
{
    429c:	cf 93       	push	r28
    429e:	df 93       	push	r29
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    42a4:	2c 97       	sbiw	r28, 0x0c	; 12
    42a6:	cd bf       	out	0x3d, r28	; 61
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	8d 83       	std	Y+5, r24	; 0x05
    42ac:	9e 83       	std	Y+6, r25	; 0x06
    42ae:	6f 83       	std	Y+7, r22	; 0x07
    42b0:	78 87       	std	Y+8, r23	; 0x08
    42b2:	49 87       	std	Y+9, r20	; 0x09
    42b4:	5a 87       	std	Y+10, r21	; 0x0a
    42b6:	2b 87       	std	Y+11, r18	; 0x0b
    42b8:	3c 87       	std	Y+12, r19	; 0x0c
	int16_t x_tmp = raw->x;
    42ba:	89 85       	ldd	r24, Y+9	; 0x09
    42bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    42be:	fc 01       	movw	r30, r24
    42c0:	80 81       	ld	r24, Z
    42c2:	91 81       	ldd	r25, Z+1	; 0x01
    42c4:	89 83       	std	Y+1, r24	; 0x01
    42c6:	9a 83       	std	Y+2, r25	; 0x02
	int16_t y_tmp = raw->y;
    42c8:	89 85       	ldd	r24, Y+9	; 0x09
    42ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    42cc:	fc 01       	movw	r30, r24
    42ce:	82 81       	ldd	r24, Z+2	; 0x02
    42d0:	93 81       	ldd	r25, Z+3	; 0x03
    42d2:	8b 83       	std	Y+3, r24	; 0x03
    42d4:	9c 83       	std	Y+4, r25	; 0x04
	}
	*/	
	
	//Implementation #3
	// Correct for the center position:
	x_tmp -= center->x; //calibration and unsigned to signed conversion
    42d6:	29 81       	ldd	r18, Y+1	; 0x01
    42d8:	3a 81       	ldd	r19, Y+2	; 0x02
    42da:	8d 81       	ldd	r24, Y+5	; 0x05
    42dc:	9e 81       	ldd	r25, Y+6	; 0x06
    42de:	fc 01       	movw	r30, r24
    42e0:	80 81       	ld	r24, Z
    42e2:	91 81       	ldd	r25, Z+1	; 0x01
    42e4:	a9 01       	movw	r20, r18
    42e6:	48 1b       	sub	r20, r24
    42e8:	59 0b       	sbc	r21, r25
    42ea:	ca 01       	movw	r24, r20
    42ec:	89 83       	std	Y+1, r24	; 0x01
    42ee:	9a 83       	std	Y+2, r25	; 0x02
	y_tmp -= center->y; //calibration and unsigned to signed conversion
    42f0:	2b 81       	ldd	r18, Y+3	; 0x03
    42f2:	3c 81       	ldd	r19, Y+4	; 0x04
    42f4:	8d 81       	ldd	r24, Y+5	; 0x05
    42f6:	9e 81       	ldd	r25, Y+6	; 0x06
    42f8:	fc 01       	movw	r30, r24
    42fa:	82 81       	ldd	r24, Z+2	; 0x02
    42fc:	93 81       	ldd	r25, Z+3	; 0x03
    42fe:	a9 01       	movw	r20, r18
    4300:	48 1b       	sub	r20, r24
    4302:	59 0b       	sbc	r21, r25
    4304:	ca 01       	movw	r24, r20
    4306:	8b 83       	std	Y+3, r24	; 0x03
    4308:	9c 83       	std	Y+4, r25	; 0x04
	*/
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
    430a:	89 81       	ldd	r24, Y+1	; 0x01
    430c:	9a 81       	ldd	r25, Y+2	; 0x02
    430e:	99 23       	and	r25, r25
    4310:	1c f4       	brge	.+6      	; 0x4318 <AnalogJoystickAdj+0x7c>
    4312:	91 95       	neg	r25
    4314:	81 95       	neg	r24
    4316:	91 09       	sbc	r25, r1
    4318:	22 27       	eor	r18, r18
    431a:	33 27       	eor	r19, r19
    431c:	28 1b       	sub	r18, r24
    431e:	39 0b       	sbc	r19, r25
    4320:	8f 81       	ldd	r24, Y+7	; 0x07
    4322:	98 85       	ldd	r25, Y+8	; 0x08
    4324:	fc 01       	movw	r30, r24
    4326:	82 89       	ldd	r24, Z+18	; 0x12
    4328:	93 89       	ldd	r25, Z+19	; 0x13
    432a:	91 95       	neg	r25
    432c:	81 95       	neg	r24
    432e:	91 09       	sbc	r25, r1
	}
	*/
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
    4330:	82 17       	cp	r24, r18
    4332:	93 07       	cpc	r25, r19
    4334:	dc f4       	brge	.+54     	; 0x436c <AnalogJoystickAdj+0xd0>
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
		(NABS(y_tmp) > -(this_joystick_cfg->y_deadzone))
    4336:	8b 81       	ldd	r24, Y+3	; 0x03
    4338:	9c 81       	ldd	r25, Y+4	; 0x04
    433a:	99 23       	and	r25, r25
    433c:	1c f4       	brge	.+6      	; 0x4344 <AnalogJoystickAdj+0xa8>
    433e:	91 95       	neg	r25
    4340:	81 95       	neg	r24
    4342:	91 09       	sbc	r25, r1
    4344:	22 27       	eor	r18, r18
    4346:	33 27       	eor	r19, r19
    4348:	28 1b       	sub	r18, r24
    434a:	39 0b       	sbc	r19, r25
    434c:	8f 81       	ldd	r24, Y+7	; 0x07
    434e:	98 85       	ldd	r25, Y+8	; 0x08
    4350:	fc 01       	movw	r30, r24
    4352:	84 89       	ldd	r24, Z+20	; 0x14
    4354:	95 89       	ldd	r25, Z+21	; 0x15
    4356:	91 95       	neg	r25
    4358:	81 95       	neg	r24
    435a:	91 09       	sbc	r25, r1
	*/
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
    435c:	82 17       	cp	r24, r18
    435e:	93 07       	cpc	r25, r19
    4360:	2c f4       	brge	.+10     	; 0x436c <AnalogJoystickAdj+0xd0>
		(NABS(y_tmp) > -(this_joystick_cfg->y_deadzone))
	)
	{
		x_tmp=0;
    4362:	19 82       	std	Y+1, r1	; 0x01
    4364:	1a 82       	std	Y+2, r1	; 0x02
		y_tmp=0;
    4366:	1b 82       	std	Y+3, r1	; 0x03
    4368:	1c 82       	std	Y+4, r1	; 0x04
    436a:	88 c0       	rjmp	.+272    	; 0x447c <AnalogJoystickAdj+0x1e0>
	}
	else
	{
		if(x_tmp>0)
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	9a 81       	ldd	r25, Y+2	; 0x02
    4370:	18 16       	cp	r1, r24
    4372:	19 06       	cpc	r1, r25
    4374:	04 f5       	brge	.+64     	; 0x43b6 <AnalogJoystickAdj+0x11a>
		{
			x_tmp = ( (int32_t)GAMEPAD_X_MIN*x_tmp ) / (this_joystick_cfg->x_max); //min/max is (-)/(+)
    4376:	89 81       	ldd	r24, Y+1	; 0x01
    4378:	9a 81       	ldd	r25, Y+2	; 0x02
    437a:	9c 01       	movw	r18, r24
    437c:	44 27       	eor	r20, r20
    437e:	37 fd       	sbrc	r19, 7
    4380:	40 95       	com	r20
    4382:	54 2f       	mov	r21, r20
    4384:	81 e8       	ldi	r24, 0x81	; 129
    4386:	9f ef       	ldi	r25, 0xFF	; 255
    4388:	dc 01       	movw	r26, r24
    438a:	0e 94 3c 48 	call	0x9078	; 0x9078 <__mulohisi3>
    438e:	dc 01       	movw	r26, r24
    4390:	cb 01       	movw	r24, r22
    4392:	2f 81       	ldd	r18, Y+7	; 0x07
    4394:	38 85       	ldd	r19, Y+8	; 0x08
    4396:	f9 01       	movw	r30, r18
    4398:	24 85       	ldd	r18, Z+12	; 0x0c
    439a:	35 85       	ldd	r19, Z+13	; 0x0d
    439c:	44 27       	eor	r20, r20
    439e:	37 fd       	sbrc	r19, 7
    43a0:	40 95       	com	r20
    43a2:	54 2f       	mov	r21, r20
    43a4:	bc 01       	movw	r22, r24
    43a6:	cd 01       	movw	r24, r26
    43a8:	0e 94 15 48 	call	0x902a	; 0x902a <__divmodsi4>
    43ac:	da 01       	movw	r26, r20
    43ae:	c9 01       	movw	r24, r18
    43b0:	89 83       	std	Y+1, r24	; 0x01
    43b2:	9a 83       	std	Y+2, r25	; 0x02
    43b4:	1f c0       	rjmp	.+62     	; 0x43f4 <AnalogJoystickAdj+0x158>
		}
		else
		{
			x_tmp = ( (int32_t)GAMEPAD_X_MAX*x_tmp ) / (this_joystick_cfg->x_min); //max/min is (+)/(-)
    43b6:	89 81       	ldd	r24, Y+1	; 0x01
    43b8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ba:	9c 01       	movw	r18, r24
    43bc:	44 27       	eor	r20, r20
    43be:	37 fd       	sbrc	r19, 7
    43c0:	40 95       	com	r20
    43c2:	54 2f       	mov	r21, r20
    43c4:	8f e7       	ldi	r24, 0x7F	; 127
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	dc 01       	movw	r26, r24
    43ca:	0e 94 30 48 	call	0x9060	; 0x9060 <__muluhisi3>
    43ce:	dc 01       	movw	r26, r24
    43d0:	cb 01       	movw	r24, r22
    43d2:	2f 81       	ldd	r18, Y+7	; 0x07
    43d4:	38 85       	ldd	r19, Y+8	; 0x08
    43d6:	f9 01       	movw	r30, r18
    43d8:	22 85       	ldd	r18, Z+10	; 0x0a
    43da:	33 85       	ldd	r19, Z+11	; 0x0b
    43dc:	44 27       	eor	r20, r20
    43de:	37 fd       	sbrc	r19, 7
    43e0:	40 95       	com	r20
    43e2:	54 2f       	mov	r21, r20
    43e4:	bc 01       	movw	r22, r24
    43e6:	cd 01       	movw	r24, r26
    43e8:	0e 94 15 48 	call	0x902a	; 0x902a <__divmodsi4>
    43ec:	da 01       	movw	r26, r20
    43ee:	c9 01       	movw	r24, r18
    43f0:	89 83       	std	Y+1, r24	; 0x01
    43f2:	9a 83       	std	Y+2, r25	; 0x02
		}
		if(y_tmp>0)
    43f4:	8b 81       	ldd	r24, Y+3	; 0x03
    43f6:	9c 81       	ldd	r25, Y+4	; 0x04
    43f8:	18 16       	cp	r1, r24
    43fa:	19 06       	cpc	r1, r25
    43fc:	04 f5       	brge	.+64     	; 0x443e <AnalogJoystickAdj+0x1a2>
		{
			y_tmp = ( (int32_t)GAMEPAD_Y_MIN*y_tmp ) / (this_joystick_cfg->y_max); //min/max is (-)/(+)
    43fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4400:	9c 81       	ldd	r25, Y+4	; 0x04
    4402:	9c 01       	movw	r18, r24
    4404:	44 27       	eor	r20, r20
    4406:	37 fd       	sbrc	r19, 7
    4408:	40 95       	com	r20
    440a:	54 2f       	mov	r21, r20
    440c:	81 e8       	ldi	r24, 0x81	; 129
    440e:	9f ef       	ldi	r25, 0xFF	; 255
    4410:	dc 01       	movw	r26, r24
    4412:	0e 94 3c 48 	call	0x9078	; 0x9078 <__mulohisi3>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	2f 81       	ldd	r18, Y+7	; 0x07
    441c:	38 85       	ldd	r19, Y+8	; 0x08
    441e:	f9 01       	movw	r30, r18
    4420:	20 89       	ldd	r18, Z+16	; 0x10
    4422:	31 89       	ldd	r19, Z+17	; 0x11
    4424:	44 27       	eor	r20, r20
    4426:	37 fd       	sbrc	r19, 7
    4428:	40 95       	com	r20
    442a:	54 2f       	mov	r21, r20
    442c:	bc 01       	movw	r22, r24
    442e:	cd 01       	movw	r24, r26
    4430:	0e 94 15 48 	call	0x902a	; 0x902a <__divmodsi4>
    4434:	da 01       	movw	r26, r20
    4436:	c9 01       	movw	r24, r18
    4438:	8b 83       	std	Y+3, r24	; 0x03
    443a:	9c 83       	std	Y+4, r25	; 0x04
    443c:	1f c0       	rjmp	.+62     	; 0x447c <AnalogJoystickAdj+0x1e0>
		}
		else
		{
			y_tmp = ( (int32_t)GAMEPAD_Y_MAX*y_tmp ) / (this_joystick_cfg->y_min); //max/min is (+)/(-)
    443e:	8b 81       	ldd	r24, Y+3	; 0x03
    4440:	9c 81       	ldd	r25, Y+4	; 0x04
    4442:	9c 01       	movw	r18, r24
    4444:	44 27       	eor	r20, r20
    4446:	37 fd       	sbrc	r19, 7
    4448:	40 95       	com	r20
    444a:	54 2f       	mov	r21, r20
    444c:	8f e7       	ldi	r24, 0x7F	; 127
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	dc 01       	movw	r26, r24
    4452:	0e 94 30 48 	call	0x9060	; 0x9060 <__muluhisi3>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	2f 81       	ldd	r18, Y+7	; 0x07
    445c:	38 85       	ldd	r19, Y+8	; 0x08
    445e:	f9 01       	movw	r30, r18
    4460:	26 85       	ldd	r18, Z+14	; 0x0e
    4462:	37 85       	ldd	r19, Z+15	; 0x0f
    4464:	44 27       	eor	r20, r20
    4466:	37 fd       	sbrc	r19, 7
    4468:	40 95       	com	r20
    446a:	54 2f       	mov	r21, r20
    446c:	bc 01       	movw	r22, r24
    446e:	cd 01       	movw	r24, r26
    4470:	0e 94 15 48 	call	0x902a	; 0x902a <__divmodsi4>
    4474:	da 01       	movw	r26, r20
    4476:	c9 01       	movw	r24, r18
    4478:	8b 83       	std	Y+3, r24	; 0x03
    447a:	9c 83       	std	Y+4, r25	; 0x04
	// Adjust for sensitivity:
	//x /= GAMEPAD_RESOLUTION;
	//y /= GAMEPAD_RESOLUTION;
	
	// Gamepad range is [-127,127]. Fix if out of bounds:
	if (x_tmp > GAMEPAD_X_MAX) {
    447c:	89 81       	ldd	r24, Y+1	; 0x01
    447e:	9a 81       	ldd	r25, Y+2	; 0x02
    4480:	80 38       	cpi	r24, 0x80	; 128
    4482:	91 05       	cpc	r25, r1
    4484:	2c f0       	brlt	.+10     	; 0x4490 <AnalogJoystickAdj+0x1f4>
		x_tmp = GAMEPAD_X_MAX;
    4486:	8f e7       	ldi	r24, 0x7F	; 127
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	89 83       	std	Y+1, r24	; 0x01
    448c:	9a 83       	std	Y+2, r25	; 0x02
    448e:	0a c0       	rjmp	.+20     	; 0x44a4 <AnalogJoystickAdj+0x208>
	}
	else if (x_tmp < GAMEPAD_X_MIN) {
    4490:	89 81       	ldd	r24, Y+1	; 0x01
    4492:	9a 81       	ldd	r25, Y+2	; 0x02
    4494:	81 38       	cpi	r24, 0x81	; 129
    4496:	ff ef       	ldi	r31, 0xFF	; 255
    4498:	9f 07       	cpc	r25, r31
    449a:	24 f4       	brge	.+8      	; 0x44a4 <AnalogJoystickAdj+0x208>
		x_tmp = GAMEPAD_X_MIN;
    449c:	81 e8       	ldi	r24, 0x81	; 129
    449e:	9f ef       	ldi	r25, 0xFF	; 255
    44a0:	89 83       	std	Y+1, r24	; 0x01
    44a2:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	if (y_tmp > GAMEPAD_Y_MAX) {
    44a4:	8b 81       	ldd	r24, Y+3	; 0x03
    44a6:	9c 81       	ldd	r25, Y+4	; 0x04
    44a8:	80 38       	cpi	r24, 0x80	; 128
    44aa:	91 05       	cpc	r25, r1
    44ac:	2c f0       	brlt	.+10     	; 0x44b8 <AnalogJoystickAdj+0x21c>
		y_tmp = GAMEPAD_Y_MAX;
    44ae:	8f e7       	ldi	r24, 0x7F	; 127
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	8b 83       	std	Y+3, r24	; 0x03
    44b4:	9c 83       	std	Y+4, r25	; 0x04
    44b6:	0a c0       	rjmp	.+20     	; 0x44cc <AnalogJoystickAdj+0x230>
	}
	else if (y_tmp < GAMEPAD_Y_MIN) {
    44b8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ba:	9c 81       	ldd	r25, Y+4	; 0x04
    44bc:	81 38       	cpi	r24, 0x81	; 129
    44be:	2f ef       	ldi	r18, 0xFF	; 255
    44c0:	92 07       	cpc	r25, r18
    44c2:	24 f4       	brge	.+8      	; 0x44cc <AnalogJoystickAdj+0x230>
		y_tmp = GAMEPAD_Y_MIN;
    44c4:	81 e8       	ldi	r24, 0x81	; 129
    44c6:	9f ef       	ldi	r25, 0xFF	; 255
    44c8:	8b 83       	std	Y+3, r24	; 0x03
    44ca:	9c 83       	std	Y+4, r25	; 0x04
	}	
	
	out->x = (int8_t)x_tmp;
    44cc:	29 81       	ldd	r18, Y+1	; 0x01
    44ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    44d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    44d2:	fc 01       	movw	r30, r24
    44d4:	20 83       	st	Z, r18
	out->y = (int8_t)y_tmp;
    44d6:	2b 81       	ldd	r18, Y+3	; 0x03
    44d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    44da:	9c 85       	ldd	r25, Y+12	; 0x0c
    44dc:	fc 01       	movw	r30, r24
    44de:	21 83       	std	Z+1, r18	; 0x01
}
    44e0:	2c 96       	adiw	r28, 0x0c	; 12
    44e2:	cd bf       	out	0x3d, r28	; 61
    44e4:	de bf       	out	0x3e, r29	; 62
    44e6:	df 91       	pop	r29
    44e8:	cf 91       	pop	r28
    44ea:	08 95       	ret

000044ec <MouseJoystickAdj>:
//map from ADC range [0,4095] to mouse range [-2048,+2047]
//Joystick orientations:
//left:- , right:+
//up:- , down:+
void MouseJoystickAdj( const uint16_xy * center, JoystickConfiguration *this_joystick_cfg, const uint16_xy * raw, int16_xy * out )
{
    44ec:	cf 93       	push	r28
    44ee:	df 93       	push	r29
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
    44f4:	2c 97       	sbiw	r28, 0x0c	; 12
    44f6:	cd bf       	out	0x3d, r28	; 61
    44f8:	de bf       	out	0x3e, r29	; 62
    44fa:	8d 83       	std	Y+5, r24	; 0x05
    44fc:	9e 83       	std	Y+6, r25	; 0x06
    44fe:	6f 83       	std	Y+7, r22	; 0x07
    4500:	78 87       	std	Y+8, r23	; 0x08
    4502:	49 87       	std	Y+9, r20	; 0x09
    4504:	5a 87       	std	Y+10, r21	; 0x0a
    4506:	2b 87       	std	Y+11, r18	; 0x0b
    4508:	3c 87       	std	Y+12, r19	; 0x0c
	int16_t x_tmp = raw->x;
    450a:	89 85       	ldd	r24, Y+9	; 0x09
    450c:	9a 85       	ldd	r25, Y+10	; 0x0a
    450e:	fc 01       	movw	r30, r24
    4510:	80 81       	ld	r24, Z
    4512:	91 81       	ldd	r25, Z+1	; 0x01
    4514:	89 83       	std	Y+1, r24	; 0x01
    4516:	9a 83       	std	Y+2, r25	; 0x02
	int16_t y_tmp = raw->y;
    4518:	89 85       	ldd	r24, Y+9	; 0x09
    451a:	9a 85       	ldd	r25, Y+10	; 0x0a
    451c:	fc 01       	movw	r30, r24
    451e:	82 81       	ldd	r24, Z+2	; 0x02
    4520:	93 81       	ldd	r25, Z+3	; 0x03
    4522:	8b 83       	std	Y+3, r24	; 0x03
    4524:	9c 83       	std	Y+4, r25	; 0x04
	
	//Implementation #3
	// Correct for the center position:
	x_tmp -= center->x; //calibration and unsigned to signed conversion
    4526:	29 81       	ldd	r18, Y+1	; 0x01
    4528:	3a 81       	ldd	r19, Y+2	; 0x02
    452a:	8d 81       	ldd	r24, Y+5	; 0x05
    452c:	9e 81       	ldd	r25, Y+6	; 0x06
    452e:	fc 01       	movw	r30, r24
    4530:	80 81       	ld	r24, Z
    4532:	91 81       	ldd	r25, Z+1	; 0x01
    4534:	a9 01       	movw	r20, r18
    4536:	48 1b       	sub	r20, r24
    4538:	59 0b       	sbc	r21, r25
    453a:	ca 01       	movw	r24, r20
    453c:	89 83       	std	Y+1, r24	; 0x01
    453e:	9a 83       	std	Y+2, r25	; 0x02
	y_tmp -= center->y; //calibration and unsigned to signed conversion
    4540:	2b 81       	ldd	r18, Y+3	; 0x03
    4542:	3c 81       	ldd	r19, Y+4	; 0x04
    4544:	8d 81       	ldd	r24, Y+5	; 0x05
    4546:	9e 81       	ldd	r25, Y+6	; 0x06
    4548:	fc 01       	movw	r30, r24
    454a:	82 81       	ldd	r24, Z+2	; 0x02
    454c:	93 81       	ldd	r25, Z+3	; 0x03
    454e:	a9 01       	movw	r20, r18
    4550:	48 1b       	sub	r20, r24
    4552:	59 0b       	sbc	r21, r25
    4554:	ca 01       	movw	r24, r20
    4556:	8b 83       	std	Y+3, r24	; 0x03
    4558:	9c 83       	std	Y+4, r25	; 0x04
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
    455a:	89 81       	ldd	r24, Y+1	; 0x01
    455c:	9a 81       	ldd	r25, Y+2	; 0x02
    455e:	99 23       	and	r25, r25
    4560:	1c f4       	brge	.+6      	; 0x4568 <MouseJoystickAdj+0x7c>
    4562:	91 95       	neg	r25
    4564:	81 95       	neg	r24
    4566:	91 09       	sbc	r25, r1
    4568:	22 27       	eor	r18, r18
    456a:	33 27       	eor	r19, r19
    456c:	28 1b       	sub	r18, r24
    456e:	39 0b       	sbc	r19, r25
    4570:	8f 81       	ldd	r24, Y+7	; 0x07
    4572:	98 85       	ldd	r25, Y+8	; 0x08
    4574:	fc 01       	movw	r30, r24
    4576:	82 89       	ldd	r24, Z+18	; 0x12
    4578:	93 89       	ldd	r25, Z+19	; 0x13
    457a:	91 95       	neg	r25
    457c:	81 95       	neg	r24
    457e:	91 09       	sbc	r25, r1
	x_tmp -= center->x; //calibration and unsigned to signed conversion
	y_tmp -= center->y; //calibration and unsigned to signed conversion
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
    4580:	82 17       	cp	r24, r18
    4582:	93 07       	cpc	r25, r19
    4584:	dc f4       	brge	.+54     	; 0x45bc <MouseJoystickAdj+0xd0>
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
		(NABS(y_tmp) > -(this_joystick_cfg->y_deadzone))
    4586:	8b 81       	ldd	r24, Y+3	; 0x03
    4588:	9c 81       	ldd	r25, Y+4	; 0x04
    458a:	99 23       	and	r25, r25
    458c:	1c f4       	brge	.+6      	; 0x4594 <MouseJoystickAdj+0xa8>
    458e:	91 95       	neg	r25
    4590:	81 95       	neg	r24
    4592:	91 09       	sbc	r25, r1
    4594:	22 27       	eor	r18, r18
    4596:	33 27       	eor	r19, r19
    4598:	28 1b       	sub	r18, r24
    459a:	39 0b       	sbc	r19, r25
    459c:	8f 81       	ldd	r24, Y+7	; 0x07
    459e:	98 85       	ldd	r25, Y+8	; 0x08
    45a0:	fc 01       	movw	r30, r24
    45a2:	84 89       	ldd	r24, Z+20	; 0x14
    45a4:	95 89       	ldd	r25, Z+21	; 0x15
    45a6:	91 95       	neg	r25
    45a8:	81 95       	neg	r24
    45aa:	91 09       	sbc	r25, r1
	y_tmp -= center->y; //calibration and unsigned to signed conversion
	
	//slightly better, simple method deadzone (deadzone box at the center) 
	//regular simple method (check x separate from y) creates deadzone cross on x-axis and y-axis 
	if( 
		(NABS(x_tmp) > -(this_joystick_cfg->x_deadzone)) && 
    45ac:	82 17       	cp	r24, r18
    45ae:	93 07       	cpc	r25, r19
    45b0:	2c f4       	brge	.+10     	; 0x45bc <MouseJoystickAdj+0xd0>
		(NABS(y_tmp) > -(this_joystick_cfg->y_deadzone))
	)
	{
		x_tmp=0;
    45b2:	19 82       	std	Y+1, r1	; 0x01
    45b4:	1a 82       	std	Y+2, r1	; 0x02
		y_tmp=0;
    45b6:	1b 82       	std	Y+3, r1	; 0x03
    45b8:	1c 82       	std	Y+4, r1	; 0x04
    45ba:	0e c0       	rjmp	.+28     	; 0x45d8 <MouseJoystickAdj+0xec>
		else
		{
			y_tmp = ( (int32_t)MOUSE_Y_MAX*y_tmp ) / (this_joystick_cfg->y_min); //max/min is (+)/(-)
		}
		*/
		x_tmp = -x_tmp;
    45bc:	89 81       	ldd	r24, Y+1	; 0x01
    45be:	9a 81       	ldd	r25, Y+2	; 0x02
    45c0:	91 95       	neg	r25
    45c2:	81 95       	neg	r24
    45c4:	91 09       	sbc	r25, r1
    45c6:	89 83       	std	Y+1, r24	; 0x01
    45c8:	9a 83       	std	Y+2, r25	; 0x02
		y_tmp = -y_tmp;
    45ca:	8b 81       	ldd	r24, Y+3	; 0x03
    45cc:	9c 81       	ldd	r25, Y+4	; 0x04
    45ce:	91 95       	neg	r25
    45d0:	81 95       	neg	r24
    45d2:	91 09       	sbc	r25, r1
    45d4:	8b 83       	std	Y+3, r24	; 0x03
    45d6:	9c 83       	std	Y+4, r25	; 0x04
	// Adjust for sensitivity:
	//x /= MOUSE_RESOLUTION;
	//y /= MOUSE_RESOLUTION;
	
	// Gamepad range is [-2048,2047]. Fix if out of bounds:
	if (x_tmp > MOUSE_X_MAX) {
    45d8:	89 81       	ldd	r24, Y+1	; 0x01
    45da:	9a 81       	ldd	r25, Y+2	; 0x02
    45dc:	81 15       	cp	r24, r1
    45de:	f8 e0       	ldi	r31, 0x08	; 8
    45e0:	9f 07       	cpc	r25, r31
    45e2:	2c f0       	brlt	.+10     	; 0x45ee <MouseJoystickAdj+0x102>
		x_tmp = MOUSE_X_MAX;
    45e4:	8f ef       	ldi	r24, 0xFF	; 255
    45e6:	97 e0       	ldi	r25, 0x07	; 7
    45e8:	89 83       	std	Y+1, r24	; 0x01
    45ea:	9a 83       	std	Y+2, r25	; 0x02
    45ec:	0a c0       	rjmp	.+20     	; 0x4602 <MouseJoystickAdj+0x116>
	}
	else if (x_tmp < MOUSE_X_MIN) {
    45ee:	89 81       	ldd	r24, Y+1	; 0x01
    45f0:	9a 81       	ldd	r25, Y+2	; 0x02
    45f2:	81 15       	cp	r24, r1
    45f4:	28 ef       	ldi	r18, 0xF8	; 248
    45f6:	92 07       	cpc	r25, r18
    45f8:	24 f4       	brge	.+8      	; 0x4602 <MouseJoystickAdj+0x116>
		x_tmp = MOUSE_X_MIN;
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	98 ef       	ldi	r25, 0xF8	; 248
    45fe:	89 83       	std	Y+1, r24	; 0x01
    4600:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	if (y_tmp > MOUSE_Y_MAX) {
    4602:	8b 81       	ldd	r24, Y+3	; 0x03
    4604:	9c 81       	ldd	r25, Y+4	; 0x04
    4606:	81 15       	cp	r24, r1
    4608:	48 e0       	ldi	r20, 0x08	; 8
    460a:	94 07       	cpc	r25, r20
    460c:	2c f0       	brlt	.+10     	; 0x4618 <MouseJoystickAdj+0x12c>
		y_tmp = MOUSE_Y_MAX;
    460e:	8f ef       	ldi	r24, 0xFF	; 255
    4610:	97 e0       	ldi	r25, 0x07	; 7
    4612:	8b 83       	std	Y+3, r24	; 0x03
    4614:	9c 83       	std	Y+4, r25	; 0x04
    4616:	0a c0       	rjmp	.+20     	; 0x462c <MouseJoystickAdj+0x140>
	}
	else if (y_tmp < MOUSE_Y_MIN) {
    4618:	8b 81       	ldd	r24, Y+3	; 0x03
    461a:	9c 81       	ldd	r25, Y+4	; 0x04
    461c:	81 15       	cp	r24, r1
    461e:	58 ef       	ldi	r21, 0xF8	; 248
    4620:	95 07       	cpc	r25, r21
    4622:	24 f4       	brge	.+8      	; 0x462c <MouseJoystickAdj+0x140>
		y_tmp = MOUSE_Y_MIN;
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	98 ef       	ldi	r25, 0xF8	; 248
    4628:	8b 83       	std	Y+3, r24	; 0x03
    462a:	9c 83       	std	Y+4, r25	; 0x04
	}	
	
	out->x = (int16_t)x_tmp;
    462c:	8b 85       	ldd	r24, Y+11	; 0x0b
    462e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4630:	29 81       	ldd	r18, Y+1	; 0x01
    4632:	3a 81       	ldd	r19, Y+2	; 0x02
    4634:	fc 01       	movw	r30, r24
    4636:	20 83       	st	Z, r18
    4638:	31 83       	std	Z+1, r19	; 0x01
	out->y = (int16_t)y_tmp;
    463a:	8b 85       	ldd	r24, Y+11	; 0x0b
    463c:	9c 85       	ldd	r25, Y+12	; 0x0c
    463e:	2b 81       	ldd	r18, Y+3	; 0x03
    4640:	3c 81       	ldd	r19, Y+4	; 0x04
    4642:	fc 01       	movw	r30, r24
    4644:	22 83       	std	Z+2, r18	; 0x02
    4646:	33 83       	std	Z+3, r19	; 0x03
}
    4648:	2c 96       	adiw	r28, 0x0c	; 12
    464a:	cd bf       	out	0x3d, r28	; 61
    464c:	de bf       	out	0x3e, r29	; 62
    464e:	df 91       	pop	r29
    4650:	cf 91       	pop	r28
    4652:	08 95       	ret

00004654 <sleep_set_mode>:
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	1f 92       	push	r1
    465a:	cd b7       	in	r28, 0x3d	; 61
    465c:	de b7       	in	r29, 0x3e	; 62
    465e:	89 83       	std	Y+1, r24	; 0x01
    4660:	88 e4       	ldi	r24, 0x48	; 72
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	28 e4       	ldi	r18, 0x48	; 72
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	f9 01       	movw	r30, r18
    466a:	20 81       	ld	r18, Z
    466c:	32 2f       	mov	r19, r18
    466e:	31 7f       	andi	r19, 0xF1	; 241
    4670:	29 81       	ldd	r18, Y+1	; 0x01
    4672:	23 2b       	or	r18, r19
    4674:	fc 01       	movw	r30, r24
    4676:	20 83       	st	Z, r18
    4678:	0f 90       	pop	r0
    467a:	df 91       	pop	r29
    467c:	cf 91       	pop	r28
    467e:	08 95       	ret

00004680 <ioport_get_pin_level>:
    4680:	cf 93       	push	r28
    4682:	df 93       	push	r29
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	28 97       	sbiw	r28, 0x08	; 8
    468a:	cd bf       	out	0x3d, r28	; 61
    468c:	de bf       	out	0x3e, r29	; 62
    468e:	88 87       	std	Y+8, r24	; 0x08
    4690:	88 85       	ldd	r24, Y+8	; 0x08
    4692:	89 83       	std	Y+1, r24	; 0x01
    4694:	89 81       	ldd	r24, Y+1	; 0x01
    4696:	8a 83       	std	Y+2, r24	; 0x02
    4698:	8a 81       	ldd	r24, Y+2	; 0x02
    469a:	8b 83       	std	Y+3, r24	; 0x03
    469c:	8b 81       	ldd	r24, Y+3	; 0x03
    469e:	86 95       	lsr	r24
    46a0:	86 95       	lsr	r24
    46a2:	86 95       	lsr	r24
    46a4:	8c 83       	std	Y+4, r24	; 0x04
    46a6:	8c 81       	ldd	r24, Y+4	; 0x04
    46a8:	88 2f       	mov	r24, r24
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	88 0f       	add	r24, r24
    46ae:	99 1f       	adc	r25, r25
    46b0:	82 95       	swap	r24
    46b2:	92 95       	swap	r25
    46b4:	90 7f       	andi	r25, 0xF0	; 240
    46b6:	98 27       	eor	r25, r24
    46b8:	80 7f       	andi	r24, 0xF0	; 240
    46ba:	98 27       	eor	r25, r24
    46bc:	9a 5f       	subi	r25, 0xFA	; 250
    46be:	8d 83       	std	Y+5, r24	; 0x05
    46c0:	9e 83       	std	Y+6, r25	; 0x06
    46c2:	8d 81       	ldd	r24, Y+5	; 0x05
    46c4:	9e 81       	ldd	r25, Y+6	; 0x06
    46c6:	fc 01       	movw	r30, r24
    46c8:	40 85       	ldd	r20, Z+8	; 0x08
    46ca:	89 81       	ldd	r24, Y+1	; 0x01
    46cc:	8f 83       	std	Y+7, r24	; 0x07
    46ce:	8f 81       	ldd	r24, Y+7	; 0x07
    46d0:	88 2f       	mov	r24, r24
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	9c 01       	movw	r18, r24
    46d6:	27 70       	andi	r18, 0x07	; 7
    46d8:	33 27       	eor	r19, r19
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	02 2e       	mov	r0, r18
    46e0:	02 c0       	rjmp	.+4      	; 0x46e6 <ioport_get_pin_level+0x66>
    46e2:	88 0f       	add	r24, r24
    46e4:	99 1f       	adc	r25, r25
    46e6:	0a 94       	dec	r0
    46e8:	e2 f7       	brpl	.-8      	; 0x46e2 <ioport_get_pin_level+0x62>
    46ea:	94 2f       	mov	r25, r20
    46ec:	98 23       	and	r25, r24
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	99 23       	and	r25, r25
    46f2:	09 f4       	brne	.+2      	; 0x46f6 <ioport_get_pin_level+0x76>
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	28 96       	adiw	r28, 0x08	; 8
    46f8:	cd bf       	out	0x3d, r28	; 61
    46fa:	de bf       	out	0x3e, r29	; 62
    46fc:	df 91       	pop	r29
    46fe:	cf 91       	pop	r28
    4700:	08 95       	ret

00004702 <reset_do_soft_reset>:
{
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
    4702:	cf 93       	push	r28
    4704:	df 93       	push	r29
    4706:	cd b7       	in	r28, 0x3d	; 61
    4708:	de b7       	in	r29, 0x3e	; 62
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
    470a:	61 e0       	ldi	r22, 0x01	; 1
    470c:	89 e7       	ldi	r24, 0x79	; 121
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <ccp_write_io>

	while (1) {
		/* Intentionally empty. */
	}
    4714:	ff cf       	rjmp	.-2      	; 0x4714 <reset_do_soft_reset+0x12>

00004716 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    4716:	61 50       	subi	r22, 0x01	; 1
    4718:	71 09       	sbc	r23, r1
    471a:	81 09       	sbc	r24, r1
    471c:	91 09       	sbc	r25, r1
    471e:	d9 f7       	brne	.-10     	; 0x4716 <__portable_avr_delay_cycles>
}
    4720:	08 95       	ret

00004722 <powerOff>:
extern struct GlobalHeader global_header;  // The current global header.

bool Wakeup(uint16_t timeout_ms);

void powerOff(bool powerOffSoftware) 
{
    4722:	cf 93       	push	r28
    4724:	df 93       	push	r29
    4726:	1f 92       	push	r1
    4728:	cd b7       	in	r28, 0x3d	; 61
    472a:	de b7       	in	r29, 0x3e	; 62
    472c:	89 83       	std	Y+1, r24	; 0x01
	WatchdogPet();
    472e:	02 d6       	rcall	.+3076   	; 0x5334 <WatchdogPet>
	WatchDogEnable(false);
    4730:	80 e0       	ldi	r24, 0x00	; 0
    4732:	2b d6       	rcall	.+3158   	; 0x538a <WatchDogEnable>
	turnBTOff();
    4734:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <turnBTOff>
	
	delay_ms(20);
    4738:	6a ea       	ldi	r22, 0xAA	; 170
    473a:	70 ea       	ldi	r23, 0xA0	; 160
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	ea df       	rcall	.-44     	; 0x4716 <__portable_avr_delay_cycles>
	cpu_irq_enable();	
    4742:	78 94       	sei

	sleep_set_mode(SLEEP_MODE_PWR_DOWN);
    4744:	84 e0       	ldi	r24, 0x04	; 4
    4746:	86 df       	rcall	.-244    	; 0x4654 <sleep_set_mode>
	sleep_enable();
    4748:	88 e4       	ldi	r24, 0x48	; 72
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	28 e4       	ldi	r18, 0x48	; 72
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	f9 01       	movw	r30, r18
    4752:	20 81       	ld	r18, Z
    4754:	21 60       	ori	r18, 0x01	; 1
    4756:	fc 01       	movw	r30, r24
    4758:	20 83       	st	Z, r18
    475a:	01 c0       	rjmp	.+2      	; 0x475e <powerOff+0x3c>
			
			if( Wakeup(STARTUP_HOLD_TIME_MS) )
			{
				break; //don't reenter sleep
			}
	}
    475c:	00 00       	nop
	sleep_set_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	
	while(1)
	{
			sleep_enter();
    475e:	88 95       	sleep
			
			//EXECUTION STARTS HERE AFTER START_PIN EXTERNAL INTERRUPT ISR
			
			if( Wakeup(STARTUP_HOLD_TIME_MS) )
    4760:	80 ed       	ldi	r24, 0xD0	; 208
    4762:	97 e0       	ldi	r25, 0x07	; 7
    4764:	11 d0       	rcall	.+34     	; 0x4788 <Wakeup>
    4766:	88 23       	and	r24, r24
    4768:	c9 f3       	breq	.-14     	; 0x475c <powerOff+0x3a>
			{
				break; //don't reenter sleep
    476a:	00 00       	nop
			}
	}
	
	sleep_disable();
    476c:	88 e4       	ldi	r24, 0x48	; 72
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	28 e4       	ldi	r18, 0x48	; 72
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	f9 01       	movw	r30, r18
    4776:	20 81       	ld	r18, Z
    4778:	2e 7f       	andi	r18, 0xFE	; 254
    477a:	fc 01       	movw	r30, r24
    477c:	20 83       	st	Z, r18
	reset_do_soft_reset();
    477e:	c1 df       	rcall	.-126    	; 0x4702 <reset_do_soft_reset>
}
    4780:	0f 90       	pop	r0
    4782:	df 91       	pop	r29
    4784:	cf 91       	pop	r28
    4786:	08 95       	ret

00004788 <Wakeup>:

bool Wakeup(uint16_t timeout_ms)
{
    4788:	cf 93       	push	r28
    478a:	df 93       	push	r29
    478c:	cd b7       	in	r28, 0x3d	; 61
    478e:	de b7       	in	r29, 0x3e	; 62
    4790:	2b 97       	sbiw	r28, 0x0b	; 11
    4792:	cd bf       	out	0x3d, r28	; 61
    4794:	de bf       	out	0x3e, r29	; 62
    4796:	8a 87       	std	Y+10, r24	; 0x0a
    4798:	9b 87       	std	Y+11, r25	; 0x0b
	
	cfgsel_t which_cfg;
	struct Timeout t;
	startTimeout( &t, timeout_ms );
    479a:	8a 85       	ldd	r24, Y+10	; 0x0a
    479c:	9b 85       	ldd	r25, Y+11	; 0x0b
    479e:	cc 01       	movw	r24, r24
    47a0:	a0 e0       	ldi	r26, 0x00	; 0
    47a2:	b0 e0       	ldi	r27, 0x00	; 0
    47a4:	9e 01       	movw	r18, r28
    47a6:	2e 5f       	subi	r18, 0xFE	; 254
    47a8:	3f 4f       	sbci	r19, 0xFF	; 255
    47aa:	ac 01       	movw	r20, r24
    47ac:	bd 01       	movw	r22, r26
    47ae:	c9 01       	movw	r24, r18
    47b0:	39 d2       	rcall	.+1138   	; 0x4c24 <startTimeout>
	which_cfg = whichConfiguration();
    47b2:	0e 94 82 11 	call	0x2304	; 0x2304 <whichConfiguration>
    47b6:	89 83       	std	Y+1, r24	; 0x01

	while( ! checkTimeout(&t) )
    47b8:	0a c0       	rjmp	.+20     	; 0x47ce <Wakeup+0x46>
	{
		if( ! buttonActivated(B_START) )
    47ba:	88 e0       	ldi	r24, 0x08	; 8
    47bc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    47c0:	98 2f       	mov	r25, r24
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	89 27       	eor	r24, r25
    47c6:	88 23       	and	r24, r24
    47c8:	11 f0       	breq	.+4      	; 0x47ce <Wakeup+0x46>
		{
			return false;
    47ca:	80 e0       	ldi	r24, 0x00	; 0
    47cc:	0c c0       	rjmp	.+24     	; 0x47e6 <Wakeup+0x5e>
	cfgsel_t which_cfg;
	struct Timeout t;
	startTimeout( &t, timeout_ms );
	which_cfg = whichConfiguration();

	while( ! checkTimeout(&t) )
    47ce:	ce 01       	movw	r24, r28
    47d0:	02 96       	adiw	r24, 0x02	; 2
    47d2:	50 d2       	rcall	.+1184   	; 0x4c74 <checkTimeout>
    47d4:	98 2f       	mov	r25, r24
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	89 27       	eor	r24, r25
    47da:	88 23       	and	r24, r24
    47dc:	71 f7       	brne	.-36     	; 0x47ba <Wakeup+0x32>
		if( ! buttonActivated(B_START) )
		{
			return false;
		}
	}
	loadConfiguration(which_cfg);
    47de:	89 81       	ldd	r24, Y+1	; 0x01
    47e0:	0e 94 ae 10 	call	0x215c	; 0x215c <loadConfiguration>
	return true;
    47e4:	81 e0       	ldi	r24, 0x01	; 1
}
    47e6:	2b 96       	adiw	r28, 0x0b	; 11
    47e8:	cd bf       	out	0x3d, r28	; 61
    47ea:	de bf       	out	0x3e, r29	; 62
    47ec:	df 91       	pop	r29
    47ee:	cf 91       	pop	r28
    47f0:	08 95       	ret

000047f2 <checkForStartUp>:

// Start Button must be held down for timeout_ms
// Returns True for Startup
// Returns False for PowerOff
bool checkForStartUp(uint16_t timeout_ms) {
    47f2:	cf 92       	push	r12
    47f4:	df 92       	push	r13
    47f6:	ef 92       	push	r14
    47f8:	ff 92       	push	r15
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29
    47fe:	cd b7       	in	r28, 0x3d	; 61
    4800:	de b7       	in	r29, 0x3e	; 62
    4802:	27 97       	sbiw	r28, 0x07	; 7
    4804:	cd bf       	out	0x3d, r28	; 61
    4806:	de bf       	out	0x3e, r29	; 62
    4808:	8e 83       	std	Y+6, r24	; 0x06
    480a:	9f 83       	std	Y+7, r25	; 0x07
	// Loop and Monitor START_PIN to make sure it's pressed.
	// Return value when timeout has been reached. 
	WatchdogPet();	
    480c:	93 d5       	rcall	.+2854   	; 0x5334 <WatchdogPet>
	WatchDogEnable(false);
    480e:	80 e0       	ldi	r24, 0x00	; 0
    4810:	bc d5       	rcall	.+2936   	; 0x538a <WatchDogEnable>
	uint32_t count = getSystemTime();
    4812:	c5 d1       	rcall	.+906    	; 0x4b9e <getSystemTime>
    4814:	dc 01       	movw	r26, r24
    4816:	cb 01       	movw	r24, r22
    4818:	89 83       	std	Y+1, r24	; 0x01
    481a:	9a 83       	std	Y+2, r25	; 0x02
    481c:	ab 83       	std	Y+3, r26	; 0x03
    481e:	bc 83       	std	Y+4, r27	; 0x04

	while (ioport_get_pin_level(START_PIN)); 
    4820:	00 00       	nop
    4822:	8a e2       	ldi	r24, 0x2A	; 42
    4824:	2d df       	rcall	.-422    	; 0x4680 <ioport_get_pin_level>
    4826:	88 23       	and	r24, r24
    4828:	e1 f7       	brne	.-8      	; 0x4822 <checkForStartUp+0x30>
	{
		delay_ms(10);		
    482a:	65 e5       	ldi	r22, 0x55	; 85
    482c:	70 ed       	ldi	r23, 0xD0	; 208
    482e:	80 e0       	ldi	r24, 0x00	; 0
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	71 df       	rcall	.-286    	; 0x4716 <__portable_avr_delay_cycles>
	} 
	
	bool turn_on = (count + timeout_ms) > getSystemTime();
    4834:	8e 81       	ldd	r24, Y+6	; 0x06
    4836:	9f 81       	ldd	r25, Y+7	; 0x07
    4838:	9c 01       	movw	r18, r24
    483a:	40 e0       	ldi	r20, 0x00	; 0
    483c:	50 e0       	ldi	r21, 0x00	; 0
    483e:	89 81       	ldd	r24, Y+1	; 0x01
    4840:	9a 81       	ldd	r25, Y+2	; 0x02
    4842:	ab 81       	ldd	r26, Y+3	; 0x03
    4844:	bc 81       	ldd	r27, Y+4	; 0x04
    4846:	69 01       	movw	r12, r18
    4848:	7a 01       	movw	r14, r20
    484a:	c8 0e       	add	r12, r24
    484c:	d9 1e       	adc	r13, r25
    484e:	ea 1e       	adc	r14, r26
    4850:	fb 1e       	adc	r15, r27
    4852:	a5 d1       	rcall	.+842    	; 0x4b9e <getSystemTime>
    4854:	dc 01       	movw	r26, r24
    4856:	cb 01       	movw	r24, r22
    4858:	21 e0       	ldi	r18, 0x01	; 1
    485a:	8c 15       	cp	r24, r12
    485c:	9d 05       	cpc	r25, r13
    485e:	ae 05       	cpc	r26, r14
    4860:	bf 05       	cpc	r27, r15
    4862:	08 f0       	brcs	.+2      	; 0x4866 <checkForStartUp+0x74>
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	2d 83       	std	Y+5, r18	; 0x05

	WatchDogEnable(true); 
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	8f d5       	rcall	.+2846   	; 0x538a <WatchDogEnable>
	WatchdogPet();
    486c:	63 d5       	rcall	.+2758   	; 0x5334 <WatchdogPet>
	return turn_on;
    486e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4870:	27 96       	adiw	r28, 0x07	; 7
    4872:	cd bf       	out	0x3d, r28	; 61
    4874:	de bf       	out	0x3e, r29	; 62
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	ff 90       	pop	r15
    487c:	ef 90       	pop	r14
    487e:	df 90       	pop	r13
    4880:	cf 90       	pop	r12
    4882:	08 95       	ret

00004884 <powerOn>:

// Parameter is taken from the Global EEPROM Header
// Returns when Start button held long enough
// Else puts the Controller to sleep
bool powerOn(bool powerOffSoftware) {
    4884:	cf 93       	push	r28
    4886:	df 93       	push	r29
    4888:	1f 92       	push	r1
    488a:	cd b7       	in	r28, 0x3d	; 61
    488c:	de b7       	in	r29, 0x3e	; 62
    488e:	89 83       	std	Y+1, r24	; 0x01
	
	// Otherwise we go to sleep
	if (!checkForStartUp(STARTUP_HOLD_TIME_MS))
    4890:	80 ed       	ldi	r24, 0xD0	; 208
    4892:	97 e0       	ldi	r25, 0x07	; 7
    4894:	ae df       	rcall	.-164    	; 0x47f2 <checkForStartUp>
    4896:	98 2f       	mov	r25, r24
    4898:	81 e0       	ldi	r24, 0x01	; 1
    489a:	89 27       	eor	r24, r25
    489c:	88 23       	and	r24, r24
    489e:	11 f0       	breq	.+4      	; 0x48a4 <powerOn+0x20>
	{
		// Startup is NOT going to happen
		// Go back to sleep
		powerOff(powerOffSoftware);
    48a0:	89 81       	ldd	r24, Y+1	; 0x01
    48a2:	3f df       	rcall	.-386    	; 0x4722 <powerOff>
		
	}
	return true;
    48a4:	81 e0       	ldi	r24, 0x01	; 1
}
    48a6:	0f 90       	pop	r0
    48a8:	df 91       	pop	r29
    48aa:	cf 91       	pop	r28
    48ac:	08 95       	ret

000048ae <tc_write_cc_buffer>:
 * \param channel_index CC Channel
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
    48ae:	cf 93       	push	r28
    48b0:	df 93       	push	r29
    48b2:	cd b7       	in	r28, 0x3d	; 61
    48b4:	de b7       	in	r29, 0x3e	; 62
    48b6:	25 97       	sbiw	r28, 0x05	; 5
    48b8:	cd bf       	out	0x3d, r28	; 61
    48ba:	de bf       	out	0x3e, r29	; 62
    48bc:	89 83       	std	Y+1, r24	; 0x01
    48be:	9a 83       	std	Y+2, r25	; 0x02
    48c0:	6b 83       	std	Y+3, r22	; 0x03
    48c2:	4c 83       	std	Y+4, r20	; 0x04
    48c4:	5d 83       	std	Y+5, r21	; 0x05
	if (tc_is_tc0(void *tc)) {
    48c6:	89 81       	ldd	r24, Y+1	; 0x01
    48c8:	9a 81       	ldd	r25, Y+2	; 0x02
    48ca:	80 74       	andi	r24, 0x40	; 64
    48cc:	99 27       	eor	r25, r25
    48ce:	00 97       	sbiw	r24, 0x00	; 0
    48d0:	a9 f5       	brne	.+106    	; 0x493c <tc_write_cc_buffer+0x8e>
		switch (channel_index) {
    48d2:	8b 81       	ldd	r24, Y+3	; 0x03
    48d4:	88 2f       	mov	r24, r24
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	82 30       	cpi	r24, 0x02	; 2
    48da:	91 05       	cpc	r25, r1
    48dc:	b1 f0       	breq	.+44     	; 0x490a <tc_write_cc_buffer+0x5c>
    48de:	83 30       	cpi	r24, 0x03	; 3
    48e0:	91 05       	cpc	r25, r1
    48e2:	24 f4       	brge	.+8      	; 0x48ec <tc_write_cc_buffer+0x3e>
    48e4:	81 30       	cpi	r24, 0x01	; 1
    48e6:	91 05       	cpc	r25, r1
    48e8:	41 f0       	breq	.+16     	; 0x48fa <tc_write_cc_buffer+0x4c>
    48ea:	49 c0       	rjmp	.+146    	; 0x497e <tc_write_cc_buffer+0xd0>
    48ec:	83 30       	cpi	r24, 0x03	; 3
    48ee:	91 05       	cpc	r25, r1
    48f0:	a1 f0       	breq	.+40     	; 0x491a <tc_write_cc_buffer+0x6c>
    48f2:	84 30       	cpi	r24, 0x04	; 4
    48f4:	91 05       	cpc	r25, r1
    48f6:	c9 f0       	breq	.+50     	; 0x492a <tc_write_cc_buffer+0x7c>
    48f8:	42 c0       	rjmp	.+132    	; 0x497e <tc_write_cc_buffer+0xd0>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    48fa:	89 81       	ldd	r24, Y+1	; 0x01
    48fc:	9a 81       	ldd	r25, Y+2	; 0x02
    48fe:	2c 81       	ldd	r18, Y+4	; 0x04
    4900:	3d 81       	ldd	r19, Y+5	; 0x05
    4902:	fc 01       	movw	r30, r24
    4904:	20 af       	std	Z+56, r18	; 0x38
    4906:	31 af       	std	Z+57, r19	; 0x39
			break;
    4908:	3a c0       	rjmp	.+116    	; 0x497e <tc_write_cc_buffer+0xd0>
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    490a:	89 81       	ldd	r24, Y+1	; 0x01
    490c:	9a 81       	ldd	r25, Y+2	; 0x02
    490e:	2c 81       	ldd	r18, Y+4	; 0x04
    4910:	3d 81       	ldd	r19, Y+5	; 0x05
    4912:	fc 01       	movw	r30, r24
    4914:	22 af       	std	Z+58, r18	; 0x3a
    4916:	33 af       	std	Z+59, r19	; 0x3b
			break;
    4918:	32 c0       	rjmp	.+100    	; 0x497e <tc_write_cc_buffer+0xd0>
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    491a:	89 81       	ldd	r24, Y+1	; 0x01
    491c:	9a 81       	ldd	r25, Y+2	; 0x02
    491e:	2c 81       	ldd	r18, Y+4	; 0x04
    4920:	3d 81       	ldd	r19, Y+5	; 0x05
    4922:	fc 01       	movw	r30, r24
    4924:	24 af       	std	Z+60, r18	; 0x3c
    4926:	35 af       	std	Z+61, r19	; 0x3d
			break;
    4928:	2a c0       	rjmp	.+84     	; 0x497e <tc_write_cc_buffer+0xd0>
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	9a 81       	ldd	r25, Y+2	; 0x02
    492e:	2c 81       	ldd	r18, Y+4	; 0x04
    4930:	3d 81       	ldd	r19, Y+5	; 0x05
    4932:	fc 01       	movw	r30, r24
    4934:	26 af       	std	Z+62, r18	; 0x3e
    4936:	37 af       	std	Z+63, r19	; 0x3f
			break;
    4938:	00 00       	nop
    493a:	21 c0       	rjmp	.+66     	; 0x497e <tc_write_cc_buffer+0xd0>
		}
	} else if (tc_is_tc1(void *tc)) {
    493c:	89 81       	ldd	r24, Y+1	; 0x01
    493e:	9a 81       	ldd	r25, Y+2	; 0x02
    4940:	80 74       	andi	r24, 0x40	; 64
    4942:	99 27       	eor	r25, r25
    4944:	00 97       	sbiw	r24, 0x00	; 0
    4946:	d9 f0       	breq	.+54     	; 0x497e <tc_write_cc_buffer+0xd0>
			switch (channel_index) {
    4948:	8b 81       	ldd	r24, Y+3	; 0x03
    494a:	88 2f       	mov	r24, r24
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	81 30       	cpi	r24, 0x01	; 1
    4950:	91 05       	cpc	r25, r1
    4952:	21 f0       	breq	.+8      	; 0x495c <tc_write_cc_buffer+0xae>
    4954:	82 30       	cpi	r24, 0x02	; 2
    4956:	91 05       	cpc	r25, r1
    4958:	49 f0       	breq	.+18     	; 0x496c <tc_write_cc_buffer+0xbe>
    495a:	10 c0       	rjmp	.+32     	; 0x497c <tc_write_cc_buffer+0xce>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    495c:	89 81       	ldd	r24, Y+1	; 0x01
    495e:	9a 81       	ldd	r25, Y+2	; 0x02
    4960:	2c 81       	ldd	r18, Y+4	; 0x04
    4962:	3d 81       	ldd	r19, Y+5	; 0x05
    4964:	fc 01       	movw	r30, r24
    4966:	20 af       	std	Z+56, r18	; 0x38
    4968:	31 af       	std	Z+57, r19	; 0x39
				break;
    496a:	09 c0       	rjmp	.+18     	; 0x497e <tc_write_cc_buffer+0xd0>
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    496c:	89 81       	ldd	r24, Y+1	; 0x01
    496e:	9a 81       	ldd	r25, Y+2	; 0x02
    4970:	2c 81       	ldd	r18, Y+4	; 0x04
    4972:	3d 81       	ldd	r19, Y+5	; 0x05
    4974:	fc 01       	movw	r30, r24
    4976:	22 af       	std	Z+58, r18	; 0x3a
    4978:	33 af       	std	Z+59, r19	; 0x3b
				break;
    497a:	01 c0       	rjmp	.+2      	; 0x497e <tc_write_cc_buffer+0xd0>
			default:
				return;
    497c:	00 00       	nop
			}
		}
}
    497e:	25 96       	adiw	r28, 0x05	; 5
    4980:	cd bf       	out	0x3d, r28	; 61
    4982:	de bf       	out	0x3e, r29	; 62
    4984:	df 91       	pop	r29
    4986:	cf 91       	pop	r28
    4988:	08 95       	ret

0000498a <pwm_set_duty_cycle_percent>:
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
    498a:	cf 93       	push	r28
    498c:	df 93       	push	r29
    498e:	00 d0       	rcall	.+0      	; 0x4990 <pwm_set_duty_cycle_percent+0x6>
    4990:	1f 92       	push	r1
    4992:	cd b7       	in	r28, 0x3d	; 61
    4994:	de b7       	in	r29, 0x3e	; 62
    4996:	89 83       	std	Y+1, r24	; 0x01
    4998:	9a 83       	std	Y+2, r25	; 0x02
    499a:	6b 83       	std	Y+3, r22	; 0x03
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    499c:	89 81       	ldd	r24, Y+1	; 0x01
    499e:	9a 81       	ldd	r25, Y+2	; 0x02
    49a0:	fc 01       	movw	r30, r24
    49a2:	85 81       	ldd	r24, Z+5	; 0x05
    49a4:	96 81       	ldd	r25, Z+6	; 0x06
    49a6:	9c 01       	movw	r18, r24
    49a8:	40 e0       	ldi	r20, 0x00	; 0
    49aa:	50 e0       	ldi	r21, 0x00	; 0
			(uint32_t)duty_cycle_scale) / 100));
    49ac:	8b 81       	ldd	r24, Y+3	; 0x03
    49ae:	88 2f       	mov	r24, r24
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	a0 e0       	ldi	r26, 0x00	; 0
    49b4:	b0 e0       	ldi	r27, 0x00	; 0
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    49b6:	bc 01       	movw	r22, r24
    49b8:	cd 01       	movw	r24, r26
    49ba:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__mulsi3>
    49be:	dc 01       	movw	r26, r24
    49c0:	cb 01       	movw	r24, r22
			(uint32_t)duty_cycle_scale) / 100));
    49c2:	24 e6       	ldi	r18, 0x64	; 100
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	40 e0       	ldi	r20, 0x00	; 0
    49c8:	50 e0       	ldi	r21, 0x00	; 0
    49ca:	bc 01       	movw	r22, r24
    49cc:	cd 01       	movw	r24, r26
    49ce:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
    49d2:	da 01       	movw	r26, r20
    49d4:	c9 01       	movw	r24, r18
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    49d6:	9c 01       	movw	r18, r24
    49d8:	89 81       	ldd	r24, Y+1	; 0x01
    49da:	9a 81       	ldd	r25, Y+2	; 0x02
    49dc:	fc 01       	movw	r30, r24
    49de:	62 81       	ldd	r22, Z+2	; 0x02
    49e0:	89 81       	ldd	r24, Y+1	; 0x01
    49e2:	9a 81       	ldd	r25, Y+2	; 0x02
    49e4:	fc 01       	movw	r30, r24
    49e6:	80 81       	ld	r24, Z
    49e8:	91 81       	ldd	r25, Z+1	; 0x01
    49ea:	a9 01       	movw	r20, r18
    49ec:	60 df       	rcall	.-320    	; 0x48ae <tc_write_cc_buffer>
			(uint16_t)(((uint32_t)config->period *
			(uint32_t)duty_cycle_scale) / 100));
}
    49ee:	23 96       	adiw	r28, 0x03	; 3
    49f0:	cd bf       	out	0x3d, r28	; 61
    49f2:	de bf       	out	0x3e, r29	; 62
    49f4:	df 91       	pop	r29
    49f6:	cf 91       	pop	r28
    49f8:	08 95       	ret

000049fa <setupLEDs>:
static struct pwm_config pwm_cfg[3];

static bool swapBlueGreen = false;  // Default = 0/false behavior is Green on D0 and Blue on D1, 

void setupLEDs(bool swapBlueForGreen)
{
    49fa:	cf 93       	push	r28
    49fc:	df 93       	push	r29
    49fe:	1f 92       	push	r1
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	89 83       	std	Y+1, r24	; 0x01
	swapBlueGreen = swapBlueForGreen;
    4a06:	89 81       	ldd	r24, Y+1	; 0x01
    4a08:	80 93 9b 27 	sts	0x279B, r24
	/* Set up all 3 PWM channels with 500 Hz frequency. */
	pwm_init(&pwm_cfg[RED_CFG],   RED_PWM_PORT,   RED_PWM_CHANNEL,   500);
    4a0c:	24 ef       	ldi	r18, 0xF4	; 244
    4a0e:	31 e0       	ldi	r19, 0x01	; 1
    4a10:	42 e0       	ldi	r20, 0x02	; 2
    4a12:	66 e0       	ldi	r22, 0x06	; 6
    4a14:	86 e8       	ldi	r24, 0x86	; 134
    4a16:	97 e2       	ldi	r25, 0x27	; 39
    4a18:	0e 94 a2 3c 	call	0x7944	; 0x7944 <pwm_init>
	pwm_init(&pwm_cfg[GREEN_CFG], GREEN_PWM_PORT, GREEN_PWM_CHANNEL, 500);
    4a1c:	24 ef       	ldi	r18, 0xF4	; 244
    4a1e:	31 e0       	ldi	r19, 0x01	; 1
    4a20:	41 e0       	ldi	r20, 0x01	; 1
    4a22:	62 e0       	ldi	r22, 0x02	; 2
    4a24:	8d e8       	ldi	r24, 0x8D	; 141
    4a26:	97 e2       	ldi	r25, 0x27	; 39
    4a28:	0e 94 a2 3c 	call	0x7944	; 0x7944 <pwm_init>
	pwm_init(&pwm_cfg[BLUE_CFG],  BLUE_PWM_PORT,  BLUE_PWM_CHANNEL,  500);
    4a2c:	24 ef       	ldi	r18, 0xF4	; 244
    4a2e:	31 e0       	ldi	r19, 0x01	; 1
    4a30:	42 e0       	ldi	r20, 0x02	; 2
    4a32:	62 e0       	ldi	r22, 0x02	; 2
    4a34:	84 e9       	ldi	r24, 0x94	; 148
    4a36:	97 e2       	ldi	r25, 0x27	; 39
    4a38:	0e 94 a2 3c 	call	0x7944	; 0x7944 <pwm_init>

	/* Start all 3 PWM channels with initial value of off.
	This is the only location that will need to reference them
	as active low (100% == off) */
	pwm_start(&pwm_cfg[RED_CFG], 100);
    4a3c:	64 e6       	ldi	r22, 0x64	; 100
    4a3e:	86 e8       	ldi	r24, 0x86	; 134
    4a40:	97 e2       	ldi	r25, 0x27	; 39
    4a42:	0e 94 cf 3d 	call	0x7b9e	; 0x7b9e <pwm_start>
	pwm_start(&pwm_cfg[GREEN_CFG], 100);
    4a46:	64 e6       	ldi	r22, 0x64	; 100
    4a48:	8d e8       	ldi	r24, 0x8D	; 141
    4a4a:	97 e2       	ldi	r25, 0x27	; 39
    4a4c:	0e 94 cf 3d 	call	0x7b9e	; 0x7b9e <pwm_start>
	pwm_start(&pwm_cfg[BLUE_CFG], 100);
    4a50:	64 e6       	ldi	r22, 0x64	; 100
    4a52:	84 e9       	ldi	r24, 0x94	; 148
    4a54:	97 e2       	ldi	r25, 0x27	; 39
    4a56:	0e 94 cf 3d 	call	0x7b9e	; 0x7b9e <pwm_start>
}
    4a5a:	0f 90       	pop	r0
    4a5c:	df 91       	pop	r29
    4a5e:	cf 91       	pop	r28
    4a60:	08 95       	ret

00004a62 <setRedLEDValue>:

void setRedLEDValue(uint8_t percent)
{
    4a62:	cf 93       	push	r28
    4a64:	df 93       	push	r29
    4a66:	1f 92       	push	r1
    4a68:	cd b7       	in	r28, 0x3d	; 61
    4a6a:	de b7       	in	r29, 0x3e	; 62
    4a6c:	89 83       	std	Y+1, r24	; 0x01
	if (percent > 100) {
    4a6e:	89 81       	ldd	r24, Y+1	; 0x01
    4a70:	85 36       	cpi	r24, 0x65	; 101
    4a72:	10 f0       	brcs	.+4      	; 0x4a78 <setRedLEDValue+0x16>
		percent = 100;
    4a74:	84 e6       	ldi	r24, 0x64	; 100
    4a76:	89 83       	std	Y+1, r24	; 0x01
	}
	pwm_set_duty_cycle_percent(&pwm_cfg[RED_CFG], 100 - percent);
    4a78:	94 e6       	ldi	r25, 0x64	; 100
    4a7a:	89 81       	ldd	r24, Y+1	; 0x01
    4a7c:	29 2f       	mov	r18, r25
    4a7e:	28 1b       	sub	r18, r24
    4a80:	82 2f       	mov	r24, r18
    4a82:	68 2f       	mov	r22, r24
    4a84:	86 e8       	ldi	r24, 0x86	; 134
    4a86:	97 e2       	ldi	r25, 0x27	; 39
    4a88:	80 df       	rcall	.-256    	; 0x498a <pwm_set_duty_cycle_percent>
}
    4a8a:	0f 90       	pop	r0
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	08 95       	ret

00004a92 <setGreenLEDValue>:

void setGreenLEDValue(uint8_t percent)
{
    4a92:	cf 93       	push	r28
    4a94:	df 93       	push	r29
    4a96:	1f 92       	push	r1
    4a98:	cd b7       	in	r28, 0x3d	; 61
    4a9a:	de b7       	in	r29, 0x3e	; 62
    4a9c:	89 83       	std	Y+1, r24	; 0x01
	if (percent > 100) {
    4a9e:	89 81       	ldd	r24, Y+1	; 0x01
    4aa0:	85 36       	cpi	r24, 0x65	; 101
    4aa2:	10 f0       	brcs	.+4      	; 0x4aa8 <setGreenLEDValue+0x16>
		percent = 100;
    4aa4:	84 e6       	ldi	r24, 0x64	; 100
    4aa6:	89 83       	std	Y+1, r24	; 0x01
	}
	pwm_set_duty_cycle_percent(&pwm_cfg[ swapBlueGreen ? BLUE_CFG : GREEN_CFG], 100 - percent);
    4aa8:	94 e6       	ldi	r25, 0x64	; 100
    4aaa:	89 81       	ldd	r24, Y+1	; 0x01
    4aac:	49 2f       	mov	r20, r25
    4aae:	48 1b       	sub	r20, r24
    4ab0:	80 91 9b 27 	lds	r24, 0x279B
    4ab4:	88 23       	and	r24, r24
    4ab6:	19 f0       	breq	.+6      	; 0x4abe <setGreenLEDValue+0x2c>
    4ab8:	22 e0       	ldi	r18, 0x02	; 2
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	02 c0       	rjmp	.+4      	; 0x4ac2 <setGreenLEDValue+0x30>
    4abe:	21 e0       	ldi	r18, 0x01	; 1
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	c9 01       	movw	r24, r18
    4ac4:	88 0f       	add	r24, r24
    4ac6:	99 1f       	adc	r25, r25
    4ac8:	88 0f       	add	r24, r24
    4aca:	99 1f       	adc	r25, r25
    4acc:	88 0f       	add	r24, r24
    4ace:	99 1f       	adc	r25, r25
    4ad0:	82 1b       	sub	r24, r18
    4ad2:	93 0b       	sbc	r25, r19
    4ad4:	8a 57       	subi	r24, 0x7A	; 122
    4ad6:	98 4d       	sbci	r25, 0xD8	; 216
    4ad8:	64 2f       	mov	r22, r20
    4ada:	57 df       	rcall	.-338    	; 0x498a <pwm_set_duty_cycle_percent>
}
    4adc:	0f 90       	pop	r0
    4ade:	df 91       	pop	r29
    4ae0:	cf 91       	pop	r28
    4ae2:	08 95       	ret

00004ae4 <setBlueLEDValue>:

void setBlueLEDValue(uint8_t percent)
{
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
    4ae8:	1f 92       	push	r1
    4aea:	cd b7       	in	r28, 0x3d	; 61
    4aec:	de b7       	in	r29, 0x3e	; 62
    4aee:	89 83       	std	Y+1, r24	; 0x01
	if (percent > 100) {
    4af0:	89 81       	ldd	r24, Y+1	; 0x01
    4af2:	85 36       	cpi	r24, 0x65	; 101
    4af4:	10 f0       	brcs	.+4      	; 0x4afa <setBlueLEDValue+0x16>
		percent = 100;
    4af6:	84 e6       	ldi	r24, 0x64	; 100
    4af8:	89 83       	std	Y+1, r24	; 0x01
	}
	pwm_set_duty_cycle_percent(&pwm_cfg[ swapBlueGreen ? GREEN_CFG : BLUE_CFG ], 100 - percent);
    4afa:	94 e6       	ldi	r25, 0x64	; 100
    4afc:	89 81       	ldd	r24, Y+1	; 0x01
    4afe:	49 2f       	mov	r20, r25
    4b00:	48 1b       	sub	r20, r24
    4b02:	80 91 9b 27 	lds	r24, 0x279B
    4b06:	88 23       	and	r24, r24
    4b08:	19 f0       	breq	.+6      	; 0x4b10 <setBlueLEDValue+0x2c>
    4b0a:	21 e0       	ldi	r18, 0x01	; 1
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	02 c0       	rjmp	.+4      	; 0x4b14 <setBlueLEDValue+0x30>
    4b10:	22 e0       	ldi	r18, 0x02	; 2
    4b12:	30 e0       	ldi	r19, 0x00	; 0
    4b14:	c9 01       	movw	r24, r18
    4b16:	88 0f       	add	r24, r24
    4b18:	99 1f       	adc	r25, r25
    4b1a:	88 0f       	add	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	88 0f       	add	r24, r24
    4b20:	99 1f       	adc	r25, r25
    4b22:	82 1b       	sub	r24, r18
    4b24:	93 0b       	sbc	r25, r19
    4b26:	8a 57       	subi	r24, 0x7A	; 122
    4b28:	98 4d       	sbci	r25, 0xD8	; 216
    4b2a:	64 2f       	mov	r22, r20
    4b2c:	2e df       	rcall	.-420    	; 0x498a <pwm_set_duty_cycle_percent>
}
    4b2e:	0f 90       	pop	r0
    4b30:	df 91       	pop	r29
    4b32:	cf 91       	pop	r28
    4b34:	08 95       	ret

00004b36 <setLEDValue>:

void setLEDValue(uint8_t r, uint8_t g, uint8_t b)
{
    4b36:	cf 93       	push	r28
    4b38:	df 93       	push	r29
    4b3a:	00 d0       	rcall	.+0      	; 0x4b3c <setLEDValue+0x6>
    4b3c:	1f 92       	push	r1
    4b3e:	cd b7       	in	r28, 0x3d	; 61
    4b40:	de b7       	in	r29, 0x3e	; 62
    4b42:	89 83       	std	Y+1, r24	; 0x01
    4b44:	6a 83       	std	Y+2, r22	; 0x02
    4b46:	4b 83       	std	Y+3, r20	; 0x03
	setRedLEDValue(r);
    4b48:	89 81       	ldd	r24, Y+1	; 0x01
    4b4a:	8b df       	rcall	.-234    	; 0x4a62 <setRedLEDValue>
	setGreenLEDValue(g);
    4b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b4e:	a1 df       	rcall	.-190    	; 0x4a92 <setGreenLEDValue>
	setBlueLEDValue(b);
    4b50:	8b 81       	ldd	r24, Y+3	; 0x03
    4b52:	c8 df       	rcall	.-112    	; 0x4ae4 <setBlueLEDValue>
    4b54:	23 96       	adiw	r28, 0x03	; 3
    4b56:	cd bf       	out	0x3d, r28	; 61
    4b58:	de bf       	out	0x3e, r29	; 62
    4b5a:	df 91       	pop	r29
    4b5c:	cf 91       	pop	r28
    4b5e:	08 95       	ret

00004b60 <cpu_irq_save>:
	// Set the system time:
	system_time = sys_time;
	
	// Restore the state of the interrupts:
	cpu_irq_restore(irq_state);
}
    4b60:	cf 93       	push	r28
    4b62:	df 93       	push	r29
    4b64:	1f 92       	push	r1
    4b66:	cd b7       	in	r28, 0x3d	; 61
    4b68:	de b7       	in	r29, 0x3e	; 62
    4b6a:	8f e3       	ldi	r24, 0x3F	; 63
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	fc 01       	movw	r30, r24
    4b70:	80 81       	ld	r24, Z
    4b72:	89 83       	std	Y+1, r24	; 0x01
    4b74:	f8 94       	cli
    4b76:	89 81       	ldd	r24, Y+1	; 0x01
    4b78:	0f 90       	pop	r0
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	08 95       	ret

00004b80 <cpu_irq_restore>:
    4b80:	cf 93       	push	r28
    4b82:	df 93       	push	r29
    4b84:	1f 92       	push	r1
    4b86:	cd b7       	in	r28, 0x3d	; 61
    4b88:	de b7       	in	r29, 0x3e	; 62
    4b8a:	89 83       	std	Y+1, r24	; 0x01
    4b8c:	8f e3       	ldi	r24, 0x3F	; 63
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	29 81       	ldd	r18, Y+1	; 0x01
    4b92:	fc 01       	movw	r30, r24
    4b94:	20 83       	st	Z, r18
    4b96:	0f 90       	pop	r0
    4b98:	df 91       	pop	r29
    4b9a:	cf 91       	pop	r28
    4b9c:	08 95       	ret

00004b9e <getSystemTime>:
    4b9e:	cf 93       	push	r28
    4ba0:	df 93       	push	r29
    4ba2:	cd b7       	in	r28, 0x3d	; 61
    4ba4:	de b7       	in	r29, 0x3e	; 62
    4ba6:	25 97       	sbiw	r28, 0x05	; 5
    4ba8:	cd bf       	out	0x3d, r28	; 61
    4baa:	de bf       	out	0x3e, r29	; 62
    4bac:	d9 df       	rcall	.-78     	; 0x4b60 <cpu_irq_save>
    4bae:	89 83       	std	Y+1, r24	; 0x01
    4bb0:	80 91 9e 27 	lds	r24, 0x279E
    4bb4:	90 91 9f 27 	lds	r25, 0x279F
    4bb8:	a0 91 a0 27 	lds	r26, 0x27A0
    4bbc:	b0 91 a1 27 	lds	r27, 0x27A1
    4bc0:	8a 83       	std	Y+2, r24	; 0x02
    4bc2:	9b 83       	std	Y+3, r25	; 0x03
    4bc4:	ac 83       	std	Y+4, r26	; 0x04
    4bc6:	bd 83       	std	Y+5, r27	; 0x05
    4bc8:	89 81       	ldd	r24, Y+1	; 0x01
    4bca:	da df       	rcall	.-76     	; 0x4b80 <cpu_irq_restore>
    4bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bce:	9b 81       	ldd	r25, Y+3	; 0x03
    4bd0:	ac 81       	ldd	r26, Y+4	; 0x04
    4bd2:	bd 81       	ldd	r27, Y+5	; 0x05
    4bd4:	bc 01       	movw	r22, r24
    4bd6:	cd 01       	movw	r24, r26
    4bd8:	25 96       	adiw	r28, 0x05	; 5
    4bda:	cd bf       	out	0x3d, r28	; 61
    4bdc:	de bf       	out	0x3e, r29	; 62
    4bde:	df 91       	pop	r29
    4be0:	cf 91       	pop	r28
    4be2:	08 95       	ret

00004be4 <tickSystemTime>:
    4be4:	cf 93       	push	r28
    4be6:	df 93       	push	r29
    4be8:	1f 92       	push	r1
    4bea:	cd b7       	in	r28, 0x3d	; 61
    4bec:	de b7       	in	r29, 0x3e	; 62
    4bee:	b8 df       	rcall	.-144    	; 0x4b60 <cpu_irq_save>
    4bf0:	89 83       	std	Y+1, r24	; 0x01
    4bf2:	80 91 9e 27 	lds	r24, 0x279E
    4bf6:	90 91 9f 27 	lds	r25, 0x279F
    4bfa:	a0 91 a0 27 	lds	r26, 0x27A0
    4bfe:	b0 91 a1 27 	lds	r27, 0x27A1
    4c02:	01 96       	adiw	r24, 0x01	; 1
    4c04:	a1 1d       	adc	r26, r1
    4c06:	b1 1d       	adc	r27, r1
    4c08:	80 93 9e 27 	sts	0x279E, r24
    4c0c:	90 93 9f 27 	sts	0x279F, r25
    4c10:	a0 93 a0 27 	sts	0x27A0, r26
    4c14:	b0 93 a1 27 	sts	0x27A1, r27
    4c18:	89 81       	ldd	r24, Y+1	; 0x01
    4c1a:	b2 df       	rcall	.-156    	; 0x4b80 <cpu_irq_restore>
    4c1c:	0f 90       	pop	r0
    4c1e:	df 91       	pop	r29
    4c20:	cf 91       	pop	r28
    4c22:	08 95       	ret

00004c24 <startTimeout>:

// Initialize the Timeout Struct with the current System Tick Count and the Milliseconds delay
void startTimeout(struct Timeout* to, uint32_t ms) {
    4c24:	cf 93       	push	r28
    4c26:	df 93       	push	r29
    4c28:	cd b7       	in	r28, 0x3d	; 61
    4c2a:	de b7       	in	r29, 0x3e	; 62
    4c2c:	26 97       	sbiw	r28, 0x06	; 6
    4c2e:	cd bf       	out	0x3d, r28	; 61
    4c30:	de bf       	out	0x3e, r29	; 62
    4c32:	89 83       	std	Y+1, r24	; 0x01
    4c34:	9a 83       	std	Y+2, r25	; 0x02
    4c36:	4b 83       	std	Y+3, r20	; 0x03
    4c38:	5c 83       	std	Y+4, r21	; 0x04
    4c3a:	6d 83       	std	Y+5, r22	; 0x05
    4c3c:	7e 83       	std	Y+6, r23	; 0x06
	to->start = getSystemTime();
    4c3e:	af df       	rcall	.-162    	; 0x4b9e <getSystemTime>
    4c40:	dc 01       	movw	r26, r24
    4c42:	cb 01       	movw	r24, r22
    4c44:	29 81       	ldd	r18, Y+1	; 0x01
    4c46:	3a 81       	ldd	r19, Y+2	; 0x02
    4c48:	f9 01       	movw	r30, r18
    4c4a:	80 83       	st	Z, r24
    4c4c:	91 83       	std	Z+1, r25	; 0x01
    4c4e:	a2 83       	std	Z+2, r26	; 0x02
    4c50:	b3 83       	std	Z+3, r27	; 0x03
	to->delay = ms;
    4c52:	29 81       	ldd	r18, Y+1	; 0x01
    4c54:	3a 81       	ldd	r19, Y+2	; 0x02
    4c56:	8b 81       	ldd	r24, Y+3	; 0x03
    4c58:	9c 81       	ldd	r25, Y+4	; 0x04
    4c5a:	ad 81       	ldd	r26, Y+5	; 0x05
    4c5c:	be 81       	ldd	r27, Y+6	; 0x06
    4c5e:	f9 01       	movw	r30, r18
    4c60:	84 83       	std	Z+4, r24	; 0x04
    4c62:	95 83       	std	Z+5, r25	; 0x05
    4c64:	a6 83       	std	Z+6, r26	; 0x06
    4c66:	b7 83       	std	Z+7, r27	; 0x07
}
    4c68:	26 96       	adiw	r28, 0x06	; 6
    4c6a:	cd bf       	out	0x3d, r28	; 61
    4c6c:	de bf       	out	0x3e, r29	; 62
    4c6e:	df 91       	pop	r29
    4c70:	cf 91       	pop	r28
    4c72:	08 95       	ret

00004c74 <checkTimeout>:

// True if not Cancelled AND Current System Tick Count >= Delay Count
// False if Cancelled OR Current System Tick Count < Delay
bool checkTimeout(struct Timeout* to) {
    4c74:	cf 93       	push	r28
    4c76:	df 93       	push	r29
    4c78:	00 d0       	rcall	.+0      	; 0x4c7a <checkTimeout+0x6>
    4c7a:	cd b7       	in	r28, 0x3d	; 61
    4c7c:	de b7       	in	r29, 0x3e	; 62
    4c7e:	89 83       	std	Y+1, r24	; 0x01
    4c80:	9a 83       	std	Y+2, r25	; 0x02
	return (to->delay != 0) && ((getSystemTime() - to->start) >= to->delay);
    4c82:	89 81       	ldd	r24, Y+1	; 0x01
    4c84:	9a 81       	ldd	r25, Y+2	; 0x02
    4c86:	fc 01       	movw	r30, r24
    4c88:	84 81       	ldd	r24, Z+4	; 0x04
    4c8a:	95 81       	ldd	r25, Z+5	; 0x05
    4c8c:	a6 81       	ldd	r26, Z+6	; 0x06
    4c8e:	b7 81       	ldd	r27, Z+7	; 0x07
    4c90:	00 97       	sbiw	r24, 0x00	; 0
    4c92:	a1 05       	cpc	r26, r1
    4c94:	b1 05       	cpc	r27, r1
    4c96:	e9 f0       	breq	.+58     	; 0x4cd2 <checkTimeout+0x5e>
    4c98:	82 df       	rcall	.-252    	; 0x4b9e <getSystemTime>
    4c9a:	9b 01       	movw	r18, r22
    4c9c:	ac 01       	movw	r20, r24
    4c9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	80 81       	ld	r24, Z
    4ca6:	91 81       	ldd	r25, Z+1	; 0x01
    4ca8:	a2 81       	ldd	r26, Z+2	; 0x02
    4caa:	b3 81       	ldd	r27, Z+3	; 0x03
    4cac:	28 1b       	sub	r18, r24
    4cae:	39 0b       	sbc	r19, r25
    4cb0:	4a 0b       	sbc	r20, r26
    4cb2:	5b 0b       	sbc	r21, r27
    4cb4:	89 81       	ldd	r24, Y+1	; 0x01
    4cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb8:	fc 01       	movw	r30, r24
    4cba:	84 81       	ldd	r24, Z+4	; 0x04
    4cbc:	95 81       	ldd	r25, Z+5	; 0x05
    4cbe:	a6 81       	ldd	r26, Z+6	; 0x06
    4cc0:	b7 81       	ldd	r27, Z+7	; 0x07
    4cc2:	28 17       	cp	r18, r24
    4cc4:	39 07       	cpc	r19, r25
    4cc6:	4a 07       	cpc	r20, r26
    4cc8:	5b 07       	cpc	r21, r27
    4cca:	18 f0       	brcs	.+6      	; 0x4cd2 <checkTimeout+0x5e>
    4ccc:	81 e0       	ldi	r24, 0x01	; 1
    4cce:	90 e0       	ldi	r25, 0x00	; 0
    4cd0:	02 c0       	rjmp	.+4      	; 0x4cd6 <checkTimeout+0x62>
    4cd2:	80 e0       	ldi	r24, 0x00	; 0
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	81 70       	andi	r24, 0x01	; 1
}
    4cd8:	0f 90       	pop	r0
    4cda:	0f 90       	pop	r0
    4cdc:	df 91       	pop	r29
    4cde:	cf 91       	pop	r28
    4ce0:	08 95       	ret

00004ce2 <cancelTimeout>:

// Set the Delay to 0 to cancel the timeout.
void cancelTimeout(struct Timeout* to) {
    4ce2:	cf 93       	push	r28
    4ce4:	df 93       	push	r29
    4ce6:	00 d0       	rcall	.+0      	; 0x4ce8 <cancelTimeout+0x6>
    4ce8:	cd b7       	in	r28, 0x3d	; 61
    4cea:	de b7       	in	r29, 0x3e	; 62
    4cec:	89 83       	std	Y+1, r24	; 0x01
    4cee:	9a 83       	std	Y+2, r25	; 0x02
	to->delay = 0;
    4cf0:	89 81       	ldd	r24, Y+1	; 0x01
    4cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	14 82       	std	Z+4, r1	; 0x04
    4cf8:	15 82       	std	Z+5, r1	; 0x05
    4cfa:	16 82       	std	Z+6, r1	; 0x06
    4cfc:	17 82       	std	Z+7, r1	; 0x07
    4cfe:	0f 90       	pop	r0
    4d00:	0f 90       	pop	r0
    4d02:	df 91       	pop	r29
    4d04:	cf 91       	pop	r28
    4d06:	08 95       	ret

00004d08 <tc_set_overflow_interrupt_level>:
 * \param level Overflow interrupt level
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
    4d08:	cf 93       	push	r28
    4d0a:	df 93       	push	r29
    4d0c:	00 d0       	rcall	.+0      	; 0x4d0e <tc_set_overflow_interrupt_level+0x6>
    4d0e:	1f 92       	push	r1
    4d10:	cd b7       	in	r28, 0x3d	; 61
    4d12:	de b7       	in	r29, 0x3e	; 62
    4d14:	89 83       	std	Y+1, r24	; 0x01
    4d16:	9a 83       	std	Y+2, r25	; 0x02
    4d18:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    4d1a:	89 81       	ldd	r24, Y+1	; 0x01
    4d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d1e:	fc 01       	movw	r30, r24
    4d20:	86 81       	ldd	r24, Z+6	; 0x06
    4d22:	28 2f       	mov	r18, r24
    4d24:	2c 7f       	andi	r18, 0xFC	; 252
    4d26:	89 81       	ldd	r24, Y+1	; 0x01
    4d28:	9a 81       	ldd	r25, Y+2	; 0x02
    4d2a:	fc 01       	movw	r30, r24
    4d2c:	26 83       	std	Z+6, r18	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    4d2e:	89 81       	ldd	r24, Y+1	; 0x01
    4d30:	9a 81       	ldd	r25, Y+2	; 0x02
    4d32:	fc 01       	movw	r30, r24
    4d34:	96 81       	ldd	r25, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    4d36:	8b 81       	ldd	r24, Y+3	; 0x03
    4d38:	29 2f       	mov	r18, r25
    4d3a:	28 2b       	or	r18, r24
    4d3c:	89 81       	ldd	r24, Y+1	; 0x01
    4d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d40:	fc 01       	movw	r30, r24
    4d42:	26 83       	std	Z+6, r18	; 0x06
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
}
    4d44:	23 96       	adiw	r28, 0x03	; 3
    4d46:	cd bf       	out	0x3d, r28	; 61
    4d48:	de bf       	out	0x3e, r29	; 62
    4d4a:	df 91       	pop	r29
    4d4c:	cf 91       	pop	r28
    4d4e:	08 95       	ret

00004d50 <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    4d50:	cf 93       	push	r28
    4d52:	df 93       	push	r29
    4d54:	00 d0       	rcall	.+0      	; 0x4d56 <tc_write_clock_source+0x6>
    4d56:	1f 92       	push	r1
    4d58:	cd b7       	in	r28, 0x3d	; 61
    4d5a:	de b7       	in	r29, 0x3e	; 62
    4d5c:	89 83       	std	Y+1, r24	; 0x01
    4d5e:	9a 83       	std	Y+2, r25	; 0x02
    4d60:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    4d62:	89 81       	ldd	r24, Y+1	; 0x01
    4d64:	9a 81       	ldd	r25, Y+2	; 0x02
    4d66:	fc 01       	movw	r30, r24
    4d68:	80 81       	ld	r24, Z
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    4d6a:	98 2f       	mov	r25, r24
    4d6c:	90 7f       	andi	r25, 0xF0	; 240
    4d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d70:	89 2b       	or	r24, r25
    4d72:	28 2f       	mov	r18, r24
    4d74:	89 81       	ldd	r24, Y+1	; 0x01
    4d76:	9a 81       	ldd	r25, Y+2	; 0x02
    4d78:	fc 01       	movw	r30, r24
    4d7a:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
    4d7c:	23 96       	adiw	r28, 0x03	; 3
    4d7e:	cd bf       	out	0x3d, r28	; 61
    4d80:	de bf       	out	0x3e, r29	; 62
    4d82:	df 91       	pop	r29
    4d84:	cf 91       	pop	r28
    4d86:	08 95       	ret

00004d88 <tc_set_direction>:
 *
 * \param tc Pointer to TC module.
 * \param dir Timer direction :
 */
static inline void tc_set_direction(volatile void *tc, enum tc_dir_t dir)
{
    4d88:	cf 93       	push	r28
    4d8a:	df 93       	push	r29
    4d8c:	00 d0       	rcall	.+0      	; 0x4d8e <tc_set_direction+0x6>
    4d8e:	1f 92       	push	r1
    4d90:	cd b7       	in	r28, 0x3d	; 61
    4d92:	de b7       	in	r29, 0x3e	; 62
    4d94:	89 83       	std	Y+1, r24	; 0x01
    4d96:	9a 83       	std	Y+2, r25	; 0x02
    4d98:	6b 83       	std	Y+3, r22	; 0x03
	if (dir == TC_UP) {
    4d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9c:	88 23       	and	r24, r24
    4d9e:	59 f4       	brne	.+22     	; 0x4db6 <tc_set_direction+0x2e>
		((TC0_t *)tc)->CTRLFCLR |= ~TC0_DIR_bm;
    4da0:	89 81       	ldd	r24, Y+1	; 0x01
    4da2:	9a 81       	ldd	r25, Y+2	; 0x02
    4da4:	fc 01       	movw	r30, r24
    4da6:	80 85       	ldd	r24, Z+8	; 0x08
    4da8:	8e 6f       	ori	r24, 0xFE	; 254
    4daa:	28 2f       	mov	r18, r24
    4dac:	89 81       	ldd	r24, Y+1	; 0x01
    4dae:	9a 81       	ldd	r25, Y+2	; 0x02
    4db0:	fc 01       	movw	r30, r24
    4db2:	20 87       	std	Z+8, r18	; 0x08
    4db4:	0a c0       	rjmp	.+20     	; 0x4dca <tc_set_direction+0x42>
	} else {
		((TC0_t *)tc)->CTRLFSET |= TC0_DIR_bm;
    4db6:	89 81       	ldd	r24, Y+1	; 0x01
    4db8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dba:	fc 01       	movw	r30, r24
    4dbc:	81 85       	ldd	r24, Z+9	; 0x09
    4dbe:	28 2f       	mov	r18, r24
    4dc0:	21 60       	ori	r18, 0x01	; 1
    4dc2:	89 81       	ldd	r24, Y+1	; 0x01
    4dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	21 87       	std	Z+9, r18	; 0x09
	}
}
    4dca:	23 96       	adiw	r28, 0x03	; 3
    4dcc:	cd bf       	out	0x3d, r28	; 61
    4dce:	de bf       	out	0x3e, r29	; 62
    4dd0:	df 91       	pop	r29
    4dd2:	cf 91       	pop	r28
    4dd4:	08 95       	ret

00004dd6 <tc_write_count>:
 *
 * \param tc Pointer to TC module.
 * \param cnt_value Counter value :
 */
static inline void tc_write_count(volatile void *tc, uint16_t cnt_value)
{
    4dd6:	cf 93       	push	r28
    4dd8:	df 93       	push	r29
    4dda:	00 d0       	rcall	.+0      	; 0x4ddc <tc_write_count+0x6>
    4ddc:	00 d0       	rcall	.+0      	; 0x4dde <tc_write_count+0x8>
    4dde:	cd b7       	in	r28, 0x3d	; 61
    4de0:	de b7       	in	r29, 0x3e	; 62
    4de2:	89 83       	std	Y+1, r24	; 0x01
    4de4:	9a 83       	std	Y+2, r25	; 0x02
    4de6:	6b 83       	std	Y+3, r22	; 0x03
    4de8:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->CNT = cnt_value;
    4dea:	89 81       	ldd	r24, Y+1	; 0x01
    4dec:	9a 81       	ldd	r25, Y+2	; 0x02
    4dee:	2b 81       	ldd	r18, Y+3	; 0x03
    4df0:	3c 81       	ldd	r19, Y+4	; 0x04
    4df2:	fc 01       	movw	r30, r24
    4df4:	20 a3       	std	Z+32, r18	; 0x20
    4df6:	31 a3       	std	Z+33, r19	; 0x21
}
    4df8:	24 96       	adiw	r28, 0x04	; 4
    4dfa:	cd bf       	out	0x3d, r28	; 61
    4dfc:	de bf       	out	0x3e, r29	; 62
    4dfe:	df 91       	pop	r29
    4e00:	cf 91       	pop	r28
    4e02:	08 95       	ret

00004e04 <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
    4e04:	cf 93       	push	r28
    4e06:	df 93       	push	r29
    4e08:	00 d0       	rcall	.+0      	; 0x4e0a <tc_write_period+0x6>
    4e0a:	00 d0       	rcall	.+0      	; 0x4e0c <tc_write_period+0x8>
    4e0c:	cd b7       	in	r28, 0x3d	; 61
    4e0e:	de b7       	in	r29, 0x3e	; 62
    4e10:	89 83       	std	Y+1, r24	; 0x01
    4e12:	9a 83       	std	Y+2, r25	; 0x02
    4e14:	6b 83       	std	Y+3, r22	; 0x03
    4e16:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
    4e18:	89 81       	ldd	r24, Y+1	; 0x01
    4e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    4e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    4e20:	fc 01       	movw	r30, r24
    4e22:	26 a3       	std	Z+38, r18	; 0x26
    4e24:	37 a3       	std	Z+39, r19	; 0x27
}
    4e26:	24 96       	adiw	r28, 0x04	; 4
    4e28:	cd bf       	out	0x3d, r28	; 61
    4e2a:	de bf       	out	0x3e, r29	; 62
    4e2c:	df 91       	pop	r29
    4e2e:	cf 91       	pop	r28
    4e30:	08 95       	ret

00004e32 <tc_clear_overflow>:
 *
 * \param tc Pointer to TC module.
 * \note  OVFIF is cleared
 */
static inline void tc_clear_overflow(volatile void *tc)
{
    4e32:	cf 93       	push	r28
    4e34:	df 93       	push	r29
    4e36:	00 d0       	rcall	.+0      	; 0x4e38 <tc_clear_overflow+0x6>
    4e38:	cd b7       	in	r28, 0x3d	; 61
    4e3a:	de b7       	in	r29, 0x3e	; 62
    4e3c:	89 83       	std	Y+1, r24	; 0x01
    4e3e:	9a 83       	std	Y+2, r25	; 0x02
	((TC0_t *)tc)->INTFLAGS |= TC0_OVFIF_bm;
    4e40:	89 81       	ldd	r24, Y+1	; 0x01
    4e42:	9a 81       	ldd	r25, Y+2	; 0x02
    4e44:	fc 01       	movw	r30, r24
    4e46:	84 85       	ldd	r24, Z+12	; 0x0c
    4e48:	28 2f       	mov	r18, r24
    4e4a:	21 60       	ori	r18, 0x01	; 1
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
    4e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e50:	fc 01       	movw	r30, r24
    4e52:	24 87       	std	Z+12, r18	; 0x0c
}
    4e54:	0f 90       	pop	r0
    4e56:	0f 90       	pop	r0
    4e58:	df 91       	pop	r29
    4e5a:	cf 91       	pop	r28
    4e5c:	08 95       	ret

00004e5e <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
    4e5e:	cf 93       	push	r28
    4e60:	df 93       	push	r29
    4e62:	00 d0       	rcall	.+0      	; 0x4e64 <tc_set_wgm+0x6>
    4e64:	1f 92       	push	r1
    4e66:	cd b7       	in	r28, 0x3d	; 61
    4e68:	de b7       	in	r29, 0x3e	; 62
    4e6a:	89 83       	std	Y+1, r24	; 0x01
    4e6c:	9a 83       	std	Y+2, r25	; 0x02
    4e6e:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    4e70:	89 81       	ldd	r24, Y+1	; 0x01
    4e72:	9a 81       	ldd	r25, Y+2	; 0x02
    4e74:	fc 01       	movw	r30, r24
    4e76:	81 81       	ldd	r24, Z+1	; 0x01
    4e78:	98 2f       	mov	r25, r24
    4e7a:	98 7f       	andi	r25, 0xF8	; 248
    4e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e7e:	89 2b       	or	r24, r25
    4e80:	28 2f       	mov	r18, r24
    4e82:	89 81       	ldd	r24, Y+1	; 0x01
    4e84:	9a 81       	ldd	r25, Y+2	; 0x02
    4e86:	fc 01       	movw	r30, r24
    4e88:	21 83       	std	Z+1, r18	; 0x01
}
    4e8a:	23 96       	adiw	r28, 0x03	; 3
    4e8c:	cd bf       	out	0x3d, r28	; 61
    4e8e:	de bf       	out	0x3e, r29	; 62
    4e90:	df 91       	pop	r29
    4e92:	cf 91       	pop	r28
    4e94:	08 95       	ret

00004e96 <setupSysTick>:
 */

#include <asf.h>
#include "systick.h"

void setupSysTick(tc_callback_t tick) {
    4e96:	cf 93       	push	r28
    4e98:	df 93       	push	r29
    4e9a:	00 d0       	rcall	.+0      	; 0x4e9c <setupSysTick+0x6>
    4e9c:	cd b7       	in	r28, 0x3d	; 61
    4e9e:	de b7       	in	r29, 0x3e	; 62
    4ea0:	89 83       	std	Y+1, r24	; 0x01
    4ea2:	9a 83       	std	Y+2, r25	; 0x02
	
	// Make sure systick is enabled before trying to making changes:
	enableSysTick();
    4ea4:	28 d0       	rcall	.+80     	; 0x4ef6 <enableSysTick>
	
	// Set the counting direction:
	tc_set_direction(SYSTICK_TIMER, TC_UP);
    4ea6:	60 e0       	ldi	r22, 0x00	; 0
    4ea8:	80 e4       	ldi	r24, 0x40	; 64
    4eaa:	98 e0       	ldi	r25, 0x08	; 8
    4eac:	6d df       	rcall	.-294    	; 0x4d88 <tc_set_direction>
	
	// Set the waveform type:
	tc_set_wgm(SYSTICK_TIMER, TC_WG_NORMAL);
    4eae:	60 e0       	ldi	r22, 0x00	; 0
    4eb0:	80 e4       	ldi	r24, 0x40	; 64
    4eb2:	98 e0       	ldi	r25, 0x08	; 8
    4eb4:	d4 df       	rcall	.-88     	; 0x4e5e <tc_set_wgm>
	
	// Reset the counter:
	tc_write_count(SYSTICK_TIMER, 0);
    4eb6:	60 e0       	ldi	r22, 0x00	; 0
    4eb8:	70 e0       	ldi	r23, 0x00	; 0
    4eba:	80 e4       	ldi	r24, 0x40	; 64
    4ebc:	98 e0       	ldi	r25, 0x08	; 8
    4ebe:	8b df       	rcall	.-234    	; 0x4dd6 <tc_write_count>
	
	// Set the period:
	tc_write_period(SYSTICK_TIMER, F_CPU/SYSTICK_FREQUENCY);
    4ec0:	60 e0       	ldi	r22, 0x00	; 0
    4ec2:	7d e7       	ldi	r23, 0x7D	; 125
    4ec4:	80 e4       	ldi	r24, 0x40	; 64
    4ec6:	98 e0       	ldi	r25, 0x08	; 8
    4ec8:	9d df       	rcall	.-198    	; 0x4e04 <tc_write_period>

	// Clear the overflow flag:
	clearSysTickFlag();
    4eca:	2b d0       	rcall	.+86     	; 0x4f22 <clearSysTickFlag>
	
	// Set the callback:
	tc_set_overflow_interrupt_callback(SYSTICK_TIMER, tick);
    4ecc:	89 81       	ldd	r24, Y+1	; 0x01
    4ece:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed0:	bc 01       	movw	r22, r24
    4ed2:	80 e4       	ldi	r24, 0x40	; 64
    4ed4:	98 e0       	ldi	r25, 0x08	; 8
    4ed6:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <tc_set_overflow_interrupt_callback>
	
	// Set the interrupt priority:
	tc_set_overflow_interrupt_level(SYSTICK_TIMER, TC_INT_LVL_LO);
    4eda:	61 e0       	ldi	r22, 0x01	; 1
    4edc:	80 e4       	ldi	r24, 0x40	; 64
    4ede:	98 e0       	ldi	r25, 0x08	; 8
    4ee0:	13 df       	rcall	.-474    	; 0x4d08 <tc_set_overflow_interrupt_level>

	// Select the clock source (starts counting):
	tc_write_clock_source(SYSTICK_TIMER, TC_CLKSEL_DIV1_gc);
    4ee2:	61 e0       	ldi	r22, 0x01	; 1
    4ee4:	80 e4       	ldi	r24, 0x40	; 64
    4ee6:	98 e0       	ldi	r25, 0x08	; 8
    4ee8:	33 df       	rcall	.-410    	; 0x4d50 <tc_write_clock_source>

	// Leave it to be enabled later:
	disableSysTick();
    4eea:	10 d0       	rcall	.+32     	; 0x4f0c <disableSysTick>
}
    4eec:	0f 90       	pop	r0
    4eee:	0f 90       	pop	r0
    4ef0:	df 91       	pop	r29
    4ef2:	cf 91       	pop	r28
    4ef4:	08 95       	ret

00004ef6 <enableSysTick>:

void enableSysTick(void) {
    4ef6:	cf 93       	push	r28
    4ef8:	df 93       	push	r29
    4efa:	cd b7       	in	r28, 0x3d	; 61
    4efc:	de b7       	in	r29, 0x3e	; 62
	tc_enable(SYSTICK_TIMER);
    4efe:	80 e4       	ldi	r24, 0x40	; 64
    4f00:	98 e0       	ldi	r25, 0x08	; 8
    4f02:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <tc_enable>
}
    4f06:	df 91       	pop	r29
    4f08:	cf 91       	pop	r28
    4f0a:	08 95       	ret

00004f0c <disableSysTick>:

void disableSysTick(void) {
    4f0c:	cf 93       	push	r28
    4f0e:	df 93       	push	r29
    4f10:	cd b7       	in	r28, 0x3d	; 61
    4f12:	de b7       	in	r29, 0x3e	; 62
	tc_disable(SYSTICK_TIMER);
    4f14:	80 e4       	ldi	r24, 0x40	; 64
    4f16:	98 e0       	ldi	r25, 0x08	; 8
    4f18:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <tc_disable>
}
    4f1c:	df 91       	pop	r29
    4f1e:	cf 91       	pop	r28
    4f20:	08 95       	ret

00004f22 <clearSysTickFlag>:

void clearSysTickFlag(void) {
    4f22:	cf 93       	push	r28
    4f24:	df 93       	push	r29
    4f26:	cd b7       	in	r28, 0x3d	; 61
    4f28:	de b7       	in	r29, 0x3e	; 62
	tc_clear_overflow(SYSTICK_TIMER);
    4f2a:	80 e4       	ldi	r24, 0x40	; 64
    4f2c:	98 e0       	ldi	r25, 0x08	; 8
    4f2e:	81 df       	rcall	.-254    	; 0x4e32 <tc_clear_overflow>
}
    4f30:	df 91       	pop	r29
    4f32:	cf 91       	pop	r28
    4f34:	08 95       	ret

00004f36 <cpu_irq_save>:
}

bool USBPluggedIn(void)
{
	return ioport_get_pin_level(USB_5V_PIN);
}
    4f36:	cf 93       	push	r28
    4f38:	df 93       	push	r29
    4f3a:	1f 92       	push	r1
    4f3c:	cd b7       	in	r28, 0x3d	; 61
    4f3e:	de b7       	in	r29, 0x3e	; 62
    4f40:	8f e3       	ldi	r24, 0x3F	; 63
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	fc 01       	movw	r30, r24
    4f46:	80 81       	ld	r24, Z
    4f48:	89 83       	std	Y+1, r24	; 0x01
    4f4a:	f8 94       	cli
    4f4c:	89 81       	ldd	r24, Y+1	; 0x01
    4f4e:	0f 90       	pop	r0
    4f50:	df 91       	pop	r29
    4f52:	cf 91       	pop	r28
    4f54:	08 95       	ret

00004f56 <cpu_irq_restore>:
    4f56:	cf 93       	push	r28
    4f58:	df 93       	push	r29
    4f5a:	1f 92       	push	r1
    4f5c:	cd b7       	in	r28, 0x3d	; 61
    4f5e:	de b7       	in	r29, 0x3e	; 62
    4f60:	89 83       	std	Y+1, r24	; 0x01
    4f62:	8f e3       	ldi	r24, 0x3F	; 63
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	29 81       	ldd	r18, Y+1	; 0x01
    4f68:	fc 01       	movw	r30, r24
    4f6a:	20 83       	st	Z, r18
    4f6c:	0f 90       	pop	r0
    4f6e:	df 91       	pop	r29
    4f70:	cf 91       	pop	r28
    4f72:	08 95       	ret

00004f74 <reset_do_soft_reset>:
    4f74:	cf 93       	push	r28
    4f76:	df 93       	push	r29
    4f78:	cd b7       	in	r28, 0x3d	; 61
    4f7a:	de b7       	in	r29, 0x3e	; 62
    4f7c:	61 e0       	ldi	r22, 0x01	; 1
    4f7e:	89 e7       	ldi	r24, 0x79	; 121
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	9d d5       	rcall	.+2874   	; 0x5abe <ccp_write_io>
    4f84:	ff cf       	rjmp	.-2      	; 0x4f84 <reset_do_soft_reset+0x10>

00004f86 <usart_set_rx_interrupt_level>:
    4f86:	cf 93       	push	r28
    4f88:	df 93       	push	r29
    4f8a:	00 d0       	rcall	.+0      	; 0x4f8c <usart_set_rx_interrupt_level+0x6>
    4f8c:	1f 92       	push	r1
    4f8e:	cd b7       	in	r28, 0x3d	; 61
    4f90:	de b7       	in	r29, 0x3e	; 62
    4f92:	89 83       	std	Y+1, r24	; 0x01
    4f94:	9a 83       	std	Y+2, r25	; 0x02
    4f96:	6b 83       	std	Y+3, r22	; 0x03
    4f98:	89 81       	ldd	r24, Y+1	; 0x01
    4f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f9c:	fc 01       	movw	r30, r24
    4f9e:	83 81       	ldd	r24, Z+3	; 0x03
    4fa0:	28 2f       	mov	r18, r24
    4fa2:	2f 7c       	andi	r18, 0xCF	; 207
    4fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa6:	88 2f       	mov	r24, r24
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	82 95       	swap	r24
    4fac:	92 95       	swap	r25
    4fae:	90 7f       	andi	r25, 0xF0	; 240
    4fb0:	98 27       	eor	r25, r24
    4fb2:	80 7f       	andi	r24, 0xF0	; 240
    4fb4:	98 27       	eor	r25, r24
    4fb6:	82 2b       	or	r24, r18
    4fb8:	28 2f       	mov	r18, r24
    4fba:	89 81       	ldd	r24, Y+1	; 0x01
    4fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    4fbe:	fc 01       	movw	r30, r24
    4fc0:	23 83       	std	Z+3, r18	; 0x03
    4fc2:	23 96       	adiw	r28, 0x03	; 3
    4fc4:	cd bf       	out	0x3d, r28	; 61
    4fc6:	de bf       	out	0x3e, r29	; 62
    4fc8:	df 91       	pop	r29
    4fca:	cf 91       	pop	r28
    4fcc:	08 95       	ret

00004fce <usart_set_dre_interrupt_level>:
    4fce:	cf 93       	push	r28
    4fd0:	df 93       	push	r29
    4fd2:	00 d0       	rcall	.+0      	; 0x4fd4 <usart_set_dre_interrupt_level+0x6>
    4fd4:	1f 92       	push	r1
    4fd6:	cd b7       	in	r28, 0x3d	; 61
    4fd8:	de b7       	in	r29, 0x3e	; 62
    4fda:	89 83       	std	Y+1, r24	; 0x01
    4fdc:	9a 83       	std	Y+2, r25	; 0x02
    4fde:	6b 83       	std	Y+3, r22	; 0x03
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
    4fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe4:	fc 01       	movw	r30, r24
    4fe6:	83 81       	ldd	r24, Z+3	; 0x03
    4fe8:	98 2f       	mov	r25, r24
    4fea:	9c 7f       	andi	r25, 0xFC	; 252
    4fec:	8b 81       	ldd	r24, Y+3	; 0x03
    4fee:	89 2b       	or	r24, r25
    4ff0:	28 2f       	mov	r18, r24
    4ff2:	89 81       	ldd	r24, Y+1	; 0x01
    4ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ff6:	fc 01       	movw	r30, r24
    4ff8:	23 83       	std	Z+3, r18	; 0x03
    4ffa:	23 96       	adiw	r28, 0x03	; 3
    4ffc:	cd bf       	out	0x3d, r28	; 61
    4ffe:	de bf       	out	0x3e, r29	; 62
    5000:	df 91       	pop	r29
    5002:	cf 91       	pop	r28
    5004:	08 95       	ret

00005006 <usart_clear_rx_complete>:
    5006:	cf 93       	push	r28
    5008:	df 93       	push	r29
    500a:	00 d0       	rcall	.+0      	; 0x500c <usart_clear_rx_complete+0x6>
    500c:	cd b7       	in	r28, 0x3d	; 61
    500e:	de b7       	in	r29, 0x3e	; 62
    5010:	89 83       	std	Y+1, r24	; 0x01
    5012:	9a 83       	std	Y+2, r25	; 0x02
    5014:	89 81       	ldd	r24, Y+1	; 0x01
    5016:	9a 81       	ldd	r25, Y+2	; 0x02
    5018:	20 e8       	ldi	r18, 0x80	; 128
    501a:	fc 01       	movw	r30, r24
    501c:	21 83       	std	Z+1, r18	; 0x01
    501e:	0f 90       	pop	r0
    5020:	0f 90       	pop	r0
    5022:	df 91       	pop	r29
    5024:	cf 91       	pop	r28
    5026:	08 95       	ret

00005028 <usart_put>:
    5028:	cf 93       	push	r28
    502a:	df 93       	push	r29
    502c:	00 d0       	rcall	.+0      	; 0x502e <usart_put+0x6>
    502e:	1f 92       	push	r1
    5030:	cd b7       	in	r28, 0x3d	; 61
    5032:	de b7       	in	r29, 0x3e	; 62
    5034:	89 83       	std	Y+1, r24	; 0x01
    5036:	9a 83       	std	Y+2, r25	; 0x02
    5038:	6b 83       	std	Y+3, r22	; 0x03
    503a:	89 81       	ldd	r24, Y+1	; 0x01
    503c:	9a 81       	ldd	r25, Y+2	; 0x02
    503e:	2b 81       	ldd	r18, Y+3	; 0x03
    5040:	fc 01       	movw	r30, r24
    5042:	20 83       	st	Z, r18
    5044:	23 96       	adiw	r28, 0x03	; 3
    5046:	cd bf       	out	0x3d, r28	; 61
    5048:	de bf       	out	0x3e, r29	; 62
    504a:	df 91       	pop	r29
    504c:	cf 91       	pop	r28
    504e:	08 95       	ret

00005050 <usart_get>:
    5050:	cf 93       	push	r28
    5052:	df 93       	push	r29
    5054:	00 d0       	rcall	.+0      	; 0x5056 <usart_get+0x6>
    5056:	cd b7       	in	r28, 0x3d	; 61
    5058:	de b7       	in	r29, 0x3e	; 62
    505a:	89 83       	std	Y+1, r24	; 0x01
    505c:	9a 83       	std	Y+2, r25	; 0x02
    505e:	89 81       	ldd	r24, Y+1	; 0x01
    5060:	9a 81       	ldd	r25, Y+2	; 0x02
    5062:	fc 01       	movw	r30, r24
    5064:	80 81       	ld	r24, Z
    5066:	0f 90       	pop	r0
    5068:	0f 90       	pop	r0
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	08 95       	ret

00005070 <setupUsb>:
    5070:	cf 93       	push	r28
    5072:	df 93       	push	r29
    5074:	cd b7       	in	r28, 0x3d	; 61
    5076:	de b7       	in	r29, 0x3e	; 62
    5078:	60 e1       	ldi	r22, 0x10	; 16
    507a:	83 e0       	ldi	r24, 0x03	; 3
    507c:	81 d2       	rcall	.+1282   	; 0x5580 <sysclk_enable_module>
    507e:	83 e4       	ldi	r24, 0x43	; 67
    5080:	91 e2       	ldi	r25, 0x21	; 33
    5082:	51 d8       	rcall	.-3934   	; 0x4126 <sendDBGString>
    5084:	57 d1       	rcall	.+686    	; 0x5334 <WatchdogPet>
    5086:	62 e7       	ldi	r22, 0x72	; 114
    5088:	70 e2       	ldi	r23, 0x20	; 32
    508a:	80 ea       	ldi	r24, 0xA0	; 160
    508c:	98 e0       	ldi	r25, 0x08	; 8
    508e:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <usart_init_rs232>
    5092:	88 23       	and	r24, r24
    5094:	21 f0       	breq	.+8      	; 0x509e <setupUsb+0x2e>
    5096:	83 e5       	ldi	r24, 0x53	; 83
    5098:	91 e2       	ldi	r25, 0x21	; 33
    509a:	64 d8       	rcall	.-3896   	; 0x4164 <sendDBGLine>
    509c:	03 c0       	rjmp	.+6      	; 0x50a4 <setupUsb+0x34>
    509e:	88 e5       	ldi	r24, 0x58	; 88
    50a0:	91 e2       	ldi	r25, 0x21	; 33
    50a2:	60 d8       	rcall	.-3904   	; 0x4164 <sendDBGLine>
    50a4:	40 e4       	ldi	r20, 0x40	; 64
    50a6:	62 ea       	ldi	r22, 0xA2	; 162
    50a8:	77 e2       	ldi	r23, 0x27	; 39
    50aa:	82 ee       	ldi	r24, 0xE2	; 226
    50ac:	97 e2       	ldi	r25, 0x27	; 39
    50ae:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <initCB>
    50b2:	40 e2       	ldi	r20, 0x20	; 32
    50b4:	68 ee       	ldi	r22, 0xE8	; 232
    50b6:	77 e2       	ldi	r23, 0x27	; 39
    50b8:	88 e0       	ldi	r24, 0x08	; 8
    50ba:	98 e2       	ldi	r25, 0x28	; 40
    50bc:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <initCB>
    50c0:	61 e0       	ldi	r22, 0x01	; 1
    50c2:	80 ea       	ldi	r24, 0xA0	; 160
    50c4:	98 e0       	ldi	r25, 0x08	; 8
    50c6:	5f df       	rcall	.-322    	; 0x4f86 <usart_set_rx_interrupt_level>
    50c8:	df 91       	pop	r29
    50ca:	cf 91       	pop	r28
    50cc:	08 95       	ret

000050ce <sendUSBChar>:
    50ce:	cf 93       	push	r28
    50d0:	df 93       	push	r29
    50d2:	1f 92       	push	r1
    50d4:	cd b7       	in	r28, 0x3d	; 61
    50d6:	de b7       	in	r29, 0x3e	; 62
    50d8:	89 83       	std	Y+1, r24	; 0x01
    50da:	00 00       	nop
    50dc:	69 81       	ldd	r22, Y+1	; 0x01
    50de:	88 e0       	ldi	r24, 0x08	; 8
    50e0:	98 e2       	ldi	r25, 0x28	; 40
    50e2:	0e 94 1b 0b 	call	0x1636	; 0x1636 <addByteToCB>
    50e6:	98 2f       	mov	r25, r24
    50e8:	81 e0       	ldi	r24, 0x01	; 1
    50ea:	89 27       	eor	r24, r25
    50ec:	88 23       	and	r24, r24
    50ee:	b1 f7       	brne	.-20     	; 0x50dc <sendUSBChar+0xe>
    50f0:	61 e0       	ldi	r22, 0x01	; 1
    50f2:	80 ea       	ldi	r24, 0xA0	; 160
    50f4:	98 e0       	ldi	r25, 0x08	; 8
    50f6:	6b df       	rcall	.-298    	; 0x4fce <usart_set_dre_interrupt_level>
    50f8:	0f 90       	pop	r0
    50fa:	df 91       	pop	r29
    50fc:	cf 91       	pop	r28
    50fe:	08 95       	ret

00005100 <sendUSBString>:
    5100:	cf 93       	push	r28
    5102:	df 93       	push	r29
    5104:	00 d0       	rcall	.+0      	; 0x5106 <sendUSBString+0x6>
    5106:	1f 92       	push	r1
    5108:	cd b7       	in	r28, 0x3d	; 61
    510a:	de b7       	in	r29, 0x3e	; 62
    510c:	89 83       	std	Y+1, r24	; 0x01
    510e:	9a 83       	std	Y+2, r25	; 0x02
    5110:	6b 83       	std	Y+3, r22	; 0x03
    5112:	0c c0       	rjmp	.+24     	; 0x512c <sendUSBString+0x2c>
    5114:	89 81       	ldd	r24, Y+1	; 0x01
    5116:	9a 81       	ldd	r25, Y+2	; 0x02
    5118:	fc 01       	movw	r30, r24
    511a:	80 81       	ld	r24, Z
    511c:	28 2f       	mov	r18, r24
    511e:	89 81       	ldd	r24, Y+1	; 0x01
    5120:	9a 81       	ldd	r25, Y+2	; 0x02
    5122:	01 96       	adiw	r24, 0x01	; 1
    5124:	89 83       	std	Y+1, r24	; 0x01
    5126:	9a 83       	std	Y+2, r25	; 0x02
    5128:	82 2f       	mov	r24, r18
    512a:	d1 df       	rcall	.-94     	; 0x50ce <sendUSBChar>
    512c:	89 81       	ldd	r24, Y+1	; 0x01
    512e:	9a 81       	ldd	r25, Y+2	; 0x02
    5130:	fc 01       	movw	r30, r24
    5132:	80 81       	ld	r24, Z
    5134:	88 23       	and	r24, r24
    5136:	71 f7       	brne	.-36     	; 0x5114 <sendUSBString+0x14>
    5138:	8b 81       	ldd	r24, Y+3	; 0x03
    513a:	88 23       	and	r24, r24
    513c:	11 f0       	breq	.+4      	; 0x5142 <sendUSBString+0x42>
    513e:	80 e0       	ldi	r24, 0x00	; 0
    5140:	c6 df       	rcall	.-116    	; 0x50ce <sendUSBChar>
    5142:	23 96       	adiw	r28, 0x03	; 3
    5144:	cd bf       	out	0x3d, r28	; 61
    5146:	de bf       	out	0x3e, r29	; 62
    5148:	df 91       	pop	r29
    514a:	cf 91       	pop	r28
    514c:	08 95       	ret

0000514e <sendUSBLine>:
    514e:	cf 93       	push	r28
    5150:	df 93       	push	r29
    5152:	00 d0       	rcall	.+0      	; 0x5154 <sendUSBLine+0x6>
    5154:	cd b7       	in	r28, 0x3d	; 61
    5156:	de b7       	in	r29, 0x3e	; 62
    5158:	89 83       	std	Y+1, r24	; 0x01
    515a:	9a 83       	std	Y+2, r25	; 0x02
    515c:	89 81       	ldd	r24, Y+1	; 0x01
    515e:	9a 81       	ldd	r25, Y+2	; 0x02
    5160:	60 e0       	ldi	r22, 0x00	; 0
    5162:	ce df       	rcall	.-100    	; 0x5100 <sendUSBString>
    5164:	8d e0       	ldi	r24, 0x0D	; 13
    5166:	b3 df       	rcall	.-154    	; 0x50ce <sendUSBChar>
    5168:	8a e0       	ldi	r24, 0x0A	; 10
    516a:	b1 df       	rcall	.-158    	; 0x50ce <sendUSBChar>
    516c:	0f 90       	pop	r0
    516e:	0f 90       	pop	r0
    5170:	df 91       	pop	r29
    5172:	cf 91       	pop	r28
    5174:	08 95       	ret

00005176 <recvUSBString>:
    5176:	cf 93       	push	r28
    5178:	df 93       	push	r29
    517a:	00 d0       	rcall	.+0      	; 0x517c <recvUSBString+0x6>
    517c:	1f 92       	push	r1
    517e:	cd b7       	in	r28, 0x3d	; 61
    5180:	de b7       	in	r29, 0x3e	; 62
    5182:	89 83       	std	Y+1, r24	; 0x01
    5184:	9a 83       	std	Y+2, r25	; 0x02
    5186:	6b 83       	std	Y+3, r22	; 0x03
    5188:	89 81       	ldd	r24, Y+1	; 0x01
    518a:	9a 81       	ldd	r25, Y+2	; 0x02
    518c:	4b 81       	ldd	r20, Y+3	; 0x03
    518e:	bc 01       	movw	r22, r24
    5190:	82 ee       	ldi	r24, 0xE2	; 226
    5192:	97 e2       	ldi	r25, 0x27	; 39
    5194:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <readStringFromCB>
    5198:	23 96       	adiw	r28, 0x03	; 3
    519a:	cd bf       	out	0x3d, r28	; 61
    519c:	de bf       	out	0x3e, r29	; 62
    519e:	df 91       	pop	r29
    51a0:	cf 91       	pop	r28
    51a2:	08 95       	ret

000051a4 <__vector_25>:

ISR(USB_SERIAL_RX_INT) {
    51a4:	1f 92       	push	r1
    51a6:	0f 92       	push	r0
    51a8:	00 90 3f 00 	lds	r0, 0x003F
    51ac:	0f 92       	push	r0
    51ae:	11 24       	eor	r1, r1
    51b0:	00 90 3b 00 	lds	r0, 0x003B
    51b4:	0f 92       	push	r0
    51b6:	2f 93       	push	r18
    51b8:	3f 93       	push	r19
    51ba:	4f 93       	push	r20
    51bc:	5f 93       	push	r21
    51be:	6f 93       	push	r22
    51c0:	7f 93       	push	r23
    51c2:	8f 93       	push	r24
    51c4:	9f 93       	push	r25
    51c6:	af 93       	push	r26
    51c8:	bf 93       	push	r27
    51ca:	ef 93       	push	r30
    51cc:	ff 93       	push	r31
    51ce:	cf 93       	push	r28
    51d0:	df 93       	push	r29
    51d2:	00 d0       	rcall	.+0      	; 0x51d4 <__vector_25+0x30>
    51d4:	cd b7       	in	r28, 0x3d	; 61
    51d6:	de b7       	in	r29, 0x3e	; 62
	char c;
	
	irqflags_t flags;
	flags = cpu_irq_save();	
    51d8:	ae de       	rcall	.-676    	; 0x4f36 <cpu_irq_save>
    51da:	89 83       	std	Y+1, r24	; 0x01
	
	c = usart_get(USB_SERIAL);
    51dc:	80 ea       	ldi	r24, 0xA0	; 160
    51de:	98 e0       	ldi	r25, 0x08	; 8
    51e0:	37 df       	rcall	.-402    	; 0x5050 <usart_get>
    51e2:	8a 83       	std	Y+2, r24	; 0x02
	
	// Insta-reset if this is the break character for
	// entering the bootloader: (Really shouldn't be
	// in the usb code, but it's the quickest)
	if (c == 0x1B) {
    51e4:	8a 81       	ldd	r24, Y+2	; 0x02
    51e6:	8b 31       	cpi	r24, 0x1B	; 27
    51e8:	09 f4       	brne	.+2      	; 0x51ec <__vector_25+0x48>
		reset_do_soft_reset();
    51ea:	c4 de       	rcall	.-632    	; 0x4f74 <reset_do_soft_reset>
	}
	
	// Add the byte to the buffer. (If it is not full):
	addByteToCB(&rxCB, c);
    51ec:	8a 81       	ldd	r24, Y+2	; 0x02
    51ee:	68 2f       	mov	r22, r24
    51f0:	82 ee       	ldi	r24, 0xE2	; 226
    51f2:	97 e2       	ldi	r25, 0x27	; 39
    51f4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <addByteToCB>
	
	// Clear the interrupt flag:
	usart_clear_rx_complete(USB_SERIAL);
    51f8:	80 ea       	ldi	r24, 0xA0	; 160
    51fa:	98 e0       	ldi	r25, 0x08	; 8
    51fc:	04 df       	rcall	.-504    	; 0x5006 <usart_clear_rx_complete>
	
	cpu_irq_restore(flags);
    51fe:	89 81       	ldd	r24, Y+1	; 0x01
    5200:	aa de       	rcall	.-684    	; 0x4f56 <cpu_irq_restore>
}
    5202:	0f 90       	pop	r0
    5204:	0f 90       	pop	r0
    5206:	df 91       	pop	r29
    5208:	cf 91       	pop	r28
    520a:	ff 91       	pop	r31
    520c:	ef 91       	pop	r30
    520e:	bf 91       	pop	r27
    5210:	af 91       	pop	r26
    5212:	9f 91       	pop	r25
    5214:	8f 91       	pop	r24
    5216:	7f 91       	pop	r23
    5218:	6f 91       	pop	r22
    521a:	5f 91       	pop	r21
    521c:	4f 91       	pop	r20
    521e:	3f 91       	pop	r19
    5220:	2f 91       	pop	r18
    5222:	0f 90       	pop	r0
    5224:	00 92 3b 00 	sts	0x003B, r0
    5228:	0f 90       	pop	r0
    522a:	00 92 3f 00 	sts	0x003F, r0
    522e:	0f 90       	pop	r0
    5230:	1f 90       	pop	r1
    5232:	18 95       	reti

00005234 <__vector_26>:

ISR(USB_SERIAL_DRE_INT) {
    5234:	1f 92       	push	r1
    5236:	0f 92       	push	r0
    5238:	00 90 3f 00 	lds	r0, 0x003F
    523c:	0f 92       	push	r0
    523e:	11 24       	eor	r1, r1
    5240:	00 90 3b 00 	lds	r0, 0x003B
    5244:	0f 92       	push	r0
    5246:	2f 93       	push	r18
    5248:	3f 93       	push	r19
    524a:	4f 93       	push	r20
    524c:	5f 93       	push	r21
    524e:	6f 93       	push	r22
    5250:	7f 93       	push	r23
    5252:	8f 93       	push	r24
    5254:	9f 93       	push	r25
    5256:	af 93       	push	r26
    5258:	bf 93       	push	r27
    525a:	ef 93       	push	r30
    525c:	ff 93       	push	r31
    525e:	cf 93       	push	r28
    5260:	df 93       	push	r29
    5262:	1f 92       	push	r1
    5264:	cd b7       	in	r28, 0x3d	; 61
    5266:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	
	// Is there any data to send out?
	if (readByteFromCB(&txCB, &temp)) {
    5268:	ce 01       	movw	r24, r28
    526a:	01 96       	adiw	r24, 0x01	; 1
    526c:	bc 01       	movw	r22, r24
    526e:	88 e0       	ldi	r24, 0x08	; 8
    5270:	98 e2       	ldi	r25, 0x28	; 40
    5272:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <readByteFromCB>
    5276:	88 23       	and	r24, r24
    5278:	31 f0       	breq	.+12     	; 0x5286 <__vector_26+0x52>
		// Then send it:
		usart_put(USB_SERIAL, temp);
    527a:	89 81       	ldd	r24, Y+1	; 0x01
    527c:	68 2f       	mov	r22, r24
    527e:	80 ea       	ldi	r24, 0xA0	; 160
    5280:	98 e0       	ldi	r25, 0x08	; 8
    5282:	d2 de       	rcall	.-604    	; 0x5028 <usart_put>
    5284:	04 c0       	rjmp	.+8      	; 0x528e <__vector_26+0x5a>
	}
	else {
		// Disable the interrupt if there is no more data:
		usart_set_dre_interrupt_level(USB_SERIAL, USART_INT_LVL_OFF);
    5286:	60 e0       	ldi	r22, 0x00	; 0
    5288:	80 ea       	ldi	r24, 0xA0	; 160
    528a:	98 e0       	ldi	r25, 0x08	; 8
    528c:	a0 de       	rcall	.-704    	; 0x4fce <usart_set_dre_interrupt_level>
	}
}
    528e:	0f 90       	pop	r0
    5290:	df 91       	pop	r29
    5292:	cf 91       	pop	r28
    5294:	ff 91       	pop	r31
    5296:	ef 91       	pop	r30
    5298:	bf 91       	pop	r27
    529a:	af 91       	pop	r26
    529c:	9f 91       	pop	r25
    529e:	8f 91       	pop	r24
    52a0:	7f 91       	pop	r23
    52a2:	6f 91       	pop	r22
    52a4:	5f 91       	pop	r21
    52a6:	4f 91       	pop	r20
    52a8:	3f 91       	pop	r19
    52aa:	2f 91       	pop	r18
    52ac:	0f 90       	pop	r0
    52ae:	00 92 3b 00 	sts	0x003B, r0
    52b2:	0f 90       	pop	r0
    52b4:	00 92 3f 00 	sts	0x003F, r0
    52b8:	0f 90       	pop	r0
    52ba:	1f 90       	pop	r1
    52bc:	18 95       	reti

000052be <PrintXY>:
//#if DEBUG

#include <stdlib.h>

void PrintXY(int16_t x, int16_t y)
{
    52be:	cf 93       	push	r28
    52c0:	df 93       	push	r29
    52c2:	cd b7       	in	r28, 0x3d	; 61
    52c4:	de b7       	in	r29, 0x3e	; 62
    52c6:	2c 97       	sbiw	r28, 0x0c	; 12
    52c8:	cd bf       	out	0x3d, r28	; 61
    52ca:	de bf       	out	0x3e, r29	; 62
    52cc:	89 87       	std	Y+9, r24	; 0x09
    52ce:	9a 87       	std	Y+10, r25	; 0x0a
    52d0:	6b 87       	std	Y+11, r22	; 0x0b
    52d2:	7c 87       	std	Y+12, r23	; 0x0c
	//string size (NULL char inclusive) for signed 16-bit integer (6+1); rounded up +1 for byte alignment
	#define STR_SIZE_16B 8
	unsigned char numStr[STR_SIZE_16B];
	sendUSBChar( '(' );
    52d4:	88 e2       	ldi	r24, 0x28	; 40
    52d6:	fb de       	rcall	.-522    	; 0x50ce <sendUSBChar>
	sendUSBString( itoa(x, numStr, 10), false );
    52d8:	89 85       	ldd	r24, Y+9	; 0x09
    52da:	9a 85       	ldd	r25, Y+10	; 0x0a
    52dc:	4a e0       	ldi	r20, 0x0A	; 10
    52de:	50 e0       	ldi	r21, 0x00	; 0
    52e0:	9e 01       	movw	r18, r28
    52e2:	2f 5f       	subi	r18, 0xFF	; 255
    52e4:	3f 4f       	sbci	r19, 0xFF	; 255
    52e6:	b9 01       	movw	r22, r18
    52e8:	0e 94 88 48 	call	0x9110	; 0x9110 <itoa>
    52ec:	60 e0       	ldi	r22, 0x00	; 0
    52ee:	08 df       	rcall	.-496    	; 0x5100 <sendUSBString>
	sendUSBChar( ',' );
    52f0:	8c e2       	ldi	r24, 0x2C	; 44
    52f2:	ed de       	rcall	.-550    	; 0x50ce <sendUSBChar>
	sendUSBString( itoa(y, numStr, 10), false );
    52f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    52f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    52f8:	4a e0       	ldi	r20, 0x0A	; 10
    52fa:	50 e0       	ldi	r21, 0x00	; 0
    52fc:	9e 01       	movw	r18, r28
    52fe:	2f 5f       	subi	r18, 0xFF	; 255
    5300:	3f 4f       	sbci	r19, 0xFF	; 255
    5302:	b9 01       	movw	r22, r18
    5304:	0e 94 88 48 	call	0x9110	; 0x9110 <itoa>
    5308:	60 e0       	ldi	r22, 0x00	; 0
    530a:	fa de       	rcall	.-524    	; 0x5100 <sendUSBString>
	sendUSBChar( ')' );
    530c:	89 e2       	ldi	r24, 0x29	; 41
    530e:	df de       	rcall	.-578    	; 0x50ce <sendUSBChar>
}
    5310:	2c 96       	adiw	r28, 0x0c	; 12
    5312:	cd bf       	out	0x3d, r28	; 61
    5314:	de bf       	out	0x3e, r29	; 62
    5316:	df 91       	pop	r29
    5318:	cf 91       	pop	r28
    531a:	08 95       	ret

0000531c <WatchdogInit>:
* Normally the application code will call WatchdogValidate() much more
* frequently than once per 8 seconds and the validate function will check all
* subsystems for continuing operation.
*/
void WatchdogInit(void)
{
    531c:	cf 93       	push	r28
    531e:	df 93       	push	r29
    5320:	cd b7       	in	r28, 0x3d	; 61
    5322:	de b7       	in	r29, 0x3e	; 62
	// Setup prescaler
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
    5324:	8a e0       	ldi	r24, 0x0A	; 10
    5326:	0e 94 1a 3a 	call	0x7434	; 0x7434 <wdt_set_timeout_period>
	#if NO_WATCHDOG != 1
	/* Now enable the watchdog */
	wdt_enable();
    532a:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <wdt_enable>
	#else
	#ifndef DEBUG
	#error "Watchdog must be enabled in release build. Don't define NO_WATCHDOG"
	#endif
	#endif
}
    532e:	df 91       	pop	r29
    5330:	cf 91       	pop	r28
    5332:	08 95       	ret

00005334 <WatchdogPet>:
/**
* Reset the hardware watchdog so it does not timeout and restart the
* processor.
*/
void WatchdogPet(void)
{
    5334:	cf 93       	push	r28
    5336:	df 93       	push	r29
    5338:	cd b7       	in	r28, 0x3d	; 61
    533a:	de b7       	in	r29, 0x3e	; 62
	sendDBGString(".");
    533c:	8c e5       	ldi	r24, 0x5C	; 92
    533e:	91 e2       	ldi	r25, 0x21	; 33
    5340:	0e 94 93 20 	call	0x4126	; 0x4126 <sendDBGString>
	wdt_reset();
    5344:	a8 95       	wdr
}
    5346:	df 91       	pop	r29
    5348:	cf 91       	pop	r28
    534a:	08 95       	ret

0000534c <WatchdogValidate>:
* restart. If one of the subsystems has failed, allow the watchdog to timeout
* and force a restart.
* @note This function is called once per second from the system timer.
*/
void WatchdogValidate(void)
{
    534c:	cf 93       	push	r28
    534e:	df 93       	push	r29
    5350:	1f 92       	push	r1
    5352:	cd b7       	in	r28, 0x3d	; 61
    5354:	de b7       	in	r29, 0x3e	; 62
	bool systemStalled = false;
    5356:	19 82       	std	Y+1, r1	; 0x01

	/* Main loop still running? */
	if (mainLoopWatchdog == 0)
    5358:	80 91 7b 20 	lds	r24, 0x207B
    535c:	90 91 7c 20 	lds	r25, 0x207C
    5360:	00 97       	sbiw	r24, 0x00	; 0
    5362:	49 f0       	breq	.+18     	; 0x5376 <WatchdogValidate+0x2a>
		// sendDBGLine("TASK_MAIN watchdog task timeout");
		// systemStalled = true;
	}
	else
	{
		mainLoopWatchdog--;
    5364:	80 91 7b 20 	lds	r24, 0x207B
    5368:	90 91 7c 20 	lds	r25, 0x207C
    536c:	01 97       	sbiw	r24, 0x01	; 1
    536e:	80 93 7b 20 	sts	0x207B, r24
    5372:	90 93 7c 20 	sts	0x207C, r25
	}

	if (!systemStalled)
    5376:	99 81       	ldd	r25, Y+1	; 0x01
    5378:	81 e0       	ldi	r24, 0x01	; 1
    537a:	89 27       	eor	r24, r25
    537c:	88 23       	and	r24, r24
    537e:	09 f0       	breq	.+2      	; 0x5382 <WatchdogValidate+0x36>
	{
		WatchdogPet();
    5380:	d9 df       	rcall	.-78     	; 0x5334 <WatchdogPet>
	}
}
    5382:	0f 90       	pop	r0
    5384:	df 91       	pop	r29
    5386:	cf 91       	pop	r28
    5388:	08 95       	ret

0000538a <WatchDogEnable>:

void WatchDogEnable(bool enable)
{
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	1f 92       	push	r1
    5390:	cd b7       	in	r28, 0x3d	; 61
    5392:	de b7       	in	r29, 0x3e	; 62
    5394:	89 83       	std	Y+1, r24	; 0x01
	if (enable)
    5396:	89 81       	ldd	r24, Y+1	; 0x01
    5398:	88 23       	and	r24, r24
    539a:	19 f0       	breq	.+6      	; 0x53a2 <WatchDogEnable+0x18>
	{
		wdt_enable();
    539c:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <wdt_enable>
    53a0:	02 c0       	rjmp	.+4      	; 0x53a6 <WatchDogEnable+0x1c>
	}		
	else
	{
		wdt_disable();
    53a2:	0e 94 3c 3a 	call	0x7478	; 0x7478 <wdt_disable>
	}			
}
    53a6:	0f 90       	pop	r0
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	08 95       	ret

000053ae <WatchdogTaskRunning>:
* The function is called by each task in the system that could conceivably
* fail independently.
* @param task The task that is calling to confirm that it is still running.
*/
void WatchdogTaskRunning(taskDef task)
{
    53ae:	cf 93       	push	r28
    53b0:	df 93       	push	r29
    53b2:	1f 92       	push	r1
    53b4:	cd b7       	in	r28, 0x3d	; 61
    53b6:	de b7       	in	r29, 0x3e	; 62
    53b8:	89 83       	std	Y+1, r24	; 0x01
	switch (task)
    53ba:	89 81       	ldd	r24, Y+1	; 0x01
    53bc:	88 2f       	mov	r24, r24
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	00 97       	sbiw	r24, 0x00	; 0
    53c2:	21 f0       	breq	.+8      	; 0x53cc <WatchdogTaskRunning+0x1e>
    53c4:	82 30       	cpi	r24, 0x02	; 2
    53c6:	91 05       	cpc	r25, r1
    53c8:	41 f0       	breq	.+16     	; 0x53da <WatchdogTaskRunning+0x2c>
    53ca:	0e c0       	rjmp	.+28     	; 0x53e8 <WatchdogTaskRunning+0x3a>
	{
		case TASK_MAIN:
		mainLoopWatchdog = MAIN_LOOP_WATCHDOG_RESET;
    53cc:	84 e6       	ldi	r24, 0x64	; 100
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	80 93 7b 20 	sts	0x207B, r24
    53d4:	90 93 7c 20 	sts	0x207C, r25
		break;
    53d8:	07 c0       	rjmp	.+14     	; 0x53e8 <WatchdogTaskRunning+0x3a>
		case TASK_MODEM:
		modemResponseWatchdog = MODEM_RESPONSE_WATCHDOG_RESET;
    53da:	84 e6       	ldi	r24, 0x64	; 100
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	80 93 79 20 	sts	0x2079, r24
    53e2:	90 93 7a 20 	sts	0x207A, r25
		break;
    53e6:	00 00       	nop
	}
}
    53e8:	0f 90       	pop	r0
    53ea:	df 91       	pop	r29
    53ec:	cf 91       	pop	r28
    53ee:	08 95       	ret

000053f0 <cpu_irq_save>:
    53f0:	cf 93       	push	r28
    53f2:	df 93       	push	r29
    53f4:	1f 92       	push	r1
    53f6:	cd b7       	in	r28, 0x3d	; 61
    53f8:	de b7       	in	r29, 0x3e	; 62
    53fa:	8f e3       	ldi	r24, 0x3F	; 63
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	fc 01       	movw	r30, r24
    5400:	80 81       	ld	r24, Z
    5402:	89 83       	std	Y+1, r24	; 0x01
    5404:	f8 94       	cli
    5406:	89 81       	ldd	r24, Y+1	; 0x01
    5408:	0f 90       	pop	r0
    540a:	df 91       	pop	r29
    540c:	cf 91       	pop	r28
    540e:	08 95       	ret

00005410 <cpu_irq_restore>:
    5410:	cf 93       	push	r28
    5412:	df 93       	push	r29
    5414:	1f 92       	push	r1
    5416:	cd b7       	in	r28, 0x3d	; 61
    5418:	de b7       	in	r29, 0x3e	; 62
    541a:	89 83       	std	Y+1, r24	; 0x01
    541c:	8f e3       	ldi	r24, 0x3F	; 63
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	29 81       	ldd	r18, Y+1	; 0x01
    5422:	fc 01       	movw	r30, r24
    5424:	20 83       	st	Z, r18
    5426:	0f 90       	pop	r0
    5428:	df 91       	pop	r29
    542a:	cf 91       	pop	r28
    542c:	08 95       	ret

0000542e <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    542e:	cf 93       	push	r28
    5430:	df 93       	push	r29
    5432:	00 d0       	rcall	.+0      	; 0x5434 <osc_enable_internal+0x6>
    5434:	cd b7       	in	r28, 0x3d	; 61
    5436:	de b7       	in	r29, 0x3e	; 62
    5438:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    543a:	da df       	rcall	.-76     	; 0x53f0 <cpu_irq_save>
    543c:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    543e:	80 e5       	ldi	r24, 0x50	; 80
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	20 e5       	ldi	r18, 0x50	; 80
    5444:	30 e0       	ldi	r19, 0x00	; 0
    5446:	f9 01       	movw	r30, r18
    5448:	30 81       	ld	r19, Z
    544a:	2a 81       	ldd	r18, Y+2	; 0x02
    544c:	23 2b       	or	r18, r19
    544e:	fc 01       	movw	r30, r24
    5450:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    5452:	89 81       	ldd	r24, Y+1	; 0x01
    5454:	dd df       	rcall	.-70     	; 0x5410 <cpu_irq_restore>
}
    5456:	0f 90       	pop	r0
    5458:	0f 90       	pop	r0
    545a:	df 91       	pop	r29
    545c:	cf 91       	pop	r28
    545e:	08 95       	ret

00005460 <osc_enable_external>:
	cpu_irq_restore(flags);
}
#else

static inline void osc_enable_external(uint8_t id)
{
    5460:	cf 93       	push	r28
    5462:	df 93       	push	r29
    5464:	1f 92       	push	r1
    5466:	cd b7       	in	r28, 0x3d	; 61
    5468:	de b7       	in	r29, 0x3e	; 62
    546a:	89 83       	std	Y+1, r24	; 0x01
	Assert(false); // No external oscillator on the selected board
}
    546c:	0f 90       	pop	r0
    546e:	df 91       	pop	r29
    5470:	cf 91       	pop	r28
    5472:	08 95       	ret

00005474 <osc_disable>:
#endif

static inline void osc_disable(uint8_t id)
{
    5474:	cf 93       	push	r28
    5476:	df 93       	push	r29
    5478:	00 d0       	rcall	.+0      	; 0x547a <osc_disable+0x6>
    547a:	cd b7       	in	r28, 0x3d	; 61
    547c:	de b7       	in	r29, 0x3e	; 62
    547e:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    5480:	b7 df       	rcall	.-146    	; 0x53f0 <cpu_irq_save>
    5482:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    5484:	80 e5       	ldi	r24, 0x50	; 80
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	20 e5       	ldi	r18, 0x50	; 80
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	f9 01       	movw	r30, r18
    548e:	20 81       	ld	r18, Z
    5490:	32 2f       	mov	r19, r18
    5492:	2a 81       	ldd	r18, Y+2	; 0x02
    5494:	20 95       	com	r18
    5496:	23 23       	and	r18, r19
    5498:	fc 01       	movw	r30, r24
    549a:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    549c:	89 81       	ldd	r24, Y+1	; 0x01
    549e:	b8 df       	rcall	.-144    	; 0x5410 <cpu_irq_restore>
}
    54a0:	0f 90       	pop	r0
    54a2:	0f 90       	pop	r0
    54a4:	df 91       	pop	r29
    54a6:	cf 91       	pop	r28
    54a8:	08 95       	ret

000054aa <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    54aa:	cf 93       	push	r28
    54ac:	df 93       	push	r29
    54ae:	1f 92       	push	r1
    54b0:	cd b7       	in	r28, 0x3d	; 61
    54b2:	de b7       	in	r29, 0x3e	; 62
    54b4:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	88 30       	cpi	r24, 0x08	; 8
    54ba:	19 f0       	breq	.+6      	; 0x54c2 <osc_enable+0x18>
		osc_enable_internal(id);
    54bc:	89 81       	ldd	r24, Y+1	; 0x01
    54be:	b7 df       	rcall	.-146    	; 0x542e <osc_enable_internal>
    54c0:	02 c0       	rjmp	.+4      	; 0x54c6 <osc_enable+0x1c>
	} else {
		osc_enable_external(id);
    54c2:	89 81       	ldd	r24, Y+1	; 0x01
    54c4:	cd df       	rcall	.-102    	; 0x5460 <osc_enable_external>
	}
}
    54c6:	0f 90       	pop	r0
    54c8:	df 91       	pop	r29
    54ca:	cf 91       	pop	r28
    54cc:	08 95       	ret

000054ce <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    54ce:	cf 93       	push	r28
    54d0:	df 93       	push	r29
    54d2:	1f 92       	push	r1
    54d4:	cd b7       	in	r28, 0x3d	; 61
    54d6:	de b7       	in	r29, 0x3e	; 62
    54d8:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    54da:	80 e5       	ldi	r24, 0x50	; 80
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	fc 01       	movw	r30, r24
    54e0:	91 81       	ldd	r25, Z+1	; 0x01
    54e2:	89 81       	ldd	r24, Y+1	; 0x01
    54e4:	98 23       	and	r25, r24
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	99 23       	and	r25, r25
    54ea:	09 f4       	brne	.+2      	; 0x54ee <osc_is_ready+0x20>
    54ec:	80 e0       	ldi	r24, 0x00	; 0
}
    54ee:	0f 90       	pop	r0
    54f0:	df 91       	pop	r29
    54f2:	cf 91       	pop	r28
    54f4:	08 95       	ret

000054f6 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    54f6:	cf 93       	push	r28
    54f8:	df 93       	push	r29
    54fa:	1f 92       	push	r1
    54fc:	cd b7       	in	r28, 0x3d	; 61
    54fe:	de b7       	in	r29, 0x3e	; 62
    5500:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    5502:	00 00       	nop
    5504:	89 81       	ldd	r24, Y+1	; 0x01
    5506:	e3 df       	rcall	.-58     	; 0x54ce <osc_is_ready>
    5508:	98 2f       	mov	r25, r24
    550a:	81 e0       	ldi	r24, 0x01	; 1
    550c:	89 27       	eor	r24, r25
    550e:	88 23       	and	r24, r24
    5510:	c9 f7       	brne	.-14     	; 0x5504 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    5512:	0f 90       	pop	r0
    5514:	df 91       	pop	r29
    5516:	cf 91       	pop	r28
    5518:	08 95       	ret

0000551a <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    551a:	cf 93       	push	r28
    551c:	df 93       	push	r29
    551e:	00 d0       	rcall	.+0      	; 0x5520 <sysclk_init+0x6>
    5520:	00 d0       	rcall	.+0      	; 0x5522 <sysclk_init+0x8>
    5522:	cd b7       	in	r28, 0x3d	; 61
    5524:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    5526:	80 e7       	ldi	r24, 0x70	; 112
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	89 83       	std	Y+1, r24	; 0x01
    552c:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t i;
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
#endif
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    552e:	1b 82       	std	Y+3, r1	; 0x03
    5530:	0d c0       	rjmp	.+26     	; 0x554c <sysclk_init+0x32>
		*(reg++) = 0xff;
    5532:	89 81       	ldd	r24, Y+1	; 0x01
    5534:	9a 81       	ldd	r25, Y+2	; 0x02
    5536:	2f ef       	ldi	r18, 0xFF	; 255
    5538:	fc 01       	movw	r30, r24
    553a:	20 83       	st	Z, r18
    553c:	89 81       	ldd	r24, Y+1	; 0x01
    553e:	9a 81       	ldd	r25, Y+2	; 0x02
    5540:	01 96       	adiw	r24, 0x01	; 1
    5542:	89 83       	std	Y+1, r24	; 0x01
    5544:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t i;
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
#endif
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    5546:	8b 81       	ldd	r24, Y+3	; 0x03
    5548:	8f 5f       	subi	r24, 0xFF	; 255
    554a:	8b 83       	std	Y+3, r24	; 0x03
    554c:	8b 81       	ldd	r24, Y+3	; 0x03
    554e:	87 30       	cpi	r24, 0x07	; 7
    5550:	80 f3       	brcs	.-32     	; 0x5532 <sysclk_init+0x18>
	/*
	 * Switch to the selected initial system clock source, unless
	 * the default internal 2 MHz oscillator is selected.
	 */
	if (CONFIG_SYSCLK_SOURCE != SYSCLK_SRC_RC2MHZ) {
		bool need_rc2mhz = false;
    5552:	1c 82       	std	Y+4, r1	; 0x04

		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    5554:	82 e0       	ldi	r24, 0x02	; 2
    5556:	a9 df       	rcall	.-174    	; 0x54aa <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
    5558:	82 e0       	ldi	r24, 0x02	; 2
    555a:	cd df       	rcall	.-102    	; 0x54f6 <osc_wait_ready>
			break;
    555c:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    555e:	61 e0       	ldi	r22, 0x01	; 1
    5560:	80 e4       	ldi	r24, 0x40	; 64
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	ac d2       	rcall	.+1368   	; 0x5abe <ccp_write_io>
				|| CONFIG_OSC_AUTOCAL_REF_OSC == OSC_ID_RC2MHZ) {
			need_rc2mhz = true;
		}
#endif

		if (!need_rc2mhz) {
    5566:	9c 81       	ldd	r25, Y+4	; 0x04
    5568:	81 e0       	ldi	r24, 0x01	; 1
    556a:	89 27       	eor	r24, r25
    556c:	88 23       	and	r24, r24
    556e:	11 f0       	breq	.+4      	; 0x5574 <sysclk_init+0x5a>
			osc_disable(OSC_ID_RC2MHZ);
    5570:	81 e0       	ldi	r24, 0x01	; 1
    5572:	80 df       	rcall	.-256    	; 0x5474 <osc_disable>
		}
	}
}
    5574:	24 96       	adiw	r28, 0x04	; 4
    5576:	cd bf       	out	0x3d, r28	; 61
    5578:	de bf       	out	0x3e, r29	; 62
    557a:	df 91       	pop	r29
    557c:	cf 91       	pop	r28
    557e:	08 95       	ret

00005580 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    5580:	cf 93       	push	r28
    5582:	df 93       	push	r29
    5584:	00 d0       	rcall	.+0      	; 0x5586 <sysclk_enable_module+0x6>
    5586:	1f 92       	push	r1
    5588:	cd b7       	in	r28, 0x3d	; 61
    558a:	de b7       	in	r29, 0x3e	; 62
    558c:	8a 83       	std	Y+2, r24	; 0x02
    558e:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    5590:	2f df       	rcall	.-418    	; 0x53f0 <cpu_irq_save>
    5592:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    5594:	8a 81       	ldd	r24, Y+2	; 0x02
    5596:	88 2f       	mov	r24, r24
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	80 59       	subi	r24, 0x90	; 144
    559c:	9f 4f       	sbci	r25, 0xFF	; 255
    559e:	2a 81       	ldd	r18, Y+2	; 0x02
    55a0:	22 2f       	mov	r18, r18
    55a2:	30 e0       	ldi	r19, 0x00	; 0
    55a4:	20 59       	subi	r18, 0x90	; 144
    55a6:	3f 4f       	sbci	r19, 0xFF	; 255
    55a8:	f9 01       	movw	r30, r18
    55aa:	20 81       	ld	r18, Z
    55ac:	32 2f       	mov	r19, r18
    55ae:	2b 81       	ldd	r18, Y+3	; 0x03
    55b0:	20 95       	com	r18
    55b2:	23 23       	and	r18, r19
    55b4:	fc 01       	movw	r30, r24
    55b6:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    55b8:	89 81       	ldd	r24, Y+1	; 0x01
    55ba:	2a df       	rcall	.-428    	; 0x5410 <cpu_irq_restore>
}
    55bc:	23 96       	adiw	r28, 0x03	; 3
    55be:	cd bf       	out	0x3d, r28	; 61
    55c0:	de bf       	out	0x3e, r29	; 62
    55c2:	df 91       	pop	r29
    55c4:	cf 91       	pop	r28
    55c6:	08 95       	ret

000055c8 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    55c8:	cf 93       	push	r28
    55ca:	df 93       	push	r29
    55cc:	00 d0       	rcall	.+0      	; 0x55ce <sysclk_disable_module+0x6>
    55ce:	1f 92       	push	r1
    55d0:	cd b7       	in	r28, 0x3d	; 61
    55d2:	de b7       	in	r29, 0x3e	; 62
    55d4:	8a 83       	std	Y+2, r24	; 0x02
    55d6:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    55d8:	0b df       	rcall	.-490    	; 0x53f0 <cpu_irq_save>
    55da:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) |= id;
    55dc:	8a 81       	ldd	r24, Y+2	; 0x02
    55de:	88 2f       	mov	r24, r24
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	80 59       	subi	r24, 0x90	; 144
    55e4:	9f 4f       	sbci	r25, 0xFF	; 255
    55e6:	2a 81       	ldd	r18, Y+2	; 0x02
    55e8:	22 2f       	mov	r18, r18
    55ea:	30 e0       	ldi	r19, 0x00	; 0
    55ec:	20 59       	subi	r18, 0x90	; 144
    55ee:	3f 4f       	sbci	r19, 0xFF	; 255
    55f0:	f9 01       	movw	r30, r18
    55f2:	30 81       	ld	r19, Z
    55f4:	2b 81       	ldd	r18, Y+3	; 0x03
    55f6:	23 2b       	or	r18, r19
    55f8:	fc 01       	movw	r30, r24
    55fa:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    55fc:	89 81       	ldd	r24, Y+1	; 0x01
    55fe:	08 df       	rcall	.-496    	; 0x5410 <cpu_irq_restore>
}
    5600:	23 96       	adiw	r28, 0x03	; 3
    5602:	cd bf       	out	0x3d, r28	; 61
    5604:	de bf       	out	0x3e, r29	; 62
    5606:	df 91       	pop	r29
    5608:	cf 91       	pop	r28
    560a:	08 95       	ret

0000560c <cpu_irq_save>:
    560c:	cf 93       	push	r28
    560e:	df 93       	push	r29
    5610:	1f 92       	push	r1
    5612:	cd b7       	in	r28, 0x3d	; 61
    5614:	de b7       	in	r29, 0x3e	; 62
    5616:	8f e3       	ldi	r24, 0x3F	; 63
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	fc 01       	movw	r30, r24
    561c:	80 81       	ld	r24, Z
    561e:	89 83       	std	Y+1, r24	; 0x01
    5620:	f8 94       	cli
    5622:	89 81       	ldd	r24, Y+1	; 0x01
    5624:	0f 90       	pop	r0
    5626:	df 91       	pop	r29
    5628:	cf 91       	pop	r28
    562a:	08 95       	ret

0000562c <cpu_irq_restore>:
    562c:	cf 93       	push	r28
    562e:	df 93       	push	r29
    5630:	1f 92       	push	r1
    5632:	cd b7       	in	r28, 0x3d	; 61
    5634:	de b7       	in	r29, 0x3e	; 62
    5636:	89 83       	std	Y+1, r24	; 0x01
    5638:	8f e3       	ldi	r24, 0x3F	; 63
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	29 81       	ldd	r18, Y+1	; 0x01
    563e:	fc 01       	movw	r30, r24
    5640:	20 83       	st	Z, r18
    5642:	0f 90       	pop	r0
    5644:	df 91       	pop	r29
    5646:	cf 91       	pop	r28
    5648:	08 95       	ret

0000564a <sleepmgr_lock_mode>:
    564a:	cf 93       	push	r28
    564c:	df 93       	push	r29
    564e:	00 d0       	rcall	.+0      	; 0x5650 <sleepmgr_lock_mode+0x6>
    5650:	cd b7       	in	r28, 0x3d	; 61
    5652:	de b7       	in	r29, 0x3e	; 62
    5654:	8a 83       	std	Y+2, r24	; 0x02
    5656:	da df       	rcall	.-76     	; 0x560c <cpu_irq_save>
    5658:	89 83       	std	Y+1, r24	; 0x01
    565a:	8a 81       	ldd	r24, Y+2	; 0x02
    565c:	88 2f       	mov	r24, r24
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	9c 01       	movw	r18, r24
    5662:	2d 58       	subi	r18, 0x8D	; 141
    5664:	37 4d       	sbci	r19, 0xD7	; 215
    5666:	f9 01       	movw	r30, r18
    5668:	20 81       	ld	r18, Z
    566a:	2f 5f       	subi	r18, 0xFF	; 255
    566c:	8d 58       	subi	r24, 0x8D	; 141
    566e:	97 4d       	sbci	r25, 0xD7	; 215
    5670:	fc 01       	movw	r30, r24
    5672:	20 83       	st	Z, r18
    5674:	89 81       	ldd	r24, Y+1	; 0x01
    5676:	da df       	rcall	.-76     	; 0x562c <cpu_irq_restore>
    5678:	0f 90       	pop	r0
    567a:	0f 90       	pop	r0
    567c:	df 91       	pop	r29
    567e:	cf 91       	pop	r28
    5680:	08 95       	ret

00005682 <adc_enable_clock>:
 * \param adc Pointer to ADC module.
 */
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
    5682:	cf 93       	push	r28
    5684:	df 93       	push	r29
    5686:	00 d0       	rcall	.+0      	; 0x5688 <adc_enable_clock+0x6>
    5688:	cd b7       	in	r28, 0x3d	; 61
    568a:	de b7       	in	r29, 0x3e	; 62
    568c:	89 83       	std	Y+1, r24	; 0x01
    568e:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    5690:	89 81       	ldd	r24, Y+1	; 0x01
    5692:	9a 81       	ldd	r25, Y+2	; 0x02
    5694:	81 15       	cp	r24, r1
    5696:	22 e0       	ldi	r18, 0x02	; 2
    5698:	92 07       	cpc	r25, r18
    569a:	71 f4       	brne	.+28     	; 0x56b8 <adc_enable_clock+0x36>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    569c:	90 91 0e 28 	lds	r25, 0x280E
    56a0:	81 e0       	ldi	r24, 0x01	; 1
    56a2:	99 23       	and	r25, r25
    56a4:	09 f0       	breq	.+2      	; 0x56a8 <adc_enable_clock+0x26>
    56a6:	80 e0       	ldi	r24, 0x00	; 0
    56a8:	9f 5f       	subi	r25, 0xFF	; 255
    56aa:	90 93 0e 28 	sts	0x280E, r25
    56ae:	88 23       	and	r24, r24
    56b0:	19 f0       	breq	.+6      	; 0x56b8 <adc_enable_clock+0x36>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    56b2:	62 e0       	ldi	r22, 0x02	; 2
    56b4:	81 e0       	ldi	r24, 0x01	; 1
    56b6:	64 df       	rcall	.-312    	; 0x5580 <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
    56b8:	0f 90       	pop	r0
    56ba:	0f 90       	pop	r0
    56bc:	df 91       	pop	r29
    56be:	cf 91       	pop	r28
    56c0:	08 95       	ret

000056c2 <adc_disable_clock>:
 * \param adc Pointer to ADC module
 */
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
    56c2:	cf 93       	push	r28
    56c4:	df 93       	push	r29
    56c6:	00 d0       	rcall	.+0      	; 0x56c8 <adc_disable_clock+0x6>
    56c8:	cd b7       	in	r28, 0x3d	; 61
    56ca:	de b7       	in	r29, 0x3e	; 62
    56cc:	89 83       	std	Y+1, r24	; 0x01
    56ce:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    56d0:	89 81       	ldd	r24, Y+1	; 0x01
    56d2:	9a 81       	ldd	r25, Y+2	; 0x02
    56d4:	81 15       	cp	r24, r1
    56d6:	22 e0       	ldi	r18, 0x02	; 2
    56d8:	92 07       	cpc	r25, r18
    56da:	61 f4       	brne	.+24     	; 0x56f4 <adc_disable_clock+0x32>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    56dc:	80 91 0e 28 	lds	r24, 0x280E
    56e0:	81 50       	subi	r24, 0x01	; 1
    56e2:	80 93 0e 28 	sts	0x280E, r24
    56e6:	80 91 0e 28 	lds	r24, 0x280E
    56ea:	88 23       	and	r24, r24
    56ec:	19 f4       	brne	.+6      	; 0x56f4 <adc_disable_clock+0x32>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    56ee:	62 e0       	ldi	r22, 0x02	; 2
    56f0:	81 e0       	ldi	r24, 0x01	; 1
    56f2:	6a df       	rcall	.-300    	; 0x55c8 <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
    56f4:	0f 90       	pop	r0
    56f6:	0f 90       	pop	r0
    56f8:	df 91       	pop	r29
    56fa:	cf 91       	pop	r28
    56fc:	08 95       	ret

000056fe <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    56fe:	cf 93       	push	r28
    5700:	df 93       	push	r29
    5702:	00 d0       	rcall	.+0      	; 0x5704 <adc_enable+0x6>
    5704:	1f 92       	push	r1
    5706:	cd b7       	in	r28, 0x3d	; 61
    5708:	de b7       	in	r29, 0x3e	; 62
    570a:	8a 83       	std	Y+2, r24	; 0x02
    570c:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
    570e:	7e df       	rcall	.-260    	; 0x560c <cpu_irq_save>
    5710:	89 83       	std	Y+1, r24	; 0x01
	adc_enable_clock(adc);
    5712:	8a 81       	ldd	r24, Y+2	; 0x02
    5714:	9b 81       	ldd	r25, Y+3	; 0x03
    5716:	b5 df       	rcall	.-150    	; 0x5682 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    5718:	8a 81       	ldd	r24, Y+2	; 0x02
    571a:	9b 81       	ldd	r25, Y+3	; 0x03
    571c:	fc 01       	movw	r30, r24
    571e:	80 81       	ld	r24, Z
    5720:	28 2f       	mov	r18, r24
    5722:	21 60       	ori	r18, 0x01	; 1
    5724:	8a 81       	ldd	r24, Y+2	; 0x02
    5726:	9b 81       	ldd	r25, Y+3	; 0x03
    5728:	fc 01       	movw	r30, r24
    572a:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    572c:	89 81       	ldd	r24, Y+1	; 0x01
    572e:	7e df       	rcall	.-260    	; 0x562c <cpu_irq_restore>

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
    5730:	81 e0       	ldi	r24, 0x01	; 1
    5732:	8b df       	rcall	.-234    	; 0x564a <sleepmgr_lock_mode>
}
    5734:	23 96       	adiw	r28, 0x03	; 3
    5736:	cd bf       	out	0x3d, r28	; 61
    5738:	de bf       	out	0x3e, r29	; 62
    573a:	df 91       	pop	r29
    573c:	cf 91       	pop	r28
    573e:	08 95       	ret

00005740 <cpu_irq_save>:
    5740:	cf 93       	push	r28
    5742:	df 93       	push	r29
    5744:	1f 92       	push	r1
    5746:	cd b7       	in	r28, 0x3d	; 61
    5748:	de b7       	in	r29, 0x3e	; 62
    574a:	8f e3       	ldi	r24, 0x3F	; 63
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	fc 01       	movw	r30, r24
    5750:	80 81       	ld	r24, Z
    5752:	89 83       	std	Y+1, r24	; 0x01
    5754:	f8 94       	cli
    5756:	89 81       	ldd	r24, Y+1	; 0x01
    5758:	0f 90       	pop	r0
    575a:	df 91       	pop	r29
    575c:	cf 91       	pop	r28
    575e:	08 95       	ret

00005760 <cpu_irq_restore>:
    5760:	cf 93       	push	r28
    5762:	df 93       	push	r29
    5764:	1f 92       	push	r1
    5766:	cd b7       	in	r28, 0x3d	; 61
    5768:	de b7       	in	r29, 0x3e	; 62
    576a:	89 83       	std	Y+1, r24	; 0x01
    576c:	8f e3       	ldi	r24, 0x3F	; 63
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	29 81       	ldd	r18, Y+1	; 0x01
    5772:	fc 01       	movw	r30, r24
    5774:	20 83       	st	Z, r18
    5776:	0f 90       	pop	r0
    5778:	df 91       	pop	r29
    577a:	cf 91       	pop	r28
    577c:	08 95       	ret

0000577e <nvm_read_production_signature_row>:
    577e:	cf 93       	push	r28
    5780:	df 93       	push	r29
    5782:	1f 92       	push	r1
    5784:	cd b7       	in	r28, 0x3d	; 61
    5786:	de b7       	in	r29, 0x3e	; 62
    5788:	89 83       	std	Y+1, r24	; 0x01
    578a:	89 81       	ldd	r24, Y+1	; 0x01
    578c:	88 2f       	mov	r24, r24
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	bc 01       	movw	r22, r24
    5792:	82 e0       	ldi	r24, 0x02	; 2
    5794:	2d d3       	rcall	.+1626   	; 0x5df0 <nvm_read_byte>
    5796:	0f 90       	pop	r0
    5798:	df 91       	pop	r29
    579a:	cf 91       	pop	r28
    579c:	08 95       	ret

0000579e <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
    579e:	cf 93       	push	r28
    57a0:	df 93       	push	r29
    57a2:	00 d0       	rcall	.+0      	; 0x57a4 <adc_get_calibration_data+0x6>
    57a4:	1f 92       	push	r1
    57a6:	cd b7       	in	r28, 0x3d	; 61
    57a8:	de b7       	in	r29, 0x3e	; 62
    57aa:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
    57ac:	8b 81       	ldd	r24, Y+3	; 0x03
    57ae:	88 2f       	mov	r24, r24
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	00 97       	sbiw	r24, 0x00	; 0
    57b4:	21 f0       	breq	.+8      	; 0x57be <adc_get_calibration_data+0x20>
    57b6:	82 30       	cpi	r24, 0x02	; 2
    57b8:	91 05       	cpc	r25, r1
    57ba:	c1 f0       	breq	.+48     	; 0x57ec <adc_get_calibration_data+0x4e>
    57bc:	2e c0       	rjmp	.+92     	; 0x581a <adc_get_calibration_data+0x7c>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    57be:	81 e2       	ldi	r24, 0x21	; 33
    57c0:	de df       	rcall	.-68     	; 0x577e <nvm_read_production_signature_row>
    57c2:	88 2f       	mov	r24, r24
    57c4:	90 e0       	ldi	r25, 0x00	; 0
    57c6:	89 83       	std	Y+1, r24	; 0x01
    57c8:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    57ca:	89 81       	ldd	r24, Y+1	; 0x01
    57cc:	9a 81       	ldd	r25, Y+2	; 0x02
    57ce:	98 2f       	mov	r25, r24
    57d0:	88 27       	eor	r24, r24
    57d2:	89 83       	std	Y+1, r24	; 0x01
    57d4:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
    57d6:	80 e2       	ldi	r24, 0x20	; 32
    57d8:	d2 df       	rcall	.-92     	; 0x577e <nvm_read_production_signature_row>
    57da:	88 2f       	mov	r24, r24
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	29 81       	ldd	r18, Y+1	; 0x01
    57e0:	3a 81       	ldd	r19, Y+2	; 0x02
    57e2:	82 2b       	or	r24, r18
    57e4:	93 2b       	or	r25, r19
    57e6:	89 83       	std	Y+1, r24	; 0x01
    57e8:	9a 83       	std	Y+2, r25	; 0x02
		break;
    57ea:	19 c0       	rjmp	.+50     	; 0x581e <adc_get_calibration_data+0x80>
		break;
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
    57ec:	8f e2       	ldi	r24, 0x2F	; 47
    57ee:	c7 df       	rcall	.-114    	; 0x577e <nvm_read_production_signature_row>
    57f0:	88 2f       	mov	r24, r24
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	89 83       	std	Y+1, r24	; 0x01
    57f6:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    57f8:	89 81       	ldd	r24, Y+1	; 0x01
    57fa:	9a 81       	ldd	r25, Y+2	; 0x02
    57fc:	98 2f       	mov	r25, r24
    57fe:	88 27       	eor	r24, r24
    5800:	89 83       	std	Y+1, r24	; 0x01
    5802:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(TEMPSENSE0);
    5804:	8e e2       	ldi	r24, 0x2E	; 46
    5806:	bb df       	rcall	.-138    	; 0x577e <nvm_read_production_signature_row>
    5808:	88 2f       	mov	r24, r24
    580a:	90 e0       	ldi	r25, 0x00	; 0
    580c:	29 81       	ldd	r18, Y+1	; 0x01
    580e:	3a 81       	ldd	r19, Y+2	; 0x02
    5810:	82 2b       	or	r24, r18
    5812:	93 2b       	or	r25, r19
    5814:	89 83       	std	Y+1, r24	; 0x01
    5816:	9a 83       	std	Y+2, r25	; 0x02
		break;
    5818:	02 c0       	rjmp	.+4      	; 0x581e <adc_get_calibration_data+0x80>
#endif

	default:
		Assert(0);
		data = 0;
    581a:	19 82       	std	Y+1, r1	; 0x01
    581c:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
    581e:	89 81       	ldd	r24, Y+1	; 0x01
    5820:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5822:	23 96       	adiw	r28, 0x03	; 3
    5824:	cd bf       	out	0x3d, r28	; 61
    5826:	de bf       	out	0x3e, r29	; 62
    5828:	df 91       	pop	r29
    582a:	cf 91       	pop	r28
    582c:	08 95       	ret

0000582e <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    582e:	cf 93       	push	r28
    5830:	df 93       	push	r29
    5832:	cd b7       	in	r28, 0x3d	; 61
    5834:	de b7       	in	r29, 0x3e	; 62
    5836:	28 97       	sbiw	r28, 0x08	; 8
    5838:	cd bf       	out	0x3d, r28	; 61
    583a:	de bf       	out	0x3e, r29	; 62
    583c:	8d 83       	std	Y+5, r24	; 0x05
    583e:	9e 83       	std	Y+6, r25	; 0x06
    5840:	6f 83       	std	Y+7, r22	; 0x07
    5842:	78 87       	std	Y+8, r23	; 0x08
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    5844:	8d 81       	ldd	r24, Y+5	; 0x05
    5846:	9e 81       	ldd	r25, Y+6	; 0x06
    5848:	81 15       	cp	r24, r1
    584a:	22 e0       	ldi	r18, 0x02	; 2
    584c:	92 07       	cpc	r25, r18
    584e:	09 f0       	breq	.+2      	; 0x5852 <adc_write_configuration+0x24>
    5850:	50 c0       	rjmp	.+160    	; 0x58f2 <adc_write_configuration+0xc4>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
    5852:	80 e0       	ldi	r24, 0x00	; 0
    5854:	a4 df       	rcall	.-184    	; 0x579e <adc_get_calibration_data>
    5856:	89 83       	std	Y+1, r24	; 0x01
    5858:	9a 83       	std	Y+2, r25	; 0x02
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
    585a:	72 df       	rcall	.-284    	; 0x5740 <cpu_irq_save>
    585c:	8b 83       	std	Y+3, r24	; 0x03
	adc_enable_clock(adc);
    585e:	8d 81       	ldd	r24, Y+5	; 0x05
    5860:	9e 81       	ldd	r25, Y+6	; 0x06
    5862:	0f df       	rcall	.-482    	; 0x5682 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    5864:	8d 81       	ldd	r24, Y+5	; 0x05
    5866:	9e 81       	ldd	r25, Y+6	; 0x06
    5868:	fc 01       	movw	r30, r24
    586a:	80 81       	ld	r24, Z
    586c:	81 70       	andi	r24, 0x01	; 1
    586e:	8c 83       	std	Y+4, r24	; 0x04

	adc->CTRLA = ADC_FLUSH_bm;
    5870:	8d 81       	ldd	r24, Y+5	; 0x05
    5872:	9e 81       	ldd	r25, Y+6	; 0x06
    5874:	22 e0       	ldi	r18, 0x02	; 2
    5876:	fc 01       	movw	r30, r24
    5878:	20 83       	st	Z, r18
	adc->CAL = cal;
    587a:	8d 81       	ldd	r24, Y+5	; 0x05
    587c:	9e 81       	ldd	r25, Y+6	; 0x06
    587e:	29 81       	ldd	r18, Y+1	; 0x01
    5880:	3a 81       	ldd	r19, Y+2	; 0x02
    5882:	fc 01       	movw	r30, r24
    5884:	24 87       	std	Z+12, r18	; 0x0c
    5886:	35 87       	std	Z+13, r19	; 0x0d
	adc->CMP = conf->cmp;
    5888:	8f 81       	ldd	r24, Y+7	; 0x07
    588a:	98 85       	ldd	r25, Y+8	; 0x08
    588c:	fc 01       	movw	r30, r24
    588e:	24 81       	ldd	r18, Z+4	; 0x04
    5890:	35 81       	ldd	r19, Z+5	; 0x05
    5892:	8d 81       	ldd	r24, Y+5	; 0x05
    5894:	9e 81       	ldd	r25, Y+6	; 0x06
    5896:	fc 01       	movw	r30, r24
    5898:	20 8f       	std	Z+24, r18	; 0x18
    589a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    589c:	8f 81       	ldd	r24, Y+7	; 0x07
    589e:	98 85       	ldd	r25, Y+8	; 0x08
    58a0:	fc 01       	movw	r30, r24
    58a2:	21 81       	ldd	r18, Z+1	; 0x01
    58a4:	8d 81       	ldd	r24, Y+5	; 0x05
    58a6:	9e 81       	ldd	r25, Y+6	; 0x06
    58a8:	fc 01       	movw	r30, r24
    58aa:	22 83       	std	Z+2, r18	; 0x02
	adc->PRESCALER = conf->prescaler;
    58ac:	8f 81       	ldd	r24, Y+7	; 0x07
    58ae:	98 85       	ldd	r25, Y+8	; 0x08
    58b0:	fc 01       	movw	r30, r24
    58b2:	23 81       	ldd	r18, Z+3	; 0x03
    58b4:	8d 81       	ldd	r24, Y+5	; 0x05
    58b6:	9e 81       	ldd	r25, Y+6	; 0x06
    58b8:	fc 01       	movw	r30, r24
    58ba:	24 83       	std	Z+4, r18	; 0x04
	adc->EVCTRL = conf->evctrl;
    58bc:	8f 81       	ldd	r24, Y+7	; 0x07
    58be:	98 85       	ldd	r25, Y+8	; 0x08
    58c0:	fc 01       	movw	r30, r24
    58c2:	22 81       	ldd	r18, Z+2	; 0x02
    58c4:	8d 81       	ldd	r24, Y+5	; 0x05
    58c6:	9e 81       	ldd	r25, Y+6	; 0x06
    58c8:	fc 01       	movw	r30, r24
    58ca:	23 83       	std	Z+3, r18	; 0x03
	adc->CTRLB = conf->ctrlb;
    58cc:	8f 81       	ldd	r24, Y+7	; 0x07
    58ce:	98 85       	ldd	r25, Y+8	; 0x08
    58d0:	fc 01       	movw	r30, r24
    58d2:	20 81       	ld	r18, Z
    58d4:	8d 81       	ldd	r24, Y+5	; 0x05
    58d6:	9e 81       	ldd	r25, Y+6	; 0x06
    58d8:	fc 01       	movw	r30, r24
    58da:	21 83       	std	Z+1, r18	; 0x01

	adc->CTRLA = enable;
    58dc:	8d 81       	ldd	r24, Y+5	; 0x05
    58de:	9e 81       	ldd	r25, Y+6	; 0x06
    58e0:	2c 81       	ldd	r18, Y+4	; 0x04
    58e2:	fc 01       	movw	r30, r24
    58e4:	20 83       	st	Z, r18

	adc_disable_clock(adc);
    58e6:	8d 81       	ldd	r24, Y+5	; 0x05
    58e8:	9e 81       	ldd	r25, Y+6	; 0x06
    58ea:	eb de       	rcall	.-554    	; 0x56c2 <adc_disable_clock>

	cpu_irq_restore(flags);
    58ec:	8b 81       	ldd	r24, Y+3	; 0x03
    58ee:	38 df       	rcall	.-400    	; 0x5760 <cpu_irq_restore>
    58f0:	01 c0       	rjmp	.+2      	; 0x58f4 <adc_write_configuration+0xc6>
	} else
#endif

	{
		Assert(0);
		return;
    58f2:	00 00       	nop
	adc->CTRLA = enable;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
    58f4:	28 96       	adiw	r28, 0x08	; 8
    58f6:	cd bf       	out	0x3d, r28	; 61
    58f8:	de bf       	out	0x3e, r29	; 62
    58fa:	df 91       	pop	r29
    58fc:	cf 91       	pop	r28
    58fe:	08 95       	ret

00005900 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    5900:	cf 93       	push	r28
    5902:	df 93       	push	r29
    5904:	cd b7       	in	r28, 0x3d	; 61
    5906:	de b7       	in	r29, 0x3e	; 62
    5908:	25 97       	sbiw	r28, 0x05	; 5
    590a:	cd bf       	out	0x3d, r28	; 61
    590c:	de bf       	out	0x3e, r29	; 62
    590e:	8a 83       	std	Y+2, r24	; 0x02
    5910:	9b 83       	std	Y+3, r25	; 0x03
    5912:	6c 83       	std	Y+4, r22	; 0x04
    5914:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags = cpu_irq_save();
    5916:	14 df       	rcall	.-472    	; 0x5740 <cpu_irq_save>
    5918:	89 83       	std	Y+1, r24	; 0x01

	adc_enable_clock(adc);
    591a:	8a 81       	ldd	r24, Y+2	; 0x02
    591c:	9b 81       	ldd	r25, Y+3	; 0x03
    591e:	b1 de       	rcall	.-670    	; 0x5682 <adc_enable_clock>

	conf->cmp = adc->CMP;
    5920:	8a 81       	ldd	r24, Y+2	; 0x02
    5922:	9b 81       	ldd	r25, Y+3	; 0x03
    5924:	fc 01       	movw	r30, r24
    5926:	20 8d       	ldd	r18, Z+24	; 0x18
    5928:	31 8d       	ldd	r19, Z+25	; 0x19
    592a:	8c 81       	ldd	r24, Y+4	; 0x04
    592c:	9d 81       	ldd	r25, Y+5	; 0x05
    592e:	fc 01       	movw	r30, r24
    5930:	24 83       	std	Z+4, r18	; 0x04
    5932:	35 83       	std	Z+5, r19	; 0x05
	conf->refctrl = adc->REFCTRL;
    5934:	8a 81       	ldd	r24, Y+2	; 0x02
    5936:	9b 81       	ldd	r25, Y+3	; 0x03
    5938:	fc 01       	movw	r30, r24
    593a:	22 81       	ldd	r18, Z+2	; 0x02
    593c:	8c 81       	ldd	r24, Y+4	; 0x04
    593e:	9d 81       	ldd	r25, Y+5	; 0x05
    5940:	fc 01       	movw	r30, r24
    5942:	21 83       	std	Z+1, r18	; 0x01
	conf->prescaler = adc->PRESCALER;
    5944:	8a 81       	ldd	r24, Y+2	; 0x02
    5946:	9b 81       	ldd	r25, Y+3	; 0x03
    5948:	fc 01       	movw	r30, r24
    594a:	24 81       	ldd	r18, Z+4	; 0x04
    594c:	8c 81       	ldd	r24, Y+4	; 0x04
    594e:	9d 81       	ldd	r25, Y+5	; 0x05
    5950:	fc 01       	movw	r30, r24
    5952:	23 83       	std	Z+3, r18	; 0x03
	conf->evctrl = adc->EVCTRL;
    5954:	8a 81       	ldd	r24, Y+2	; 0x02
    5956:	9b 81       	ldd	r25, Y+3	; 0x03
    5958:	fc 01       	movw	r30, r24
    595a:	23 81       	ldd	r18, Z+3	; 0x03
    595c:	8c 81       	ldd	r24, Y+4	; 0x04
    595e:	9d 81       	ldd	r25, Y+5	; 0x05
    5960:	fc 01       	movw	r30, r24
    5962:	22 83       	std	Z+2, r18	; 0x02
	conf->ctrlb = adc->CTRLB;
    5964:	8a 81       	ldd	r24, Y+2	; 0x02
    5966:	9b 81       	ldd	r25, Y+3	; 0x03
    5968:	fc 01       	movw	r30, r24
    596a:	21 81       	ldd	r18, Z+1	; 0x01
    596c:	8c 81       	ldd	r24, Y+4	; 0x04
    596e:	9d 81       	ldd	r25, Y+5	; 0x05
    5970:	fc 01       	movw	r30, r24
    5972:	20 83       	st	Z, r18

	adc_disable_clock(adc);
    5974:	8a 81       	ldd	r24, Y+2	; 0x02
    5976:	9b 81       	ldd	r25, Y+3	; 0x03
    5978:	a4 de       	rcall	.-696    	; 0x56c2 <adc_disable_clock>

	cpu_irq_restore(flags);
    597a:	89 81       	ldd	r24, Y+1	; 0x01
    597c:	f1 de       	rcall	.-542    	; 0x5760 <cpu_irq_restore>
}
    597e:	25 96       	adiw	r28, 0x05	; 5
    5980:	cd bf       	out	0x3d, r28	; 61
    5982:	de bf       	out	0x3e, r29	; 62
    5984:	df 91       	pop	r29
    5986:	cf 91       	pop	r28
    5988:	08 95       	ret

0000598a <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    598a:	cf 93       	push	r28
    598c:	df 93       	push	r29
    598e:	cd b7       	in	r28, 0x3d	; 61
    5990:	de b7       	in	r29, 0x3e	; 62
    5992:	2c 97       	sbiw	r28, 0x0c	; 12
    5994:	cd bf       	out	0x3d, r28	; 61
    5996:	de bf       	out	0x3e, r29	; 62
    5998:	88 87       	std	Y+8, r24	; 0x08
    599a:	99 87       	std	Y+9, r25	; 0x09
    599c:	6a 87       	std	Y+10, r22	; 0x0a
    599e:	4b 87       	std	Y+11, r20	; 0x0b
    59a0:	5c 87       	std	Y+12, r21	; 0x0c
    59a2:	88 85       	ldd	r24, Y+8	; 0x08
    59a4:	99 85       	ldd	r25, Y+9	; 0x09
    59a6:	8c 83       	std	Y+4, r24	; 0x04
    59a8:	9d 83       	std	Y+5, r25	; 0x05
    59aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    59ac:	8f 83       	std	Y+7, r24	; 0x07
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    59ae:	1e 82       	std	Y+6, r1	; 0x06
	if (!(ch_mask & 0x01)) {
		index++;
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    59b0:	8c 81       	ldd	r24, Y+4	; 0x04
    59b2:	9d 81       	ldd	r25, Y+5	; 0x05
    59b4:	9c 01       	movw	r18, r24
    59b6:	20 5e       	subi	r18, 0xE0	; 224
    59b8:	3f 4f       	sbci	r19, 0xFF	; 255
    59ba:	8e 81       	ldd	r24, Y+6	; 0x06
    59bc:	88 2f       	mov	r24, r24
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	88 0f       	add	r24, r24
    59c2:	99 1f       	adc	r25, r25
    59c4:	88 0f       	add	r24, r24
    59c6:	99 1f       	adc	r25, r25
    59c8:	88 0f       	add	r24, r24
    59ca:	99 1f       	adc	r25, r25
    59cc:	82 0f       	add	r24, r18
    59ce:	93 1f       	adc	r25, r19
	ADC_CH_tmpfix_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    59d0:	89 83       	std	Y+1, r24	; 0x01
    59d2:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    59d4:	b5 de       	rcall	.-662    	; 0x5740 <cpu_irq_save>
    59d6:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    59d8:	88 85       	ldd	r24, Y+8	; 0x08
    59da:	99 85       	ldd	r25, Y+9	; 0x09
    59dc:	52 de       	rcall	.-860    	; 0x5682 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    59de:	8b 85       	ldd	r24, Y+11	; 0x0b
    59e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    59e2:	fc 01       	movw	r30, r24
    59e4:	20 81       	ld	r18, Z
    59e6:	89 81       	ldd	r24, Y+1	; 0x01
    59e8:	9a 81       	ldd	r25, Y+2	; 0x02
    59ea:	fc 01       	movw	r30, r24
    59ec:	20 83       	st	Z, r18
	adc_ch->INTCTRL = ch_conf->intctrl;
    59ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    59f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    59f2:	fc 01       	movw	r30, r24
    59f4:	22 81       	ldd	r18, Z+2	; 0x02
    59f6:	89 81       	ldd	r24, Y+1	; 0x01
    59f8:	9a 81       	ldd	r25, Y+2	; 0x02
    59fa:	fc 01       	movw	r30, r24
    59fc:	22 83       	std	Z+2, r18	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    59fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a00:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a02:	fc 01       	movw	r30, r24
    5a04:	21 81       	ldd	r18, Z+1	; 0x01
    5a06:	89 81       	ldd	r24, Y+1	; 0x01
    5a08:	9a 81       	ldd	r25, Y+2	; 0x02
    5a0a:	fc 01       	movw	r30, r24
    5a0c:	21 83       	std	Z+1, r18	; 0x01
	adc_disable_clock(adc);
    5a0e:	88 85       	ldd	r24, Y+8	; 0x08
    5a10:	99 85       	ldd	r25, Y+9	; 0x09
    5a12:	57 de       	rcall	.-850    	; 0x56c2 <adc_disable_clock>

	cpu_irq_restore(flags);
    5a14:	8b 81       	ldd	r24, Y+3	; 0x03
    5a16:	a4 de       	rcall	.-696    	; 0x5760 <cpu_irq_restore>
}
    5a18:	2c 96       	adiw	r28, 0x0c	; 12
    5a1a:	cd bf       	out	0x3d, r28	; 61
    5a1c:	de bf       	out	0x3e, r29	; 62
    5a1e:	df 91       	pop	r29
    5a20:	cf 91       	pop	r28
    5a22:	08 95       	ret

00005a24 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    5a24:	cf 93       	push	r28
    5a26:	df 93       	push	r29
    5a28:	cd b7       	in	r28, 0x3d	; 61
    5a2a:	de b7       	in	r29, 0x3e	; 62
    5a2c:	2c 97       	sbiw	r28, 0x0c	; 12
    5a2e:	cd bf       	out	0x3d, r28	; 61
    5a30:	de bf       	out	0x3e, r29	; 62
    5a32:	88 87       	std	Y+8, r24	; 0x08
    5a34:	99 87       	std	Y+9, r25	; 0x09
    5a36:	6a 87       	std	Y+10, r22	; 0x0a
    5a38:	4b 87       	std	Y+11, r20	; 0x0b
    5a3a:	5c 87       	std	Y+12, r21	; 0x0c
    5a3c:	88 85       	ldd	r24, Y+8	; 0x08
    5a3e:	99 85       	ldd	r25, Y+9	; 0x09
    5a40:	8c 83       	std	Y+4, r24	; 0x04
    5a42:	9d 83       	std	Y+5, r25	; 0x05
    5a44:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a46:	8f 83       	std	Y+7, r24	; 0x07
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    5a48:	1e 82       	std	Y+6, r1	; 0x06
	if (!(ch_mask & 0x01)) {
		index++;
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    5a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    5a4e:	9c 01       	movw	r18, r24
    5a50:	20 5e       	subi	r18, 0xE0	; 224
    5a52:	3f 4f       	sbci	r19, 0xFF	; 255
    5a54:	8e 81       	ldd	r24, Y+6	; 0x06
    5a56:	88 2f       	mov	r24, r24
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	88 0f       	add	r24, r24
    5a5c:	99 1f       	adc	r25, r25
    5a5e:	88 0f       	add	r24, r24
    5a60:	99 1f       	adc	r25, r25
    5a62:	88 0f       	add	r24, r24
    5a64:	99 1f       	adc	r25, r25
    5a66:	82 0f       	add	r24, r18
    5a68:	93 1f       	adc	r25, r19
	ADC_CH_tmpfix_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
    5a6a:	89 83       	std	Y+1, r24	; 0x01
    5a6c:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
    5a6e:	68 de       	rcall	.-816    	; 0x5740 <cpu_irq_save>
    5a70:	8b 83       	std	Y+3, r24	; 0x03

	adc_enable_clock(adc);
    5a72:	88 85       	ldd	r24, Y+8	; 0x08
    5a74:	99 85       	ldd	r25, Y+9	; 0x09
    5a76:	05 de       	rcall	.-1014   	; 0x5682 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    5a78:	89 81       	ldd	r24, Y+1	; 0x01
    5a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a7c:	fc 01       	movw	r30, r24
    5a7e:	20 81       	ld	r18, Z
    5a80:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a82:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a84:	fc 01       	movw	r30, r24
    5a86:	20 83       	st	Z, r18
	ch_conf->intctrl = adc_ch->INTCTRL;
    5a88:	89 81       	ldd	r24, Y+1	; 0x01
    5a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a8c:	fc 01       	movw	r30, r24
    5a8e:	22 81       	ldd	r18, Z+2	; 0x02
    5a90:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a92:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a94:	fc 01       	movw	r30, r24
    5a96:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    5a98:	89 81       	ldd	r24, Y+1	; 0x01
    5a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	21 81       	ldd	r18, Z+1	; 0x01
    5aa0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5aa2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5aa4:	fc 01       	movw	r30, r24
    5aa6:	21 83       	std	Z+1, r18	; 0x01
	adc_disable_clock(adc);
    5aa8:	88 85       	ldd	r24, Y+8	; 0x08
    5aaa:	99 85       	ldd	r25, Y+9	; 0x09
    5aac:	0a de       	rcall	.-1004   	; 0x56c2 <adc_disable_clock>

	cpu_irq_restore(flags);
    5aae:	8b 81       	ldd	r24, Y+3	; 0x03
    5ab0:	57 de       	rcall	.-850    	; 0x5760 <cpu_irq_restore>
}
    5ab2:	2c 96       	adiw	r28, 0x0c	; 12
    5ab4:	cd bf       	out	0x3d, r28	; 61
    5ab6:	de bf       	out	0x3e, r29	; 62
    5ab8:	df 91       	pop	r29
    5aba:	cf 91       	pop	r28
    5abc:	08 95       	ret

00005abe <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    5abe:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    5ac0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    5ac2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    5ac4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    5ac6:	60 83       	st	Z, r22
	ret                             // Return to caller
    5ac8:	08 95       	ret

00005aca <nvm_wait_until_ready>:

	// Set data, which triggers loading of EEPROM page buffer
	NVM.DATA0 = value;

	NVM.CMD = old_cmd;
}
    5aca:	cf 93       	push	r28
    5acc:	df 93       	push	r29
    5ace:	cd b7       	in	r28, 0x3d	; 61
    5ad0:	de b7       	in	r29, 0x3e	; 62
    5ad2:	80 ec       	ldi	r24, 0xC0	; 192
    5ad4:	91 e0       	ldi	r25, 0x01	; 1
    5ad6:	fc 01       	movw	r30, r24
    5ad8:	87 85       	ldd	r24, Z+15	; 0x0f
    5ada:	88 23       	and	r24, r24
    5adc:	d4 f3       	brlt	.-12     	; 0x5ad2 <nvm_wait_until_ready+0x8>
    5ade:	df 91       	pop	r29
    5ae0:	cf 91       	pop	r28
    5ae2:	08 95       	ret

00005ae4 <nvm_exec>:
    5ae4:	cf 93       	push	r28
    5ae6:	df 93       	push	r29
    5ae8:	cd b7       	in	r28, 0x3d	; 61
    5aea:	de b7       	in	r29, 0x3e	; 62
    5aec:	61 e0       	ldi	r22, 0x01	; 1
    5aee:	8b ec       	ldi	r24, 0xCB	; 203
    5af0:	91 e0       	ldi	r25, 0x01	; 1
    5af2:	e5 df       	rcall	.-54     	; 0x5abe <ccp_write_io>
    5af4:	df 91       	pop	r29
    5af6:	cf 91       	pop	r28
    5af8:	08 95       	ret

00005afa <nvm_issue_command>:
    5afa:	cf 93       	push	r28
    5afc:	df 93       	push	r29
    5afe:	00 d0       	rcall	.+0      	; 0x5b00 <nvm_issue_command+0x6>
    5b00:	cd b7       	in	r28, 0x3d	; 61
    5b02:	de b7       	in	r29, 0x3e	; 62
    5b04:	8a 83       	std	Y+2, r24	; 0x02
    5b06:	80 ec       	ldi	r24, 0xC0	; 192
    5b08:	91 e0       	ldi	r25, 0x01	; 1
    5b0a:	fc 01       	movw	r30, r24
    5b0c:	82 85       	ldd	r24, Z+10	; 0x0a
    5b0e:	89 83       	std	Y+1, r24	; 0x01
    5b10:	80 ec       	ldi	r24, 0xC0	; 192
    5b12:	91 e0       	ldi	r25, 0x01	; 1
    5b14:	2a 81       	ldd	r18, Y+2	; 0x02
    5b16:	fc 01       	movw	r30, r24
    5b18:	22 87       	std	Z+10, r18	; 0x0a
    5b1a:	61 e0       	ldi	r22, 0x01	; 1
    5b1c:	8b ec       	ldi	r24, 0xCB	; 203
    5b1e:	91 e0       	ldi	r25, 0x01	; 1
    5b20:	ce df       	rcall	.-100    	; 0x5abe <ccp_write_io>
    5b22:	80 ec       	ldi	r24, 0xC0	; 192
    5b24:	91 e0       	ldi	r25, 0x01	; 1
    5b26:	29 81       	ldd	r18, Y+1	; 0x01
    5b28:	fc 01       	movw	r30, r24
    5b2a:	22 87       	std	Z+10, r18	; 0x0a
    5b2c:	0f 90       	pop	r0
    5b2e:	0f 90       	pop	r0
    5b30:	df 91       	pop	r29
    5b32:	cf 91       	pop	r28
    5b34:	08 95       	ret

00005b36 <eeprom_enable_mapping>:
    5b36:	cf 93       	push	r28
    5b38:	df 93       	push	r29
    5b3a:	cd b7       	in	r28, 0x3d	; 61
    5b3c:	de b7       	in	r29, 0x3e	; 62
    5b3e:	8c ec       	ldi	r24, 0xCC	; 204
    5b40:	91 e0       	ldi	r25, 0x01	; 1
    5b42:	2c ec       	ldi	r18, 0xCC	; 204
    5b44:	31 e0       	ldi	r19, 0x01	; 1
    5b46:	f9 01       	movw	r30, r18
    5b48:	20 81       	ld	r18, Z
    5b4a:	28 60       	ori	r18, 0x08	; 8
    5b4c:	fc 01       	movw	r30, r24
    5b4e:	20 83       	st	Z, r18
    5b50:	df 91       	pop	r29
    5b52:	cf 91       	pop	r28
    5b54:	08 95       	ret

00005b56 <eeprom_disable_mapping>:
    5b56:	cf 93       	push	r28
    5b58:	df 93       	push	r29
    5b5a:	cd b7       	in	r28, 0x3d	; 61
    5b5c:	de b7       	in	r29, 0x3e	; 62
    5b5e:	8c ec       	ldi	r24, 0xCC	; 204
    5b60:	91 e0       	ldi	r25, 0x01	; 1
    5b62:	2c ec       	ldi	r18, 0xCC	; 204
    5b64:	31 e0       	ldi	r19, 0x01	; 1
    5b66:	f9 01       	movw	r30, r18
    5b68:	20 81       	ld	r18, Z
    5b6a:	27 7f       	andi	r18, 0xF7	; 247
    5b6c:	fc 01       	movw	r30, r24
    5b6e:	20 83       	st	Z, r18
    5b70:	df 91       	pop	r29
    5b72:	cf 91       	pop	r28
    5b74:	08 95       	ret

00005b76 <nvm_eeprom_read_buffer>:
    5b76:	cf 93       	push	r28
    5b78:	df 93       	push	r29
    5b7a:	cd b7       	in	r28, 0x3d	; 61
    5b7c:	de b7       	in	r29, 0x3e	; 62
    5b7e:	26 97       	sbiw	r28, 0x06	; 6
    5b80:	cd bf       	out	0x3d, r28	; 61
    5b82:	de bf       	out	0x3e, r29	; 62
    5b84:	89 83       	std	Y+1, r24	; 0x01
    5b86:	9a 83       	std	Y+2, r25	; 0x02
    5b88:	6b 83       	std	Y+3, r22	; 0x03
    5b8a:	7c 83       	std	Y+4, r23	; 0x04
    5b8c:	4d 83       	std	Y+5, r20	; 0x05
    5b8e:	5e 83       	std	Y+6, r21	; 0x06
    5b90:	9c df       	rcall	.-200    	; 0x5aca <nvm_wait_until_ready>
    5b92:	d1 df       	rcall	.-94     	; 0x5b36 <eeprom_enable_mapping>
    5b94:	89 81       	ldd	r24, Y+1	; 0x01
    5b96:	9a 81       	ldd	r25, Y+2	; 0x02
    5b98:	90 5f       	subi	r25, 0xF0	; 240
    5b9a:	9c 01       	movw	r18, r24
    5b9c:	4d 81       	ldd	r20, Y+5	; 0x05
    5b9e:	5e 81       	ldd	r21, Y+6	; 0x06
    5ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    5ba4:	b9 01       	movw	r22, r18
    5ba6:	0e 94 6d 48 	call	0x90da	; 0x90da <memcpy>
    5baa:	d5 df       	rcall	.-86     	; 0x5b56 <eeprom_disable_mapping>
    5bac:	26 96       	adiw	r28, 0x06	; 6
    5bae:	cd bf       	out	0x3d, r28	; 61
    5bb0:	de bf       	out	0x3e, r29	; 62
    5bb2:	df 91       	pop	r29
    5bb4:	cf 91       	pop	r28
    5bb6:	08 95       	ret

00005bb8 <nvm_eeprom_write_byte>:
    5bb8:	cf 93       	push	r28
    5bba:	df 93       	push	r29
    5bbc:	00 d0       	rcall	.+0      	; 0x5bbe <nvm_eeprom_write_byte+0x6>
    5bbe:	00 d0       	rcall	.+0      	; 0x5bc0 <nvm_eeprom_write_byte+0x8>
    5bc0:	cd b7       	in	r28, 0x3d	; 61
    5bc2:	de b7       	in	r29, 0x3e	; 62
    5bc4:	8a 83       	std	Y+2, r24	; 0x02
    5bc6:	9b 83       	std	Y+3, r25	; 0x03
    5bc8:	6c 83       	std	Y+4, r22	; 0x04
    5bca:	80 ec       	ldi	r24, 0xC0	; 192
    5bcc:	91 e0       	ldi	r25, 0x01	; 1
    5bce:	fc 01       	movw	r30, r24
    5bd0:	82 85       	ldd	r24, Z+10	; 0x0a
    5bd2:	89 83       	std	Y+1, r24	; 0x01
    5bd4:	87 d0       	rcall	.+270    	; 0x5ce4 <nvm_eeprom_flush_buffer>
    5bd6:	79 df       	rcall	.-270    	; 0x5aca <nvm_wait_until_ready>
    5bd8:	80 ec       	ldi	r24, 0xC0	; 192
    5bda:	91 e0       	ldi	r25, 0x01	; 1
    5bdc:	23 e3       	ldi	r18, 0x33	; 51
    5bde:	fc 01       	movw	r30, r24
    5be0:	22 87       	std	Z+10, r18	; 0x0a
    5be2:	80 ec       	ldi	r24, 0xC0	; 192
    5be4:	91 e0       	ldi	r25, 0x01	; 1
    5be6:	fc 01       	movw	r30, r24
    5be8:	12 82       	std	Z+2, r1	; 0x02
    5bea:	80 ec       	ldi	r24, 0xC0	; 192
    5bec:	91 e0       	ldi	r25, 0x01	; 1
    5bee:	2a 81       	ldd	r18, Y+2	; 0x02
    5bf0:	3b 81       	ldd	r19, Y+3	; 0x03
    5bf2:	23 2f       	mov	r18, r19
    5bf4:	33 27       	eor	r19, r19
    5bf6:	fc 01       	movw	r30, r24
    5bf8:	21 83       	std	Z+1, r18	; 0x01
    5bfa:	80 ec       	ldi	r24, 0xC0	; 192
    5bfc:	91 e0       	ldi	r25, 0x01	; 1
    5bfe:	2a 81       	ldd	r18, Y+2	; 0x02
    5c00:	fc 01       	movw	r30, r24
    5c02:	20 83       	st	Z, r18
    5c04:	80 ec       	ldi	r24, 0xC0	; 192
    5c06:	91 e0       	ldi	r25, 0x01	; 1
    5c08:	2c 81       	ldd	r18, Y+4	; 0x04
    5c0a:	fc 01       	movw	r30, r24
    5c0c:	24 83       	std	Z+4, r18	; 0x04
    5c0e:	80 ec       	ldi	r24, 0xC0	; 192
    5c10:	91 e0       	ldi	r25, 0x01	; 1
    5c12:	25 e3       	ldi	r18, 0x35	; 53
    5c14:	fc 01       	movw	r30, r24
    5c16:	22 87       	std	Z+10, r18	; 0x0a
    5c18:	65 df       	rcall	.-310    	; 0x5ae4 <nvm_exec>
    5c1a:	80 ec       	ldi	r24, 0xC0	; 192
    5c1c:	91 e0       	ldi	r25, 0x01	; 1
    5c1e:	29 81       	ldd	r18, Y+1	; 0x01
    5c20:	fc 01       	movw	r30, r24
    5c22:	22 87       	std	Z+10, r18	; 0x0a
    5c24:	24 96       	adiw	r28, 0x04	; 4
    5c26:	cd bf       	out	0x3d, r28	; 61
    5c28:	de bf       	out	0x3e, r29	; 62
    5c2a:	df 91       	pop	r29
    5c2c:	cf 91       	pop	r28
    5c2e:	08 95       	ret

00005c30 <nvm_eeprom_erase_and_write_buffer>:
    5c30:	cf 93       	push	r28
    5c32:	df 93       	push	r29
    5c34:	cd b7       	in	r28, 0x3d	; 61
    5c36:	de b7       	in	r29, 0x3e	; 62
    5c38:	26 97       	sbiw	r28, 0x06	; 6
    5c3a:	cd bf       	out	0x3d, r28	; 61
    5c3c:	de bf       	out	0x3e, r29	; 62
    5c3e:	89 83       	std	Y+1, r24	; 0x01
    5c40:	9a 83       	std	Y+2, r25	; 0x02
    5c42:	6b 83       	std	Y+3, r22	; 0x03
    5c44:	7c 83       	std	Y+4, r23	; 0x04
    5c46:	4d 83       	std	Y+5, r20	; 0x05
    5c48:	5e 83       	std	Y+6, r21	; 0x06
    5c4a:	41 c0       	rjmp	.+130    	; 0x5cce <nvm_eeprom_erase_and_write_buffer+0x9e>
    5c4c:	89 81       	ldd	r24, Y+1	; 0x01
    5c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c50:	8f 71       	andi	r24, 0x1F	; 31
    5c52:	99 27       	eor	r25, r25
    5c54:	00 97       	sbiw	r24, 0x00	; 0
    5c56:	19 f5       	brne	.+70     	; 0x5c9e <nvm_eeprom_erase_and_write_buffer+0x6e>
    5c58:	8d 81       	ldd	r24, Y+5	; 0x05
    5c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    5c5c:	80 32       	cpi	r24, 0x20	; 32
    5c5e:	91 05       	cpc	r25, r1
    5c60:	f0 f0       	brcs	.+60     	; 0x5c9e <nvm_eeprom_erase_and_write_buffer+0x6e>
    5c62:	8b 81       	ldd	r24, Y+3	; 0x03
    5c64:	9c 81       	ldd	r25, Y+4	; 0x04
    5c66:	56 d0       	rcall	.+172    	; 0x5d14 <nvm_eeprom_load_page_to_buffer>
    5c68:	89 81       	ldd	r24, Y+1	; 0x01
    5c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c6c:	96 95       	lsr	r25
    5c6e:	87 95       	ror	r24
    5c70:	92 95       	swap	r25
    5c72:	82 95       	swap	r24
    5c74:	8f 70       	andi	r24, 0x0F	; 15
    5c76:	89 27       	eor	r24, r25
    5c78:	9f 70       	andi	r25, 0x0F	; 15
    5c7a:	89 27       	eor	r24, r25
    5c7c:	8b d0       	rcall	.+278    	; 0x5d94 <nvm_eeprom_atomic_write_page>
    5c7e:	89 81       	ldd	r24, Y+1	; 0x01
    5c80:	9a 81       	ldd	r25, Y+2	; 0x02
    5c82:	80 96       	adiw	r24, 0x20	; 32
    5c84:	89 83       	std	Y+1, r24	; 0x01
    5c86:	9a 83       	std	Y+2, r25	; 0x02
    5c88:	8b 81       	ldd	r24, Y+3	; 0x03
    5c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    5c8c:	80 96       	adiw	r24, 0x20	; 32
    5c8e:	8b 83       	std	Y+3, r24	; 0x03
    5c90:	9c 83       	std	Y+4, r25	; 0x04
    5c92:	8d 81       	ldd	r24, Y+5	; 0x05
    5c94:	9e 81       	ldd	r25, Y+6	; 0x06
    5c96:	80 97       	sbiw	r24, 0x20	; 32
    5c98:	8d 83       	std	Y+5, r24	; 0x05
    5c9a:	9e 83       	std	Y+6, r25	; 0x06
    5c9c:	18 c0       	rjmp	.+48     	; 0x5cce <nvm_eeprom_erase_and_write_buffer+0x9e>
    5c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    5ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    5ca2:	fc 01       	movw	r30, r24
    5ca4:	40 81       	ld	r20, Z
    5ca6:	89 81       	ldd	r24, Y+1	; 0x01
    5ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    5caa:	29 81       	ldd	r18, Y+1	; 0x01
    5cac:	3a 81       	ldd	r19, Y+2	; 0x02
    5cae:	2f 5f       	subi	r18, 0xFF	; 255
    5cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    5cb2:	29 83       	std	Y+1, r18	; 0x01
    5cb4:	3a 83       	std	Y+2, r19	; 0x02
    5cb6:	64 2f       	mov	r22, r20
    5cb8:	7f df       	rcall	.-258    	; 0x5bb8 <nvm_eeprom_write_byte>
    5cba:	8b 81       	ldd	r24, Y+3	; 0x03
    5cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    5cbe:	01 96       	adiw	r24, 0x01	; 1
    5cc0:	8b 83       	std	Y+3, r24	; 0x03
    5cc2:	9c 83       	std	Y+4, r25	; 0x04
    5cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    5cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    5cc8:	01 97       	sbiw	r24, 0x01	; 1
    5cca:	8d 83       	std	Y+5, r24	; 0x05
    5ccc:	9e 83       	std	Y+6, r25	; 0x06
    5cce:	8d 81       	ldd	r24, Y+5	; 0x05
    5cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    5cd2:	00 97       	sbiw	r24, 0x00	; 0
    5cd4:	09 f0       	breq	.+2      	; 0x5cd8 <nvm_eeprom_erase_and_write_buffer+0xa8>
    5cd6:	ba cf       	rjmp	.-140    	; 0x5c4c <nvm_eeprom_erase_and_write_buffer+0x1c>
    5cd8:	26 96       	adiw	r28, 0x06	; 6
    5cda:	cd bf       	out	0x3d, r28	; 61
    5cdc:	de bf       	out	0x3e, r29	; 62
    5cde:	df 91       	pop	r29
    5ce0:	cf 91       	pop	r28
    5ce2:	08 95       	ret

00005ce4 <nvm_eeprom_flush_buffer>:
    5ce4:	cf 93       	push	r28
    5ce6:	df 93       	push	r29
    5ce8:	cd b7       	in	r28, 0x3d	; 61
    5cea:	de b7       	in	r29, 0x3e	; 62
    5cec:	ee de       	rcall	.-548    	; 0x5aca <nvm_wait_until_ready>
    5cee:	80 ec       	ldi	r24, 0xC0	; 192
    5cf0:	91 e0       	ldi	r25, 0x01	; 1
    5cf2:	fc 01       	movw	r30, r24
    5cf4:	87 85       	ldd	r24, Z+15	; 0x0f
    5cf6:	88 2f       	mov	r24, r24
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	82 70       	andi	r24, 0x02	; 2
    5cfc:	99 27       	eor	r25, r25
    5cfe:	00 97       	sbiw	r24, 0x00	; 0
    5d00:	31 f0       	breq	.+12     	; 0x5d0e <nvm_eeprom_flush_buffer+0x2a>
    5d02:	80 ec       	ldi	r24, 0xC0	; 192
    5d04:	91 e0       	ldi	r25, 0x01	; 1
    5d06:	26 e3       	ldi	r18, 0x36	; 54
    5d08:	fc 01       	movw	r30, r24
    5d0a:	22 87       	std	Z+10, r18	; 0x0a
    5d0c:	eb de       	rcall	.-554    	; 0x5ae4 <nvm_exec>
    5d0e:	df 91       	pop	r29
    5d10:	cf 91       	pop	r28
    5d12:	08 95       	ret

00005d14 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    5d14:	cf 93       	push	r28
    5d16:	df 93       	push	r29
    5d18:	00 d0       	rcall	.+0      	; 0x5d1a <nvm_eeprom_load_page_to_buffer+0x6>
    5d1a:	00 d0       	rcall	.+0      	; 0x5d1c <nvm_eeprom_load_page_to_buffer+0x8>
    5d1c:	cd b7       	in	r28, 0x3d	; 61
    5d1e:	de b7       	in	r29, 0x3e	; 62
    5d20:	8b 83       	std	Y+3, r24	; 0x03
    5d22:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t old_cmd;
	old_cmd = NVM.CMD;
    5d24:	80 ec       	ldi	r24, 0xC0	; 192
    5d26:	91 e0       	ldi	r25, 0x01	; 1
    5d28:	fc 01       	movw	r30, r24
    5d2a:	82 85       	ldd	r24, Z+10	; 0x0a
    5d2c:	8a 83       	std	Y+2, r24	; 0x02

	// Wait until NVM is ready
	nvm_wait_until_ready();
    5d2e:	cd de       	rcall	.-614    	; 0x5aca <nvm_wait_until_ready>

	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5d30:	80 ec       	ldi	r24, 0xC0	; 192
    5d32:	91 e0       	ldi	r25, 0x01	; 1
    5d34:	23 e3       	ldi	r18, 0x33	; 51
    5d36:	fc 01       	movw	r30, r24
    5d38:	22 87       	std	Z+10, r18	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR2 = 0x00;
    5d3a:	80 ec       	ldi	r24, 0xC0	; 192
    5d3c:	91 e0       	ldi	r25, 0x01	; 1
    5d3e:	fc 01       	movw	r30, r24
    5d40:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = 0x00;
    5d42:	80 ec       	ldi	r24, 0xC0	; 192
    5d44:	91 e0       	ldi	r25, 0x01	; 1
    5d46:	fc 01       	movw	r30, r24
    5d48:	11 82       	std	Z+1, r1	; 0x01

	// Load multible bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    5d4a:	19 82       	std	Y+1, r1	; 0x01
    5d4c:	15 c0       	rjmp	.+42     	; 0x5d78 <nvm_eeprom_load_page_to_buffer+0x64>
		NVM.ADDR0 = i;
    5d4e:	80 ec       	ldi	r24, 0xC0	; 192
    5d50:	91 e0       	ldi	r25, 0x01	; 1
    5d52:	29 81       	ldd	r18, Y+1	; 0x01
    5d54:	fc 01       	movw	r30, r24
    5d56:	20 83       	st	Z, r18
		NVM.DATA0 = *values;
    5d58:	80 ec       	ldi	r24, 0xC0	; 192
    5d5a:	91 e0       	ldi	r25, 0x01	; 1
    5d5c:	2b 81       	ldd	r18, Y+3	; 0x03
    5d5e:	3c 81       	ldd	r19, Y+4	; 0x04
    5d60:	f9 01       	movw	r30, r18
    5d62:	20 81       	ld	r18, Z
    5d64:	fc 01       	movw	r30, r24
    5d66:	24 83       	std	Z+4, r18	; 0x04
		++values;
    5d68:	8b 81       	ldd	r24, Y+3	; 0x03
    5d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d6c:	01 96       	adiw	r24, 0x01	; 1
    5d6e:	8b 83       	std	Y+3, r24	; 0x03
    5d70:	9c 83       	std	Y+4, r25	; 0x04
	NVM.ADDR2 = 0x00;
	NVM.ADDR1 = 0x00;

	// Load multible bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    5d72:	89 81       	ldd	r24, Y+1	; 0x01
    5d74:	8f 5f       	subi	r24, 0xFF	; 255
    5d76:	89 83       	std	Y+1, r24	; 0x01
    5d78:	89 81       	ldd	r24, Y+1	; 0x01
    5d7a:	80 32       	cpi	r24, 0x20	; 32
    5d7c:	40 f3       	brcs	.-48     	; 0x5d4e <nvm_eeprom_load_page_to_buffer+0x3a>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
	NVM.CMD = old_cmd;
    5d7e:	80 ec       	ldi	r24, 0xC0	; 192
    5d80:	91 e0       	ldi	r25, 0x01	; 1
    5d82:	2a 81       	ldd	r18, Y+2	; 0x02
    5d84:	fc 01       	movw	r30, r24
    5d86:	22 87       	std	Z+10, r18	; 0x0a
}
    5d88:	24 96       	adiw	r28, 0x04	; 4
    5d8a:	cd bf       	out	0x3d, r28	; 61
    5d8c:	de bf       	out	0x3e, r29	; 62
    5d8e:	df 91       	pop	r29
    5d90:	cf 91       	pop	r28
    5d92:	08 95       	ret

00005d94 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    5d94:	cf 93       	push	r28
    5d96:	df 93       	push	r29
    5d98:	00 d0       	rcall	.+0      	; 0x5d9a <nvm_eeprom_atomic_write_page+0x6>
    5d9a:	1f 92       	push	r1
    5d9c:	cd b7       	in	r28, 0x3d	; 61
    5d9e:	de b7       	in	r29, 0x3e	; 62
    5da0:	8b 83       	std	Y+3, r24	; 0x03
	// Wait until NVM is ready
	nvm_wait_until_ready();
    5da2:	93 de       	rcall	.-730    	; 0x5aca <nvm_wait_until_ready>

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    5da4:	8b 81       	ldd	r24, Y+3	; 0x03
    5da6:	88 2f       	mov	r24, r24
    5da8:	90 e0       	ldi	r25, 0x00	; 0
    5daa:	88 0f       	add	r24, r24
    5dac:	99 1f       	adc	r25, r25
    5dae:	82 95       	swap	r24
    5db0:	92 95       	swap	r25
    5db2:	90 7f       	andi	r25, 0xF0	; 240
    5db4:	98 27       	eor	r25, r24
    5db6:	80 7f       	andi	r24, 0xF0	; 240
    5db8:	98 27       	eor	r25, r24
    5dba:	89 83       	std	Y+1, r24	; 0x01
    5dbc:	9a 83       	std	Y+2, r25	; 0x02

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    5dbe:	80 ec       	ldi	r24, 0xC0	; 192
    5dc0:	91 e0       	ldi	r25, 0x01	; 1
    5dc2:	fc 01       	movw	r30, r24
    5dc4:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5dc6:	80 ec       	ldi	r24, 0xC0	; 192
    5dc8:	91 e0       	ldi	r25, 0x01	; 1
    5dca:	29 81       	ldd	r18, Y+1	; 0x01
    5dcc:	3a 81       	ldd	r19, Y+2	; 0x02
    5dce:	23 2f       	mov	r18, r19
    5dd0:	33 27       	eor	r19, r19
    5dd2:	fc 01       	movw	r30, r24
    5dd4:	21 83       	std	Z+1, r18	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5dd6:	80 ec       	ldi	r24, 0xC0	; 192
    5dd8:	91 e0       	ldi	r25, 0x01	; 1
    5dda:	29 81       	ldd	r18, Y+1	; 0x01
    5ddc:	fc 01       	movw	r30, r24
    5dde:	20 83       	st	Z, r18

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
    5de0:	85 e3       	ldi	r24, 0x35	; 53
    5de2:	8b de       	rcall	.-746    	; 0x5afa <nvm_issue_command>
}
    5de4:	23 96       	adiw	r28, 0x03	; 3
    5de6:	cd bf       	out	0x3d, r28	; 61
    5de8:	de bf       	out	0x3e, r29	; 62
    5dea:	df 91       	pop	r29
    5dec:	cf 91       	pop	r28
    5dee:	08 95       	ret

00005df0 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    5df0:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    5df4:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    5df6:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    5df8:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    5dfc:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    5dfe:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    5e02:	08 95       	ret

00005e04 <cpu_irq_save>:
    5e04:	cf 93       	push	r28
    5e06:	df 93       	push	r29
    5e08:	1f 92       	push	r1
    5e0a:	cd b7       	in	r28, 0x3d	; 61
    5e0c:	de b7       	in	r29, 0x3e	; 62
    5e0e:	8f e3       	ldi	r24, 0x3F	; 63
    5e10:	90 e0       	ldi	r25, 0x00	; 0
    5e12:	fc 01       	movw	r30, r24
    5e14:	80 81       	ld	r24, Z
    5e16:	89 83       	std	Y+1, r24	; 0x01
    5e18:	f8 94       	cli
    5e1a:	89 81       	ldd	r24, Y+1	; 0x01
    5e1c:	0f 90       	pop	r0
    5e1e:	df 91       	pop	r29
    5e20:	cf 91       	pop	r28
    5e22:	08 95       	ret

00005e24 <cpu_irq_restore>:
    5e24:	cf 93       	push	r28
    5e26:	df 93       	push	r29
    5e28:	1f 92       	push	r1
    5e2a:	cd b7       	in	r28, 0x3d	; 61
    5e2c:	de b7       	in	r29, 0x3e	; 62
    5e2e:	89 83       	std	Y+1, r24	; 0x01
    5e30:	8f e3       	ldi	r24, 0x3F	; 63
    5e32:	90 e0       	ldi	r25, 0x00	; 0
    5e34:	29 81       	ldd	r18, Y+1	; 0x01
    5e36:	fc 01       	movw	r30, r24
    5e38:	20 83       	st	Z, r18
    5e3a:	0f 90       	pop	r0
    5e3c:	df 91       	pop	r29
    5e3e:	cf 91       	pop	r28
    5e40:	08 95       	ret

00005e42 <sleepmgr_lock_mode>:
    5e42:	cf 93       	push	r28
    5e44:	df 93       	push	r29
    5e46:	00 d0       	rcall	.+0      	; 0x5e48 <sleepmgr_lock_mode+0x6>
    5e48:	cd b7       	in	r28, 0x3d	; 61
    5e4a:	de b7       	in	r29, 0x3e	; 62
    5e4c:	8a 83       	std	Y+2, r24	; 0x02
    5e4e:	da df       	rcall	.-76     	; 0x5e04 <cpu_irq_save>
    5e50:	89 83       	std	Y+1, r24	; 0x01
    5e52:	8a 81       	ldd	r24, Y+2	; 0x02
    5e54:	88 2f       	mov	r24, r24
    5e56:	90 e0       	ldi	r25, 0x00	; 0
    5e58:	9c 01       	movw	r18, r24
    5e5a:	2d 58       	subi	r18, 0x8D	; 141
    5e5c:	37 4d       	sbci	r19, 0xD7	; 215
    5e5e:	f9 01       	movw	r30, r18
    5e60:	20 81       	ld	r18, Z
    5e62:	2f 5f       	subi	r18, 0xFF	; 255
    5e64:	8d 58       	subi	r24, 0x8D	; 141
    5e66:	97 4d       	sbci	r25, 0xD7	; 215
    5e68:	fc 01       	movw	r30, r24
    5e6a:	20 83       	st	Z, r18
    5e6c:	89 81       	ldd	r24, Y+1	; 0x01
    5e6e:	da df       	rcall	.-76     	; 0x5e24 <cpu_irq_restore>
    5e70:	0f 90       	pop	r0
    5e72:	0f 90       	pop	r0
    5e74:	df 91       	pop	r29
    5e76:	cf 91       	pop	r28
    5e78:	08 95       	ret

00005e7a <sleepmgr_unlock_mode>:
    5e7a:	cf 93       	push	r28
    5e7c:	df 93       	push	r29
    5e7e:	00 d0       	rcall	.+0      	; 0x5e80 <sleepmgr_unlock_mode+0x6>
    5e80:	cd b7       	in	r28, 0x3d	; 61
    5e82:	de b7       	in	r29, 0x3e	; 62
    5e84:	8a 83       	std	Y+2, r24	; 0x02
    5e86:	be df       	rcall	.-132    	; 0x5e04 <cpu_irq_save>
    5e88:	89 83       	std	Y+1, r24	; 0x01
    5e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e8c:	88 2f       	mov	r24, r24
    5e8e:	90 e0       	ldi	r25, 0x00	; 0
    5e90:	9c 01       	movw	r18, r24
    5e92:	2d 58       	subi	r18, 0x8D	; 141
    5e94:	37 4d       	sbci	r19, 0xD7	; 215
    5e96:	f9 01       	movw	r30, r18
    5e98:	20 81       	ld	r18, Z
    5e9a:	21 50       	subi	r18, 0x01	; 1
    5e9c:	8d 58       	subi	r24, 0x8D	; 141
    5e9e:	97 4d       	sbci	r25, 0xD7	; 215
    5ea0:	fc 01       	movw	r30, r24
    5ea2:	20 83       	st	Z, r18
    5ea4:	89 81       	ldd	r24, Y+1	; 0x01
    5ea6:	be df       	rcall	.-132    	; 0x5e24 <cpu_irq_restore>
    5ea8:	0f 90       	pop	r0
    5eaa:	0f 90       	pop	r0
    5eac:	df 91       	pop	r29
    5eae:	cf 91       	pop	r28
    5eb0:	08 95       	ret

00005eb2 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    5eb2:	1f 92       	push	r1
    5eb4:	0f 92       	push	r0
    5eb6:	00 90 3f 00 	lds	r0, 0x003F
    5eba:	0f 92       	push	r0
    5ebc:	11 24       	eor	r1, r1
    5ebe:	00 90 3b 00 	lds	r0, 0x003B
    5ec2:	0f 92       	push	r0
    5ec4:	2f 93       	push	r18
    5ec6:	3f 93       	push	r19
    5ec8:	4f 93       	push	r20
    5eca:	5f 93       	push	r21
    5ecc:	6f 93       	push	r22
    5ece:	7f 93       	push	r23
    5ed0:	8f 93       	push	r24
    5ed2:	9f 93       	push	r25
    5ed4:	af 93       	push	r26
    5ed6:	bf 93       	push	r27
    5ed8:	ef 93       	push	r30
    5eda:	ff 93       	push	r31
    5edc:	cf 93       	push	r28
    5ede:	df 93       	push	r29
    5ee0:	cd b7       	in	r28, 0x3d	; 61
    5ee2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
    5ee4:	80 91 0f 28 	lds	r24, 0x280F
    5ee8:	90 91 10 28 	lds	r25, 0x2810
    5eec:	00 97       	sbiw	r24, 0x00	; 0
    5eee:	31 f0       	breq	.+12     	; 0x5efc <__vector_14+0x4a>
		tc_tcc0_ovf_callback();
    5ef0:	80 91 0f 28 	lds	r24, 0x280F
    5ef4:	90 91 10 28 	lds	r25, 0x2810
    5ef8:	fc 01       	movw	r30, r24
    5efa:	09 95       	icall
	}
}
    5efc:	df 91       	pop	r29
    5efe:	cf 91       	pop	r28
    5f00:	ff 91       	pop	r31
    5f02:	ef 91       	pop	r30
    5f04:	bf 91       	pop	r27
    5f06:	af 91       	pop	r26
    5f08:	9f 91       	pop	r25
    5f0a:	8f 91       	pop	r24
    5f0c:	7f 91       	pop	r23
    5f0e:	6f 91       	pop	r22
    5f10:	5f 91       	pop	r21
    5f12:	4f 91       	pop	r20
    5f14:	3f 91       	pop	r19
    5f16:	2f 91       	pop	r18
    5f18:	0f 90       	pop	r0
    5f1a:	00 92 3b 00 	sts	0x003B, r0
    5f1e:	0f 90       	pop	r0
    5f20:	00 92 3f 00 	sts	0x003F, r0
    5f24:	0f 90       	pop	r0
    5f26:	1f 90       	pop	r1
    5f28:	18 95       	reti

00005f2a <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    5f2a:	1f 92       	push	r1
    5f2c:	0f 92       	push	r0
    5f2e:	00 90 3f 00 	lds	r0, 0x003F
    5f32:	0f 92       	push	r0
    5f34:	11 24       	eor	r1, r1
    5f36:	00 90 3b 00 	lds	r0, 0x003B
    5f3a:	0f 92       	push	r0
    5f3c:	2f 93       	push	r18
    5f3e:	3f 93       	push	r19
    5f40:	4f 93       	push	r20
    5f42:	5f 93       	push	r21
    5f44:	6f 93       	push	r22
    5f46:	7f 93       	push	r23
    5f48:	8f 93       	push	r24
    5f4a:	9f 93       	push	r25
    5f4c:	af 93       	push	r26
    5f4e:	bf 93       	push	r27
    5f50:	ef 93       	push	r30
    5f52:	ff 93       	push	r31
    5f54:	cf 93       	push	r28
    5f56:	df 93       	push	r29
    5f58:	cd b7       	in	r28, 0x3d	; 61
    5f5a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
    5f5c:	80 91 11 28 	lds	r24, 0x2811
    5f60:	90 91 12 28 	lds	r25, 0x2812
    5f64:	00 97       	sbiw	r24, 0x00	; 0
    5f66:	31 f0       	breq	.+12     	; 0x5f74 <__vector_15+0x4a>
		tc_tcc0_err_callback();
    5f68:	80 91 11 28 	lds	r24, 0x2811
    5f6c:	90 91 12 28 	lds	r25, 0x2812
    5f70:	fc 01       	movw	r30, r24
    5f72:	09 95       	icall
	}
}
    5f74:	df 91       	pop	r29
    5f76:	cf 91       	pop	r28
    5f78:	ff 91       	pop	r31
    5f7a:	ef 91       	pop	r30
    5f7c:	bf 91       	pop	r27
    5f7e:	af 91       	pop	r26
    5f80:	9f 91       	pop	r25
    5f82:	8f 91       	pop	r24
    5f84:	7f 91       	pop	r23
    5f86:	6f 91       	pop	r22
    5f88:	5f 91       	pop	r21
    5f8a:	4f 91       	pop	r20
    5f8c:	3f 91       	pop	r19
    5f8e:	2f 91       	pop	r18
    5f90:	0f 90       	pop	r0
    5f92:	00 92 3b 00 	sts	0x003B, r0
    5f96:	0f 90       	pop	r0
    5f98:	00 92 3f 00 	sts	0x003F, r0
    5f9c:	0f 90       	pop	r0
    5f9e:	1f 90       	pop	r1
    5fa0:	18 95       	reti

00005fa2 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    5fa2:	1f 92       	push	r1
    5fa4:	0f 92       	push	r0
    5fa6:	00 90 3f 00 	lds	r0, 0x003F
    5faa:	0f 92       	push	r0
    5fac:	11 24       	eor	r1, r1
    5fae:	00 90 3b 00 	lds	r0, 0x003B
    5fb2:	0f 92       	push	r0
    5fb4:	2f 93       	push	r18
    5fb6:	3f 93       	push	r19
    5fb8:	4f 93       	push	r20
    5fba:	5f 93       	push	r21
    5fbc:	6f 93       	push	r22
    5fbe:	7f 93       	push	r23
    5fc0:	8f 93       	push	r24
    5fc2:	9f 93       	push	r25
    5fc4:	af 93       	push	r26
    5fc6:	bf 93       	push	r27
    5fc8:	ef 93       	push	r30
    5fca:	ff 93       	push	r31
    5fcc:	cf 93       	push	r28
    5fce:	df 93       	push	r29
    5fd0:	cd b7       	in	r28, 0x3d	; 61
    5fd2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
    5fd4:	80 91 13 28 	lds	r24, 0x2813
    5fd8:	90 91 14 28 	lds	r25, 0x2814
    5fdc:	00 97       	sbiw	r24, 0x00	; 0
    5fde:	31 f0       	breq	.+12     	; 0x5fec <__vector_16+0x4a>
		tc_tcc0_cca_callback();
    5fe0:	80 91 13 28 	lds	r24, 0x2813
    5fe4:	90 91 14 28 	lds	r25, 0x2814
    5fe8:	fc 01       	movw	r30, r24
    5fea:	09 95       	icall
	}
}
    5fec:	df 91       	pop	r29
    5fee:	cf 91       	pop	r28
    5ff0:	ff 91       	pop	r31
    5ff2:	ef 91       	pop	r30
    5ff4:	bf 91       	pop	r27
    5ff6:	af 91       	pop	r26
    5ff8:	9f 91       	pop	r25
    5ffa:	8f 91       	pop	r24
    5ffc:	7f 91       	pop	r23
    5ffe:	6f 91       	pop	r22
    6000:	5f 91       	pop	r21
    6002:	4f 91       	pop	r20
    6004:	3f 91       	pop	r19
    6006:	2f 91       	pop	r18
    6008:	0f 90       	pop	r0
    600a:	00 92 3b 00 	sts	0x003B, r0
    600e:	0f 90       	pop	r0
    6010:	00 92 3f 00 	sts	0x003F, r0
    6014:	0f 90       	pop	r0
    6016:	1f 90       	pop	r1
    6018:	18 95       	reti

0000601a <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    601a:	1f 92       	push	r1
    601c:	0f 92       	push	r0
    601e:	00 90 3f 00 	lds	r0, 0x003F
    6022:	0f 92       	push	r0
    6024:	11 24       	eor	r1, r1
    6026:	00 90 3b 00 	lds	r0, 0x003B
    602a:	0f 92       	push	r0
    602c:	2f 93       	push	r18
    602e:	3f 93       	push	r19
    6030:	4f 93       	push	r20
    6032:	5f 93       	push	r21
    6034:	6f 93       	push	r22
    6036:	7f 93       	push	r23
    6038:	8f 93       	push	r24
    603a:	9f 93       	push	r25
    603c:	af 93       	push	r26
    603e:	bf 93       	push	r27
    6040:	ef 93       	push	r30
    6042:	ff 93       	push	r31
    6044:	cf 93       	push	r28
    6046:	df 93       	push	r29
    6048:	cd b7       	in	r28, 0x3d	; 61
    604a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
    604c:	80 91 15 28 	lds	r24, 0x2815
    6050:	90 91 16 28 	lds	r25, 0x2816
    6054:	00 97       	sbiw	r24, 0x00	; 0
    6056:	31 f0       	breq	.+12     	; 0x6064 <__vector_17+0x4a>
		tc_tcc0_ccb_callback();
    6058:	80 91 15 28 	lds	r24, 0x2815
    605c:	90 91 16 28 	lds	r25, 0x2816
    6060:	fc 01       	movw	r30, r24
    6062:	09 95       	icall
	}
}
    6064:	df 91       	pop	r29
    6066:	cf 91       	pop	r28
    6068:	ff 91       	pop	r31
    606a:	ef 91       	pop	r30
    606c:	bf 91       	pop	r27
    606e:	af 91       	pop	r26
    6070:	9f 91       	pop	r25
    6072:	8f 91       	pop	r24
    6074:	7f 91       	pop	r23
    6076:	6f 91       	pop	r22
    6078:	5f 91       	pop	r21
    607a:	4f 91       	pop	r20
    607c:	3f 91       	pop	r19
    607e:	2f 91       	pop	r18
    6080:	0f 90       	pop	r0
    6082:	00 92 3b 00 	sts	0x003B, r0
    6086:	0f 90       	pop	r0
    6088:	00 92 3f 00 	sts	0x003F, r0
    608c:	0f 90       	pop	r0
    608e:	1f 90       	pop	r1
    6090:	18 95       	reti

00006092 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    6092:	1f 92       	push	r1
    6094:	0f 92       	push	r0
    6096:	00 90 3f 00 	lds	r0, 0x003F
    609a:	0f 92       	push	r0
    609c:	11 24       	eor	r1, r1
    609e:	00 90 3b 00 	lds	r0, 0x003B
    60a2:	0f 92       	push	r0
    60a4:	2f 93       	push	r18
    60a6:	3f 93       	push	r19
    60a8:	4f 93       	push	r20
    60aa:	5f 93       	push	r21
    60ac:	6f 93       	push	r22
    60ae:	7f 93       	push	r23
    60b0:	8f 93       	push	r24
    60b2:	9f 93       	push	r25
    60b4:	af 93       	push	r26
    60b6:	bf 93       	push	r27
    60b8:	ef 93       	push	r30
    60ba:	ff 93       	push	r31
    60bc:	cf 93       	push	r28
    60be:	df 93       	push	r29
    60c0:	cd b7       	in	r28, 0x3d	; 61
    60c2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
    60c4:	80 91 17 28 	lds	r24, 0x2817
    60c8:	90 91 18 28 	lds	r25, 0x2818
    60cc:	00 97       	sbiw	r24, 0x00	; 0
    60ce:	31 f0       	breq	.+12     	; 0x60dc <__vector_18+0x4a>
		tc_tcc0_ccc_callback();
    60d0:	80 91 17 28 	lds	r24, 0x2817
    60d4:	90 91 18 28 	lds	r25, 0x2818
    60d8:	fc 01       	movw	r30, r24
    60da:	09 95       	icall
	}
}
    60dc:	df 91       	pop	r29
    60de:	cf 91       	pop	r28
    60e0:	ff 91       	pop	r31
    60e2:	ef 91       	pop	r30
    60e4:	bf 91       	pop	r27
    60e6:	af 91       	pop	r26
    60e8:	9f 91       	pop	r25
    60ea:	8f 91       	pop	r24
    60ec:	7f 91       	pop	r23
    60ee:	6f 91       	pop	r22
    60f0:	5f 91       	pop	r21
    60f2:	4f 91       	pop	r20
    60f4:	3f 91       	pop	r19
    60f6:	2f 91       	pop	r18
    60f8:	0f 90       	pop	r0
    60fa:	00 92 3b 00 	sts	0x003B, r0
    60fe:	0f 90       	pop	r0
    6100:	00 92 3f 00 	sts	0x003F, r0
    6104:	0f 90       	pop	r0
    6106:	1f 90       	pop	r1
    6108:	18 95       	reti

0000610a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    610a:	1f 92       	push	r1
    610c:	0f 92       	push	r0
    610e:	00 90 3f 00 	lds	r0, 0x003F
    6112:	0f 92       	push	r0
    6114:	11 24       	eor	r1, r1
    6116:	00 90 3b 00 	lds	r0, 0x003B
    611a:	0f 92       	push	r0
    611c:	2f 93       	push	r18
    611e:	3f 93       	push	r19
    6120:	4f 93       	push	r20
    6122:	5f 93       	push	r21
    6124:	6f 93       	push	r22
    6126:	7f 93       	push	r23
    6128:	8f 93       	push	r24
    612a:	9f 93       	push	r25
    612c:	af 93       	push	r26
    612e:	bf 93       	push	r27
    6130:	ef 93       	push	r30
    6132:	ff 93       	push	r31
    6134:	cf 93       	push	r28
    6136:	df 93       	push	r29
    6138:	cd b7       	in	r28, 0x3d	; 61
    613a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
    613c:	80 91 19 28 	lds	r24, 0x2819
    6140:	90 91 1a 28 	lds	r25, 0x281A
    6144:	00 97       	sbiw	r24, 0x00	; 0
    6146:	31 f0       	breq	.+12     	; 0x6154 <__vector_19+0x4a>
		tc_tcc0_ccd_callback();
    6148:	80 91 19 28 	lds	r24, 0x2819
    614c:	90 91 1a 28 	lds	r25, 0x281A
    6150:	fc 01       	movw	r30, r24
    6152:	09 95       	icall
	}
}
    6154:	df 91       	pop	r29
    6156:	cf 91       	pop	r28
    6158:	ff 91       	pop	r31
    615a:	ef 91       	pop	r30
    615c:	bf 91       	pop	r27
    615e:	af 91       	pop	r26
    6160:	9f 91       	pop	r25
    6162:	8f 91       	pop	r24
    6164:	7f 91       	pop	r23
    6166:	6f 91       	pop	r22
    6168:	5f 91       	pop	r21
    616a:	4f 91       	pop	r20
    616c:	3f 91       	pop	r19
    616e:	2f 91       	pop	r18
    6170:	0f 90       	pop	r0
    6172:	00 92 3b 00 	sts	0x003B, r0
    6176:	0f 90       	pop	r0
    6178:	00 92 3f 00 	sts	0x003F, r0
    617c:	0f 90       	pop	r0
    617e:	1f 90       	pop	r1
    6180:	18 95       	reti

00006182 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    6182:	1f 92       	push	r1
    6184:	0f 92       	push	r0
    6186:	00 90 3f 00 	lds	r0, 0x003F
    618a:	0f 92       	push	r0
    618c:	11 24       	eor	r1, r1
    618e:	00 90 3b 00 	lds	r0, 0x003B
    6192:	0f 92       	push	r0
    6194:	2f 93       	push	r18
    6196:	3f 93       	push	r19
    6198:	4f 93       	push	r20
    619a:	5f 93       	push	r21
    619c:	6f 93       	push	r22
    619e:	7f 93       	push	r23
    61a0:	8f 93       	push	r24
    61a2:	9f 93       	push	r25
    61a4:	af 93       	push	r26
    61a6:	bf 93       	push	r27
    61a8:	ef 93       	push	r30
    61aa:	ff 93       	push	r31
    61ac:	cf 93       	push	r28
    61ae:	df 93       	push	r29
    61b0:	cd b7       	in	r28, 0x3d	; 61
    61b2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
    61b4:	80 91 1b 28 	lds	r24, 0x281B
    61b8:	90 91 1c 28 	lds	r25, 0x281C
    61bc:	00 97       	sbiw	r24, 0x00	; 0
    61be:	31 f0       	breq	.+12     	; 0x61cc <__vector_20+0x4a>
		tc_tcc1_ovf_callback();
    61c0:	80 91 1b 28 	lds	r24, 0x281B
    61c4:	90 91 1c 28 	lds	r25, 0x281C
    61c8:	fc 01       	movw	r30, r24
    61ca:	09 95       	icall
	}
}
    61cc:	df 91       	pop	r29
    61ce:	cf 91       	pop	r28
    61d0:	ff 91       	pop	r31
    61d2:	ef 91       	pop	r30
    61d4:	bf 91       	pop	r27
    61d6:	af 91       	pop	r26
    61d8:	9f 91       	pop	r25
    61da:	8f 91       	pop	r24
    61dc:	7f 91       	pop	r23
    61de:	6f 91       	pop	r22
    61e0:	5f 91       	pop	r21
    61e2:	4f 91       	pop	r20
    61e4:	3f 91       	pop	r19
    61e6:	2f 91       	pop	r18
    61e8:	0f 90       	pop	r0
    61ea:	00 92 3b 00 	sts	0x003B, r0
    61ee:	0f 90       	pop	r0
    61f0:	00 92 3f 00 	sts	0x003F, r0
    61f4:	0f 90       	pop	r0
    61f6:	1f 90       	pop	r1
    61f8:	18 95       	reti

000061fa <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    61fa:	1f 92       	push	r1
    61fc:	0f 92       	push	r0
    61fe:	00 90 3f 00 	lds	r0, 0x003F
    6202:	0f 92       	push	r0
    6204:	11 24       	eor	r1, r1
    6206:	00 90 3b 00 	lds	r0, 0x003B
    620a:	0f 92       	push	r0
    620c:	2f 93       	push	r18
    620e:	3f 93       	push	r19
    6210:	4f 93       	push	r20
    6212:	5f 93       	push	r21
    6214:	6f 93       	push	r22
    6216:	7f 93       	push	r23
    6218:	8f 93       	push	r24
    621a:	9f 93       	push	r25
    621c:	af 93       	push	r26
    621e:	bf 93       	push	r27
    6220:	ef 93       	push	r30
    6222:	ff 93       	push	r31
    6224:	cf 93       	push	r28
    6226:	df 93       	push	r29
    6228:	cd b7       	in	r28, 0x3d	; 61
    622a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
    622c:	80 91 1d 28 	lds	r24, 0x281D
    6230:	90 91 1e 28 	lds	r25, 0x281E
    6234:	00 97       	sbiw	r24, 0x00	; 0
    6236:	31 f0       	breq	.+12     	; 0x6244 <__vector_21+0x4a>
		tc_tcc1_err_callback();
    6238:	80 91 1d 28 	lds	r24, 0x281D
    623c:	90 91 1e 28 	lds	r25, 0x281E
    6240:	fc 01       	movw	r30, r24
    6242:	09 95       	icall
	}
}
    6244:	df 91       	pop	r29
    6246:	cf 91       	pop	r28
    6248:	ff 91       	pop	r31
    624a:	ef 91       	pop	r30
    624c:	bf 91       	pop	r27
    624e:	af 91       	pop	r26
    6250:	9f 91       	pop	r25
    6252:	8f 91       	pop	r24
    6254:	7f 91       	pop	r23
    6256:	6f 91       	pop	r22
    6258:	5f 91       	pop	r21
    625a:	4f 91       	pop	r20
    625c:	3f 91       	pop	r19
    625e:	2f 91       	pop	r18
    6260:	0f 90       	pop	r0
    6262:	00 92 3b 00 	sts	0x003B, r0
    6266:	0f 90       	pop	r0
    6268:	00 92 3f 00 	sts	0x003F, r0
    626c:	0f 90       	pop	r0
    626e:	1f 90       	pop	r1
    6270:	18 95       	reti

00006272 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    6272:	1f 92       	push	r1
    6274:	0f 92       	push	r0
    6276:	00 90 3f 00 	lds	r0, 0x003F
    627a:	0f 92       	push	r0
    627c:	11 24       	eor	r1, r1
    627e:	00 90 3b 00 	lds	r0, 0x003B
    6282:	0f 92       	push	r0
    6284:	2f 93       	push	r18
    6286:	3f 93       	push	r19
    6288:	4f 93       	push	r20
    628a:	5f 93       	push	r21
    628c:	6f 93       	push	r22
    628e:	7f 93       	push	r23
    6290:	8f 93       	push	r24
    6292:	9f 93       	push	r25
    6294:	af 93       	push	r26
    6296:	bf 93       	push	r27
    6298:	ef 93       	push	r30
    629a:	ff 93       	push	r31
    629c:	cf 93       	push	r28
    629e:	df 93       	push	r29
    62a0:	cd b7       	in	r28, 0x3d	; 61
    62a2:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
    62a4:	80 91 1f 28 	lds	r24, 0x281F
    62a8:	90 91 20 28 	lds	r25, 0x2820
    62ac:	00 97       	sbiw	r24, 0x00	; 0
    62ae:	31 f0       	breq	.+12     	; 0x62bc <__vector_22+0x4a>
		tc_tcc1_cca_callback();
    62b0:	80 91 1f 28 	lds	r24, 0x281F
    62b4:	90 91 20 28 	lds	r25, 0x2820
    62b8:	fc 01       	movw	r30, r24
    62ba:	09 95       	icall
	}
}
    62bc:	df 91       	pop	r29
    62be:	cf 91       	pop	r28
    62c0:	ff 91       	pop	r31
    62c2:	ef 91       	pop	r30
    62c4:	bf 91       	pop	r27
    62c6:	af 91       	pop	r26
    62c8:	9f 91       	pop	r25
    62ca:	8f 91       	pop	r24
    62cc:	7f 91       	pop	r23
    62ce:	6f 91       	pop	r22
    62d0:	5f 91       	pop	r21
    62d2:	4f 91       	pop	r20
    62d4:	3f 91       	pop	r19
    62d6:	2f 91       	pop	r18
    62d8:	0f 90       	pop	r0
    62da:	00 92 3b 00 	sts	0x003B, r0
    62de:	0f 90       	pop	r0
    62e0:	00 92 3f 00 	sts	0x003F, r0
    62e4:	0f 90       	pop	r0
    62e6:	1f 90       	pop	r1
    62e8:	18 95       	reti

000062ea <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    62ea:	1f 92       	push	r1
    62ec:	0f 92       	push	r0
    62ee:	00 90 3f 00 	lds	r0, 0x003F
    62f2:	0f 92       	push	r0
    62f4:	11 24       	eor	r1, r1
    62f6:	00 90 3b 00 	lds	r0, 0x003B
    62fa:	0f 92       	push	r0
    62fc:	2f 93       	push	r18
    62fe:	3f 93       	push	r19
    6300:	4f 93       	push	r20
    6302:	5f 93       	push	r21
    6304:	6f 93       	push	r22
    6306:	7f 93       	push	r23
    6308:	8f 93       	push	r24
    630a:	9f 93       	push	r25
    630c:	af 93       	push	r26
    630e:	bf 93       	push	r27
    6310:	ef 93       	push	r30
    6312:	ff 93       	push	r31
    6314:	cf 93       	push	r28
    6316:	df 93       	push	r29
    6318:	cd b7       	in	r28, 0x3d	; 61
    631a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
    631c:	80 91 21 28 	lds	r24, 0x2821
    6320:	90 91 22 28 	lds	r25, 0x2822
    6324:	00 97       	sbiw	r24, 0x00	; 0
    6326:	31 f0       	breq	.+12     	; 0x6334 <__vector_23+0x4a>
		tc_tcc1_ccb_callback();
    6328:	80 91 21 28 	lds	r24, 0x2821
    632c:	90 91 22 28 	lds	r25, 0x2822
    6330:	fc 01       	movw	r30, r24
    6332:	09 95       	icall
	}
}
    6334:	df 91       	pop	r29
    6336:	cf 91       	pop	r28
    6338:	ff 91       	pop	r31
    633a:	ef 91       	pop	r30
    633c:	bf 91       	pop	r27
    633e:	af 91       	pop	r26
    6340:	9f 91       	pop	r25
    6342:	8f 91       	pop	r24
    6344:	7f 91       	pop	r23
    6346:	6f 91       	pop	r22
    6348:	5f 91       	pop	r21
    634a:	4f 91       	pop	r20
    634c:	3f 91       	pop	r19
    634e:	2f 91       	pop	r18
    6350:	0f 90       	pop	r0
    6352:	00 92 3b 00 	sts	0x003B, r0
    6356:	0f 90       	pop	r0
    6358:	00 92 3f 00 	sts	0x003F, r0
    635c:	0f 90       	pop	r0
    635e:	1f 90       	pop	r1
    6360:	18 95       	reti

00006362 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    6362:	1f 92       	push	r1
    6364:	0f 92       	push	r0
    6366:	00 90 3f 00 	lds	r0, 0x003F
    636a:	0f 92       	push	r0
    636c:	11 24       	eor	r1, r1
    636e:	00 90 3b 00 	lds	r0, 0x003B
    6372:	0f 92       	push	r0
    6374:	2f 93       	push	r18
    6376:	3f 93       	push	r19
    6378:	4f 93       	push	r20
    637a:	5f 93       	push	r21
    637c:	6f 93       	push	r22
    637e:	7f 93       	push	r23
    6380:	8f 93       	push	r24
    6382:	9f 93       	push	r25
    6384:	af 93       	push	r26
    6386:	bf 93       	push	r27
    6388:	ef 93       	push	r30
    638a:	ff 93       	push	r31
    638c:	cf 93       	push	r28
    638e:	df 93       	push	r29
    6390:	cd b7       	in	r28, 0x3d	; 61
    6392:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
    6394:	80 91 23 28 	lds	r24, 0x2823
    6398:	90 91 24 28 	lds	r25, 0x2824
    639c:	00 97       	sbiw	r24, 0x00	; 0
    639e:	31 f0       	breq	.+12     	; 0x63ac <__vector_77+0x4a>
		tc_tcd0_ovf_callback();
    63a0:	80 91 23 28 	lds	r24, 0x2823
    63a4:	90 91 24 28 	lds	r25, 0x2824
    63a8:	fc 01       	movw	r30, r24
    63aa:	09 95       	icall
	}
}
    63ac:	df 91       	pop	r29
    63ae:	cf 91       	pop	r28
    63b0:	ff 91       	pop	r31
    63b2:	ef 91       	pop	r30
    63b4:	bf 91       	pop	r27
    63b6:	af 91       	pop	r26
    63b8:	9f 91       	pop	r25
    63ba:	8f 91       	pop	r24
    63bc:	7f 91       	pop	r23
    63be:	6f 91       	pop	r22
    63c0:	5f 91       	pop	r21
    63c2:	4f 91       	pop	r20
    63c4:	3f 91       	pop	r19
    63c6:	2f 91       	pop	r18
    63c8:	0f 90       	pop	r0
    63ca:	00 92 3b 00 	sts	0x003B, r0
    63ce:	0f 90       	pop	r0
    63d0:	00 92 3f 00 	sts	0x003F, r0
    63d4:	0f 90       	pop	r0
    63d6:	1f 90       	pop	r1
    63d8:	18 95       	reti

000063da <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    63da:	1f 92       	push	r1
    63dc:	0f 92       	push	r0
    63de:	00 90 3f 00 	lds	r0, 0x003F
    63e2:	0f 92       	push	r0
    63e4:	11 24       	eor	r1, r1
    63e6:	00 90 3b 00 	lds	r0, 0x003B
    63ea:	0f 92       	push	r0
    63ec:	2f 93       	push	r18
    63ee:	3f 93       	push	r19
    63f0:	4f 93       	push	r20
    63f2:	5f 93       	push	r21
    63f4:	6f 93       	push	r22
    63f6:	7f 93       	push	r23
    63f8:	8f 93       	push	r24
    63fa:	9f 93       	push	r25
    63fc:	af 93       	push	r26
    63fe:	bf 93       	push	r27
    6400:	ef 93       	push	r30
    6402:	ff 93       	push	r31
    6404:	cf 93       	push	r28
    6406:	df 93       	push	r29
    6408:	cd b7       	in	r28, 0x3d	; 61
    640a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
    640c:	80 91 25 28 	lds	r24, 0x2825
    6410:	90 91 26 28 	lds	r25, 0x2826
    6414:	00 97       	sbiw	r24, 0x00	; 0
    6416:	31 f0       	breq	.+12     	; 0x6424 <__vector_78+0x4a>
		tc_tcd0_err_callback();
    6418:	80 91 25 28 	lds	r24, 0x2825
    641c:	90 91 26 28 	lds	r25, 0x2826
    6420:	fc 01       	movw	r30, r24
    6422:	09 95       	icall
	}
}
    6424:	df 91       	pop	r29
    6426:	cf 91       	pop	r28
    6428:	ff 91       	pop	r31
    642a:	ef 91       	pop	r30
    642c:	bf 91       	pop	r27
    642e:	af 91       	pop	r26
    6430:	9f 91       	pop	r25
    6432:	8f 91       	pop	r24
    6434:	7f 91       	pop	r23
    6436:	6f 91       	pop	r22
    6438:	5f 91       	pop	r21
    643a:	4f 91       	pop	r20
    643c:	3f 91       	pop	r19
    643e:	2f 91       	pop	r18
    6440:	0f 90       	pop	r0
    6442:	00 92 3b 00 	sts	0x003B, r0
    6446:	0f 90       	pop	r0
    6448:	00 92 3f 00 	sts	0x003F, r0
    644c:	0f 90       	pop	r0
    644e:	1f 90       	pop	r1
    6450:	18 95       	reti

00006452 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    6452:	1f 92       	push	r1
    6454:	0f 92       	push	r0
    6456:	00 90 3f 00 	lds	r0, 0x003F
    645a:	0f 92       	push	r0
    645c:	11 24       	eor	r1, r1
    645e:	00 90 3b 00 	lds	r0, 0x003B
    6462:	0f 92       	push	r0
    6464:	2f 93       	push	r18
    6466:	3f 93       	push	r19
    6468:	4f 93       	push	r20
    646a:	5f 93       	push	r21
    646c:	6f 93       	push	r22
    646e:	7f 93       	push	r23
    6470:	8f 93       	push	r24
    6472:	9f 93       	push	r25
    6474:	af 93       	push	r26
    6476:	bf 93       	push	r27
    6478:	ef 93       	push	r30
    647a:	ff 93       	push	r31
    647c:	cf 93       	push	r28
    647e:	df 93       	push	r29
    6480:	cd b7       	in	r28, 0x3d	; 61
    6482:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
    6484:	80 91 27 28 	lds	r24, 0x2827
    6488:	90 91 28 28 	lds	r25, 0x2828
    648c:	00 97       	sbiw	r24, 0x00	; 0
    648e:	31 f0       	breq	.+12     	; 0x649c <__vector_79+0x4a>
		tc_tcd0_cca_callback();
    6490:	80 91 27 28 	lds	r24, 0x2827
    6494:	90 91 28 28 	lds	r25, 0x2828
    6498:	fc 01       	movw	r30, r24
    649a:	09 95       	icall
	}
}
    649c:	df 91       	pop	r29
    649e:	cf 91       	pop	r28
    64a0:	ff 91       	pop	r31
    64a2:	ef 91       	pop	r30
    64a4:	bf 91       	pop	r27
    64a6:	af 91       	pop	r26
    64a8:	9f 91       	pop	r25
    64aa:	8f 91       	pop	r24
    64ac:	7f 91       	pop	r23
    64ae:	6f 91       	pop	r22
    64b0:	5f 91       	pop	r21
    64b2:	4f 91       	pop	r20
    64b4:	3f 91       	pop	r19
    64b6:	2f 91       	pop	r18
    64b8:	0f 90       	pop	r0
    64ba:	00 92 3b 00 	sts	0x003B, r0
    64be:	0f 90       	pop	r0
    64c0:	00 92 3f 00 	sts	0x003F, r0
    64c4:	0f 90       	pop	r0
    64c6:	1f 90       	pop	r1
    64c8:	18 95       	reti

000064ca <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    64ca:	1f 92       	push	r1
    64cc:	0f 92       	push	r0
    64ce:	00 90 3f 00 	lds	r0, 0x003F
    64d2:	0f 92       	push	r0
    64d4:	11 24       	eor	r1, r1
    64d6:	00 90 3b 00 	lds	r0, 0x003B
    64da:	0f 92       	push	r0
    64dc:	2f 93       	push	r18
    64de:	3f 93       	push	r19
    64e0:	4f 93       	push	r20
    64e2:	5f 93       	push	r21
    64e4:	6f 93       	push	r22
    64e6:	7f 93       	push	r23
    64e8:	8f 93       	push	r24
    64ea:	9f 93       	push	r25
    64ec:	af 93       	push	r26
    64ee:	bf 93       	push	r27
    64f0:	ef 93       	push	r30
    64f2:	ff 93       	push	r31
    64f4:	cf 93       	push	r28
    64f6:	df 93       	push	r29
    64f8:	cd b7       	in	r28, 0x3d	; 61
    64fa:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
    64fc:	80 91 29 28 	lds	r24, 0x2829
    6500:	90 91 2a 28 	lds	r25, 0x282A
    6504:	00 97       	sbiw	r24, 0x00	; 0
    6506:	31 f0       	breq	.+12     	; 0x6514 <__vector_80+0x4a>
		tc_tcd0_ccb_callback();
    6508:	80 91 29 28 	lds	r24, 0x2829
    650c:	90 91 2a 28 	lds	r25, 0x282A
    6510:	fc 01       	movw	r30, r24
    6512:	09 95       	icall
	}
}
    6514:	df 91       	pop	r29
    6516:	cf 91       	pop	r28
    6518:	ff 91       	pop	r31
    651a:	ef 91       	pop	r30
    651c:	bf 91       	pop	r27
    651e:	af 91       	pop	r26
    6520:	9f 91       	pop	r25
    6522:	8f 91       	pop	r24
    6524:	7f 91       	pop	r23
    6526:	6f 91       	pop	r22
    6528:	5f 91       	pop	r21
    652a:	4f 91       	pop	r20
    652c:	3f 91       	pop	r19
    652e:	2f 91       	pop	r18
    6530:	0f 90       	pop	r0
    6532:	00 92 3b 00 	sts	0x003B, r0
    6536:	0f 90       	pop	r0
    6538:	00 92 3f 00 	sts	0x003F, r0
    653c:	0f 90       	pop	r0
    653e:	1f 90       	pop	r1
    6540:	18 95       	reti

00006542 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    6542:	1f 92       	push	r1
    6544:	0f 92       	push	r0
    6546:	00 90 3f 00 	lds	r0, 0x003F
    654a:	0f 92       	push	r0
    654c:	11 24       	eor	r1, r1
    654e:	00 90 3b 00 	lds	r0, 0x003B
    6552:	0f 92       	push	r0
    6554:	2f 93       	push	r18
    6556:	3f 93       	push	r19
    6558:	4f 93       	push	r20
    655a:	5f 93       	push	r21
    655c:	6f 93       	push	r22
    655e:	7f 93       	push	r23
    6560:	8f 93       	push	r24
    6562:	9f 93       	push	r25
    6564:	af 93       	push	r26
    6566:	bf 93       	push	r27
    6568:	ef 93       	push	r30
    656a:	ff 93       	push	r31
    656c:	cf 93       	push	r28
    656e:	df 93       	push	r29
    6570:	cd b7       	in	r28, 0x3d	; 61
    6572:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
    6574:	80 91 2b 28 	lds	r24, 0x282B
    6578:	90 91 2c 28 	lds	r25, 0x282C
    657c:	00 97       	sbiw	r24, 0x00	; 0
    657e:	31 f0       	breq	.+12     	; 0x658c <__vector_81+0x4a>
		tc_tcd0_ccc_callback();
    6580:	80 91 2b 28 	lds	r24, 0x282B
    6584:	90 91 2c 28 	lds	r25, 0x282C
    6588:	fc 01       	movw	r30, r24
    658a:	09 95       	icall
	}
}
    658c:	df 91       	pop	r29
    658e:	cf 91       	pop	r28
    6590:	ff 91       	pop	r31
    6592:	ef 91       	pop	r30
    6594:	bf 91       	pop	r27
    6596:	af 91       	pop	r26
    6598:	9f 91       	pop	r25
    659a:	8f 91       	pop	r24
    659c:	7f 91       	pop	r23
    659e:	6f 91       	pop	r22
    65a0:	5f 91       	pop	r21
    65a2:	4f 91       	pop	r20
    65a4:	3f 91       	pop	r19
    65a6:	2f 91       	pop	r18
    65a8:	0f 90       	pop	r0
    65aa:	00 92 3b 00 	sts	0x003B, r0
    65ae:	0f 90       	pop	r0
    65b0:	00 92 3f 00 	sts	0x003F, r0
    65b4:	0f 90       	pop	r0
    65b6:	1f 90       	pop	r1
    65b8:	18 95       	reti

000065ba <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    65ba:	1f 92       	push	r1
    65bc:	0f 92       	push	r0
    65be:	00 90 3f 00 	lds	r0, 0x003F
    65c2:	0f 92       	push	r0
    65c4:	11 24       	eor	r1, r1
    65c6:	00 90 3b 00 	lds	r0, 0x003B
    65ca:	0f 92       	push	r0
    65cc:	2f 93       	push	r18
    65ce:	3f 93       	push	r19
    65d0:	4f 93       	push	r20
    65d2:	5f 93       	push	r21
    65d4:	6f 93       	push	r22
    65d6:	7f 93       	push	r23
    65d8:	8f 93       	push	r24
    65da:	9f 93       	push	r25
    65dc:	af 93       	push	r26
    65de:	bf 93       	push	r27
    65e0:	ef 93       	push	r30
    65e2:	ff 93       	push	r31
    65e4:	cf 93       	push	r28
    65e6:	df 93       	push	r29
    65e8:	cd b7       	in	r28, 0x3d	; 61
    65ea:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
    65ec:	80 91 2d 28 	lds	r24, 0x282D
    65f0:	90 91 2e 28 	lds	r25, 0x282E
    65f4:	00 97       	sbiw	r24, 0x00	; 0
    65f6:	31 f0       	breq	.+12     	; 0x6604 <__vector_82+0x4a>
		tc_tcd0_ccd_callback();
    65f8:	80 91 2d 28 	lds	r24, 0x282D
    65fc:	90 91 2e 28 	lds	r25, 0x282E
    6600:	fc 01       	movw	r30, r24
    6602:	09 95       	icall
	}
}
    6604:	df 91       	pop	r29
    6606:	cf 91       	pop	r28
    6608:	ff 91       	pop	r31
    660a:	ef 91       	pop	r30
    660c:	bf 91       	pop	r27
    660e:	af 91       	pop	r26
    6610:	9f 91       	pop	r25
    6612:	8f 91       	pop	r24
    6614:	7f 91       	pop	r23
    6616:	6f 91       	pop	r22
    6618:	5f 91       	pop	r21
    661a:	4f 91       	pop	r20
    661c:	3f 91       	pop	r19
    661e:	2f 91       	pop	r18
    6620:	0f 90       	pop	r0
    6622:	00 92 3b 00 	sts	0x003B, r0
    6626:	0f 90       	pop	r0
    6628:	00 92 3f 00 	sts	0x003F, r0
    662c:	0f 90       	pop	r0
    662e:	1f 90       	pop	r1
    6630:	18 95       	reti

00006632 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    6632:	1f 92       	push	r1
    6634:	0f 92       	push	r0
    6636:	00 90 3f 00 	lds	r0, 0x003F
    663a:	0f 92       	push	r0
    663c:	11 24       	eor	r1, r1
    663e:	00 90 3b 00 	lds	r0, 0x003B
    6642:	0f 92       	push	r0
    6644:	2f 93       	push	r18
    6646:	3f 93       	push	r19
    6648:	4f 93       	push	r20
    664a:	5f 93       	push	r21
    664c:	6f 93       	push	r22
    664e:	7f 93       	push	r23
    6650:	8f 93       	push	r24
    6652:	9f 93       	push	r25
    6654:	af 93       	push	r26
    6656:	bf 93       	push	r27
    6658:	ef 93       	push	r30
    665a:	ff 93       	push	r31
    665c:	cf 93       	push	r28
    665e:	df 93       	push	r29
    6660:	cd b7       	in	r28, 0x3d	; 61
    6662:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    6664:	80 91 2f 28 	lds	r24, 0x282F
    6668:	90 91 30 28 	lds	r25, 0x2830
    666c:	00 97       	sbiw	r24, 0x00	; 0
    666e:	31 f0       	breq	.+12     	; 0x667c <__vector_47+0x4a>
		tc_tce0_ovf_callback();
    6670:	80 91 2f 28 	lds	r24, 0x282F
    6674:	90 91 30 28 	lds	r25, 0x2830
    6678:	fc 01       	movw	r30, r24
    667a:	09 95       	icall
	}
}
    667c:	df 91       	pop	r29
    667e:	cf 91       	pop	r28
    6680:	ff 91       	pop	r31
    6682:	ef 91       	pop	r30
    6684:	bf 91       	pop	r27
    6686:	af 91       	pop	r26
    6688:	9f 91       	pop	r25
    668a:	8f 91       	pop	r24
    668c:	7f 91       	pop	r23
    668e:	6f 91       	pop	r22
    6690:	5f 91       	pop	r21
    6692:	4f 91       	pop	r20
    6694:	3f 91       	pop	r19
    6696:	2f 91       	pop	r18
    6698:	0f 90       	pop	r0
    669a:	00 92 3b 00 	sts	0x003B, r0
    669e:	0f 90       	pop	r0
    66a0:	00 92 3f 00 	sts	0x003F, r0
    66a4:	0f 90       	pop	r0
    66a6:	1f 90       	pop	r1
    66a8:	18 95       	reti

000066aa <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    66aa:	1f 92       	push	r1
    66ac:	0f 92       	push	r0
    66ae:	00 90 3f 00 	lds	r0, 0x003F
    66b2:	0f 92       	push	r0
    66b4:	11 24       	eor	r1, r1
    66b6:	00 90 3b 00 	lds	r0, 0x003B
    66ba:	0f 92       	push	r0
    66bc:	2f 93       	push	r18
    66be:	3f 93       	push	r19
    66c0:	4f 93       	push	r20
    66c2:	5f 93       	push	r21
    66c4:	6f 93       	push	r22
    66c6:	7f 93       	push	r23
    66c8:	8f 93       	push	r24
    66ca:	9f 93       	push	r25
    66cc:	af 93       	push	r26
    66ce:	bf 93       	push	r27
    66d0:	ef 93       	push	r30
    66d2:	ff 93       	push	r31
    66d4:	cf 93       	push	r28
    66d6:	df 93       	push	r29
    66d8:	cd b7       	in	r28, 0x3d	; 61
    66da:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    66dc:	80 91 31 28 	lds	r24, 0x2831
    66e0:	90 91 32 28 	lds	r25, 0x2832
    66e4:	00 97       	sbiw	r24, 0x00	; 0
    66e6:	31 f0       	breq	.+12     	; 0x66f4 <__vector_48+0x4a>
		tc_tce0_err_callback();
    66e8:	80 91 31 28 	lds	r24, 0x2831
    66ec:	90 91 32 28 	lds	r25, 0x2832
    66f0:	fc 01       	movw	r30, r24
    66f2:	09 95       	icall
	}
}
    66f4:	df 91       	pop	r29
    66f6:	cf 91       	pop	r28
    66f8:	ff 91       	pop	r31
    66fa:	ef 91       	pop	r30
    66fc:	bf 91       	pop	r27
    66fe:	af 91       	pop	r26
    6700:	9f 91       	pop	r25
    6702:	8f 91       	pop	r24
    6704:	7f 91       	pop	r23
    6706:	6f 91       	pop	r22
    6708:	5f 91       	pop	r21
    670a:	4f 91       	pop	r20
    670c:	3f 91       	pop	r19
    670e:	2f 91       	pop	r18
    6710:	0f 90       	pop	r0
    6712:	00 92 3b 00 	sts	0x003B, r0
    6716:	0f 90       	pop	r0
    6718:	00 92 3f 00 	sts	0x003F, r0
    671c:	0f 90       	pop	r0
    671e:	1f 90       	pop	r1
    6720:	18 95       	reti

00006722 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    6722:	1f 92       	push	r1
    6724:	0f 92       	push	r0
    6726:	00 90 3f 00 	lds	r0, 0x003F
    672a:	0f 92       	push	r0
    672c:	11 24       	eor	r1, r1
    672e:	00 90 3b 00 	lds	r0, 0x003B
    6732:	0f 92       	push	r0
    6734:	2f 93       	push	r18
    6736:	3f 93       	push	r19
    6738:	4f 93       	push	r20
    673a:	5f 93       	push	r21
    673c:	6f 93       	push	r22
    673e:	7f 93       	push	r23
    6740:	8f 93       	push	r24
    6742:	9f 93       	push	r25
    6744:	af 93       	push	r26
    6746:	bf 93       	push	r27
    6748:	ef 93       	push	r30
    674a:	ff 93       	push	r31
    674c:	cf 93       	push	r28
    674e:	df 93       	push	r29
    6750:	cd b7       	in	r28, 0x3d	; 61
    6752:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    6754:	80 91 33 28 	lds	r24, 0x2833
    6758:	90 91 34 28 	lds	r25, 0x2834
    675c:	00 97       	sbiw	r24, 0x00	; 0
    675e:	31 f0       	breq	.+12     	; 0x676c <__vector_49+0x4a>
		tc_tce0_cca_callback();
    6760:	80 91 33 28 	lds	r24, 0x2833
    6764:	90 91 34 28 	lds	r25, 0x2834
    6768:	fc 01       	movw	r30, r24
    676a:	09 95       	icall
	}
}
    676c:	df 91       	pop	r29
    676e:	cf 91       	pop	r28
    6770:	ff 91       	pop	r31
    6772:	ef 91       	pop	r30
    6774:	bf 91       	pop	r27
    6776:	af 91       	pop	r26
    6778:	9f 91       	pop	r25
    677a:	8f 91       	pop	r24
    677c:	7f 91       	pop	r23
    677e:	6f 91       	pop	r22
    6780:	5f 91       	pop	r21
    6782:	4f 91       	pop	r20
    6784:	3f 91       	pop	r19
    6786:	2f 91       	pop	r18
    6788:	0f 90       	pop	r0
    678a:	00 92 3b 00 	sts	0x003B, r0
    678e:	0f 90       	pop	r0
    6790:	00 92 3f 00 	sts	0x003F, r0
    6794:	0f 90       	pop	r0
    6796:	1f 90       	pop	r1
    6798:	18 95       	reti

0000679a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    679a:	1f 92       	push	r1
    679c:	0f 92       	push	r0
    679e:	00 90 3f 00 	lds	r0, 0x003F
    67a2:	0f 92       	push	r0
    67a4:	11 24       	eor	r1, r1
    67a6:	00 90 3b 00 	lds	r0, 0x003B
    67aa:	0f 92       	push	r0
    67ac:	2f 93       	push	r18
    67ae:	3f 93       	push	r19
    67b0:	4f 93       	push	r20
    67b2:	5f 93       	push	r21
    67b4:	6f 93       	push	r22
    67b6:	7f 93       	push	r23
    67b8:	8f 93       	push	r24
    67ba:	9f 93       	push	r25
    67bc:	af 93       	push	r26
    67be:	bf 93       	push	r27
    67c0:	ef 93       	push	r30
    67c2:	ff 93       	push	r31
    67c4:	cf 93       	push	r28
    67c6:	df 93       	push	r29
    67c8:	cd b7       	in	r28, 0x3d	; 61
    67ca:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    67cc:	80 91 35 28 	lds	r24, 0x2835
    67d0:	90 91 36 28 	lds	r25, 0x2836
    67d4:	00 97       	sbiw	r24, 0x00	; 0
    67d6:	31 f0       	breq	.+12     	; 0x67e4 <__vector_50+0x4a>
		tc_tce0_ccb_callback();
    67d8:	80 91 35 28 	lds	r24, 0x2835
    67dc:	90 91 36 28 	lds	r25, 0x2836
    67e0:	fc 01       	movw	r30, r24
    67e2:	09 95       	icall
	}
}
    67e4:	df 91       	pop	r29
    67e6:	cf 91       	pop	r28
    67e8:	ff 91       	pop	r31
    67ea:	ef 91       	pop	r30
    67ec:	bf 91       	pop	r27
    67ee:	af 91       	pop	r26
    67f0:	9f 91       	pop	r25
    67f2:	8f 91       	pop	r24
    67f4:	7f 91       	pop	r23
    67f6:	6f 91       	pop	r22
    67f8:	5f 91       	pop	r21
    67fa:	4f 91       	pop	r20
    67fc:	3f 91       	pop	r19
    67fe:	2f 91       	pop	r18
    6800:	0f 90       	pop	r0
    6802:	00 92 3b 00 	sts	0x003B, r0
    6806:	0f 90       	pop	r0
    6808:	00 92 3f 00 	sts	0x003F, r0
    680c:	0f 90       	pop	r0
    680e:	1f 90       	pop	r1
    6810:	18 95       	reti

00006812 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    6812:	1f 92       	push	r1
    6814:	0f 92       	push	r0
    6816:	00 90 3f 00 	lds	r0, 0x003F
    681a:	0f 92       	push	r0
    681c:	11 24       	eor	r1, r1
    681e:	00 90 3b 00 	lds	r0, 0x003B
    6822:	0f 92       	push	r0
    6824:	2f 93       	push	r18
    6826:	3f 93       	push	r19
    6828:	4f 93       	push	r20
    682a:	5f 93       	push	r21
    682c:	6f 93       	push	r22
    682e:	7f 93       	push	r23
    6830:	8f 93       	push	r24
    6832:	9f 93       	push	r25
    6834:	af 93       	push	r26
    6836:	bf 93       	push	r27
    6838:	ef 93       	push	r30
    683a:	ff 93       	push	r31
    683c:	cf 93       	push	r28
    683e:	df 93       	push	r29
    6840:	cd b7       	in	r28, 0x3d	; 61
    6842:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    6844:	80 91 37 28 	lds	r24, 0x2837
    6848:	90 91 38 28 	lds	r25, 0x2838
    684c:	00 97       	sbiw	r24, 0x00	; 0
    684e:	31 f0       	breq	.+12     	; 0x685c <__vector_51+0x4a>
		tc_tce0_ccc_callback();
    6850:	80 91 37 28 	lds	r24, 0x2837
    6854:	90 91 38 28 	lds	r25, 0x2838
    6858:	fc 01       	movw	r30, r24
    685a:	09 95       	icall
	}
}
    685c:	df 91       	pop	r29
    685e:	cf 91       	pop	r28
    6860:	ff 91       	pop	r31
    6862:	ef 91       	pop	r30
    6864:	bf 91       	pop	r27
    6866:	af 91       	pop	r26
    6868:	9f 91       	pop	r25
    686a:	8f 91       	pop	r24
    686c:	7f 91       	pop	r23
    686e:	6f 91       	pop	r22
    6870:	5f 91       	pop	r21
    6872:	4f 91       	pop	r20
    6874:	3f 91       	pop	r19
    6876:	2f 91       	pop	r18
    6878:	0f 90       	pop	r0
    687a:	00 92 3b 00 	sts	0x003B, r0
    687e:	0f 90       	pop	r0
    6880:	00 92 3f 00 	sts	0x003F, r0
    6884:	0f 90       	pop	r0
    6886:	1f 90       	pop	r1
    6888:	18 95       	reti

0000688a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    688a:	1f 92       	push	r1
    688c:	0f 92       	push	r0
    688e:	00 90 3f 00 	lds	r0, 0x003F
    6892:	0f 92       	push	r0
    6894:	11 24       	eor	r1, r1
    6896:	00 90 3b 00 	lds	r0, 0x003B
    689a:	0f 92       	push	r0
    689c:	2f 93       	push	r18
    689e:	3f 93       	push	r19
    68a0:	4f 93       	push	r20
    68a2:	5f 93       	push	r21
    68a4:	6f 93       	push	r22
    68a6:	7f 93       	push	r23
    68a8:	8f 93       	push	r24
    68aa:	9f 93       	push	r25
    68ac:	af 93       	push	r26
    68ae:	bf 93       	push	r27
    68b0:	ef 93       	push	r30
    68b2:	ff 93       	push	r31
    68b4:	cf 93       	push	r28
    68b6:	df 93       	push	r29
    68b8:	cd b7       	in	r28, 0x3d	; 61
    68ba:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    68bc:	80 91 39 28 	lds	r24, 0x2839
    68c0:	90 91 3a 28 	lds	r25, 0x283A
    68c4:	00 97       	sbiw	r24, 0x00	; 0
    68c6:	31 f0       	breq	.+12     	; 0x68d4 <__vector_52+0x4a>
		tc_tce0_ccd_callback();
    68c8:	80 91 39 28 	lds	r24, 0x2839
    68cc:	90 91 3a 28 	lds	r25, 0x283A
    68d0:	fc 01       	movw	r30, r24
    68d2:	09 95       	icall
	}
}
    68d4:	df 91       	pop	r29
    68d6:	cf 91       	pop	r28
    68d8:	ff 91       	pop	r31
    68da:	ef 91       	pop	r30
    68dc:	bf 91       	pop	r27
    68de:	af 91       	pop	r26
    68e0:	9f 91       	pop	r25
    68e2:	8f 91       	pop	r24
    68e4:	7f 91       	pop	r23
    68e6:	6f 91       	pop	r22
    68e8:	5f 91       	pop	r21
    68ea:	4f 91       	pop	r20
    68ec:	3f 91       	pop	r19
    68ee:	2f 91       	pop	r18
    68f0:	0f 90       	pop	r0
    68f2:	00 92 3b 00 	sts	0x003B, r0
    68f6:	0f 90       	pop	r0
    68f8:	00 92 3f 00 	sts	0x003F, r0
    68fc:	0f 90       	pop	r0
    68fe:	1f 90       	pop	r1
    6900:	18 95       	reti

00006902 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    6902:	1f 92       	push	r1
    6904:	0f 92       	push	r0
    6906:	00 90 3f 00 	lds	r0, 0x003F
    690a:	0f 92       	push	r0
    690c:	11 24       	eor	r1, r1
    690e:	00 90 3b 00 	lds	r0, 0x003B
    6912:	0f 92       	push	r0
    6914:	2f 93       	push	r18
    6916:	3f 93       	push	r19
    6918:	4f 93       	push	r20
    691a:	5f 93       	push	r21
    691c:	6f 93       	push	r22
    691e:	7f 93       	push	r23
    6920:	8f 93       	push	r24
    6922:	9f 93       	push	r25
    6924:	af 93       	push	r26
    6926:	bf 93       	push	r27
    6928:	ef 93       	push	r30
    692a:	ff 93       	push	r31
    692c:	cf 93       	push	r28
    692e:	df 93       	push	r29
    6930:	cd b7       	in	r28, 0x3d	; 61
    6932:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    6934:	80 91 3b 28 	lds	r24, 0x283B
    6938:	90 91 3c 28 	lds	r25, 0x283C
    693c:	00 97       	sbiw	r24, 0x00	; 0
    693e:	31 f0       	breq	.+12     	; 0x694c <__vector_108+0x4a>
		tc_tcf0_ovf_callback();
    6940:	80 91 3b 28 	lds	r24, 0x283B
    6944:	90 91 3c 28 	lds	r25, 0x283C
    6948:	fc 01       	movw	r30, r24
    694a:	09 95       	icall
	}
}
    694c:	df 91       	pop	r29
    694e:	cf 91       	pop	r28
    6950:	ff 91       	pop	r31
    6952:	ef 91       	pop	r30
    6954:	bf 91       	pop	r27
    6956:	af 91       	pop	r26
    6958:	9f 91       	pop	r25
    695a:	8f 91       	pop	r24
    695c:	7f 91       	pop	r23
    695e:	6f 91       	pop	r22
    6960:	5f 91       	pop	r21
    6962:	4f 91       	pop	r20
    6964:	3f 91       	pop	r19
    6966:	2f 91       	pop	r18
    6968:	0f 90       	pop	r0
    696a:	00 92 3b 00 	sts	0x003B, r0
    696e:	0f 90       	pop	r0
    6970:	00 92 3f 00 	sts	0x003F, r0
    6974:	0f 90       	pop	r0
    6976:	1f 90       	pop	r1
    6978:	18 95       	reti

0000697a <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    697a:	1f 92       	push	r1
    697c:	0f 92       	push	r0
    697e:	00 90 3f 00 	lds	r0, 0x003F
    6982:	0f 92       	push	r0
    6984:	11 24       	eor	r1, r1
    6986:	00 90 3b 00 	lds	r0, 0x003B
    698a:	0f 92       	push	r0
    698c:	2f 93       	push	r18
    698e:	3f 93       	push	r19
    6990:	4f 93       	push	r20
    6992:	5f 93       	push	r21
    6994:	6f 93       	push	r22
    6996:	7f 93       	push	r23
    6998:	8f 93       	push	r24
    699a:	9f 93       	push	r25
    699c:	af 93       	push	r26
    699e:	bf 93       	push	r27
    69a0:	ef 93       	push	r30
    69a2:	ff 93       	push	r31
    69a4:	cf 93       	push	r28
    69a6:	df 93       	push	r29
    69a8:	cd b7       	in	r28, 0x3d	; 61
    69aa:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    69ac:	80 91 3d 28 	lds	r24, 0x283D
    69b0:	90 91 3e 28 	lds	r25, 0x283E
    69b4:	00 97       	sbiw	r24, 0x00	; 0
    69b6:	31 f0       	breq	.+12     	; 0x69c4 <__vector_109+0x4a>
		tc_tcf0_err_callback();
    69b8:	80 91 3d 28 	lds	r24, 0x283D
    69bc:	90 91 3e 28 	lds	r25, 0x283E
    69c0:	fc 01       	movw	r30, r24
    69c2:	09 95       	icall
	}
}
    69c4:	df 91       	pop	r29
    69c6:	cf 91       	pop	r28
    69c8:	ff 91       	pop	r31
    69ca:	ef 91       	pop	r30
    69cc:	bf 91       	pop	r27
    69ce:	af 91       	pop	r26
    69d0:	9f 91       	pop	r25
    69d2:	8f 91       	pop	r24
    69d4:	7f 91       	pop	r23
    69d6:	6f 91       	pop	r22
    69d8:	5f 91       	pop	r21
    69da:	4f 91       	pop	r20
    69dc:	3f 91       	pop	r19
    69de:	2f 91       	pop	r18
    69e0:	0f 90       	pop	r0
    69e2:	00 92 3b 00 	sts	0x003B, r0
    69e6:	0f 90       	pop	r0
    69e8:	00 92 3f 00 	sts	0x003F, r0
    69ec:	0f 90       	pop	r0
    69ee:	1f 90       	pop	r1
    69f0:	18 95       	reti

000069f2 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    69f2:	1f 92       	push	r1
    69f4:	0f 92       	push	r0
    69f6:	00 90 3f 00 	lds	r0, 0x003F
    69fa:	0f 92       	push	r0
    69fc:	11 24       	eor	r1, r1
    69fe:	00 90 3b 00 	lds	r0, 0x003B
    6a02:	0f 92       	push	r0
    6a04:	2f 93       	push	r18
    6a06:	3f 93       	push	r19
    6a08:	4f 93       	push	r20
    6a0a:	5f 93       	push	r21
    6a0c:	6f 93       	push	r22
    6a0e:	7f 93       	push	r23
    6a10:	8f 93       	push	r24
    6a12:	9f 93       	push	r25
    6a14:	af 93       	push	r26
    6a16:	bf 93       	push	r27
    6a18:	ef 93       	push	r30
    6a1a:	ff 93       	push	r31
    6a1c:	cf 93       	push	r28
    6a1e:	df 93       	push	r29
    6a20:	cd b7       	in	r28, 0x3d	; 61
    6a22:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    6a24:	80 91 3f 28 	lds	r24, 0x283F
    6a28:	90 91 40 28 	lds	r25, 0x2840
    6a2c:	00 97       	sbiw	r24, 0x00	; 0
    6a2e:	31 f0       	breq	.+12     	; 0x6a3c <__vector_110+0x4a>
		tc_tcf0_cca_callback();
    6a30:	80 91 3f 28 	lds	r24, 0x283F
    6a34:	90 91 40 28 	lds	r25, 0x2840
    6a38:	fc 01       	movw	r30, r24
    6a3a:	09 95       	icall
	}
}
    6a3c:	df 91       	pop	r29
    6a3e:	cf 91       	pop	r28
    6a40:	ff 91       	pop	r31
    6a42:	ef 91       	pop	r30
    6a44:	bf 91       	pop	r27
    6a46:	af 91       	pop	r26
    6a48:	9f 91       	pop	r25
    6a4a:	8f 91       	pop	r24
    6a4c:	7f 91       	pop	r23
    6a4e:	6f 91       	pop	r22
    6a50:	5f 91       	pop	r21
    6a52:	4f 91       	pop	r20
    6a54:	3f 91       	pop	r19
    6a56:	2f 91       	pop	r18
    6a58:	0f 90       	pop	r0
    6a5a:	00 92 3b 00 	sts	0x003B, r0
    6a5e:	0f 90       	pop	r0
    6a60:	00 92 3f 00 	sts	0x003F, r0
    6a64:	0f 90       	pop	r0
    6a66:	1f 90       	pop	r1
    6a68:	18 95       	reti

00006a6a <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    6a6a:	1f 92       	push	r1
    6a6c:	0f 92       	push	r0
    6a6e:	00 90 3f 00 	lds	r0, 0x003F
    6a72:	0f 92       	push	r0
    6a74:	11 24       	eor	r1, r1
    6a76:	00 90 3b 00 	lds	r0, 0x003B
    6a7a:	0f 92       	push	r0
    6a7c:	2f 93       	push	r18
    6a7e:	3f 93       	push	r19
    6a80:	4f 93       	push	r20
    6a82:	5f 93       	push	r21
    6a84:	6f 93       	push	r22
    6a86:	7f 93       	push	r23
    6a88:	8f 93       	push	r24
    6a8a:	9f 93       	push	r25
    6a8c:	af 93       	push	r26
    6a8e:	bf 93       	push	r27
    6a90:	ef 93       	push	r30
    6a92:	ff 93       	push	r31
    6a94:	cf 93       	push	r28
    6a96:	df 93       	push	r29
    6a98:	cd b7       	in	r28, 0x3d	; 61
    6a9a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    6a9c:	80 91 41 28 	lds	r24, 0x2841
    6aa0:	90 91 42 28 	lds	r25, 0x2842
    6aa4:	00 97       	sbiw	r24, 0x00	; 0
    6aa6:	31 f0       	breq	.+12     	; 0x6ab4 <__vector_111+0x4a>
		tc_tcf0_ccb_callback();
    6aa8:	80 91 41 28 	lds	r24, 0x2841
    6aac:	90 91 42 28 	lds	r25, 0x2842
    6ab0:	fc 01       	movw	r30, r24
    6ab2:	09 95       	icall
	}
}
    6ab4:	df 91       	pop	r29
    6ab6:	cf 91       	pop	r28
    6ab8:	ff 91       	pop	r31
    6aba:	ef 91       	pop	r30
    6abc:	bf 91       	pop	r27
    6abe:	af 91       	pop	r26
    6ac0:	9f 91       	pop	r25
    6ac2:	8f 91       	pop	r24
    6ac4:	7f 91       	pop	r23
    6ac6:	6f 91       	pop	r22
    6ac8:	5f 91       	pop	r21
    6aca:	4f 91       	pop	r20
    6acc:	3f 91       	pop	r19
    6ace:	2f 91       	pop	r18
    6ad0:	0f 90       	pop	r0
    6ad2:	00 92 3b 00 	sts	0x003B, r0
    6ad6:	0f 90       	pop	r0
    6ad8:	00 92 3f 00 	sts	0x003F, r0
    6adc:	0f 90       	pop	r0
    6ade:	1f 90       	pop	r1
    6ae0:	18 95       	reti

00006ae2 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    6ae2:	1f 92       	push	r1
    6ae4:	0f 92       	push	r0
    6ae6:	00 90 3f 00 	lds	r0, 0x003F
    6aea:	0f 92       	push	r0
    6aec:	11 24       	eor	r1, r1
    6aee:	00 90 3b 00 	lds	r0, 0x003B
    6af2:	0f 92       	push	r0
    6af4:	2f 93       	push	r18
    6af6:	3f 93       	push	r19
    6af8:	4f 93       	push	r20
    6afa:	5f 93       	push	r21
    6afc:	6f 93       	push	r22
    6afe:	7f 93       	push	r23
    6b00:	8f 93       	push	r24
    6b02:	9f 93       	push	r25
    6b04:	af 93       	push	r26
    6b06:	bf 93       	push	r27
    6b08:	ef 93       	push	r30
    6b0a:	ff 93       	push	r31
    6b0c:	cf 93       	push	r28
    6b0e:	df 93       	push	r29
    6b10:	cd b7       	in	r28, 0x3d	; 61
    6b12:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    6b14:	80 91 43 28 	lds	r24, 0x2843
    6b18:	90 91 44 28 	lds	r25, 0x2844
    6b1c:	00 97       	sbiw	r24, 0x00	; 0
    6b1e:	31 f0       	breq	.+12     	; 0x6b2c <__vector_112+0x4a>
		tc_tcf0_ccc_callback();
    6b20:	80 91 43 28 	lds	r24, 0x2843
    6b24:	90 91 44 28 	lds	r25, 0x2844
    6b28:	fc 01       	movw	r30, r24
    6b2a:	09 95       	icall
	}
}
    6b2c:	df 91       	pop	r29
    6b2e:	cf 91       	pop	r28
    6b30:	ff 91       	pop	r31
    6b32:	ef 91       	pop	r30
    6b34:	bf 91       	pop	r27
    6b36:	af 91       	pop	r26
    6b38:	9f 91       	pop	r25
    6b3a:	8f 91       	pop	r24
    6b3c:	7f 91       	pop	r23
    6b3e:	6f 91       	pop	r22
    6b40:	5f 91       	pop	r21
    6b42:	4f 91       	pop	r20
    6b44:	3f 91       	pop	r19
    6b46:	2f 91       	pop	r18
    6b48:	0f 90       	pop	r0
    6b4a:	00 92 3b 00 	sts	0x003B, r0
    6b4e:	0f 90       	pop	r0
    6b50:	00 92 3f 00 	sts	0x003F, r0
    6b54:	0f 90       	pop	r0
    6b56:	1f 90       	pop	r1
    6b58:	18 95       	reti

00006b5a <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    6b5a:	1f 92       	push	r1
    6b5c:	0f 92       	push	r0
    6b5e:	00 90 3f 00 	lds	r0, 0x003F
    6b62:	0f 92       	push	r0
    6b64:	11 24       	eor	r1, r1
    6b66:	00 90 3b 00 	lds	r0, 0x003B
    6b6a:	0f 92       	push	r0
    6b6c:	2f 93       	push	r18
    6b6e:	3f 93       	push	r19
    6b70:	4f 93       	push	r20
    6b72:	5f 93       	push	r21
    6b74:	6f 93       	push	r22
    6b76:	7f 93       	push	r23
    6b78:	8f 93       	push	r24
    6b7a:	9f 93       	push	r25
    6b7c:	af 93       	push	r26
    6b7e:	bf 93       	push	r27
    6b80:	ef 93       	push	r30
    6b82:	ff 93       	push	r31
    6b84:	cf 93       	push	r28
    6b86:	df 93       	push	r29
    6b88:	cd b7       	in	r28, 0x3d	; 61
    6b8a:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    6b8c:	80 91 45 28 	lds	r24, 0x2845
    6b90:	90 91 46 28 	lds	r25, 0x2846
    6b94:	00 97       	sbiw	r24, 0x00	; 0
    6b96:	31 f0       	breq	.+12     	; 0x6ba4 <__vector_113+0x4a>
		tc_tcf0_ccd_callback();
    6b98:	80 91 45 28 	lds	r24, 0x2845
    6b9c:	90 91 46 28 	lds	r25, 0x2846
    6ba0:	fc 01       	movw	r30, r24
    6ba2:	09 95       	icall
	}
}
    6ba4:	df 91       	pop	r29
    6ba6:	cf 91       	pop	r28
    6ba8:	ff 91       	pop	r31
    6baa:	ef 91       	pop	r30
    6bac:	bf 91       	pop	r27
    6bae:	af 91       	pop	r26
    6bb0:	9f 91       	pop	r25
    6bb2:	8f 91       	pop	r24
    6bb4:	7f 91       	pop	r23
    6bb6:	6f 91       	pop	r22
    6bb8:	5f 91       	pop	r21
    6bba:	4f 91       	pop	r20
    6bbc:	3f 91       	pop	r19
    6bbe:	2f 91       	pop	r18
    6bc0:	0f 90       	pop	r0
    6bc2:	00 92 3b 00 	sts	0x003B, r0
    6bc6:	0f 90       	pop	r0
    6bc8:	00 92 3f 00 	sts	0x003F, r0
    6bcc:	0f 90       	pop	r0
    6bce:	1f 90       	pop	r1
    6bd0:	18 95       	reti

00006bd2 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    6bd2:	cf 93       	push	r28
    6bd4:	df 93       	push	r29
    6bd6:	00 d0       	rcall	.+0      	; 0x6bd8 <tc_enable+0x6>
    6bd8:	1f 92       	push	r1
    6bda:	cd b7       	in	r28, 0x3d	; 61
    6bdc:	de b7       	in	r29, 0x3e	; 62
    6bde:	8a 83       	std	Y+2, r24	; 0x02
    6be0:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t iflags = cpu_irq_save();
    6be2:	10 d9       	rcall	.-3552   	; 0x5e04 <cpu_irq_save>
    6be4:	89 83       	std	Y+1, r24	; 0x01

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    6be6:	8a 81       	ldd	r24, Y+2	; 0x02
    6be8:	9b 81       	ldd	r25, Y+3	; 0x03
    6bea:	81 15       	cp	r24, r1
    6bec:	28 e0       	ldi	r18, 0x08	; 8
    6bee:	92 07       	cpc	r25, r18
    6bf0:	49 f4       	brne	.+18     	; 0x6c04 <tc_enable+0x32>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    6bf2:	61 e0       	ldi	r22, 0x01	; 1
    6bf4:	83 e0       	ldi	r24, 0x03	; 3
    6bf6:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    6bfa:	64 e0       	ldi	r22, 0x04	; 4
    6bfc:	83 e0       	ldi	r24, 0x03	; 3
    6bfe:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
    6c02:	3f c0       	rjmp	.+126    	; 0x6c82 <tc_enable+0xb0>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    6c04:	8a 81       	ldd	r24, Y+2	; 0x02
    6c06:	9b 81       	ldd	r25, Y+3	; 0x03
    6c08:	80 34       	cpi	r24, 0x40	; 64
    6c0a:	28 e0       	ldi	r18, 0x08	; 8
    6c0c:	92 07       	cpc	r25, r18
    6c0e:	49 f4       	brne	.+18     	; 0x6c22 <tc_enable+0x50>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    6c10:	62 e0       	ldi	r22, 0x02	; 2
    6c12:	83 e0       	ldi	r24, 0x03	; 3
    6c14:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    6c18:	64 e0       	ldi	r22, 0x04	; 4
    6c1a:	83 e0       	ldi	r24, 0x03	; 3
    6c1c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
    6c20:	30 c0       	rjmp	.+96     	; 0x6c82 <tc_enable+0xb0>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    6c22:	8a 81       	ldd	r24, Y+2	; 0x02
    6c24:	9b 81       	ldd	r25, Y+3	; 0x03
    6c26:	81 15       	cp	r24, r1
    6c28:	29 e0       	ldi	r18, 0x09	; 9
    6c2a:	92 07       	cpc	r25, r18
    6c2c:	49 f4       	brne	.+18     	; 0x6c40 <tc_enable+0x6e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    6c2e:	61 e0       	ldi	r22, 0x01	; 1
    6c30:	84 e0       	ldi	r24, 0x04	; 4
    6c32:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    6c36:	64 e0       	ldi	r22, 0x04	; 4
    6c38:	84 e0       	ldi	r24, 0x04	; 4
    6c3a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
    6c3e:	21 c0       	rjmp	.+66     	; 0x6c82 <tc_enable+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    6c40:	8a 81       	ldd	r24, Y+2	; 0x02
    6c42:	9b 81       	ldd	r25, Y+3	; 0x03
    6c44:	81 15       	cp	r24, r1
    6c46:	2a e0       	ldi	r18, 0x0A	; 10
    6c48:	92 07       	cpc	r25, r18
    6c4a:	49 f4       	brne	.+18     	; 0x6c5e <tc_enable+0x8c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    6c4c:	61 e0       	ldi	r22, 0x01	; 1
    6c4e:	85 e0       	ldi	r24, 0x05	; 5
    6c50:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    6c54:	64 e0       	ldi	r22, 0x04	; 4
    6c56:	85 e0       	ldi	r24, 0x05	; 5
    6c58:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
    6c5c:	12 c0       	rjmp	.+36     	; 0x6c82 <tc_enable+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    6c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    6c60:	9b 81       	ldd	r25, Y+3	; 0x03
    6c62:	81 15       	cp	r24, r1
    6c64:	2b e0       	ldi	r18, 0x0B	; 11
    6c66:	92 07       	cpc	r25, r18
    6c68:	49 f4       	brne	.+18     	; 0x6c7c <tc_enable+0xaa>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    6c6a:	61 e0       	ldi	r22, 0x01	; 1
    6c6c:	86 e0       	ldi	r24, 0x06	; 6
    6c6e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    6c72:	64 e0       	ldi	r22, 0x04	; 4
    6c74:	86 e0       	ldi	r24, 0x06	; 6
    6c76:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
    6c7a:	03 c0       	rjmp	.+6      	; 0x6c82 <tc_enable+0xb0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	} else
#endif
	{
		cpu_irq_restore(iflags);
    6c7c:	89 81       	ldd	r24, Y+1	; 0x01
    6c7e:	d2 d8       	rcall	.-3676   	; 0x5e24 <cpu_irq_restore>
		return;
    6c80:	04 c0       	rjmp	.+8      	; 0x6c8a <tc_enable+0xb8>
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
    6c82:	81 e0       	ldi	r24, 0x01	; 1
    6c84:	de d8       	rcall	.-3652   	; 0x5e42 <sleepmgr_lock_mode>
	cpu_irq_restore(iflags);
    6c86:	89 81       	ldd	r24, Y+1	; 0x01
    6c88:	cd d8       	rcall	.-3686   	; 0x5e24 <cpu_irq_restore>
}
    6c8a:	23 96       	adiw	r28, 0x03	; 3
    6c8c:	cd bf       	out	0x3d, r28	; 61
    6c8e:	de bf       	out	0x3e, r29	; 62
    6c90:	df 91       	pop	r29
    6c92:	cf 91       	pop	r28
    6c94:	08 95       	ret

00006c96 <tc_disable>:
 *
 * \note
 * mask TC clock (sysclk).
 */
void tc_disable(volatile void *tc)
{
    6c96:	cf 93       	push	r28
    6c98:	df 93       	push	r29
    6c9a:	00 d0       	rcall	.+0      	; 0x6c9c <tc_disable+0x6>
    6c9c:	1f 92       	push	r1
    6c9e:	cd b7       	in	r28, 0x3d	; 61
    6ca0:	de b7       	in	r29, 0x3e	; 62
    6ca2:	8a 83       	std	Y+2, r24	; 0x02
    6ca4:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t iflags = cpu_irq_save();
    6ca6:	ae d8       	rcall	.-3748   	; 0x5e04 <cpu_irq_save>
    6ca8:	89 83       	std	Y+1, r24	; 0x01

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
    6caa:	81 e0       	ldi	r24, 0x01	; 1
    6cac:	e6 d8       	rcall	.-3636   	; 0x5e7a <sleepmgr_unlock_mode>

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    6cae:	8a 81       	ldd	r24, Y+2	; 0x02
    6cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    6cb2:	81 15       	cp	r24, r1
    6cb4:	28 e0       	ldi	r18, 0x08	; 8
    6cb6:	92 07       	cpc	r25, r18
    6cb8:	49 f4       	brne	.+18     	; 0x6ccc <tc_disable+0x36>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    6cba:	61 e0       	ldi	r22, 0x01	; 1
    6cbc:	83 e0       	ldi	r24, 0x03	; 3
    6cbe:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    6cc2:	64 e0       	ldi	r22, 0x04	; 4
    6cc4:	83 e0       	ldi	r24, 0x03	; 3
    6cc6:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <sysclk_disable_module>
    6cca:	3f c0       	rjmp	.+126    	; 0x6d4a <tc_disable+0xb4>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    6ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    6cce:	9b 81       	ldd	r25, Y+3	; 0x03
    6cd0:	80 34       	cpi	r24, 0x40	; 64
    6cd2:	28 e0       	ldi	r18, 0x08	; 8
    6cd4:	92 07       	cpc	r25, r18
    6cd6:	49 f4       	brne	.+18     	; 0x6cea <tc_disable+0x54>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    6cd8:	62 e0       	ldi	r22, 0x02	; 2
    6cda:	83 e0       	ldi	r24, 0x03	; 3
    6cdc:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    6ce0:	64 e0       	ldi	r22, 0x04	; 4
    6ce2:	83 e0       	ldi	r24, 0x03	; 3
    6ce4:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <sysclk_disable_module>
    6ce8:	30 c0       	rjmp	.+96     	; 0x6d4a <tc_disable+0xb4>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    6cea:	8a 81       	ldd	r24, Y+2	; 0x02
    6cec:	9b 81       	ldd	r25, Y+3	; 0x03
    6cee:	81 15       	cp	r24, r1
    6cf0:	29 e0       	ldi	r18, 0x09	; 9
    6cf2:	92 07       	cpc	r25, r18
    6cf4:	49 f4       	brne	.+18     	; 0x6d08 <tc_disable+0x72>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    6cf6:	61 e0       	ldi	r22, 0x01	; 1
    6cf8:	84 e0       	ldi	r24, 0x04	; 4
    6cfa:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    6cfe:	64 e0       	ldi	r22, 0x04	; 4
    6d00:	84 e0       	ldi	r24, 0x04	; 4
    6d02:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <sysclk_disable_module>
    6d06:	21 c0       	rjmp	.+66     	; 0x6d4a <tc_disable+0xb4>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC1);
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    6d08:	8a 81       	ldd	r24, Y+2	; 0x02
    6d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    6d0c:	81 15       	cp	r24, r1
    6d0e:	2a e0       	ldi	r18, 0x0A	; 10
    6d10:	92 07       	cpc	r25, r18
    6d12:	49 f4       	brne	.+18     	; 0x6d26 <tc_disable+0x90>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    6d14:	61 e0       	ldi	r22, 0x01	; 1
    6d16:	85 e0       	ldi	r24, 0x05	; 5
    6d18:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    6d1c:	64 e0       	ldi	r22, 0x04	; 4
    6d1e:	85 e0       	ldi	r24, 0x05	; 5
    6d20:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <sysclk_disable_module>
    6d24:	12 c0       	rjmp	.+36     	; 0x6d4a <tc_disable+0xb4>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC1);
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    6d26:	8a 81       	ldd	r24, Y+2	; 0x02
    6d28:	9b 81       	ldd	r25, Y+3	; 0x03
    6d2a:	81 15       	cp	r24, r1
    6d2c:	2b e0       	ldi	r18, 0x0B	; 11
    6d2e:	92 07       	cpc	r25, r18
    6d30:	49 f4       	brne	.+18     	; 0x6d44 <tc_disable+0xae>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    6d32:	61 e0       	ldi	r22, 0x01	; 1
    6d34:	86 e0       	ldi	r24, 0x06	; 6
    6d36:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    6d3a:	64 e0       	ldi	r22, 0x04	; 4
    6d3c:	86 e0       	ldi	r24, 0x06	; 6
    6d3e:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <sysclk_disable_module>
    6d42:	03 c0       	rjmp	.+6      	; 0x6d4a <tc_disable+0xb4>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_TC1);
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	} else
#endif
	{
		cpu_irq_restore(iflags);
    6d44:	89 81       	ldd	r24, Y+1	; 0x01
    6d46:	6e d8       	rcall	.-3876   	; 0x5e24 <cpu_irq_restore>
		return;
    6d48:	02 c0       	rjmp	.+4      	; 0x6d4e <tc_disable+0xb8>
	}
	cpu_irq_restore(iflags);
    6d4a:	89 81       	ldd	r24, Y+1	; 0x01
    6d4c:	6b d8       	rcall	.-3882   	; 0x5e24 <cpu_irq_restore>
}
    6d4e:	23 96       	adiw	r28, 0x03	; 3
    6d50:	cd bf       	out	0x3d, r28	; 61
    6d52:	de bf       	out	0x3e, r29	; 62
    6d54:	df 91       	pop	r29
    6d56:	cf 91       	pop	r28
    6d58:	08 95       	ret

00006d5a <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
    6d5a:	cf 93       	push	r28
    6d5c:	df 93       	push	r29
    6d5e:	00 d0       	rcall	.+0      	; 0x6d60 <tc_set_overflow_interrupt_callback+0x6>
    6d60:	00 d0       	rcall	.+0      	; 0x6d62 <tc_set_overflow_interrupt_callback+0x8>
    6d62:	cd b7       	in	r28, 0x3d	; 61
    6d64:	de b7       	in	r29, 0x3e	; 62
    6d66:	89 83       	std	Y+1, r24	; 0x01
    6d68:	9a 83       	std	Y+2, r25	; 0x02
    6d6a:	6b 83       	std	Y+3, r22	; 0x03
    6d6c:	7c 83       	std	Y+4, r23	; 0x04
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    6d6e:	89 81       	ldd	r24, Y+1	; 0x01
    6d70:	9a 81       	ldd	r25, Y+2	; 0x02
    6d72:	81 15       	cp	r24, r1
    6d74:	28 e0       	ldi	r18, 0x08	; 8
    6d76:	92 07       	cpc	r25, r18
    6d78:	39 f4       	brne	.+14     	; 0x6d88 <tc_set_overflow_interrupt_callback+0x2e>
		tc_tcc0_ovf_callback = callback;
    6d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    6d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    6d7e:	80 93 0f 28 	sts	0x280F, r24
    6d82:	90 93 10 28 	sts	0x2810, r25
    6d86:	33 c0       	rjmp	.+102    	; 0x6dee <tc_set_overflow_interrupt_callback+0x94>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    6d88:	89 81       	ldd	r24, Y+1	; 0x01
    6d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d8c:	80 34       	cpi	r24, 0x40	; 64
    6d8e:	28 e0       	ldi	r18, 0x08	; 8
    6d90:	92 07       	cpc	r25, r18
    6d92:	39 f4       	brne	.+14     	; 0x6da2 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcc1_ovf_callback = callback;
    6d94:	8b 81       	ldd	r24, Y+3	; 0x03
    6d96:	9c 81       	ldd	r25, Y+4	; 0x04
    6d98:	80 93 1b 28 	sts	0x281B, r24
    6d9c:	90 93 1c 28 	sts	0x281C, r25
    6da0:	26 c0       	rjmp	.+76     	; 0x6dee <tc_set_overflow_interrupt_callback+0x94>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    6da2:	89 81       	ldd	r24, Y+1	; 0x01
    6da4:	9a 81       	ldd	r25, Y+2	; 0x02
    6da6:	81 15       	cp	r24, r1
    6da8:	29 e0       	ldi	r18, 0x09	; 9
    6daa:	92 07       	cpc	r25, r18
    6dac:	39 f4       	brne	.+14     	; 0x6dbc <tc_set_overflow_interrupt_callback+0x62>
		tc_tcd0_ovf_callback = callback;
    6dae:	8b 81       	ldd	r24, Y+3	; 0x03
    6db0:	9c 81       	ldd	r25, Y+4	; 0x04
    6db2:	80 93 23 28 	sts	0x2823, r24
    6db6:	90 93 24 28 	sts	0x2824, r25
    6dba:	19 c0       	rjmp	.+50     	; 0x6dee <tc_set_overflow_interrupt_callback+0x94>
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
		tc_tcd1_ovf_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    6dbc:	89 81       	ldd	r24, Y+1	; 0x01
    6dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    6dc0:	81 15       	cp	r24, r1
    6dc2:	2a e0       	ldi	r18, 0x0A	; 10
    6dc4:	92 07       	cpc	r25, r18
    6dc6:	39 f4       	brne	.+14     	; 0x6dd6 <tc_set_overflow_interrupt_callback+0x7c>
		tc_tce0_ovf_callback = callback;
    6dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    6dca:	9c 81       	ldd	r25, Y+4	; 0x04
    6dcc:	80 93 2f 28 	sts	0x282F, r24
    6dd0:	90 93 30 28 	sts	0x2830, r25
    6dd4:	0c c0       	rjmp	.+24     	; 0x6dee <tc_set_overflow_interrupt_callback+0x94>
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
		tc_tce1_ovf_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    6dd6:	89 81       	ldd	r24, Y+1	; 0x01
    6dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    6dda:	81 15       	cp	r24, r1
    6ddc:	2b e0       	ldi	r18, 0x0B	; 11
    6dde:	92 07       	cpc	r25, r18
    6de0:	31 f4       	brne	.+12     	; 0x6dee <tc_set_overflow_interrupt_callback+0x94>
		tc_tcf0_ovf_callback = callback;
    6de2:	8b 81       	ldd	r24, Y+3	; 0x03
    6de4:	9c 81       	ldd	r25, Y+4	; 0x04
    6de6:	80 93 3b 28 	sts	0x283B, r24
    6dea:	90 93 3c 28 	sts	0x283C, r25
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ovf_callback = callback;
	} else
#endif
	{}
}
    6dee:	24 96       	adiw	r28, 0x04	; 4
    6df0:	cd bf       	out	0x3d, r28	; 61
    6df2:	de bf       	out	0x3e, r29	; 62
    6df4:	df 91       	pop	r29
    6df6:	cf 91       	pop	r28
    6df8:	08 95       	ret

00006dfa <usart_rx_enable>:
	}
	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    6dfa:	cf 93       	push	r28
    6dfc:	df 93       	push	r29
    6dfe:	00 d0       	rcall	.+0      	; 0x6e00 <usart_rx_enable+0x6>
    6e00:	cd b7       	in	r28, 0x3d	; 61
    6e02:	de b7       	in	r29, 0x3e	; 62
    6e04:	89 83       	std	Y+1, r24	; 0x01
    6e06:	9a 83       	std	Y+2, r25	; 0x02
    6e08:	89 81       	ldd	r24, Y+1	; 0x01
    6e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    6e0c:	fc 01       	movw	r30, r24
    6e0e:	84 81       	ldd	r24, Z+4	; 0x04
    6e10:	28 2f       	mov	r18, r24
    6e12:	20 61       	ori	r18, 0x10	; 16
    6e14:	89 81       	ldd	r24, Y+1	; 0x01
    6e16:	9a 81       	ldd	r25, Y+2	; 0x02
    6e18:	fc 01       	movw	r30, r24
    6e1a:	24 83       	std	Z+4, r18	; 0x04
    6e1c:	0f 90       	pop	r0
    6e1e:	0f 90       	pop	r0
    6e20:	df 91       	pop	r29
    6e22:	cf 91       	pop	r28
    6e24:	08 95       	ret

00006e26 <usart_format_set>:
    6e26:	cf 93       	push	r28
    6e28:	df 93       	push	r29
    6e2a:	cd b7       	in	r28, 0x3d	; 61
    6e2c:	de b7       	in	r29, 0x3e	; 62
    6e2e:	25 97       	sbiw	r28, 0x05	; 5
    6e30:	cd bf       	out	0x3d, r28	; 61
    6e32:	de bf       	out	0x3e, r29	; 62
    6e34:	89 83       	std	Y+1, r24	; 0x01
    6e36:	9a 83       	std	Y+2, r25	; 0x02
    6e38:	6b 83       	std	Y+3, r22	; 0x03
    6e3a:	4c 83       	std	Y+4, r20	; 0x04
    6e3c:	2d 83       	std	Y+5, r18	; 0x05
    6e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    6e40:	8c 81       	ldd	r24, Y+4	; 0x04
    6e42:	89 2b       	or	r24, r25
    6e44:	98 2f       	mov	r25, r24
    6e46:	8d 81       	ldd	r24, Y+5	; 0x05
    6e48:	88 23       	and	r24, r24
    6e4a:	11 f0       	breq	.+4      	; 0x6e50 <usart_format_set+0x2a>
    6e4c:	88 e0       	ldi	r24, 0x08	; 8
    6e4e:	01 c0       	rjmp	.+2      	; 0x6e52 <usart_format_set+0x2c>
    6e50:	80 e0       	ldi	r24, 0x00	; 0
    6e52:	89 2b       	or	r24, r25
    6e54:	28 2f       	mov	r18, r24
    6e56:	89 81       	ldd	r24, Y+1	; 0x01
    6e58:	9a 81       	ldd	r25, Y+2	; 0x02
    6e5a:	fc 01       	movw	r30, r24
    6e5c:	25 83       	std	Z+5, r18	; 0x05
    6e5e:	25 96       	adiw	r28, 0x05	; 5
    6e60:	cd bf       	out	0x3d, r28	; 61
    6e62:	de bf       	out	0x3e, r29	; 62
    6e64:	df 91       	pop	r29
    6e66:	cf 91       	pop	r28
    6e68:	08 95       	ret

00006e6a <usart_tx_enable>:
    6e6a:	cf 93       	push	r28
    6e6c:	df 93       	push	r29
    6e6e:	00 d0       	rcall	.+0      	; 0x6e70 <usart_tx_enable+0x6>
    6e70:	cd b7       	in	r28, 0x3d	; 61
    6e72:	de b7       	in	r29, 0x3e	; 62
    6e74:	89 83       	std	Y+1, r24	; 0x01
    6e76:	9a 83       	std	Y+2, r25	; 0x02
    6e78:	89 81       	ldd	r24, Y+1	; 0x01
    6e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    6e7c:	fc 01       	movw	r30, r24
    6e7e:	84 81       	ldd	r24, Z+4	; 0x04
    6e80:	28 2f       	mov	r18, r24
    6e82:	28 60       	ori	r18, 0x08	; 8
    6e84:	89 81       	ldd	r24, Y+1	; 0x01
    6e86:	9a 81       	ldd	r25, Y+2	; 0x02
    6e88:	fc 01       	movw	r30, r24
    6e8a:	24 83       	std	Z+4, r18	; 0x04
    6e8c:	0f 90       	pop	r0
    6e8e:	0f 90       	pop	r0
    6e90:	df 91       	pop	r29
    6e92:	cf 91       	pop	r28
    6e94:	08 95       	ret

00006e96 <usart_set_mode>:
    6e96:	cf 93       	push	r28
    6e98:	df 93       	push	r29
    6e9a:	00 d0       	rcall	.+0      	; 0x6e9c <usart_set_mode+0x6>
    6e9c:	1f 92       	push	r1
    6e9e:	cd b7       	in	r28, 0x3d	; 61
    6ea0:	de b7       	in	r29, 0x3e	; 62
    6ea2:	89 83       	std	Y+1, r24	; 0x01
    6ea4:	9a 83       	std	Y+2, r25	; 0x02
    6ea6:	6b 83       	std	Y+3, r22	; 0x03
    6ea8:	89 81       	ldd	r24, Y+1	; 0x01
    6eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    6eac:	fc 01       	movw	r30, r24
    6eae:	85 81       	ldd	r24, Z+5	; 0x05
    6eb0:	98 2f       	mov	r25, r24
    6eb2:	9f 73       	andi	r25, 0x3F	; 63
    6eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    6eb6:	89 2b       	or	r24, r25
    6eb8:	28 2f       	mov	r18, r24
    6eba:	89 81       	ldd	r24, Y+1	; 0x01
    6ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    6ebe:	fc 01       	movw	r30, r24
    6ec0:	25 83       	std	Z+5, r18	; 0x05
    6ec2:	23 96       	adiw	r28, 0x03	; 3
    6ec4:	cd bf       	out	0x3d, r28	; 61
    6ec6:	de bf       	out	0x3e, r29	; 62
    6ec8:	df 91       	pop	r29
    6eca:	cf 91       	pop	r28
    6ecc:	08 95       	ret

00006ece <usart_data_register_is_empty>:
    6ece:	cf 93       	push	r28
    6ed0:	df 93       	push	r29
    6ed2:	00 d0       	rcall	.+0      	; 0x6ed4 <usart_data_register_is_empty+0x6>
    6ed4:	cd b7       	in	r28, 0x3d	; 61
    6ed6:	de b7       	in	r29, 0x3e	; 62
    6ed8:	89 83       	std	Y+1, r24	; 0x01
    6eda:	9a 83       	std	Y+2, r25	; 0x02
    6edc:	89 81       	ldd	r24, Y+1	; 0x01
    6ede:	9a 81       	ldd	r25, Y+2	; 0x02
    6ee0:	fc 01       	movw	r30, r24
    6ee2:	81 81       	ldd	r24, Z+1	; 0x01
    6ee4:	88 2f       	mov	r24, r24
    6ee6:	90 e0       	ldi	r25, 0x00	; 0
    6ee8:	80 72       	andi	r24, 0x20	; 32
    6eea:	99 27       	eor	r25, r25
    6eec:	21 e0       	ldi	r18, 0x01	; 1
    6eee:	00 97       	sbiw	r24, 0x00	; 0
    6ef0:	09 f4       	brne	.+2      	; 0x6ef4 <usart_data_register_is_empty+0x26>
    6ef2:	20 e0       	ldi	r18, 0x00	; 0
    6ef4:	82 2f       	mov	r24, r18
    6ef6:	0f 90       	pop	r0
    6ef8:	0f 90       	pop	r0
    6efa:	df 91       	pop	r29
    6efc:	cf 91       	pop	r28
    6efe:	08 95       	ret

00006f00 <sysclk_get_main_hz>:
    6f00:	cf 93       	push	r28
    6f02:	df 93       	push	r29
    6f04:	cd b7       	in	r28, 0x3d	; 61
    6f06:	de b7       	in	r29, 0x3e	; 62
    6f08:	80 e0       	ldi	r24, 0x00	; 0
    6f0a:	98 e4       	ldi	r25, 0x48	; 72
    6f0c:	a8 ee       	ldi	r26, 0xE8	; 232
    6f0e:	b1 e0       	ldi	r27, 0x01	; 1
    6f10:	bc 01       	movw	r22, r24
    6f12:	cd 01       	movw	r24, r26
    6f14:	df 91       	pop	r29
    6f16:	cf 91       	pop	r28
    6f18:	08 95       	ret

00006f1a <sysclk_get_per4_hz>:
    6f1a:	cf 93       	push	r28
    6f1c:	df 93       	push	r29
    6f1e:	1f 92       	push	r1
    6f20:	cd b7       	in	r28, 0x3d	; 61
    6f22:	de b7       	in	r29, 0x3e	; 62
    6f24:	19 82       	std	Y+1, r1	; 0x01
    6f26:	ec df       	rcall	.-40     	; 0x6f00 <sysclk_get_main_hz>
    6f28:	dc 01       	movw	r26, r24
    6f2a:	cb 01       	movw	r24, r22
    6f2c:	29 81       	ldd	r18, Y+1	; 0x01
    6f2e:	22 2f       	mov	r18, r18
    6f30:	30 e0       	ldi	r19, 0x00	; 0
    6f32:	02 2e       	mov	r0, r18
    6f34:	04 c0       	rjmp	.+8      	; 0x6f3e <sysclk_get_per4_hz+0x24>
    6f36:	b6 95       	lsr	r27
    6f38:	a7 95       	ror	r26
    6f3a:	97 95       	ror	r25
    6f3c:	87 95       	ror	r24
    6f3e:	0a 94       	dec	r0
    6f40:	d2 f7       	brpl	.-12     	; 0x6f36 <sysclk_get_per4_hz+0x1c>
    6f42:	bc 01       	movw	r22, r24
    6f44:	cd 01       	movw	r24, r26
    6f46:	0f 90       	pop	r0
    6f48:	df 91       	pop	r29
    6f4a:	cf 91       	pop	r28
    6f4c:	08 95       	ret

00006f4e <sysclk_get_per2_hz>:
    6f4e:	cf 93       	push	r28
    6f50:	df 93       	push	r29
    6f52:	cd b7       	in	r28, 0x3d	; 61
    6f54:	de b7       	in	r29, 0x3e	; 62
    6f56:	e1 df       	rcall	.-62     	; 0x6f1a <sysclk_get_per4_hz>
    6f58:	dc 01       	movw	r26, r24
    6f5a:	cb 01       	movw	r24, r22
    6f5c:	bc 01       	movw	r22, r24
    6f5e:	cd 01       	movw	r24, r26
    6f60:	df 91       	pop	r29
    6f62:	cf 91       	pop	r28
    6f64:	08 95       	ret

00006f66 <sysclk_get_per_hz>:
    6f66:	cf 93       	push	r28
    6f68:	df 93       	push	r29
    6f6a:	cd b7       	in	r28, 0x3d	; 61
    6f6c:	de b7       	in	r29, 0x3e	; 62
    6f6e:	ef df       	rcall	.-34     	; 0x6f4e <sysclk_get_per2_hz>
    6f70:	dc 01       	movw	r26, r24
    6f72:	cb 01       	movw	r24, r22
    6f74:	bc 01       	movw	r22, r24
    6f76:	cd 01       	movw	r24, r26
    6f78:	df 91       	pop	r29
    6f7a:	cf 91       	pop	r28
    6f7c:	08 95       	ret

00006f7e <usart_enable_module_clock>:
    6f7e:	cf 93       	push	r28
    6f80:	df 93       	push	r29
    6f82:	00 d0       	rcall	.+0      	; 0x6f84 <usart_enable_module_clock+0x6>
    6f84:	cd b7       	in	r28, 0x3d	; 61
    6f86:	de b7       	in	r29, 0x3e	; 62
    6f88:	89 83       	std	Y+1, r24	; 0x01
    6f8a:	9a 83       	std	Y+2, r25	; 0x02
    6f8c:	89 81       	ldd	r24, Y+1	; 0x01
    6f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    6f90:	80 3a       	cpi	r24, 0xA0	; 160
    6f92:	28 e0       	ldi	r18, 0x08	; 8
    6f94:	92 07       	cpc	r25, r18
    6f96:	21 f4       	brne	.+8      	; 0x6fa0 <usart_enable_module_clock+0x22>
    6f98:	60 e1       	ldi	r22, 0x10	; 16
    6f9a:	83 e0       	ldi	r24, 0x03	; 3
    6f9c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
    6fa0:	89 81       	ldd	r24, Y+1	; 0x01
    6fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    6fa4:	80 3a       	cpi	r24, 0xA0	; 160
    6fa6:	29 e0       	ldi	r18, 0x09	; 9
    6fa8:	92 07       	cpc	r25, r18
    6faa:	21 f4       	brne	.+8      	; 0x6fb4 <usart_enable_module_clock+0x36>
    6fac:	60 e1       	ldi	r22, 0x10	; 16
    6fae:	84 e0       	ldi	r24, 0x04	; 4
    6fb0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
    6fb4:	89 81       	ldd	r24, Y+1	; 0x01
    6fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    6fb8:	80 3a       	cpi	r24, 0xA0	; 160
    6fba:	2a e0       	ldi	r18, 0x0A	; 10
    6fbc:	92 07       	cpc	r25, r18
    6fbe:	21 f4       	brne	.+8      	; 0x6fc8 <usart_enable_module_clock+0x4a>
    6fc0:	60 e1       	ldi	r22, 0x10	; 16
    6fc2:	85 e0       	ldi	r24, 0x05	; 5
    6fc4:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
    6fc8:	0f 90       	pop	r0
    6fca:	0f 90       	pop	r0
    6fcc:	df 91       	pop	r29
    6fce:	cf 91       	pop	r28
    6fd0:	08 95       	ret

00006fd2 <usart_init_rs232>:
    6fd2:	0f 93       	push	r16
    6fd4:	1f 93       	push	r17
    6fd6:	cf 93       	push	r28
    6fd8:	df 93       	push	r29
    6fda:	cd b7       	in	r28, 0x3d	; 61
    6fdc:	de b7       	in	r29, 0x3e	; 62
    6fde:	25 97       	sbiw	r28, 0x05	; 5
    6fe0:	cd bf       	out	0x3d, r28	; 61
    6fe2:	de bf       	out	0x3e, r29	; 62
    6fe4:	8a 83       	std	Y+2, r24	; 0x02
    6fe6:	9b 83       	std	Y+3, r25	; 0x03
    6fe8:	6c 83       	std	Y+4, r22	; 0x04
    6fea:	7d 83       	std	Y+5, r23	; 0x05
    6fec:	8a 81       	ldd	r24, Y+2	; 0x02
    6fee:	9b 81       	ldd	r25, Y+3	; 0x03
    6ff0:	c6 df       	rcall	.-116    	; 0x6f7e <usart_enable_module_clock>
    6ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ff6:	60 e0       	ldi	r22, 0x00	; 0
    6ff8:	4e df       	rcall	.-356    	; 0x6e96 <usart_set_mode>
    6ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    6ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    6ffe:	fc 01       	movw	r30, r24
    7000:	26 81       	ldd	r18, Z+6	; 0x06
    7002:	8c 81       	ldd	r24, Y+4	; 0x04
    7004:	9d 81       	ldd	r25, Y+5	; 0x05
    7006:	fc 01       	movw	r30, r24
    7008:	45 81       	ldd	r20, Z+5	; 0x05
    700a:	8c 81       	ldd	r24, Y+4	; 0x04
    700c:	9d 81       	ldd	r25, Y+5	; 0x05
    700e:	fc 01       	movw	r30, r24
    7010:	34 81       	ldd	r19, Z+4	; 0x04
    7012:	8a 81       	ldd	r24, Y+2	; 0x02
    7014:	9b 81       	ldd	r25, Y+3	; 0x03
    7016:	63 2f       	mov	r22, r19
    7018:	06 df       	rcall	.-500    	; 0x6e26 <usart_format_set>
    701a:	a5 df       	rcall	.-182    	; 0x6f66 <sysclk_get_per_hz>
    701c:	9b 01       	movw	r18, r22
    701e:	ac 01       	movw	r20, r24
    7020:	8c 81       	ldd	r24, Y+4	; 0x04
    7022:	9d 81       	ldd	r25, Y+5	; 0x05
    7024:	fc 01       	movw	r30, r24
    7026:	80 81       	ld	r24, Z
    7028:	91 81       	ldd	r25, Z+1	; 0x01
    702a:	a2 81       	ldd	r26, Z+2	; 0x02
    702c:	b3 81       	ldd	r27, Z+3	; 0x03
    702e:	ea 81       	ldd	r30, Y+2	; 0x02
    7030:	fb 81       	ldd	r31, Y+3	; 0x03
    7032:	89 01       	movw	r16, r18
    7034:	9a 01       	movw	r18, r20
    7036:	ac 01       	movw	r20, r24
    7038:	bd 01       	movw	r22, r26
    703a:	cf 01       	movw	r24, r30
    703c:	2f d0       	rcall	.+94     	; 0x709c <usart_set_baudrate>
    703e:	89 83       	std	Y+1, r24	; 0x01
    7040:	8a 81       	ldd	r24, Y+2	; 0x02
    7042:	9b 81       	ldd	r25, Y+3	; 0x03
    7044:	12 df       	rcall	.-476    	; 0x6e6a <usart_tx_enable>
    7046:	8a 81       	ldd	r24, Y+2	; 0x02
    7048:	9b 81       	ldd	r25, Y+3	; 0x03
    704a:	d7 de       	rcall	.-594    	; 0x6dfa <usart_rx_enable>
    704c:	89 81       	ldd	r24, Y+1	; 0x01
    704e:	25 96       	adiw	r28, 0x05	; 5
    7050:	cd bf       	out	0x3d, r28	; 61
    7052:	de bf       	out	0x3e, r29	; 62
    7054:	df 91       	pop	r29
    7056:	cf 91       	pop	r28
    7058:	1f 91       	pop	r17
    705a:	0f 91       	pop	r16
    705c:	08 95       	ret

0000705e <usart_putchar>:
    705e:	cf 93       	push	r28
    7060:	df 93       	push	r29
    7062:	00 d0       	rcall	.+0      	; 0x7064 <usart_putchar+0x6>
    7064:	1f 92       	push	r1
    7066:	cd b7       	in	r28, 0x3d	; 61
    7068:	de b7       	in	r29, 0x3e	; 62
    706a:	89 83       	std	Y+1, r24	; 0x01
    706c:	9a 83       	std	Y+2, r25	; 0x02
    706e:	6b 83       	std	Y+3, r22	; 0x03
    7070:	00 00       	nop
    7072:	89 81       	ldd	r24, Y+1	; 0x01
    7074:	9a 81       	ldd	r25, Y+2	; 0x02
    7076:	2b df       	rcall	.-426    	; 0x6ece <usart_data_register_is_empty>
    7078:	98 2f       	mov	r25, r24
    707a:	81 e0       	ldi	r24, 0x01	; 1
    707c:	89 27       	eor	r24, r25
    707e:	88 23       	and	r24, r24
    7080:	c1 f7       	brne	.-16     	; 0x7072 <usart_putchar+0x14>
    7082:	89 81       	ldd	r24, Y+1	; 0x01
    7084:	9a 81       	ldd	r25, Y+2	; 0x02
    7086:	2b 81       	ldd	r18, Y+3	; 0x03
    7088:	fc 01       	movw	r30, r24
    708a:	20 83       	st	Z, r18
    708c:	80 e0       	ldi	r24, 0x00	; 0
    708e:	90 e0       	ldi	r25, 0x00	; 0
    7090:	23 96       	adiw	r28, 0x03	; 3
    7092:	cd bf       	out	0x3d, r28	; 61
    7094:	de bf       	out	0x3e, r29	; 62
    7096:	df 91       	pop	r29
    7098:	cf 91       	pop	r28
    709a:	08 95       	ret

0000709c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    709c:	ef 92       	push	r14
    709e:	ff 92       	push	r15
    70a0:	0f 93       	push	r16
    70a2:	1f 93       	push	r17
    70a4:	cf 93       	push	r28
    70a6:	df 93       	push	r29
    70a8:	cd b7       	in	r28, 0x3d	; 61
    70aa:	de b7       	in	r29, 0x3e	; 62
    70ac:	6f 97       	sbiw	r28, 0x1f	; 31
    70ae:	cd bf       	out	0x3d, r28	; 61
    70b0:	de bf       	out	0x3e, r29	; 62
    70b2:	8e 8b       	std	Y+22, r24	; 0x16
    70b4:	9f 8b       	std	Y+23, r25	; 0x17
    70b6:	48 8f       	std	Y+24, r20	; 0x18
    70b8:	59 8f       	std	Y+25, r21	; 0x19
    70ba:	6a 8f       	std	Y+26, r22	; 0x1a
    70bc:	7b 8f       	std	Y+27, r23	; 0x1b
    70be:	0c 8f       	std	Y+28, r16	; 0x1c
    70c0:	1d 8f       	std	Y+29, r17	; 0x1d
    70c2:	2e 8f       	std	Y+30, r18	; 0x1e
    70c4:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	// 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN)
	max_rate = cpu_hz / 8;
    70c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    70c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    70ca:	ae 8d       	ldd	r26, Y+30	; 0x1e
    70cc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    70ce:	68 94       	set
    70d0:	12 f8       	bld	r1, 2
    70d2:	b6 95       	lsr	r27
    70d4:	a7 95       	ror	r26
    70d6:	97 95       	ror	r25
    70d8:	87 95       	ror	r24
    70da:	16 94       	lsr	r1
    70dc:	d1 f7       	brne	.-12     	; 0x70d2 <usart_set_baudrate+0x36>
    70de:	8e 87       	std	Y+14, r24	; 0x0e
    70e0:	9f 87       	std	Y+15, r25	; 0x0f
    70e2:	a8 8b       	std	Y+16, r26	; 0x10
    70e4:	b9 8b       	std	Y+17, r27	; 0x11
	// 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1)
	min_rate = cpu_hz / 4194304;
    70e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    70e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    70ea:	ae 8d       	ldd	r26, Y+30	; 0x1e
    70ec:	bf 8d       	ldd	r27, Y+31	; 0x1f
    70ee:	07 2e       	mov	r0, r23
    70f0:	76 e1       	ldi	r23, 0x16	; 22
    70f2:	b6 95       	lsr	r27
    70f4:	a7 95       	ror	r26
    70f6:	97 95       	ror	r25
    70f8:	87 95       	ror	r24
    70fa:	7a 95       	dec	r23
    70fc:	d1 f7       	brne	.-12     	; 0x70f2 <usart_set_baudrate+0x56>
    70fe:	70 2d       	mov	r23, r0
    7100:	8a 87       	std	Y+10, r24	; 0x0a
    7102:	9b 87       	std	Y+11, r25	; 0x0b
    7104:	ac 87       	std	Y+12, r26	; 0x0c
    7106:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    7108:	8e 89       	ldd	r24, Y+22	; 0x16
    710a:	9f 89       	ldd	r25, Y+23	; 0x17
    710c:	fc 01       	movw	r30, r24
    710e:	84 81       	ldd	r24, Z+4	; 0x04
    7110:	88 2f       	mov	r24, r24
    7112:	90 e0       	ldi	r25, 0x00	; 0
    7114:	84 70       	andi	r24, 0x04	; 4
    7116:	99 27       	eor	r25, r25
    7118:	00 97       	sbiw	r24, 0x00	; 0
    711a:	c1 f4       	brne	.+48     	; 0x714c <usart_set_baudrate+0xb0>
		max_rate /= 2;
    711c:	8e 85       	ldd	r24, Y+14	; 0x0e
    711e:	9f 85       	ldd	r25, Y+15	; 0x0f
    7120:	a8 89       	ldd	r26, Y+16	; 0x10
    7122:	b9 89       	ldd	r27, Y+17	; 0x11
    7124:	b6 95       	lsr	r27
    7126:	a7 95       	ror	r26
    7128:	97 95       	ror	r25
    712a:	87 95       	ror	r24
    712c:	8e 87       	std	Y+14, r24	; 0x0e
    712e:	9f 87       	std	Y+15, r25	; 0x0f
    7130:	a8 8b       	std	Y+16, r26	; 0x10
    7132:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    7134:	8a 85       	ldd	r24, Y+10	; 0x0a
    7136:	9b 85       	ldd	r25, Y+11	; 0x0b
    7138:	ac 85       	ldd	r26, Y+12	; 0x0c
    713a:	bd 85       	ldd	r27, Y+13	; 0x0d
    713c:	b6 95       	lsr	r27
    713e:	a7 95       	ror	r26
    7140:	97 95       	ror	r25
    7142:	87 95       	ror	r24
    7144:	8a 87       	std	Y+10, r24	; 0x0a
    7146:	9b 87       	std	Y+11, r25	; 0x0b
    7148:	ac 87       	std	Y+12, r26	; 0x0c
    714a:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    714c:	28 8d       	ldd	r18, Y+24	; 0x18
    714e:	39 8d       	ldd	r19, Y+25	; 0x19
    7150:	4a 8d       	ldd	r20, Y+26	; 0x1a
    7152:	5b 8d       	ldd	r21, Y+27	; 0x1b
    7154:	8e 85       	ldd	r24, Y+14	; 0x0e
    7156:	9f 85       	ldd	r25, Y+15	; 0x0f
    7158:	a8 89       	ldd	r26, Y+16	; 0x10
    715a:	b9 89       	ldd	r27, Y+17	; 0x11
    715c:	82 17       	cp	r24, r18
    715e:	93 07       	cpc	r25, r19
    7160:	a4 07       	cpc	r26, r20
    7162:	b5 07       	cpc	r27, r21
    7164:	68 f0       	brcs	.+26     	; 0x7180 <usart_set_baudrate+0xe4>
    7166:	28 8d       	ldd	r18, Y+24	; 0x18
    7168:	39 8d       	ldd	r19, Y+25	; 0x19
    716a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    716c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    716e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7170:	9b 85       	ldd	r25, Y+11	; 0x0b
    7172:	ac 85       	ldd	r26, Y+12	; 0x0c
    7174:	bd 85       	ldd	r27, Y+13	; 0x0d
    7176:	28 17       	cp	r18, r24
    7178:	39 07       	cpc	r19, r25
    717a:	4a 07       	cpc	r20, r26
    717c:	5b 07       	cpc	r21, r27
    717e:	10 f4       	brcc	.+4      	; 0x7184 <usart_set_baudrate+0xe8>
		return false;
    7180:	80 e0       	ldi	r24, 0x00	; 0
    7182:	3c c1       	rjmp	.+632    	; 0x73fc <usart_set_baudrate+0x360>
	}

	/*
	 * Check if double speed is enabled.
	 */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    7184:	8e 89       	ldd	r24, Y+22	; 0x16
    7186:	9f 89       	ldd	r25, Y+23	; 0x17
    7188:	fc 01       	movw	r30, r24
    718a:	84 81       	ldd	r24, Z+4	; 0x04
    718c:	88 2f       	mov	r24, r24
    718e:	90 e0       	ldi	r25, 0x00	; 0
    7190:	84 70       	andi	r24, 0x04	; 4
    7192:	99 27       	eor	r25, r25
    7194:	00 97       	sbiw	r24, 0x00	; 0
    7196:	61 f4       	brne	.+24     	; 0x71b0 <usart_set_baudrate+0x114>
		baud *= 2;
    7198:	88 8d       	ldd	r24, Y+24	; 0x18
    719a:	99 8d       	ldd	r25, Y+25	; 0x19
    719c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    719e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    71a0:	88 0f       	add	r24, r24
    71a2:	99 1f       	adc	r25, r25
    71a4:	aa 1f       	adc	r26, r26
    71a6:	bb 1f       	adc	r27, r27
    71a8:	88 8f       	std	Y+24, r24	; 0x18
    71aa:	99 8f       	std	Y+25, r25	; 0x19
    71ac:	aa 8f       	std	Y+26, r26	; 0x1a
    71ae:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/*
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
    71b0:	8f ef       	ldi	r24, 0xFF	; 255
    71b2:	90 e0       	ldi	r25, 0x00	; 0
    71b4:	a0 e0       	ldi	r26, 0x00	; 0
    71b6:	b0 e0       	ldi	r27, 0x00	; 0
    71b8:	8e 83       	std	Y+6, r24	; 0x06
    71ba:	9f 83       	std	Y+7, r25	; 0x07
    71bc:	a8 87       	std	Y+8, r26	; 0x08
    71be:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    71c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    71c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    71c4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    71c6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    71c8:	28 8d       	ldd	r18, Y+24	; 0x18
    71ca:	39 8d       	ldd	r19, Y+25	; 0x19
    71cc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    71ce:	5b 8d       	ldd	r21, Y+27	; 0x1b
    71d0:	bc 01       	movw	r22, r24
    71d2:	cd 01       	movw	r24, r26
    71d4:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
    71d8:	2a 8b       	std	Y+18, r18	; 0x12
    71da:	3b 8b       	std	Y+19, r19	; 0x13
    71dc:	4c 8b       	std	Y+20, r20	; 0x14
    71de:	5d 8b       	std	Y+21, r21	; 0x15

	for (exp = -7; exp < 7; exp++) {
    71e0:	89 ef       	ldi	r24, 0xF9	; 249
    71e2:	89 83       	std	Y+1, r24	; 0x01
    71e4:	28 c0       	rjmp	.+80     	; 0x7236 <usart_set_baudrate+0x19a>
		if (ratio < limit) {
    71e6:	2a 89       	ldd	r18, Y+18	; 0x12
    71e8:	3b 89       	ldd	r19, Y+19	; 0x13
    71ea:	4c 89       	ldd	r20, Y+20	; 0x14
    71ec:	5d 89       	ldd	r21, Y+21	; 0x15
    71ee:	8e 81       	ldd	r24, Y+6	; 0x06
    71f0:	9f 81       	ldd	r25, Y+7	; 0x07
    71f2:	a8 85       	ldd	r26, Y+8	; 0x08
    71f4:	b9 85       	ldd	r27, Y+9	; 0x09
    71f6:	28 17       	cp	r18, r24
    71f8:	39 07       	cpc	r19, r25
    71fa:	4a 07       	cpc	r20, r26
    71fc:	5b 07       	cpc	r21, r27
    71fe:	f8 f0       	brcs	.+62     	; 0x723e <usart_set_baudrate+0x1a2>
			break;
		}

		limit <<= 1;
    7200:	8e 81       	ldd	r24, Y+6	; 0x06
    7202:	9f 81       	ldd	r25, Y+7	; 0x07
    7204:	a8 85       	ldd	r26, Y+8	; 0x08
    7206:	b9 85       	ldd	r27, Y+9	; 0x09
    7208:	88 0f       	add	r24, r24
    720a:	99 1f       	adc	r25, r25
    720c:	aa 1f       	adc	r26, r26
    720e:	bb 1f       	adc	r27, r27
    7210:	8e 83       	std	Y+6, r24	; 0x06
    7212:	9f 83       	std	Y+7, r25	; 0x07
    7214:	a8 87       	std	Y+8, r26	; 0x08
    7216:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    7218:	89 81       	ldd	r24, Y+1	; 0x01
    721a:	8d 3f       	cpi	r24, 0xFD	; 253
    721c:	4c f4       	brge	.+18     	; 0x7230 <usart_set_baudrate+0x194>
			limit |= 1;
    721e:	8e 81       	ldd	r24, Y+6	; 0x06
    7220:	9f 81       	ldd	r25, Y+7	; 0x07
    7222:	a8 85       	ldd	r26, Y+8	; 0x08
    7224:	b9 85       	ldd	r27, Y+9	; 0x09
    7226:	81 60       	ori	r24, 0x01	; 1
    7228:	8e 83       	std	Y+6, r24	; 0x06
    722a:	9f 83       	std	Y+7, r25	; 0x07
    722c:	a8 87       	std	Y+8, r26	; 0x08
    722e:	b9 87       	std	Y+9, r27	; 0x09
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    7230:	89 81       	ldd	r24, Y+1	; 0x01
    7232:	8f 5f       	subi	r24, 0xFF	; 255
    7234:	89 83       	std	Y+1, r24	; 0x01
    7236:	89 81       	ldd	r24, Y+1	; 0x01
    7238:	87 30       	cpi	r24, 0x07	; 7
    723a:	ac f2       	brlt	.-86     	; 0x71e6 <usart_set_baudrate+0x14a>
    723c:	01 c0       	rjmp	.+2      	; 0x7240 <usart_set_baudrate+0x1a4>
		if (ratio < limit) {
			break;
    723e:	00 00       	nop
	 * operation as it ensures that we never exceeed 2**32 at any point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    7240:	89 81       	ldd	r24, Y+1	; 0x01
    7242:	88 23       	and	r24, r24
    7244:	0c f0       	brlt	.+2      	; 0x7248 <usart_set_baudrate+0x1ac>
    7246:	88 c0       	rjmp	.+272    	; 0x7358 <usart_set_baudrate+0x2bc>
		/*
		 * We are supposed to subtract 1, then apply BSCALE. We want to apply
		 * BSCALE first, so we need to turn everything inside the parenthesis
		 * into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    7248:	88 8d       	ldd	r24, Y+24	; 0x18
    724a:	99 8d       	ldd	r25, Y+25	; 0x19
    724c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    724e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7250:	88 0f       	add	r24, r24
    7252:	99 1f       	adc	r25, r25
    7254:	aa 1f       	adc	r26, r26
    7256:	bb 1f       	adc	r27, r27
    7258:	88 0f       	add	r24, r24
    725a:	99 1f       	adc	r25, r25
    725c:	aa 1f       	adc	r26, r26
    725e:	bb 1f       	adc	r27, r27
    7260:	88 0f       	add	r24, r24
    7262:	99 1f       	adc	r25, r25
    7264:	aa 1f       	adc	r26, r26
    7266:	bb 1f       	adc	r27, r27
    7268:	2c 8d       	ldd	r18, Y+28	; 0x1c
    726a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    726c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    726e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    7270:	79 01       	movw	r14, r18
    7272:	8a 01       	movw	r16, r20
    7274:	e8 1a       	sub	r14, r24
    7276:	f9 0a       	sbc	r15, r25
    7278:	0a 0b       	sbc	r16, r26
    727a:	1b 0b       	sbc	r17, r27
    727c:	d8 01       	movw	r26, r16
    727e:	c7 01       	movw	r24, r14
    7280:	8c 8f       	std	Y+28, r24	; 0x1c
    7282:	9d 8f       	std	Y+29, r25	; 0x1d
    7284:	ae 8f       	std	Y+30, r26	; 0x1e
    7286:	bf 8f       	std	Y+31, r27	; 0x1f
		 * If we end up with a left-shift after taking the final divide-by-8
		 * into account, do the shift before the divide. Otherwise, left-shift
		 * the denominator instead (effectively resulting in an overall right
		 * shift.)
		 */
		if (exp <= -3) {
    7288:	89 81       	ldd	r24, Y+1	; 0x01
    728a:	8e 3f       	cpi	r24, 0xFE	; 254
    728c:	84 f5       	brge	.+96     	; 0x72ee <usart_set_baudrate+0x252>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    728e:	89 81       	ldd	r24, Y+1	; 0x01
    7290:	99 27       	eor	r25, r25
    7292:	87 fd       	sbrc	r24, 7
    7294:	90 95       	com	r25
    7296:	2d ef       	ldi	r18, 0xFD	; 253
    7298:	3f ef       	ldi	r19, 0xFF	; 255
    729a:	28 1b       	sub	r18, r24
    729c:	39 0b       	sbc	r19, r25
    729e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    72a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    72a2:	ae 8d       	ldd	r26, Y+30	; 0x1e
    72a4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    72a6:	7c 01       	movw	r14, r24
    72a8:	8d 01       	movw	r16, r26
    72aa:	04 c0       	rjmp	.+8      	; 0x72b4 <usart_set_baudrate+0x218>
    72ac:	ee 0c       	add	r14, r14
    72ae:	ff 1c       	adc	r15, r15
    72b0:	00 1f       	adc	r16, r16
    72b2:	11 1f       	adc	r17, r17
    72b4:	2a 95       	dec	r18
    72b6:	d2 f7       	brpl	.-12     	; 0x72ac <usart_set_baudrate+0x210>
    72b8:	a8 01       	movw	r20, r16
    72ba:	97 01       	movw	r18, r14
    72bc:	88 8d       	ldd	r24, Y+24	; 0x18
    72be:	99 8d       	ldd	r25, Y+25	; 0x19
    72c0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    72c2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    72c4:	b6 95       	lsr	r27
    72c6:	a7 95       	ror	r26
    72c8:	97 95       	ror	r25
    72ca:	87 95       	ror	r24
    72cc:	82 0f       	add	r24, r18
    72ce:	93 1f       	adc	r25, r19
    72d0:	a4 1f       	adc	r26, r20
    72d2:	b5 1f       	adc	r27, r21
    72d4:	28 8d       	ldd	r18, Y+24	; 0x18
    72d6:	39 8d       	ldd	r19, Y+25	; 0x19
    72d8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    72da:	5b 8d       	ldd	r21, Y+27	; 0x1b
    72dc:	bc 01       	movw	r22, r24
    72de:	cd 01       	movw	r24, r26
    72e0:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
    72e4:	2a 83       	std	Y+2, r18	; 0x02
    72e6:	3b 83       	std	Y+3, r19	; 0x03
    72e8:	4c 83       	std	Y+4, r20	; 0x04
    72ea:	5d 83       	std	Y+5, r21	; 0x05
    72ec:	6e c0       	rjmp	.+220    	; 0x73ca <usart_set_baudrate+0x32e>
		} else {
			baud <<= exp + 3;
    72ee:	89 81       	ldd	r24, Y+1	; 0x01
    72f0:	99 27       	eor	r25, r25
    72f2:	87 fd       	sbrc	r24, 7
    72f4:	90 95       	com	r25
    72f6:	9c 01       	movw	r18, r24
    72f8:	2d 5f       	subi	r18, 0xFD	; 253
    72fa:	3f 4f       	sbci	r19, 0xFF	; 255
    72fc:	88 8d       	ldd	r24, Y+24	; 0x18
    72fe:	99 8d       	ldd	r25, Y+25	; 0x19
    7300:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7302:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7304:	04 c0       	rjmp	.+8      	; 0x730e <usart_set_baudrate+0x272>
    7306:	88 0f       	add	r24, r24
    7308:	99 1f       	adc	r25, r25
    730a:	aa 1f       	adc	r26, r26
    730c:	bb 1f       	adc	r27, r27
    730e:	2a 95       	dec	r18
    7310:	d2 f7       	brpl	.-12     	; 0x7306 <usart_set_baudrate+0x26a>
    7312:	88 8f       	std	Y+24, r24	; 0x18
    7314:	99 8f       	std	Y+25, r25	; 0x19
    7316:	aa 8f       	std	Y+26, r26	; 0x1a
    7318:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    731a:	88 8d       	ldd	r24, Y+24	; 0x18
    731c:	99 8d       	ldd	r25, Y+25	; 0x19
    731e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7320:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7322:	9c 01       	movw	r18, r24
    7324:	ad 01       	movw	r20, r26
    7326:	56 95       	lsr	r21
    7328:	47 95       	ror	r20
    732a:	37 95       	ror	r19
    732c:	27 95       	ror	r18
    732e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7330:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7332:	ae 8d       	ldd	r26, Y+30	; 0x1e
    7334:	bf 8d       	ldd	r27, Y+31	; 0x1f
    7336:	82 0f       	add	r24, r18
    7338:	93 1f       	adc	r25, r19
    733a:	a4 1f       	adc	r26, r20
    733c:	b5 1f       	adc	r27, r21
    733e:	28 8d       	ldd	r18, Y+24	; 0x18
    7340:	39 8d       	ldd	r19, Y+25	; 0x19
    7342:	4a 8d       	ldd	r20, Y+26	; 0x1a
    7344:	5b 8d       	ldd	r21, Y+27	; 0x1b
    7346:	bc 01       	movw	r22, r24
    7348:	cd 01       	movw	r24, r26
    734a:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
    734e:	2a 83       	std	Y+2, r18	; 0x02
    7350:	3b 83       	std	Y+3, r19	; 0x03
    7352:	4c 83       	std	Y+4, r20	; 0x04
    7354:	5d 83       	std	Y+5, r21	; 0x05
    7356:	39 c0       	rjmp	.+114    	; 0x73ca <usart_set_baudrate+0x32e>
	} else {
		/*
		 * We will always do a right shift in this case, but we need to shift
		 * three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    7358:	89 81       	ldd	r24, Y+1	; 0x01
    735a:	99 27       	eor	r25, r25
    735c:	87 fd       	sbrc	r24, 7
    735e:	90 95       	com	r25
    7360:	9c 01       	movw	r18, r24
    7362:	2d 5f       	subi	r18, 0xFD	; 253
    7364:	3f 4f       	sbci	r19, 0xFF	; 255
    7366:	88 8d       	ldd	r24, Y+24	; 0x18
    7368:	99 8d       	ldd	r25, Y+25	; 0x19
    736a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    736c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    736e:	04 c0       	rjmp	.+8      	; 0x7378 <usart_set_baudrate+0x2dc>
    7370:	88 0f       	add	r24, r24
    7372:	99 1f       	adc	r25, r25
    7374:	aa 1f       	adc	r26, r26
    7376:	bb 1f       	adc	r27, r27
    7378:	2a 95       	dec	r18
    737a:	d2 f7       	brpl	.-12     	; 0x7370 <usart_set_baudrate+0x2d4>
    737c:	88 8f       	std	Y+24, r24	; 0x18
    737e:	99 8f       	std	Y+25, r25	; 0x19
    7380:	aa 8f       	std	Y+26, r26	; 0x1a
    7382:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    7384:	88 8d       	ldd	r24, Y+24	; 0x18
    7386:	99 8d       	ldd	r25, Y+25	; 0x19
    7388:	aa 8d       	ldd	r26, Y+26	; 0x1a
    738a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    738c:	9c 01       	movw	r18, r24
    738e:	ad 01       	movw	r20, r26
    7390:	56 95       	lsr	r21
    7392:	47 95       	ror	r20
    7394:	37 95       	ror	r19
    7396:	27 95       	ror	r18
    7398:	8c 8d       	ldd	r24, Y+28	; 0x1c
    739a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    739c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    739e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    73a0:	82 0f       	add	r24, r18
    73a2:	93 1f       	adc	r25, r19
    73a4:	a4 1f       	adc	r26, r20
    73a6:	b5 1f       	adc	r27, r21
    73a8:	28 8d       	ldd	r18, Y+24	; 0x18
    73aa:	39 8d       	ldd	r19, Y+25	; 0x19
    73ac:	4a 8d       	ldd	r20, Y+26	; 0x1a
    73ae:	5b 8d       	ldd	r21, Y+27	; 0x1b
    73b0:	bc 01       	movw	r22, r24
    73b2:	cd 01       	movw	r24, r26
    73b4:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
    73b8:	da 01       	movw	r26, r20
    73ba:	c9 01       	movw	r24, r18
    73bc:	01 97       	sbiw	r24, 0x01	; 1
    73be:	a1 09       	sbc	r26, r1
    73c0:	b1 09       	sbc	r27, r1
    73c2:	8a 83       	std	Y+2, r24	; 0x02
    73c4:	9b 83       	std	Y+3, r25	; 0x03
    73c6:	ac 83       	std	Y+4, r26	; 0x04
    73c8:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    73ca:	8a 81       	ldd	r24, Y+2	; 0x02
    73cc:	9b 81       	ldd	r25, Y+3	; 0x03
    73ce:	ac 81       	ldd	r26, Y+4	; 0x04
    73d0:	bd 81       	ldd	r27, Y+5	; 0x05
    73d2:	89 2f       	mov	r24, r25
    73d4:	9a 2f       	mov	r25, r26
    73d6:	ab 2f       	mov	r26, r27
    73d8:	bb 27       	eor	r27, r27
    73da:	98 2f       	mov	r25, r24
    73dc:	9f 70       	andi	r25, 0x0F	; 15
    73de:	89 81       	ldd	r24, Y+1	; 0x01
    73e0:	82 95       	swap	r24
    73e2:	80 7f       	andi	r24, 0xF0	; 240
    73e4:	29 2f       	mov	r18, r25
    73e6:	28 2b       	or	r18, r24
    73e8:	8e 89       	ldd	r24, Y+22	; 0x16
    73ea:	9f 89       	ldd	r25, Y+23	; 0x17
    73ec:	fc 01       	movw	r30, r24
    73ee:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    73f0:	2a 81       	ldd	r18, Y+2	; 0x02
    73f2:	8e 89       	ldd	r24, Y+22	; 0x16
    73f4:	9f 89       	ldd	r25, Y+23	; 0x17
    73f6:	fc 01       	movw	r30, r24
    73f8:	26 83       	std	Z+6, r18	; 0x06

	return true;
    73fa:	81 e0       	ldi	r24, 0x01	; 1
}
    73fc:	6f 96       	adiw	r28, 0x1f	; 31
    73fe:	cd bf       	out	0x3d, r28	; 61
    7400:	de bf       	out	0x3e, r29	; 62
    7402:	df 91       	pop	r29
    7404:	cf 91       	pop	r28
    7406:	1f 91       	pop	r17
    7408:	0f 91       	pop	r16
    740a:	ff 90       	pop	r15
    740c:	ef 90       	pop	r14
    740e:	08 95       	ret

00007410 <wdt_wait_while_busy>:
	uint8_t temp = (WDT_WPER_gm & (win_period << WDT_WPER_gp)) |
			(WDT.WINCTRL & WDT_WEN_bm) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
	wdt_wait_while_busy();
	return true;
}
    7410:	cf 93       	push	r28
    7412:	df 93       	push	r29
    7414:	cd b7       	in	r28, 0x3d	; 61
    7416:	de b7       	in	r29, 0x3e	; 62
    7418:	00 00       	nop
    741a:	80 e8       	ldi	r24, 0x80	; 128
    741c:	90 e0       	ldi	r25, 0x00	; 0
    741e:	fc 01       	movw	r30, r24
    7420:	82 81       	ldd	r24, Z+2	; 0x02
    7422:	88 2f       	mov	r24, r24
    7424:	90 e0       	ldi	r25, 0x00	; 0
    7426:	81 70       	andi	r24, 0x01	; 1
    7428:	99 27       	eor	r25, r25
    742a:	00 97       	sbiw	r24, 0x00	; 0
    742c:	b1 f7       	brne	.-20     	; 0x741a <wdt_wait_while_busy+0xa>
    742e:	df 91       	pop	r29
    7430:	cf 91       	pop	r28
    7432:	08 95       	ret

00007434 <wdt_set_timeout_period>:
    7434:	cf 93       	push	r28
    7436:	df 93       	push	r29
    7438:	00 d0       	rcall	.+0      	; 0x743a <wdt_set_timeout_period+0x6>
    743a:	cd b7       	in	r28, 0x3d	; 61
    743c:	de b7       	in	r29, 0x3e	; 62
    743e:	8a 83       	std	Y+2, r24	; 0x02
    7440:	8a 81       	ldd	r24, Y+2	; 0x02
    7442:	88 2f       	mov	r24, r24
    7444:	90 e0       	ldi	r25, 0x00	; 0
    7446:	88 0f       	add	r24, r24
    7448:	99 1f       	adc	r25, r25
    744a:	88 0f       	add	r24, r24
    744c:	99 1f       	adc	r25, r25
    744e:	28 2f       	mov	r18, r24
    7450:	2c 73       	andi	r18, 0x3C	; 60
    7452:	80 e8       	ldi	r24, 0x80	; 128
    7454:	90 e0       	ldi	r25, 0x00	; 0
    7456:	fc 01       	movw	r30, r24
    7458:	80 81       	ld	r24, Z
    745a:	82 70       	andi	r24, 0x02	; 2
    745c:	82 2b       	or	r24, r18
    745e:	81 60       	ori	r24, 0x01	; 1
    7460:	89 83       	std	Y+1, r24	; 0x01
    7462:	69 81       	ldd	r22, Y+1	; 0x01
    7464:	80 e8       	ldi	r24, 0x80	; 128
    7466:	90 e0       	ldi	r25, 0x00	; 0
    7468:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <ccp_write_io>
    746c:	d1 df       	rcall	.-94     	; 0x7410 <wdt_wait_while_busy>
    746e:	0f 90       	pop	r0
    7470:	0f 90       	pop	r0
    7472:	df 91       	pop	r29
    7474:	cf 91       	pop	r28
    7476:	08 95       	ret

00007478 <wdt_disable>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period. Disable functions
 *  operate asynchronously with immidiate effect.
 */
void wdt_disable(void)
{
    7478:	cf 93       	push	r28
    747a:	df 93       	push	r29
    747c:	1f 92       	push	r1
    747e:	cd b7       	in	r28, 0x3d	; 61
    7480:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
    7482:	80 e8       	ldi	r24, 0x80	; 128
    7484:	90 e0       	ldi	r25, 0x00	; 0
    7486:	fc 01       	movw	r30, r24
    7488:	80 81       	ld	r24, Z
    748a:	8c 7f       	andi	r24, 0xFC	; 252
    748c:	81 60       	ori	r24, 0x01	; 1
    748e:	89 83       	std	Y+1, r24	; 0x01
	ccp_write_io((void *)&WDT.CTRL, temp);
    7490:	69 81       	ldd	r22, Y+1	; 0x01
    7492:	80 e8       	ldi	r24, 0x80	; 128
    7494:	90 e0       	ldi	r25, 0x00	; 0
    7496:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <ccp_write_io>
}
    749a:	0f 90       	pop	r0
    749c:	df 91       	pop	r29
    749e:	cf 91       	pop	r28
    74a0:	08 95       	ret

000074a2 <wdt_enable>:
 *  automatically ignored during the change enable period. The function will
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
    74a2:	cf 93       	push	r28
    74a4:	df 93       	push	r29
    74a6:	1f 92       	push	r1
    74a8:	cd b7       	in	r28, 0x3d	; 61
    74aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
    74ac:	80 e8       	ldi	r24, 0x80	; 128
    74ae:	90 e0       	ldi	r25, 0x00	; 0
    74b0:	fc 01       	movw	r30, r24
    74b2:	80 81       	ld	r24, Z
    74b4:	8c 73       	andi	r24, 0x3C	; 60
    74b6:	83 60       	ori	r24, 0x03	; 3
    74b8:	89 83       	std	Y+1, r24	; 0x01
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
    74ba:	69 81       	ldd	r22, Y+1	; 0x01
    74bc:	80 e8       	ldi	r24, 0x80	; 128
    74be:	90 e0       	ldi	r25, 0x00	; 0
    74c0:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <ccp_write_io>
	wdt_wait_while_busy();
    74c4:	a5 df       	rcall	.-182    	; 0x7410 <wdt_wait_while_busy>
}
    74c6:	0f 90       	pop	r0
    74c8:	df 91       	pop	r29
    74ca:	cf 91       	pop	r28
    74cc:	08 95       	ret

000074ce <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    74ce:	cf 93       	push	r28
    74d0:	df 93       	push	r29
    74d2:	cd b7       	in	r28, 0x3d	; 61
    74d4:	de b7       	in	r29, 0x3e	; 62

	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    74d6:	80 e0       	ldi	r24, 0x00	; 0
    74d8:	98 e4       	ldi	r25, 0x48	; 72
    74da:	a8 ee       	ldi	r26, 0xE8	; 232
    74dc:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    74de:	bc 01       	movw	r22, r24
    74e0:	cd 01       	movw	r24, r26
    74e2:	df 91       	pop	r29
    74e4:	cf 91       	pop	r28
    74e6:	08 95       	ret

000074e8 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    74e8:	cf 93       	push	r28
    74ea:	df 93       	push	r29
    74ec:	1f 92       	push	r1
    74ee:	cd b7       	in	r28, 0x3d	; 61
    74f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    74f2:	19 82       	std	Y+1, r1	; 0x01

	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    74f4:	ec df       	rcall	.-40     	; 0x74ce <sysclk_get_main_hz>
    74f6:	dc 01       	movw	r26, r24
    74f8:	cb 01       	movw	r24, r22
    74fa:	29 81       	ldd	r18, Y+1	; 0x01
    74fc:	22 2f       	mov	r18, r18
    74fe:	30 e0       	ldi	r19, 0x00	; 0
    7500:	02 2e       	mov	r0, r18
    7502:	04 c0       	rjmp	.+8      	; 0x750c <sysclk_get_per4_hz+0x24>
    7504:	b6 95       	lsr	r27
    7506:	a7 95       	ror	r26
    7508:	97 95       	ror	r25
    750a:	87 95       	ror	r24
    750c:	0a 94       	dec	r0
    750e:	d2 f7       	brpl	.-12     	; 0x7504 <sysclk_get_per4_hz+0x1c>
}
    7510:	bc 01       	movw	r22, r24
    7512:	cd 01       	movw	r24, r26
    7514:	0f 90       	pop	r0
    7516:	df 91       	pop	r29
    7518:	cf 91       	pop	r28
    751a:	08 95       	ret

0000751c <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    751c:	cf 93       	push	r28
    751e:	df 93       	push	r29
    7520:	cd b7       	in	r28, 0x3d	; 61
    7522:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    7524:	e1 df       	rcall	.-62     	; 0x74e8 <sysclk_get_per4_hz>
    7526:	dc 01       	movw	r26, r24
    7528:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    752a:	bc 01       	movw	r22, r24
    752c:	cd 01       	movw	r24, r26
    752e:	df 91       	pop	r29
    7530:	cf 91       	pop	r28
    7532:	08 95       	ret

00007534 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    7534:	cf 93       	push	r28
    7536:	df 93       	push	r29
    7538:	cd b7       	in	r28, 0x3d	; 61
    753a:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    753c:	ef df       	rcall	.-34     	; 0x751c <sysclk_get_per2_hz>
    753e:	dc 01       	movw	r26, r24
    7540:	cb 01       	movw	r24, r22
}
    7542:	bc 01       	movw	r22, r24
    7544:	cd 01       	movw	r24, r26
    7546:	df 91       	pop	r29
    7548:	cf 91       	pop	r28
    754a:	08 95       	ret

0000754c <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    754c:	cf 93       	push	r28
    754e:	df 93       	push	r29
    7550:	cd b7       	in	r28, 0x3d	; 61
    7552:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    7554:	ef df       	rcall	.-34     	; 0x7534 <sysclk_get_per_hz>
    7556:	dc 01       	movw	r26, r24
    7558:	cb 01       	movw	r24, r22
}
    755a:	bc 01       	movw	r22, r24
    755c:	cd 01       	movw	r24, r26
    755e:	df 91       	pop	r29
    7560:	cf 91       	pop	r28
    7562:	08 95       	ret

00007564 <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
    7564:	cf 93       	push	r28
    7566:	df 93       	push	r29
    7568:	00 d0       	rcall	.+0      	; 0x756a <tc_write_clock_source+0x6>
    756a:	1f 92       	push	r1
    756c:	cd b7       	in	r28, 0x3d	; 61
    756e:	de b7       	in	r29, 0x3e	; 62
    7570:	89 83       	std	Y+1, r24	; 0x01
    7572:	9a 83       	std	Y+2, r25	; 0x02
    7574:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    7576:	89 81       	ldd	r24, Y+1	; 0x01
    7578:	9a 81       	ldd	r25, Y+2	; 0x02
    757a:	fc 01       	movw	r30, r24
    757c:	80 81       	ld	r24, Z
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    757e:	98 2f       	mov	r25, r24
    7580:	90 7f       	andi	r25, 0xF0	; 240
    7582:	8b 81       	ldd	r24, Y+3	; 0x03
    7584:	89 2b       	or	r24, r25
    7586:	28 2f       	mov	r18, r24
    7588:	89 81       	ldd	r24, Y+1	; 0x01
    758a:	9a 81       	ldd	r25, Y+2	; 0x02
    758c:	fc 01       	movw	r30, r24
    758e:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
    7590:	23 96       	adiw	r28, 0x03	; 3
    7592:	cd bf       	out	0x3d, r28	; 61
    7594:	de bf       	out	0x3e, r29	; 62
    7596:	df 91       	pop	r29
    7598:	cf 91       	pop	r28
    759a:	08 95       	ret

0000759c <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
    759c:	cf 93       	push	r28
    759e:	df 93       	push	r29
    75a0:	00 d0       	rcall	.+0      	; 0x75a2 <tc_write_period+0x6>
    75a2:	00 d0       	rcall	.+0      	; 0x75a4 <tc_write_period+0x8>
    75a4:	cd b7       	in	r28, 0x3d	; 61
    75a6:	de b7       	in	r29, 0x3e	; 62
    75a8:	89 83       	std	Y+1, r24	; 0x01
    75aa:	9a 83       	std	Y+2, r25	; 0x02
    75ac:	6b 83       	std	Y+3, r22	; 0x03
    75ae:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
    75b0:	89 81       	ldd	r24, Y+1	; 0x01
    75b2:	9a 81       	ldd	r25, Y+2	; 0x02
    75b4:	2b 81       	ldd	r18, Y+3	; 0x03
    75b6:	3c 81       	ldd	r19, Y+4	; 0x04
    75b8:	fc 01       	movw	r30, r24
    75ba:	26 a3       	std	Z+38, r18	; 0x26
    75bc:	37 a3       	std	Z+39, r19	; 0x27
}
    75be:	24 96       	adiw	r28, 0x04	; 4
    75c0:	cd bf       	out	0x3d, r28	; 61
    75c2:	de bf       	out	0x3e, r29	; 62
    75c4:	df 91       	pop	r29
    75c6:	cf 91       	pop	r28
    75c8:	08 95       	ret

000075ca <tc_enable_cc_channels>:
 * \param tc Pointer to TC module.
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
    75ca:	cf 93       	push	r28
    75cc:	df 93       	push	r29
    75ce:	00 d0       	rcall	.+0      	; 0x75d0 <tc_enable_cc_channels+0x6>
    75d0:	1f 92       	push	r1
    75d2:	cd b7       	in	r28, 0x3d	; 61
    75d4:	de b7       	in	r29, 0x3e	; 62
    75d6:	89 83       	std	Y+1, r24	; 0x01
    75d8:	9a 83       	std	Y+2, r25	; 0x02
    75da:	6b 83       	std	Y+3, r22	; 0x03
	if (tc_is_tc0(void *tc)) {
    75dc:	89 81       	ldd	r24, Y+1	; 0x01
    75de:	9a 81       	ldd	r25, Y+2	; 0x02
    75e0:	80 74       	andi	r24, 0x40	; 64
    75e2:	99 27       	eor	r25, r25
    75e4:	00 97       	sbiw	r24, 0x00	; 0
    75e6:	61 f4       	brne	.+24     	; 0x7600 <tc_enable_cc_channels+0x36>
		((TC0_t *)tc)->CTRLB |= enablemask;
    75e8:	89 81       	ldd	r24, Y+1	; 0x01
    75ea:	9a 81       	ldd	r25, Y+2	; 0x02
    75ec:	fc 01       	movw	r30, r24
    75ee:	91 81       	ldd	r25, Z+1	; 0x01
    75f0:	8b 81       	ldd	r24, Y+3	; 0x03
    75f2:	29 2f       	mov	r18, r25
    75f4:	28 2b       	or	r18, r24
    75f6:	89 81       	ldd	r24, Y+1	; 0x01
    75f8:	9a 81       	ldd	r25, Y+2	; 0x02
    75fa:	fc 01       	movw	r30, r24
    75fc:	21 83       	std	Z+1, r18	; 0x01
    75fe:	13 c0       	rjmp	.+38     	; 0x7626 <tc_enable_cc_channels+0x5c>
	} else if (tc_is_tc1(void *tc)) {
    7600:	89 81       	ldd	r24, Y+1	; 0x01
    7602:	9a 81       	ldd	r25, Y+2	; 0x02
    7604:	80 74       	andi	r24, 0x40	; 64
    7606:	99 27       	eor	r25, r25
    7608:	00 97       	sbiw	r24, 0x00	; 0
    760a:	69 f0       	breq	.+26     	; 0x7626 <tc_enable_cc_channels+0x5c>
		((TC1_t *)tc)->CTRLB |=
    760c:	89 81       	ldd	r24, Y+1	; 0x01
    760e:	9a 81       	ldd	r25, Y+2	; 0x02
    7610:	fc 01       	movw	r30, r24
    7612:	81 81       	ldd	r24, Z+1	; 0x01
    7614:	98 2f       	mov	r25, r24
    7616:	8b 81       	ldd	r24, Y+3	; 0x03
    7618:	80 73       	andi	r24, 0x30	; 48
    761a:	89 2b       	or	r24, r25
    761c:	28 2f       	mov	r18, r24
    761e:	89 81       	ldd	r24, Y+1	; 0x01
    7620:	9a 81       	ldd	r25, Y+2	; 0x02
    7622:	fc 01       	movw	r30, r24
    7624:	21 83       	std	Z+1, r18	; 0x01
				enablemask & (TC1_CCAEN_bm | TC1_CCBEN_bm);
	}
}
    7626:	23 96       	adiw	r28, 0x03	; 3
    7628:	cd bf       	out	0x3d, r28	; 61
    762a:	de bf       	out	0x3e, r29	; 62
    762c:	df 91       	pop	r29
    762e:	cf 91       	pop	r28
    7630:	08 95       	ret

00007632 <tc_write_cc_buffer>:
 * \param channel_index CC Channel
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
    7632:	cf 93       	push	r28
    7634:	df 93       	push	r29
    7636:	cd b7       	in	r28, 0x3d	; 61
    7638:	de b7       	in	r29, 0x3e	; 62
    763a:	25 97       	sbiw	r28, 0x05	; 5
    763c:	cd bf       	out	0x3d, r28	; 61
    763e:	de bf       	out	0x3e, r29	; 62
    7640:	89 83       	std	Y+1, r24	; 0x01
    7642:	9a 83       	std	Y+2, r25	; 0x02
    7644:	6b 83       	std	Y+3, r22	; 0x03
    7646:	4c 83       	std	Y+4, r20	; 0x04
    7648:	5d 83       	std	Y+5, r21	; 0x05
	if (tc_is_tc0(void *tc)) {
    764a:	89 81       	ldd	r24, Y+1	; 0x01
    764c:	9a 81       	ldd	r25, Y+2	; 0x02
    764e:	80 74       	andi	r24, 0x40	; 64
    7650:	99 27       	eor	r25, r25
    7652:	00 97       	sbiw	r24, 0x00	; 0
    7654:	a9 f5       	brne	.+106    	; 0x76c0 <tc_write_cc_buffer+0x8e>
		switch (channel_index) {
    7656:	8b 81       	ldd	r24, Y+3	; 0x03
    7658:	88 2f       	mov	r24, r24
    765a:	90 e0       	ldi	r25, 0x00	; 0
    765c:	82 30       	cpi	r24, 0x02	; 2
    765e:	91 05       	cpc	r25, r1
    7660:	b1 f0       	breq	.+44     	; 0x768e <tc_write_cc_buffer+0x5c>
    7662:	83 30       	cpi	r24, 0x03	; 3
    7664:	91 05       	cpc	r25, r1
    7666:	24 f4       	brge	.+8      	; 0x7670 <tc_write_cc_buffer+0x3e>
    7668:	81 30       	cpi	r24, 0x01	; 1
    766a:	91 05       	cpc	r25, r1
    766c:	41 f0       	breq	.+16     	; 0x767e <tc_write_cc_buffer+0x4c>
    766e:	49 c0       	rjmp	.+146    	; 0x7702 <tc_write_cc_buffer+0xd0>
    7670:	83 30       	cpi	r24, 0x03	; 3
    7672:	91 05       	cpc	r25, r1
    7674:	a1 f0       	breq	.+40     	; 0x769e <tc_write_cc_buffer+0x6c>
    7676:	84 30       	cpi	r24, 0x04	; 4
    7678:	91 05       	cpc	r25, r1
    767a:	c9 f0       	breq	.+50     	; 0x76ae <tc_write_cc_buffer+0x7c>
    767c:	42 c0       	rjmp	.+132    	; 0x7702 <tc_write_cc_buffer+0xd0>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    767e:	89 81       	ldd	r24, Y+1	; 0x01
    7680:	9a 81       	ldd	r25, Y+2	; 0x02
    7682:	2c 81       	ldd	r18, Y+4	; 0x04
    7684:	3d 81       	ldd	r19, Y+5	; 0x05
    7686:	fc 01       	movw	r30, r24
    7688:	20 af       	std	Z+56, r18	; 0x38
    768a:	31 af       	std	Z+57, r19	; 0x39
			break;
    768c:	3a c0       	rjmp	.+116    	; 0x7702 <tc_write_cc_buffer+0xd0>
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    768e:	89 81       	ldd	r24, Y+1	; 0x01
    7690:	9a 81       	ldd	r25, Y+2	; 0x02
    7692:	2c 81       	ldd	r18, Y+4	; 0x04
    7694:	3d 81       	ldd	r19, Y+5	; 0x05
    7696:	fc 01       	movw	r30, r24
    7698:	22 af       	std	Z+58, r18	; 0x3a
    769a:	33 af       	std	Z+59, r19	; 0x3b
			break;
    769c:	32 c0       	rjmp	.+100    	; 0x7702 <tc_write_cc_buffer+0xd0>
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    769e:	89 81       	ldd	r24, Y+1	; 0x01
    76a0:	9a 81       	ldd	r25, Y+2	; 0x02
    76a2:	2c 81       	ldd	r18, Y+4	; 0x04
    76a4:	3d 81       	ldd	r19, Y+5	; 0x05
    76a6:	fc 01       	movw	r30, r24
    76a8:	24 af       	std	Z+60, r18	; 0x3c
    76aa:	35 af       	std	Z+61, r19	; 0x3d
			break;
    76ac:	2a c0       	rjmp	.+84     	; 0x7702 <tc_write_cc_buffer+0xd0>
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    76ae:	89 81       	ldd	r24, Y+1	; 0x01
    76b0:	9a 81       	ldd	r25, Y+2	; 0x02
    76b2:	2c 81       	ldd	r18, Y+4	; 0x04
    76b4:	3d 81       	ldd	r19, Y+5	; 0x05
    76b6:	fc 01       	movw	r30, r24
    76b8:	26 af       	std	Z+62, r18	; 0x3e
    76ba:	37 af       	std	Z+63, r19	; 0x3f
			break;
    76bc:	00 00       	nop
    76be:	21 c0       	rjmp	.+66     	; 0x7702 <tc_write_cc_buffer+0xd0>
		}
	} else if (tc_is_tc1(void *tc)) {
    76c0:	89 81       	ldd	r24, Y+1	; 0x01
    76c2:	9a 81       	ldd	r25, Y+2	; 0x02
    76c4:	80 74       	andi	r24, 0x40	; 64
    76c6:	99 27       	eor	r25, r25
    76c8:	00 97       	sbiw	r24, 0x00	; 0
    76ca:	d9 f0       	breq	.+54     	; 0x7702 <tc_write_cc_buffer+0xd0>
			switch (channel_index) {
    76cc:	8b 81       	ldd	r24, Y+3	; 0x03
    76ce:	88 2f       	mov	r24, r24
    76d0:	90 e0       	ldi	r25, 0x00	; 0
    76d2:	81 30       	cpi	r24, 0x01	; 1
    76d4:	91 05       	cpc	r25, r1
    76d6:	21 f0       	breq	.+8      	; 0x76e0 <tc_write_cc_buffer+0xae>
    76d8:	82 30       	cpi	r24, 0x02	; 2
    76da:	91 05       	cpc	r25, r1
    76dc:	49 f0       	breq	.+18     	; 0x76f0 <tc_write_cc_buffer+0xbe>
    76de:	10 c0       	rjmp	.+32     	; 0x7700 <tc_write_cc_buffer+0xce>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    76e0:	89 81       	ldd	r24, Y+1	; 0x01
    76e2:	9a 81       	ldd	r25, Y+2	; 0x02
    76e4:	2c 81       	ldd	r18, Y+4	; 0x04
    76e6:	3d 81       	ldd	r19, Y+5	; 0x05
    76e8:	fc 01       	movw	r30, r24
    76ea:	20 af       	std	Z+56, r18	; 0x38
    76ec:	31 af       	std	Z+57, r19	; 0x39
				break;
    76ee:	09 c0       	rjmp	.+18     	; 0x7702 <tc_write_cc_buffer+0xd0>
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    76f0:	89 81       	ldd	r24, Y+1	; 0x01
    76f2:	9a 81       	ldd	r25, Y+2	; 0x02
    76f4:	2c 81       	ldd	r18, Y+4	; 0x04
    76f6:	3d 81       	ldd	r19, Y+5	; 0x05
    76f8:	fc 01       	movw	r30, r24
    76fa:	22 af       	std	Z+58, r18	; 0x3a
    76fc:	33 af       	std	Z+59, r19	; 0x3b
				break;
    76fe:	01 c0       	rjmp	.+2      	; 0x7702 <tc_write_cc_buffer+0xd0>
			default:
				return;
    7700:	00 00       	nop
			}
		}
}
    7702:	25 96       	adiw	r28, 0x05	; 5
    7704:	cd bf       	out	0x3d, r28	; 61
    7706:	de bf       	out	0x3e, r29	; 62
    7708:	df 91       	pop	r29
    770a:	cf 91       	pop	r28
    770c:	08 95       	ret

0000770e <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
    770e:	cf 93       	push	r28
    7710:	df 93       	push	r29
    7712:	00 d0       	rcall	.+0      	; 0x7714 <tc_set_wgm+0x6>
    7714:	1f 92       	push	r1
    7716:	cd b7       	in	r28, 0x3d	; 61
    7718:	de b7       	in	r29, 0x3e	; 62
    771a:	89 83       	std	Y+1, r24	; 0x01
    771c:	9a 83       	std	Y+2, r25	; 0x02
    771e:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    7720:	89 81       	ldd	r24, Y+1	; 0x01
    7722:	9a 81       	ldd	r25, Y+2	; 0x02
    7724:	fc 01       	movw	r30, r24
    7726:	81 81       	ldd	r24, Z+1	; 0x01
    7728:	98 2f       	mov	r25, r24
    772a:	98 7f       	andi	r25, 0xF8	; 248
    772c:	8b 81       	ldd	r24, Y+3	; 0x03
    772e:	89 2b       	or	r24, r25
    7730:	28 2f       	mov	r18, r24
    7732:	89 81       	ldd	r24, Y+1	; 0x01
    7734:	9a 81       	ldd	r25, Y+2	; 0x02
    7736:	fc 01       	movw	r30, r24
    7738:	21 83       	std	Z+1, r18	; 0x01
}
    773a:	23 96       	adiw	r28, 0x03	; 3
    773c:	cd bf       	out	0x3d, r28	; 61
    773e:	de bf       	out	0x3e, r29	; 62
    7740:	df 91       	pop	r29
    7742:	cf 91       	pop	r28
    7744:	08 95       	ret

00007746 <pwm_set_duty_cycle_percent>:
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
    7746:	cf 93       	push	r28
    7748:	df 93       	push	r29
    774a:	00 d0       	rcall	.+0      	; 0x774c <pwm_set_duty_cycle_percent+0x6>
    774c:	1f 92       	push	r1
    774e:	cd b7       	in	r28, 0x3d	; 61
    7750:	de b7       	in	r29, 0x3e	; 62
    7752:	89 83       	std	Y+1, r24	; 0x01
    7754:	9a 83       	std	Y+2, r25	; 0x02
    7756:	6b 83       	std	Y+3, r22	; 0x03
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    7758:	89 81       	ldd	r24, Y+1	; 0x01
    775a:	9a 81       	ldd	r25, Y+2	; 0x02
    775c:	fc 01       	movw	r30, r24
    775e:	85 81       	ldd	r24, Z+5	; 0x05
    7760:	96 81       	ldd	r25, Z+6	; 0x06
    7762:	9c 01       	movw	r18, r24
    7764:	40 e0       	ldi	r20, 0x00	; 0
    7766:	50 e0       	ldi	r21, 0x00	; 0
			(uint32_t)duty_cycle_scale) / 100));
    7768:	8b 81       	ldd	r24, Y+3	; 0x03
    776a:	88 2f       	mov	r24, r24
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	a0 e0       	ldi	r26, 0x00	; 0
    7770:	b0 e0       	ldi	r27, 0x00	; 0
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    7772:	bc 01       	movw	r22, r24
    7774:	cd 01       	movw	r24, r26
    7776:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__mulsi3>
    777a:	dc 01       	movw	r26, r24
    777c:	cb 01       	movw	r24, r22
			(uint32_t)duty_cycle_scale) / 100));
    777e:	24 e6       	ldi	r18, 0x64	; 100
    7780:	30 e0       	ldi	r19, 0x00	; 0
    7782:	40 e0       	ldi	r20, 0x00	; 0
    7784:	50 e0       	ldi	r21, 0x00	; 0
    7786:	bc 01       	movw	r22, r24
    7788:	cd 01       	movw	r24, r26
    778a:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
    778e:	da 01       	movw	r26, r20
    7790:	c9 01       	movw	r24, r18
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    7792:	9c 01       	movw	r18, r24
    7794:	89 81       	ldd	r24, Y+1	; 0x01
    7796:	9a 81       	ldd	r25, Y+2	; 0x02
    7798:	fc 01       	movw	r30, r24
    779a:	62 81       	ldd	r22, Z+2	; 0x02
    779c:	89 81       	ldd	r24, Y+1	; 0x01
    779e:	9a 81       	ldd	r25, Y+2	; 0x02
    77a0:	fc 01       	movw	r30, r24
    77a2:	80 81       	ld	r24, Z
    77a4:	91 81       	ldd	r25, Z+1	; 0x01
    77a6:	a9 01       	movw	r20, r18
    77a8:	44 df       	rcall	.-376    	; 0x7632 <tc_write_cc_buffer>
			(uint16_t)(((uint32_t)config->period *
			(uint32_t)duty_cycle_scale) / 100));
}
    77aa:	23 96       	adiw	r28, 0x03	; 3
    77ac:	cd bf       	out	0x3d, r28	; 61
    77ae:	de bf       	out	0x3e, r29	; 62
    77b0:	df 91       	pop	r29
    77b2:	cf 91       	pop	r28
    77b4:	08 95       	ret

000077b6 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequenzy in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    77b6:	cf 93       	push	r28
    77b8:	df 93       	push	r29
    77ba:	cd b7       	in	r28, 0x3d	; 61
    77bc:	de b7       	in	r29, 0x3e	; 62
    77be:	2c 97       	sbiw	r28, 0x0c	; 12
    77c0:	cd bf       	out	0x3d, r28	; 61
    77c2:	de bf       	out	0x3e, r29	; 62
    77c4:	89 87       	std	Y+9, r24	; 0x09
    77c6:	9a 87       	std	Y+10, r25	; 0x0a
    77c8:	6b 87       	std	Y+11, r22	; 0x0b
    77ca:	7c 87       	std	Y+12, r23	; 0x0c
	uint32_t cpu_hz = sysclk_get_cpu_hz();
    77cc:	bf de       	rcall	.-642    	; 0x754c <sysclk_get_cpu_hz>
    77ce:	dc 01       	movw	r26, r24
    77d0:	cb 01       	movw	r24, r22
    77d2:	8b 83       	std	Y+3, r24	; 0x03
    77d4:	9c 83       	std	Y+4, r25	; 0x04
    77d6:	ad 83       	std	Y+5, r26	; 0x05
    77d8:	be 83       	std	Y+6, r27	; 0x06
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest dividor for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    77da:	8b 85       	ldd	r24, Y+11	; 0x0b
    77dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    77de:	9c 01       	movw	r18, r24
    77e0:	40 e0       	ldi	r20, 0x00	; 0
    77e2:	50 e0       	ldi	r21, 0x00	; 0
    77e4:	8b 81       	ldd	r24, Y+3	; 0x03
    77e6:	9c 81       	ldd	r25, Y+4	; 0x04
    77e8:	ad 81       	ldd	r26, Y+5	; 0x05
    77ea:	be 81       	ldd	r27, Y+6	; 0x06
    77ec:	bc 01       	movw	r22, r24
    77ee:	cd 01       	movw	r24, r26
    77f0:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
    77f4:	da 01       	movw	r26, r20
    77f6:	c9 01       	movw	r24, r18
    77f8:	2f ef       	ldi	r18, 0xFF	; 255
    77fa:	3f ef       	ldi	r19, 0xFF	; 255
    77fc:	40 e0       	ldi	r20, 0x00	; 0
    77fe:	50 e0       	ldi	r21, 0x00	; 0
    7800:	bc 01       	movw	r22, r24
    7802:	cd 01       	movw	r24, r26
    7804:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
    7808:	da 01       	movw	r26, r20
    780a:	c9 01       	movw	r24, r18
    780c:	8f 83       	std	Y+7, r24	; 0x07
    780e:	98 87       	std	Y+8, r25	; 0x08
	if (smallest_div < 1) {
    7810:	8f 81       	ldd	r24, Y+7	; 0x07
    7812:	98 85       	ldd	r25, Y+8	; 0x08
    7814:	00 97       	sbiw	r24, 0x00	; 0
    7816:	51 f4       	brne	.+20     	; 0x782c <pwm_set_frequency+0x76>
		dividor = 1;
    7818:	81 e0       	ldi	r24, 0x01	; 1
    781a:	90 e0       	ldi	r25, 0x00	; 0
    781c:	89 83       	std	Y+1, r24	; 0x01
    781e:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1;
    7820:	89 85       	ldd	r24, Y+9	; 0x09
    7822:	9a 85       	ldd	r25, Y+10	; 0x0a
    7824:	21 e0       	ldi	r18, 0x01	; 1
    7826:	fc 01       	movw	r30, r24
    7828:	24 83       	std	Z+4, r18	; 0x04
    782a:	55 c0       	rjmp	.+170    	; 0x78d6 <pwm_set_frequency+0x120>
	} else if (smallest_div < 2) {
    782c:	8f 81       	ldd	r24, Y+7	; 0x07
    782e:	98 85       	ldd	r25, Y+8	; 0x08
    7830:	82 30       	cpi	r24, 0x02	; 2
    7832:	91 05       	cpc	r25, r1
    7834:	50 f4       	brcc	.+20     	; 0x784a <pwm_set_frequency+0x94>
		dividor = 2;
    7836:	82 e0       	ldi	r24, 0x02	; 2
    7838:	90 e0       	ldi	r25, 0x00	; 0
    783a:	89 83       	std	Y+1, r24	; 0x01
    783c:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV2;
    783e:	89 85       	ldd	r24, Y+9	; 0x09
    7840:	9a 85       	ldd	r25, Y+10	; 0x0a
    7842:	22 e0       	ldi	r18, 0x02	; 2
    7844:	fc 01       	movw	r30, r24
    7846:	24 83       	std	Z+4, r18	; 0x04
    7848:	46 c0       	rjmp	.+140    	; 0x78d6 <pwm_set_frequency+0x120>
	} else if (smallest_div < 4) {
    784a:	8f 81       	ldd	r24, Y+7	; 0x07
    784c:	98 85       	ldd	r25, Y+8	; 0x08
    784e:	84 30       	cpi	r24, 0x04	; 4
    7850:	91 05       	cpc	r25, r1
    7852:	50 f4       	brcc	.+20     	; 0x7868 <pwm_set_frequency+0xb2>
		dividor = 4;
    7854:	84 e0       	ldi	r24, 0x04	; 4
    7856:	90 e0       	ldi	r25, 0x00	; 0
    7858:	89 83       	std	Y+1, r24	; 0x01
    785a:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV4;
    785c:	89 85       	ldd	r24, Y+9	; 0x09
    785e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7860:	23 e0       	ldi	r18, 0x03	; 3
    7862:	fc 01       	movw	r30, r24
    7864:	24 83       	std	Z+4, r18	; 0x04
    7866:	37 c0       	rjmp	.+110    	; 0x78d6 <pwm_set_frequency+0x120>
	} else if (smallest_div < 8) {
    7868:	8f 81       	ldd	r24, Y+7	; 0x07
    786a:	98 85       	ldd	r25, Y+8	; 0x08
    786c:	88 30       	cpi	r24, 0x08	; 8
    786e:	91 05       	cpc	r25, r1
    7870:	50 f4       	brcc	.+20     	; 0x7886 <pwm_set_frequency+0xd0>
		dividor = 8;
    7872:	88 e0       	ldi	r24, 0x08	; 8
    7874:	90 e0       	ldi	r25, 0x00	; 0
    7876:	89 83       	std	Y+1, r24	; 0x01
    7878:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV8;
    787a:	89 85       	ldd	r24, Y+9	; 0x09
    787c:	9a 85       	ldd	r25, Y+10	; 0x0a
    787e:	24 e0       	ldi	r18, 0x04	; 4
    7880:	fc 01       	movw	r30, r24
    7882:	24 83       	std	Z+4, r18	; 0x04
    7884:	28 c0       	rjmp	.+80     	; 0x78d6 <pwm_set_frequency+0x120>
	} else if (smallest_div < 64) {
    7886:	8f 81       	ldd	r24, Y+7	; 0x07
    7888:	98 85       	ldd	r25, Y+8	; 0x08
    788a:	80 34       	cpi	r24, 0x40	; 64
    788c:	91 05       	cpc	r25, r1
    788e:	50 f4       	brcc	.+20     	; 0x78a4 <pwm_set_frequency+0xee>
		dividor = 64;
    7890:	80 e4       	ldi	r24, 0x40	; 64
    7892:	90 e0       	ldi	r25, 0x00	; 0
    7894:	89 83       	std	Y+1, r24	; 0x01
    7896:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV64;
    7898:	89 85       	ldd	r24, Y+9	; 0x09
    789a:	9a 85       	ldd	r25, Y+10	; 0x0a
    789c:	25 e0       	ldi	r18, 0x05	; 5
    789e:	fc 01       	movw	r30, r24
    78a0:	24 83       	std	Z+4, r18	; 0x04
    78a2:	19 c0       	rjmp	.+50     	; 0x78d6 <pwm_set_frequency+0x120>
	} else if (smallest_div < 256) {
    78a4:	8f 81       	ldd	r24, Y+7	; 0x07
    78a6:	98 85       	ldd	r25, Y+8	; 0x08
    78a8:	8f 3f       	cpi	r24, 0xFF	; 255
    78aa:	91 05       	cpc	r25, r1
    78ac:	09 f0       	breq	.+2      	; 0x78b0 <pwm_set_frequency+0xfa>
    78ae:	50 f4       	brcc	.+20     	; 0x78c4 <pwm_set_frequency+0x10e>
		dividor = 256;
    78b0:	80 e0       	ldi	r24, 0x00	; 0
    78b2:	91 e0       	ldi	r25, 0x01	; 1
    78b4:	89 83       	std	Y+1, r24	; 0x01
    78b6:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV256;
    78b8:	89 85       	ldd	r24, Y+9	; 0x09
    78ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    78bc:	26 e0       	ldi	r18, 0x06	; 6
    78be:	fc 01       	movw	r30, r24
    78c0:	24 83       	std	Z+4, r18	; 0x04
    78c2:	09 c0       	rjmp	.+18     	; 0x78d6 <pwm_set_frequency+0x120>
	} else {
		dividor = 1024;
    78c4:	80 e0       	ldi	r24, 0x00	; 0
    78c6:	94 e0       	ldi	r25, 0x04	; 4
    78c8:	89 83       	std	Y+1, r24	; 0x01
    78ca:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1024;
    78cc:	89 85       	ldd	r24, Y+9	; 0x09
    78ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    78d0:	27 e0       	ldi	r18, 0x07	; 7
    78d2:	fc 01       	movw	r30, r24
    78d4:	24 83       	std	Z+4, r18	; 0x04
	}

	/* Calculate the period from the just found dividor */
	config->period = cpu_hz / dividor / freq_hz;
    78d6:	89 81       	ldd	r24, Y+1	; 0x01
    78d8:	9a 81       	ldd	r25, Y+2	; 0x02
    78da:	9c 01       	movw	r18, r24
    78dc:	40 e0       	ldi	r20, 0x00	; 0
    78de:	50 e0       	ldi	r21, 0x00	; 0
    78e0:	8b 81       	ldd	r24, Y+3	; 0x03
    78e2:	9c 81       	ldd	r25, Y+4	; 0x04
    78e4:	ad 81       	ldd	r26, Y+5	; 0x05
    78e6:	be 81       	ldd	r27, Y+6	; 0x06
    78e8:	bc 01       	movw	r22, r24
    78ea:	cd 01       	movw	r24, r26
    78ec:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
    78f0:	da 01       	movw	r26, r20
    78f2:	c9 01       	movw	r24, r18
    78f4:	2b 85       	ldd	r18, Y+11	; 0x0b
    78f6:	3c 85       	ldd	r19, Y+12	; 0x0c
    78f8:	99 01       	movw	r18, r18
    78fa:	40 e0       	ldi	r20, 0x00	; 0
    78fc:	50 e0       	ldi	r21, 0x00	; 0
    78fe:	bc 01       	movw	r22, r24
    7900:	cd 01       	movw	r24, r26
    7902:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <__udivmodsi4>
    7906:	da 01       	movw	r26, r20
    7908:	c9 01       	movw	r24, r18
    790a:	9c 01       	movw	r18, r24
    790c:	89 85       	ldd	r24, Y+9	; 0x09
    790e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7910:	fc 01       	movw	r30, r24
    7912:	25 83       	std	Z+5, r18	; 0x05
    7914:	36 83       	std	Z+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    7916:	89 85       	ldd	r24, Y+9	; 0x09
    7918:	9a 85       	ldd	r25, Y+10	; 0x0a
    791a:	fc 01       	movw	r30, r24
    791c:	85 81       	ldd	r24, Z+5	; 0x05
    791e:	96 81       	ldd	r25, Z+6	; 0x06
    7920:	84 36       	cpi	r24, 0x64	; 100
    7922:	91 05       	cpc	r25, r1
    7924:	48 f4       	brcc	.+18     	; 0x7938 <pwm_set_frequency+0x182>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    7926:	89 85       	ldd	r24, Y+9	; 0x09
    7928:	9a 85       	ldd	r25, Y+10	; 0x0a
    792a:	fc 01       	movw	r30, r24
    792c:	14 82       	std	Z+4, r1	; 0x04
		config->period = 0;
    792e:	89 85       	ldd	r24, Y+9	; 0x09
    7930:	9a 85       	ldd	r25, Y+10	; 0x0a
    7932:	fc 01       	movw	r30, r24
    7934:	15 82       	std	Z+5, r1	; 0x05
    7936:	16 82       	std	Z+6, r1	; 0x06
		Assert(false);
	}
}
    7938:	2c 96       	adiw	r28, 0x0c	; 12
    793a:	cd bf       	out	0x3d, r28	; 61
    793c:	de bf       	out	0x3e, r29	; 62
    793e:	df 91       	pop	r29
    7940:	cf 91       	pop	r28
    7942:	08 95       	ret

00007944 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    7944:	cf 93       	push	r28
    7946:	df 93       	push	r29
    7948:	cd b7       	in	r28, 0x3d	; 61
    794a:	de b7       	in	r29, 0x3e	; 62
    794c:	27 97       	sbiw	r28, 0x07	; 7
    794e:	cd bf       	out	0x3d, r28	; 61
    7950:	de bf       	out	0x3e, r29	; 62
    7952:	8a 83       	std	Y+2, r24	; 0x02
    7954:	9b 83       	std	Y+3, r25	; 0x03
    7956:	6c 83       	std	Y+4, r22	; 0x04
    7958:	4d 83       	std	Y+5, r20	; 0x05
    795a:	2e 83       	std	Y+6, r18	; 0x06
    795c:	3f 83       	std	Y+7, r19	; 0x07
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
    795e:	19 82       	std	Y+1, r1	; 0x01

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    7960:	8c 81       	ldd	r24, Y+4	; 0x04
    7962:	88 2f       	mov	r24, r24
    7964:	90 e0       	ldi	r25, 0x00	; 0
    7966:	82 30       	cpi	r24, 0x02	; 2
    7968:	91 05       	cpc	r25, r1
    796a:	09 f4       	brne	.+2      	; 0x796e <pwm_init+0x2a>
    796c:	56 c0       	rjmp	.+172    	; 0x7a1a <pwm_init+0xd6>
    796e:	83 30       	cpi	r24, 0x03	; 3
    7970:	91 05       	cpc	r25, r1
    7972:	34 f4       	brge	.+12     	; 0x7980 <pwm_init+0x3c>
    7974:	00 97       	sbiw	r24, 0x00	; 0
    7976:	69 f0       	breq	.+26     	; 0x7992 <pwm_init+0x4e>
    7978:	81 30       	cpi	r24, 0x01	; 1
    797a:	91 05       	cpc	r25, r1
    797c:	61 f1       	breq	.+88     	; 0x79d6 <pwm_init+0x92>
    797e:	b3 c0       	rjmp	.+358    	; 0x7ae6 <pwm_init+0x1a2>
    7980:	84 30       	cpi	r24, 0x04	; 4
    7982:	91 05       	cpc	r25, r1
    7984:	09 f4       	brne	.+2      	; 0x7988 <pwm_init+0x44>
    7986:	6b c0       	rjmp	.+214    	; 0x7a5e <pwm_init+0x11a>
    7988:	86 30       	cpi	r24, 0x06	; 6
    798a:	91 05       	cpc	r25, r1
    798c:	09 f4       	brne	.+2      	; 0x7990 <pwm_init+0x4c>
    798e:	89 c0       	rjmp	.+274    	; 0x7aa2 <pwm_init+0x15e>
    7990:	aa c0       	rjmp	.+340    	; 0x7ae6 <pwm_init+0x1a2>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    7992:	8a 81       	ldd	r24, Y+2	; 0x02
    7994:	9b 81       	ldd	r25, Y+3	; 0x03
    7996:	20 e0       	ldi	r18, 0x00	; 0
    7998:	38 e0       	ldi	r19, 0x08	; 8
    799a:	fc 01       	movw	r30, r24
    799c:	20 83       	st	Z, r18
    799e:	31 83       	std	Z+1, r19	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    79a0:	80 e4       	ldi	r24, 0x40	; 64
    79a2:	96 e0       	ldi	r25, 0x06	; 6
    79a4:	20 e4       	ldi	r18, 0x40	; 64
    79a6:	36 e0       	ldi	r19, 0x06	; 6
    79a8:	f9 01       	movw	r30, r18
    79aa:	20 81       	ld	r18, Z
    79ac:	62 2f       	mov	r22, r18
    79ae:	2d 81       	ldd	r18, Y+5	; 0x05
    79b0:	22 2f       	mov	r18, r18
    79b2:	30 e0       	ldi	r19, 0x00	; 0
    79b4:	a9 01       	movw	r20, r18
    79b6:	41 50       	subi	r20, 0x01	; 1
    79b8:	51 09       	sbc	r21, r1
    79ba:	21 e0       	ldi	r18, 0x01	; 1
    79bc:	30 e0       	ldi	r19, 0x00	; 0
    79be:	04 2e       	mov	r0, r20
    79c0:	02 c0       	rjmp	.+4      	; 0x79c6 <pwm_init+0x82>
    79c2:	22 0f       	add	r18, r18
    79c4:	33 1f       	adc	r19, r19
    79c6:	0a 94       	dec	r0
    79c8:	e2 f7       	brpl	.-8      	; 0x79c2 <pwm_init+0x7e>
    79ca:	26 2b       	or	r18, r22
    79cc:	fc 01       	movw	r30, r24
    79ce:	20 83       	st	Z, r18
		num_chan = 4;
    79d0:	84 e0       	ldi	r24, 0x04	; 4
    79d2:	89 83       	std	Y+1, r24	; 0x01
		break;
    79d4:	89 c0       	rjmp	.+274    	; 0x7ae8 <pwm_init+0x1a4>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    79d6:	8a 81       	ldd	r24, Y+2	; 0x02
    79d8:	9b 81       	ldd	r25, Y+3	; 0x03
    79da:	20 e4       	ldi	r18, 0x40	; 64
    79dc:	38 e0       	ldi	r19, 0x08	; 8
    79de:	fc 01       	movw	r30, r24
    79e0:	20 83       	st	Z, r18
    79e2:	31 83       	std	Z+1, r19	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    79e4:	80 e4       	ldi	r24, 0x40	; 64
    79e6:	96 e0       	ldi	r25, 0x06	; 6
    79e8:	20 e4       	ldi	r18, 0x40	; 64
    79ea:	36 e0       	ldi	r19, 0x06	; 6
    79ec:	f9 01       	movw	r30, r18
    79ee:	20 81       	ld	r18, Z
    79f0:	62 2f       	mov	r22, r18
    79f2:	2d 81       	ldd	r18, Y+5	; 0x05
    79f4:	22 2f       	mov	r18, r18
    79f6:	30 e0       	ldi	r19, 0x00	; 0
    79f8:	a9 01       	movw	r20, r18
    79fa:	4d 5f       	subi	r20, 0xFD	; 253
    79fc:	5f 4f       	sbci	r21, 0xFF	; 255
    79fe:	21 e0       	ldi	r18, 0x01	; 1
    7a00:	30 e0       	ldi	r19, 0x00	; 0
    7a02:	04 2e       	mov	r0, r20
    7a04:	02 c0       	rjmp	.+4      	; 0x7a0a <pwm_init+0xc6>
    7a06:	22 0f       	add	r18, r18
    7a08:	33 1f       	adc	r19, r19
    7a0a:	0a 94       	dec	r0
    7a0c:	e2 f7       	brpl	.-8      	; 0x7a06 <pwm_init+0xc2>
    7a0e:	26 2b       	or	r18, r22
    7a10:	fc 01       	movw	r30, r24
    7a12:	20 83       	st	Z, r18
		num_chan = 2;
    7a14:	82 e0       	ldi	r24, 0x02	; 2
    7a16:	89 83       	std	Y+1, r24	; 0x01
		break;
    7a18:	67 c0       	rjmp	.+206    	; 0x7ae8 <pwm_init+0x1a4>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    7a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    7a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    7a1e:	20 e0       	ldi	r18, 0x00	; 0
    7a20:	39 e0       	ldi	r19, 0x09	; 9
    7a22:	fc 01       	movw	r30, r24
    7a24:	20 83       	st	Z, r18
    7a26:	31 83       	std	Z+1, r19	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    7a28:	80 e6       	ldi	r24, 0x60	; 96
    7a2a:	96 e0       	ldi	r25, 0x06	; 6
    7a2c:	20 e6       	ldi	r18, 0x60	; 96
    7a2e:	36 e0       	ldi	r19, 0x06	; 6
    7a30:	f9 01       	movw	r30, r18
    7a32:	20 81       	ld	r18, Z
    7a34:	62 2f       	mov	r22, r18
    7a36:	2d 81       	ldd	r18, Y+5	; 0x05
    7a38:	22 2f       	mov	r18, r18
    7a3a:	30 e0       	ldi	r19, 0x00	; 0
    7a3c:	a9 01       	movw	r20, r18
    7a3e:	41 50       	subi	r20, 0x01	; 1
    7a40:	51 09       	sbc	r21, r1
    7a42:	21 e0       	ldi	r18, 0x01	; 1
    7a44:	30 e0       	ldi	r19, 0x00	; 0
    7a46:	04 2e       	mov	r0, r20
    7a48:	02 c0       	rjmp	.+4      	; 0x7a4e <pwm_init+0x10a>
    7a4a:	22 0f       	add	r18, r18
    7a4c:	33 1f       	adc	r19, r19
    7a4e:	0a 94       	dec	r0
    7a50:	e2 f7       	brpl	.-8      	; 0x7a4a <pwm_init+0x106>
    7a52:	26 2b       	or	r18, r22
    7a54:	fc 01       	movw	r30, r24
    7a56:	20 83       	st	Z, r18
		num_chan = 4;
    7a58:	84 e0       	ldi	r24, 0x04	; 4
    7a5a:	89 83       	std	Y+1, r24	; 0x01
		break;
    7a5c:	45 c0       	rjmp	.+138    	; 0x7ae8 <pwm_init+0x1a4>
		break;
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    7a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    7a60:	9b 81       	ldd	r25, Y+3	; 0x03
    7a62:	20 e0       	ldi	r18, 0x00	; 0
    7a64:	3a e0       	ldi	r19, 0x0A	; 10
    7a66:	fc 01       	movw	r30, r24
    7a68:	20 83       	st	Z, r18
    7a6a:	31 83       	std	Z+1, r19	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    7a6c:	80 e8       	ldi	r24, 0x80	; 128
    7a6e:	96 e0       	ldi	r25, 0x06	; 6
    7a70:	20 e8       	ldi	r18, 0x80	; 128
    7a72:	36 e0       	ldi	r19, 0x06	; 6
    7a74:	f9 01       	movw	r30, r18
    7a76:	20 81       	ld	r18, Z
    7a78:	62 2f       	mov	r22, r18
    7a7a:	2d 81       	ldd	r18, Y+5	; 0x05
    7a7c:	22 2f       	mov	r18, r18
    7a7e:	30 e0       	ldi	r19, 0x00	; 0
    7a80:	a9 01       	movw	r20, r18
    7a82:	41 50       	subi	r20, 0x01	; 1
    7a84:	51 09       	sbc	r21, r1
    7a86:	21 e0       	ldi	r18, 0x01	; 1
    7a88:	30 e0       	ldi	r19, 0x00	; 0
    7a8a:	04 2e       	mov	r0, r20
    7a8c:	02 c0       	rjmp	.+4      	; 0x7a92 <pwm_init+0x14e>
    7a8e:	22 0f       	add	r18, r18
    7a90:	33 1f       	adc	r19, r19
    7a92:	0a 94       	dec	r0
    7a94:	e2 f7       	brpl	.-8      	; 0x7a8e <pwm_init+0x14a>
    7a96:	26 2b       	or	r18, r22
    7a98:	fc 01       	movw	r30, r24
    7a9a:	20 83       	st	Z, r18
		num_chan = 4;
    7a9c:	84 e0       	ldi	r24, 0x04	; 4
    7a9e:	89 83       	std	Y+1, r24	; 0x01
		break;
    7aa0:	23 c0       	rjmp	.+70     	; 0x7ae8 <pwm_init+0x1a4>
		break;
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    7aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    7aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    7aa6:	20 e0       	ldi	r18, 0x00	; 0
    7aa8:	3b e0       	ldi	r19, 0x0B	; 11
    7aaa:	fc 01       	movw	r30, r24
    7aac:	20 83       	st	Z, r18
    7aae:	31 83       	std	Z+1, r19	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    7ab0:	80 ea       	ldi	r24, 0xA0	; 160
    7ab2:	96 e0       	ldi	r25, 0x06	; 6
    7ab4:	20 ea       	ldi	r18, 0xA0	; 160
    7ab6:	36 e0       	ldi	r19, 0x06	; 6
    7ab8:	f9 01       	movw	r30, r18
    7aba:	20 81       	ld	r18, Z
    7abc:	62 2f       	mov	r22, r18
    7abe:	2d 81       	ldd	r18, Y+5	; 0x05
    7ac0:	22 2f       	mov	r18, r18
    7ac2:	30 e0       	ldi	r19, 0x00	; 0
    7ac4:	a9 01       	movw	r20, r18
    7ac6:	41 50       	subi	r20, 0x01	; 1
    7ac8:	51 09       	sbc	r21, r1
    7aca:	21 e0       	ldi	r18, 0x01	; 1
    7acc:	30 e0       	ldi	r19, 0x00	; 0
    7ace:	04 2e       	mov	r0, r20
    7ad0:	02 c0       	rjmp	.+4      	; 0x7ad6 <pwm_init+0x192>
    7ad2:	22 0f       	add	r18, r18
    7ad4:	33 1f       	adc	r19, r19
    7ad6:	0a 94       	dec	r0
    7ad8:	e2 f7       	brpl	.-8      	; 0x7ad2 <pwm_init+0x18e>
    7ada:	26 2b       	or	r18, r22
    7adc:	fc 01       	movw	r30, r24
    7ade:	20 83       	st	Z, r18
		num_chan = 4;
    7ae0:	84 e0       	ldi	r24, 0x04	; 4
    7ae2:	89 83       	std	Y+1, r24	; 0x01
		break;
    7ae4:	01 c0       	rjmp	.+2      	; 0x7ae8 <pwm_init+0x1a4>
		num_chan = 2;
		break;
#endif
	default:
		Assert(false);
		break;
    7ae6:	00 00       	nop
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    7ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    7aea:	9b 81       	ldd	r25, Y+3	; 0x03
    7aec:	2d 81       	ldd	r18, Y+5	; 0x05
    7aee:	fc 01       	movw	r30, r24
    7af0:	22 83       	std	Z+2, r18	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    7af2:	8d 81       	ldd	r24, Y+5	; 0x05
    7af4:	88 2f       	mov	r24, r24
    7af6:	90 e0       	ldi	r25, 0x00	; 0
    7af8:	82 30       	cpi	r24, 0x02	; 2
    7afa:	91 05       	cpc	r25, r1
    7afc:	a1 f0       	breq	.+40     	; 0x7b26 <pwm_init+0x1e2>
    7afe:	83 30       	cpi	r24, 0x03	; 3
    7b00:	91 05       	cpc	r25, r1
    7b02:	24 f4       	brge	.+8      	; 0x7b0c <pwm_init+0x1c8>
    7b04:	81 30       	cpi	r24, 0x01	; 1
    7b06:	91 05       	cpc	r25, r1
    7b08:	41 f0       	breq	.+16     	; 0x7b1a <pwm_init+0x1d6>
    7b0a:	1f c0       	rjmp	.+62     	; 0x7b4a <pwm_init+0x206>
    7b0c:	83 30       	cpi	r24, 0x03	; 3
    7b0e:	91 05       	cpc	r25, r1
    7b10:	81 f0       	breq	.+32     	; 0x7b32 <pwm_init+0x1ee>
    7b12:	84 30       	cpi	r24, 0x04	; 4
    7b14:	91 05       	cpc	r25, r1
    7b16:	99 f0       	breq	.+38     	; 0x7b3e <pwm_init+0x1fa>
    7b18:	18 c0       	rjmp	.+48     	; 0x7b4a <pwm_init+0x206>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    7b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    7b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    7b1e:	20 e1       	ldi	r18, 0x10	; 16
    7b20:	fc 01       	movw	r30, r24
    7b22:	23 83       	std	Z+3, r18	; 0x03
		break;
    7b24:	13 c0       	rjmp	.+38     	; 0x7b4c <pwm_init+0x208>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    7b26:	8a 81       	ldd	r24, Y+2	; 0x02
    7b28:	9b 81       	ldd	r25, Y+3	; 0x03
    7b2a:	20 e2       	ldi	r18, 0x20	; 32
    7b2c:	fc 01       	movw	r30, r24
    7b2e:	23 83       	std	Z+3, r18	; 0x03
		break;
    7b30:	0d c0       	rjmp	.+26     	; 0x7b4c <pwm_init+0x208>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    7b32:	8a 81       	ldd	r24, Y+2	; 0x02
    7b34:	9b 81       	ldd	r25, Y+3	; 0x03
    7b36:	20 e4       	ldi	r18, 0x40	; 64
    7b38:	fc 01       	movw	r30, r24
    7b3a:	23 83       	std	Z+3, r18	; 0x03
		break;
    7b3c:	07 c0       	rjmp	.+14     	; 0x7b4c <pwm_init+0x208>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    7b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    7b40:	9b 81       	ldd	r25, Y+3	; 0x03
    7b42:	20 e8       	ldi	r18, 0x80	; 128
    7b44:	fc 01       	movw	r30, r24
    7b46:	23 83       	std	Z+3, r18	; 0x03
		break;
    7b48:	01 c0       	rjmp	.+2      	; 0x7b4c <pwm_init+0x208>
	default:
		Assert(false);
		break;
    7b4a:	00 00       	nop
	}

	/* Enable peripherial clock for this TC */
	tc_enable(config->tc);
    7b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    7b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    7b50:	fc 01       	movw	r30, r24
    7b52:	80 81       	ld	r24, Z
    7b54:	91 81       	ldd	r25, Z+1	; 0x01
    7b56:	3d d8       	rcall	.-3974   	; 0x6bd2 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    7b58:	8a 81       	ldd	r24, Y+2	; 0x02
    7b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    7b5c:	fc 01       	movw	r30, r24
    7b5e:	80 81       	ld	r24, Z
    7b60:	91 81       	ldd	r25, Z+1	; 0x01
    7b62:	63 e0       	ldi	r22, 0x03	; 3
    7b64:	d4 dd       	rcall	.-1112   	; 0x770e <tc_set_wgm>

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    7b66:	8a 81       	ldd	r24, Y+2	; 0x02
    7b68:	9b 81       	ldd	r25, Y+3	; 0x03
    7b6a:	fc 01       	movw	r30, r24
    7b6c:	15 82       	std	Z+5, r1	; 0x05
    7b6e:	16 82       	std	Z+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    7b70:	8a 81       	ldd	r24, Y+2	; 0x02
    7b72:	9b 81       	ldd	r25, Y+3	; 0x03
    7b74:	fc 01       	movw	r30, r24
    7b76:	14 82       	std	Z+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    7b78:	8a 81       	ldd	r24, Y+2	; 0x02
    7b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    7b7c:	fc 01       	movw	r30, r24
    7b7e:	80 81       	ld	r24, Z
    7b80:	91 81       	ldd	r25, Z+1	; 0x01
    7b82:	60 e0       	ldi	r22, 0x00	; 0
    7b84:	ef dc       	rcall	.-1570   	; 0x7564 <tc_write_clock_source>

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    7b86:	2e 81       	ldd	r18, Y+6	; 0x06
    7b88:	3f 81       	ldd	r19, Y+7	; 0x07
    7b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    7b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    7b8e:	b9 01       	movw	r22, r18
    7b90:	12 de       	rcall	.-988    	; 0x77b6 <pwm_set_frequency>
}
    7b92:	27 96       	adiw	r28, 0x07	; 7
    7b94:	cd bf       	out	0x3d, r28	; 61
    7b96:	de bf       	out	0x3e, r29	; 62
    7b98:	df 91       	pop	r29
    7b9a:	cf 91       	pop	r28
    7b9c:	08 95       	ret

00007b9e <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    7b9e:	cf 93       	push	r28
    7ba0:	df 93       	push	r29
    7ba2:	00 d0       	rcall	.+0      	; 0x7ba4 <pwm_start+0x6>
    7ba4:	1f 92       	push	r1
    7ba6:	cd b7       	in	r28, 0x3d	; 61
    7ba8:	de b7       	in	r29, 0x3e	; 62
    7baa:	89 83       	std	Y+1, r24	; 0x01
    7bac:	9a 83       	std	Y+2, r25	; 0x02
    7bae:	6b 83       	std	Y+3, r22	; 0x03
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
    7bb0:	89 81       	ldd	r24, Y+1	; 0x01
    7bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    7bb4:	6b 81       	ldd	r22, Y+3	; 0x03
    7bb6:	c7 dd       	rcall	.-1138   	; 0x7746 <pwm_set_duty_cycle_percent>
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    7bb8:	89 81       	ldd	r24, Y+1	; 0x01
    7bba:	9a 81       	ldd	r25, Y+2	; 0x02
    7bbc:	fc 01       	movw	r30, r24
    7bbe:	25 81       	ldd	r18, Z+5	; 0x05
    7bc0:	36 81       	ldd	r19, Z+6	; 0x06
    7bc2:	89 81       	ldd	r24, Y+1	; 0x01
    7bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    7bc6:	fc 01       	movw	r30, r24
    7bc8:	80 81       	ld	r24, Z
    7bca:	91 81       	ldd	r25, Z+1	; 0x01
    7bcc:	b9 01       	movw	r22, r18
    7bce:	e6 dc       	rcall	.-1588   	; 0x759c <tc_write_period>
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    7bd0:	89 81       	ldd	r24, Y+1	; 0x01
    7bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    7bd4:	fc 01       	movw	r30, r24
    7bd6:	23 81       	ldd	r18, Z+3	; 0x03
    7bd8:	89 81       	ldd	r24, Y+1	; 0x01
    7bda:	9a 81       	ldd	r25, Y+2	; 0x02
    7bdc:	fc 01       	movw	r30, r24
    7bde:	80 81       	ld	r24, Z
    7be0:	91 81       	ldd	r25, Z+1	; 0x01
    7be2:	62 2f       	mov	r22, r18
    7be4:	f2 dc       	rcall	.-1564   	; 0x75ca <tc_enable_cc_channels>
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    7be6:	89 81       	ldd	r24, Y+1	; 0x01
    7be8:	9a 81       	ldd	r25, Y+2	; 0x02
    7bea:	fc 01       	movw	r30, r24
    7bec:	24 81       	ldd	r18, Z+4	; 0x04
    7bee:	89 81       	ldd	r24, Y+1	; 0x01
    7bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    7bf2:	fc 01       	movw	r30, r24
    7bf4:	80 81       	ld	r24, Z
    7bf6:	91 81       	ldd	r25, Z+1	; 0x01
    7bf8:	62 2f       	mov	r22, r18
    7bfa:	b4 dc       	rcall	.-1688   	; 0x7564 <tc_write_clock_source>
}
    7bfc:	23 96       	adiw	r28, 0x03	; 3
    7bfe:	cd bf       	out	0x3d, r28	; 61
    7c00:	de bf       	out	0x3e, r29	; 62
    7c02:	df 91       	pop	r29
    7c04:	cf 91       	pop	r28
    7c06:	08 95       	ret

00007c08 <ioport_set_pin_level>:
}

bool BluetoothMouseMode()
{
	return sendBTCmd("BC:CD=000580");
}
    7c08:	cf 93       	push	r28
    7c0a:	df 93       	push	r29
    7c0c:	cd b7       	in	r28, 0x3d	; 61
    7c0e:	de b7       	in	r29, 0x3e	; 62
    7c10:	2b 97       	sbiw	r28, 0x0b	; 11
    7c12:	cd bf       	out	0x3d, r28	; 61
    7c14:	de bf       	out	0x3e, r29	; 62
    7c16:	8a 87       	std	Y+10, r24	; 0x0a
    7c18:	6b 87       	std	Y+11, r22	; 0x0b
    7c1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    7c1c:	89 83       	std	Y+1, r24	; 0x01
    7c1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7c20:	8a 83       	std	Y+2, r24	; 0x02
    7c22:	89 81       	ldd	r24, Y+1	; 0x01
    7c24:	8b 83       	std	Y+3, r24	; 0x03
    7c26:	8b 81       	ldd	r24, Y+3	; 0x03
    7c28:	8c 83       	std	Y+4, r24	; 0x04
    7c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    7c2c:	86 95       	lsr	r24
    7c2e:	86 95       	lsr	r24
    7c30:	86 95       	lsr	r24
    7c32:	8d 83       	std	Y+5, r24	; 0x05
    7c34:	8d 81       	ldd	r24, Y+5	; 0x05
    7c36:	88 2f       	mov	r24, r24
    7c38:	90 e0       	ldi	r25, 0x00	; 0
    7c3a:	88 0f       	add	r24, r24
    7c3c:	99 1f       	adc	r25, r25
    7c3e:	82 95       	swap	r24
    7c40:	92 95       	swap	r25
    7c42:	90 7f       	andi	r25, 0xF0	; 240
    7c44:	98 27       	eor	r25, r24
    7c46:	80 7f       	andi	r24, 0xF0	; 240
    7c48:	98 27       	eor	r25, r24
    7c4a:	9a 5f       	subi	r25, 0xFA	; 250
    7c4c:	8e 83       	std	Y+6, r24	; 0x06
    7c4e:	9f 83       	std	Y+7, r25	; 0x07
    7c50:	8a 81       	ldd	r24, Y+2	; 0x02
    7c52:	88 23       	and	r24, r24
    7c54:	a9 f0       	breq	.+42     	; 0x7c80 <ioport_set_pin_level+0x78>
    7c56:	89 81       	ldd	r24, Y+1	; 0x01
    7c58:	88 87       	std	Y+8, r24	; 0x08
    7c5a:	88 85       	ldd	r24, Y+8	; 0x08
    7c5c:	88 2f       	mov	r24, r24
    7c5e:	90 e0       	ldi	r25, 0x00	; 0
    7c60:	9c 01       	movw	r18, r24
    7c62:	27 70       	andi	r18, 0x07	; 7
    7c64:	33 27       	eor	r19, r19
    7c66:	81 e0       	ldi	r24, 0x01	; 1
    7c68:	90 e0       	ldi	r25, 0x00	; 0
    7c6a:	02 c0       	rjmp	.+4      	; 0x7c70 <ioport_set_pin_level+0x68>
    7c6c:	88 0f       	add	r24, r24
    7c6e:	99 1f       	adc	r25, r25
    7c70:	2a 95       	dec	r18
    7c72:	e2 f7       	brpl	.-8      	; 0x7c6c <ioport_set_pin_level+0x64>
    7c74:	28 2f       	mov	r18, r24
    7c76:	8e 81       	ldd	r24, Y+6	; 0x06
    7c78:	9f 81       	ldd	r25, Y+7	; 0x07
    7c7a:	fc 01       	movw	r30, r24
    7c7c:	25 83       	std	Z+5, r18	; 0x05
    7c7e:	14 c0       	rjmp	.+40     	; 0x7ca8 <ioport_set_pin_level+0xa0>
    7c80:	89 81       	ldd	r24, Y+1	; 0x01
    7c82:	89 87       	std	Y+9, r24	; 0x09
    7c84:	89 85       	ldd	r24, Y+9	; 0x09
    7c86:	88 2f       	mov	r24, r24
    7c88:	90 e0       	ldi	r25, 0x00	; 0
    7c8a:	9c 01       	movw	r18, r24
    7c8c:	27 70       	andi	r18, 0x07	; 7
    7c8e:	33 27       	eor	r19, r19
    7c90:	81 e0       	ldi	r24, 0x01	; 1
    7c92:	90 e0       	ldi	r25, 0x00	; 0
    7c94:	02 c0       	rjmp	.+4      	; 0x7c9a <ioport_set_pin_level+0x92>
    7c96:	88 0f       	add	r24, r24
    7c98:	99 1f       	adc	r25, r25
    7c9a:	2a 95       	dec	r18
    7c9c:	e2 f7       	brpl	.-8      	; 0x7c96 <ioport_set_pin_level+0x8e>
    7c9e:	28 2f       	mov	r18, r24
    7ca0:	8e 81       	ldd	r24, Y+6	; 0x06
    7ca2:	9f 81       	ldd	r25, Y+7	; 0x07
    7ca4:	fc 01       	movw	r30, r24
    7ca6:	26 83       	std	Z+6, r18	; 0x06
    7ca8:	2b 96       	adiw	r28, 0x0b	; 11
    7caa:	cd bf       	out	0x3d, r28	; 61
    7cac:	de bf       	out	0x3e, r29	; 62
    7cae:	df 91       	pop	r29
    7cb0:	cf 91       	pop	r28
    7cb2:	08 95       	ret

00007cb4 <ioport_get_pin_level>:
    7cb4:	cf 93       	push	r28
    7cb6:	df 93       	push	r29
    7cb8:	cd b7       	in	r28, 0x3d	; 61
    7cba:	de b7       	in	r29, 0x3e	; 62
    7cbc:	28 97       	sbiw	r28, 0x08	; 8
    7cbe:	cd bf       	out	0x3d, r28	; 61
    7cc0:	de bf       	out	0x3e, r29	; 62
    7cc2:	88 87       	std	Y+8, r24	; 0x08
    7cc4:	88 85       	ldd	r24, Y+8	; 0x08
    7cc6:	89 83       	std	Y+1, r24	; 0x01
    7cc8:	89 81       	ldd	r24, Y+1	; 0x01
    7cca:	8a 83       	std	Y+2, r24	; 0x02
    7ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    7cce:	8b 83       	std	Y+3, r24	; 0x03
    7cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    7cd2:	86 95       	lsr	r24
    7cd4:	86 95       	lsr	r24
    7cd6:	86 95       	lsr	r24
    7cd8:	8c 83       	std	Y+4, r24	; 0x04
    7cda:	8c 81       	ldd	r24, Y+4	; 0x04
    7cdc:	88 2f       	mov	r24, r24
    7cde:	90 e0       	ldi	r25, 0x00	; 0
    7ce0:	88 0f       	add	r24, r24
    7ce2:	99 1f       	adc	r25, r25
    7ce4:	82 95       	swap	r24
    7ce6:	92 95       	swap	r25
    7ce8:	90 7f       	andi	r25, 0xF0	; 240
    7cea:	98 27       	eor	r25, r24
    7cec:	80 7f       	andi	r24, 0xF0	; 240
    7cee:	98 27       	eor	r25, r24
    7cf0:	9a 5f       	subi	r25, 0xFA	; 250
    7cf2:	8d 83       	std	Y+5, r24	; 0x05
    7cf4:	9e 83       	std	Y+6, r25	; 0x06
    7cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    7cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    7cfa:	fc 01       	movw	r30, r24
    7cfc:	40 85       	ldd	r20, Z+8	; 0x08
    7cfe:	89 81       	ldd	r24, Y+1	; 0x01
    7d00:	8f 83       	std	Y+7, r24	; 0x07
    7d02:	8f 81       	ldd	r24, Y+7	; 0x07
    7d04:	88 2f       	mov	r24, r24
    7d06:	90 e0       	ldi	r25, 0x00	; 0
    7d08:	9c 01       	movw	r18, r24
    7d0a:	27 70       	andi	r18, 0x07	; 7
    7d0c:	33 27       	eor	r19, r19
    7d0e:	81 e0       	ldi	r24, 0x01	; 1
    7d10:	90 e0       	ldi	r25, 0x00	; 0
    7d12:	02 2e       	mov	r0, r18
    7d14:	02 c0       	rjmp	.+4      	; 0x7d1a <ioport_get_pin_level+0x66>
    7d16:	88 0f       	add	r24, r24
    7d18:	99 1f       	adc	r25, r25
    7d1a:	0a 94       	dec	r0
    7d1c:	e2 f7       	brpl	.-8      	; 0x7d16 <ioport_get_pin_level+0x62>
    7d1e:	94 2f       	mov	r25, r20
    7d20:	98 23       	and	r25, r24
    7d22:	81 e0       	ldi	r24, 0x01	; 1
    7d24:	99 23       	and	r25, r25
    7d26:	09 f4       	brne	.+2      	; 0x7d2a <ioport_get_pin_level+0x76>
    7d28:	80 e0       	ldi	r24, 0x00	; 0
    7d2a:	28 96       	adiw	r28, 0x08	; 8
    7d2c:	cd bf       	out	0x3d, r28	; 61
    7d2e:	de bf       	out	0x3e, r29	; 62
    7d30:	df 91       	pop	r29
    7d32:	cf 91       	pop	r28
    7d34:	08 95       	ret

00007d36 <__portable_avr_delay_cycles>:
    7d36:	61 50       	subi	r22, 0x01	; 1
    7d38:	71 09       	sbc	r23, r1
    7d3a:	81 09       	sbc	r24, r1
    7d3c:	91 09       	sbc	r25, r1
    7d3e:	d9 f7       	brne	.-10     	; 0x7d36 <__portable_avr_delay_cycles>
    7d40:	08 95       	ret

00007d42 <setupBluetoothFast>:
    7d42:	1f 93       	push	r17
    7d44:	cf 93       	push	r28
    7d46:	df 93       	push	r29
    7d48:	cd b7       	in	r28, 0x3d	; 61
    7d4a:	de b7       	in	r29, 0x3e	; 62
    7d4c:	2d 97       	sbiw	r28, 0x0d	; 13
    7d4e:	cd bf       	out	0x3d, r28	; 61
    7d50:	de bf       	out	0x3e, r29	; 62
    7d52:	87 e0       	ldi	r24, 0x07	; 7
    7d54:	ed e6       	ldi	r30, 0x6D	; 109
    7d56:	f1 e2       	ldi	r31, 0x21	; 33
    7d58:	de 01       	movw	r26, r28
    7d5a:	17 96       	adiw	r26, 0x07	; 7
    7d5c:	01 90       	ld	r0, Z+
    7d5e:	0d 92       	st	X+, r0
    7d60:	8a 95       	dec	r24
    7d62:	e1 f7       	brne	.-8      	; 0x7d5c <setupBluetoothFast+0x1a>
    7d64:	60 e1       	ldi	r22, 0x10	; 16
    7d66:	85 e0       	ldi	r24, 0x05	; 5
    7d68:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_enable_module>
    7d6c:	8e e5       	ldi	r24, 0x5E	; 94
    7d6e:	91 e2       	ldi	r25, 0x21	; 33
    7d70:	0e 94 93 20 	call	0x4126	; 0x4126 <sendDBGString>
    7d74:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
    7d78:	ce 01       	movw	r24, r28
    7d7a:	07 96       	adiw	r24, 0x07	; 7
    7d7c:	bc 01       	movw	r22, r24
    7d7e:	80 ea       	ldi	r24, 0xA0	; 160
    7d80:	9a e0       	ldi	r25, 0x0A	; 10
    7d82:	27 d9       	rcall	.-3506   	; 0x6fd2 <usart_init_rs232>
    7d84:	88 23       	and	r24, r24
    7d86:	79 f0       	breq	.+30     	; 0x7da6 <setupBluetoothFast+0x64>
    7d88:	88 ec       	ldi	r24, 0xC8	; 200
    7d8a:	91 e0       	ldi	r25, 0x01	; 1
    7d8c:	89 83       	std	Y+1, r24	; 0x01
    7d8e:	9a 83       	std	Y+2, r25	; 0x02
    7d90:	89 81       	ldd	r24, Y+1	; 0x01
    7d92:	9a 81       	ldd	r25, Y+2	; 0x02
    7d94:	fc 01       	movw	r30, r24
    7d96:	14 91       	lpm	r17, Z
    7d98:	1b 83       	std	Y+3, r17	; 0x03
    7d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    7d9c:	88 2f       	mov	r24, r24
    7d9e:	90 e0       	ldi	r25, 0x00	; 0
    7da0:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
    7da4:	0e c0       	rjmp	.+28     	; 0x7dc2 <setupBluetoothFast+0x80>
    7da6:	8d ec       	ldi	r24, 0xCD	; 205
    7da8:	91 e0       	ldi	r25, 0x01	; 1
    7daa:	8c 83       	std	Y+4, r24	; 0x04
    7dac:	9d 83       	std	Y+5, r25	; 0x05
    7dae:	8c 81       	ldd	r24, Y+4	; 0x04
    7db0:	9d 81       	ldd	r25, Y+5	; 0x05
    7db2:	fc 01       	movw	r30, r24
    7db4:	14 91       	lpm	r17, Z
    7db6:	1e 83       	std	Y+6, r17	; 0x06
    7db8:	8e 81       	ldd	r24, Y+6	; 0x06
    7dba:	88 2f       	mov	r24, r24
    7dbc:	90 e0       	ldi	r25, 0x00	; 0
    7dbe:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
    7dc2:	2d 96       	adiw	r28, 0x0d	; 13
    7dc4:	cd bf       	out	0x3d, r28	; 61
    7dc6:	de bf       	out	0x3e, r29	; 62
    7dc8:	df 91       	pop	r29
    7dca:	cf 91       	pop	r28
    7dcc:	1f 91       	pop	r17
    7dce:	08 95       	ret

00007dd0 <sendBTHexPair>:
    7dd0:	cf 93       	push	r28
    7dd2:	df 93       	push	r29
    7dd4:	00 d0       	rcall	.+0      	; 0x7dd6 <sendBTHexPair+0x6>
    7dd6:	cd b7       	in	r28, 0x3d	; 61
    7dd8:	de b7       	in	r29, 0x3e	; 62
    7dda:	8a 83       	std	Y+2, r24	; 0x02
    7ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    7dde:	82 95       	swap	r24
    7de0:	8f 70       	andi	r24, 0x0F	; 15
    7de2:	89 83       	std	Y+1, r24	; 0x01
    7de4:	89 81       	ldd	r24, Y+1	; 0x01
    7de6:	8a 30       	cpi	r24, 0x0A	; 10
    7de8:	38 f0       	brcs	.+14     	; 0x7df8 <sendBTHexPair+0x28>
    7dea:	89 81       	ldd	r24, Y+1	; 0x01
    7dec:	89 5c       	subi	r24, 0xC9	; 201
    7dee:	68 2f       	mov	r22, r24
    7df0:	80 ea       	ldi	r24, 0xA0	; 160
    7df2:	9a e0       	ldi	r25, 0x0A	; 10
    7df4:	34 d9       	rcall	.-3480   	; 0x705e <usart_putchar>
    7df6:	06 c0       	rjmp	.+12     	; 0x7e04 <sendBTHexPair+0x34>
    7df8:	89 81       	ldd	r24, Y+1	; 0x01
    7dfa:	80 5d       	subi	r24, 0xD0	; 208
    7dfc:	68 2f       	mov	r22, r24
    7dfe:	80 ea       	ldi	r24, 0xA0	; 160
    7e00:	9a e0       	ldi	r25, 0x0A	; 10
    7e02:	2d d9       	rcall	.-3494   	; 0x705e <usart_putchar>
    7e04:	8a 81       	ldd	r24, Y+2	; 0x02
    7e06:	8f 70       	andi	r24, 0x0F	; 15
    7e08:	89 83       	std	Y+1, r24	; 0x01
    7e0a:	89 81       	ldd	r24, Y+1	; 0x01
    7e0c:	8a 30       	cpi	r24, 0x0A	; 10
    7e0e:	38 f0       	brcs	.+14     	; 0x7e1e <sendBTHexPair+0x4e>
    7e10:	89 81       	ldd	r24, Y+1	; 0x01
    7e12:	89 5c       	subi	r24, 0xC9	; 201
    7e14:	68 2f       	mov	r22, r24
    7e16:	80 ea       	ldi	r24, 0xA0	; 160
    7e18:	9a e0       	ldi	r25, 0x0A	; 10
    7e1a:	21 d9       	rcall	.-3518   	; 0x705e <usart_putchar>
    7e1c:	06 c0       	rjmp	.+12     	; 0x7e2a <sendBTHexPair+0x5a>
    7e1e:	89 81       	ldd	r24, Y+1	; 0x01
    7e20:	80 5d       	subi	r24, 0xD0	; 208
    7e22:	68 2f       	mov	r22, r24
    7e24:	80 ea       	ldi	r24, 0xA0	; 160
    7e26:	9a e0       	ldi	r25, 0x0A	; 10
    7e28:	1a d9       	rcall	.-3532   	; 0x705e <usart_putchar>
    7e2a:	0f 90       	pop	r0
    7e2c:	0f 90       	pop	r0
    7e2e:	df 91       	pop	r29
    7e30:	cf 91       	pop	r28
    7e32:	08 95       	ret

00007e34 <sendBTChar>:
    7e34:	cf 93       	push	r28
    7e36:	df 93       	push	r29
    7e38:	1f 92       	push	r1
    7e3a:	cd b7       	in	r28, 0x3d	; 61
    7e3c:	de b7       	in	r29, 0x3e	; 62
    7e3e:	89 83       	std	Y+1, r24	; 0x01
    7e40:	88 ee       	ldi	r24, 0xE8	; 232
    7e42:	93 e0       	ldi	r25, 0x03	; 3
    7e44:	e9 d0       	rcall	.+466    	; 0x8018 <hardwareflowcontrol>
    7e46:	88 23       	and	r24, r24
    7e48:	21 f0       	breq	.+8      	; 0x7e52 <sendBTChar+0x1e>
    7e4a:	69 81       	ldd	r22, Y+1	; 0x01
    7e4c:	80 ea       	ldi	r24, 0xA0	; 160
    7e4e:	9a e0       	ldi	r25, 0x0A	; 10
    7e50:	06 d9       	rcall	.-3572   	; 0x705e <usart_putchar>
    7e52:	0f 90       	pop	r0
    7e54:	df 91       	pop	r29
    7e56:	cf 91       	pop	r28
    7e58:	08 95       	ret

00007e5a <sendBTString>:
    7e5a:	cf 93       	push	r28
    7e5c:	df 93       	push	r29
    7e5e:	00 d0       	rcall	.+0      	; 0x7e60 <sendBTString+0x6>
    7e60:	cd b7       	in	r28, 0x3d	; 61
    7e62:	de b7       	in	r29, 0x3e	; 62
    7e64:	89 83       	std	Y+1, r24	; 0x01
    7e66:	9a 83       	std	Y+2, r25	; 0x02
    7e68:	0c c0       	rjmp	.+24     	; 0x7e82 <sendBTString+0x28>
    7e6a:	89 81       	ldd	r24, Y+1	; 0x01
    7e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e6e:	fc 01       	movw	r30, r24
    7e70:	80 81       	ld	r24, Z
    7e72:	28 2f       	mov	r18, r24
    7e74:	89 81       	ldd	r24, Y+1	; 0x01
    7e76:	9a 81       	ldd	r25, Y+2	; 0x02
    7e78:	01 96       	adiw	r24, 0x01	; 1
    7e7a:	89 83       	std	Y+1, r24	; 0x01
    7e7c:	9a 83       	std	Y+2, r25	; 0x02
    7e7e:	82 2f       	mov	r24, r18
    7e80:	d9 df       	rcall	.-78     	; 0x7e34 <sendBTChar>
    7e82:	89 81       	ldd	r24, Y+1	; 0x01
    7e84:	9a 81       	ldd	r25, Y+2	; 0x02
    7e86:	fc 01       	movw	r30, r24
    7e88:	80 81       	ld	r24, Z
    7e8a:	88 23       	and	r24, r24
    7e8c:	71 f7       	brne	.-36     	; 0x7e6a <sendBTString+0x10>
    7e8e:	0f 90       	pop	r0
    7e90:	0f 90       	pop	r0
    7e92:	df 91       	pop	r29
    7e94:	cf 91       	pop	r28
    7e96:	08 95       	ret

00007e98 <sendBTCmd>:
    7e98:	cf 93       	push	r28
    7e9a:	df 93       	push	r29
    7e9c:	00 d0       	rcall	.+0      	; 0x7e9e <sendBTCmd+0x6>
    7e9e:	cd b7       	in	r28, 0x3d	; 61
    7ea0:	de b7       	in	r29, 0x3e	; 62
    7ea2:	89 83       	std	Y+1, r24	; 0x01
    7ea4:	9a 83       	std	Y+2, r25	; 0x02
    7ea6:	88 ee       	ldi	r24, 0xE8	; 232
    7ea8:	93 e0       	ldi	r25, 0x03	; 3
    7eaa:	b6 d0       	rcall	.+364    	; 0x8018 <hardwareflowcontrol>
    7eac:	88 23       	and	r24, r24
    7eae:	39 f0       	breq	.+14     	; 0x7ebe <sendBTCmd+0x26>
    7eb0:	89 81       	ldd	r24, Y+1	; 0x01
    7eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    7eb4:	d2 df       	rcall	.-92     	; 0x7e5a <sendBTString>
    7eb6:	8d e0       	ldi	r24, 0x0D	; 13
    7eb8:	bd df       	rcall	.-134    	; 0x7e34 <sendBTChar>
    7eba:	8a e0       	ldi	r24, 0x0A	; 10
    7ebc:	bb df       	rcall	.-138    	; 0x7e34 <sendBTChar>
    7ebe:	80 e0       	ldi	r24, 0x00	; 0
    7ec0:	0f 90       	pop	r0
    7ec2:	0f 90       	pop	r0
    7ec4:	df 91       	pop	r29
    7ec6:	cf 91       	pop	r28
    7ec8:	08 95       	ret

00007eca <turnBTOn>:
    7eca:	cf 93       	push	r28
    7ecc:	df 93       	push	r29
    7ece:	cd b7       	in	r28, 0x3d	; 61
    7ed0:	de b7       	in	r29, 0x3e	; 62
    7ed2:	61 e0       	ldi	r22, 0x01	; 1
    7ed4:	85 e2       	ldi	r24, 0x25	; 37
    7ed6:	98 de       	rcall	.-720    	; 0x7c08 <ioport_set_pin_level>
    7ed8:	65 e5       	ldi	r22, 0x55	; 85
    7eda:	73 e2       	ldi	r23, 0x23	; 35
    7edc:	88 e0       	ldi	r24, 0x08	; 8
    7ede:	90 e0       	ldi	r25, 0x00	; 0
    7ee0:	2a df       	rcall	.-428    	; 0x7d36 <__portable_avr_delay_cycles>
    7ee2:	60 e0       	ldi	r22, 0x00	; 0
    7ee4:	80 e2       	ldi	r24, 0x20	; 32
    7ee6:	90 de       	rcall	.-736    	; 0x7c08 <ioport_set_pin_level>
    7ee8:	80 e8       	ldi	r24, 0x80	; 128
    7eea:	9e e3       	ldi	r25, 0x3E	; 62
    7eec:	95 d0       	rcall	.+298    	; 0x8018 <hardwareflowcontrol>
    7eee:	df 91       	pop	r29
    7ef0:	cf 91       	pop	r28
    7ef2:	08 95       	ret

00007ef4 <turnBTOff>:
    7ef4:	cf 93       	push	r28
    7ef6:	df 93       	push	r29
    7ef8:	cd b7       	in	r28, 0x3d	; 61
    7efa:	de b7       	in	r29, 0x3e	; 62
    7efc:	84 e7       	ldi	r24, 0x74	; 116
    7efe:	91 e2       	ldi	r25, 0x21	; 33
    7f00:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
    7f04:	80 ed       	ldi	r24, 0xD0	; 208
    7f06:	97 e0       	ldi	r25, 0x07	; 7
    7f08:	87 d0       	rcall	.+270    	; 0x8018 <hardwareflowcontrol>
    7f0a:	8a e7       	ldi	r24, 0x7A	; 122
    7f0c:	91 e2       	ldi	r25, 0x21	; 33
    7f0e:	c4 df       	rcall	.-120    	; 0x7e98 <sendBTCmd>
    7f10:	61 e0       	ldi	r22, 0x01	; 1
    7f12:	80 e2       	ldi	r24, 0x20	; 32
    7f14:	79 de       	rcall	.-782    	; 0x7c08 <ioport_set_pin_level>
    7f16:	60 e0       	ldi	r22, 0x00	; 0
    7f18:	85 e2       	ldi	r24, 0x25	; 37
    7f1a:	76 de       	rcall	.-788    	; 0x7c08 <ioport_set_pin_level>
    7f1c:	df 91       	pop	r29
    7f1e:	cf 91       	pop	r28
    7f20:	08 95       	ret

00007f22 <btFirstRun>:
    7f22:	cf 93       	push	r28
    7f24:	df 93       	push	r29
    7f26:	cd b7       	in	r28, 0x3d	; 61
    7f28:	de b7       	in	r29, 0x3e	; 62
    7f2a:	80 ed       	ldi	r24, 0xD0	; 208
    7f2c:	97 e0       	ldi	r25, 0x07	; 7
    7f2e:	74 d0       	rcall	.+232    	; 0x8018 <hardwareflowcontrol>
    7f30:	80 e8       	ldi	r24, 0x80	; 128
    7f32:	91 e2       	ldi	r25, 0x21	; 33
    7f34:	b1 df       	rcall	.-158    	; 0x7e98 <sendBTCmd>
    7f36:	83 e9       	ldi	r24, 0x93	; 147
    7f38:	91 e2       	ldi	r25, 0x21	; 33
    7f3a:	ae df       	rcall	.-164    	; 0x7e98 <sendBTCmd>
    7f3c:	88 ee       	ldi	r24, 0xE8	; 232
    7f3e:	93 e0       	ldi	r25, 0x03	; 3
    7f40:	6b d0       	rcall	.+214    	; 0x8018 <hardwareflowcontrol>
    7f42:	8f e9       	ldi	r24, 0x9F	; 159
    7f44:	91 e2       	ldi	r25, 0x21	; 33
    7f46:	a8 df       	rcall	.-176    	; 0x7e98 <sendBTCmd>
    7f48:	65 e5       	ldi	r22, 0x55	; 85
    7f4a:	73 e2       	ldi	r23, 0x23	; 35
    7f4c:	88 e0       	ldi	r24, 0x08	; 8
    7f4e:	90 e0       	ldi	r25, 0x00	; 0
    7f50:	f2 de       	rcall	.-540    	; 0x7d36 <__portable_avr_delay_cycles>
    7f52:	d0 df       	rcall	.-96     	; 0x7ef4 <turnBTOff>
    7f54:	6a ea       	ldi	r22, 0xAA	; 170
    7f56:	71 e1       	ldi	r23, 0x11	; 17
    7f58:	84 e0       	ldi	r24, 0x04	; 4
    7f5a:	90 e0       	ldi	r25, 0x00	; 0
    7f5c:	ec de       	rcall	.-552    	; 0x7d36 <__portable_avr_delay_cycles>
    7f5e:	b5 df       	rcall	.-150    	; 0x7eca <turnBTOn>
    7f60:	df 91       	pop	r29
    7f62:	cf 91       	pop	r28
    7f64:	08 95       	ret

00007f66 <initBTComms>:
    7f66:	cf 93       	push	r28
    7f68:	df 93       	push	r29
    7f6a:	00 d0       	rcall	.+0      	; 0x7f6c <initBTComms+0x6>
    7f6c:	cd b7       	in	r28, 0x3d	; 61
    7f6e:	de b7       	in	r29, 0x3e	; 62
    7f70:	89 83       	std	Y+1, r24	; 0x01
    7f72:	9a 83       	std	Y+2, r25	; 0x02
    7f74:	8e ea       	ldi	r24, 0xAE	; 174
    7f76:	91 e2       	ldi	r25, 0x21	; 33
    7f78:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
    7f7c:	a8 95       	wdr
    7f7e:	83 e9       	ldi	r24, 0x93	; 147
    7f80:	91 e2       	ldi	r25, 0x21	; 33
    7f82:	8a df       	rcall	.-236    	; 0x7e98 <sendBTCmd>
    7f84:	80 ed       	ldi	r24, 0xD0	; 208
    7f86:	97 e0       	ldi	r25, 0x07	; 7
    7f88:	47 d0       	rcall	.+142    	; 0x8018 <hardwareflowcontrol>
    7f8a:	85 eb       	ldi	r24, 0xB5	; 181
    7f8c:	91 e2       	ldi	r25, 0x21	; 33
    7f8e:	84 df       	rcall	.-248    	; 0x7e98 <sendBTCmd>
    7f90:	a8 95       	wdr
    7f92:	88 ee       	ldi	r24, 0xE8	; 232
    7f94:	93 e0       	ldi	r25, 0x03	; 3
    7f96:	40 d0       	rcall	.+128    	; 0x8018 <hardwareflowcontrol>
    7f98:	8e eb       	ldi	r24, 0xBE	; 190
    7f9a:	91 e2       	ldi	r25, 0x21	; 33
    7f9c:	7d df       	rcall	.-262    	; 0x7e98 <sendBTCmd>
    7f9e:	a8 95       	wdr
    7fa0:	80 e7       	ldi	r24, 0x70	; 112
    7fa2:	97 e1       	ldi	r25, 0x17	; 23
    7fa4:	39 d0       	rcall	.+114    	; 0x8018 <hardwareflowcontrol>
    7fa6:	0f 90       	pop	r0
    7fa8:	0f 90       	pop	r0
    7faa:	df 91       	pop	r29
    7fac:	cf 91       	pop	r28
    7fae:	08 95       	ret

00007fb0 <bt_exitBypass>:
    7fb0:	cf 93       	push	r28
    7fb2:	df 93       	push	r29
    7fb4:	cd b7       	in	r28, 0x3d	; 61
    7fb6:	de b7       	in	r29, 0x3e	; 62
    7fb8:	60 e0       	ldi	r22, 0x00	; 0
    7fba:	88 e2       	ldi	r24, 0x28	; 40
    7fbc:	25 de       	rcall	.-950    	; 0x7c08 <ioport_set_pin_level>
    7fbe:	85 df       	rcall	.-246    	; 0x7eca <turnBTOn>
    7fc0:	60 e0       	ldi	r22, 0x00	; 0
    7fc2:	7a e6       	ldi	r23, 0x6A	; 106
    7fc4:	88 e1       	ldi	r24, 0x18	; 24
    7fc6:	90 e0       	ldi	r25, 0x00	; 0
    7fc8:	b6 de       	rcall	.-660    	; 0x7d36 <__portable_avr_delay_cycles>
    7fca:	61 e0       	ldi	r22, 0x01	; 1
    7fcc:	88 e2       	ldi	r24, 0x28	; 40
    7fce:	1c de       	rcall	.-968    	; 0x7c08 <ioport_set_pin_level>
    7fd0:	65 e5       	ldi	r22, 0x55	; 85
    7fd2:	73 e2       	ldi	r23, 0x23	; 35
    7fd4:	88 e0       	ldi	r24, 0x08	; 8
    7fd6:	90 e0       	ldi	r25, 0x00	; 0
    7fd8:	ae de       	rcall	.-676    	; 0x7d36 <__portable_avr_delay_cycles>
    7fda:	df 91       	pop	r29
    7fdc:	cf 91       	pop	r28
    7fde:	08 95       	ret

00007fe0 <bt_homeButton>:
    7fe0:	cf 93       	push	r28
    7fe2:	df 93       	push	r29
    7fe4:	cd b7       	in	r28, 0x3d	; 61
    7fe6:	de b7       	in	r29, 0x3e	; 62
    7fe8:	81 ea       	ldi	r24, 0xA1	; 161
    7fea:	24 df       	rcall	.-440    	; 0x7e34 <sendBTChar>
    7fec:	82 e0       	ldi	r24, 0x02	; 2
    7fee:	22 df       	rcall	.-444    	; 0x7e34 <sendBTChar>
    7ff0:	81 e0       	ldi	r24, 0x01	; 1
    7ff2:	20 df       	rcall	.-448    	; 0x7e34 <sendBTChar>
    7ff4:	80 e0       	ldi	r24, 0x00	; 0
    7ff6:	1e df       	rcall	.-452    	; 0x7e34 <sendBTChar>
    7ff8:	6a e2       	ldi	r22, 0x2A	; 42
    7ffa:	78 e6       	ldi	r23, 0x68	; 104
    7ffc:	80 e0       	ldi	r24, 0x00	; 0
    7ffe:	90 e0       	ldi	r25, 0x00	; 0
    8000:	9a de       	rcall	.-716    	; 0x7d36 <__portable_avr_delay_cycles>
    8002:	81 ea       	ldi	r24, 0xA1	; 161
    8004:	17 df       	rcall	.-466    	; 0x7e34 <sendBTChar>
    8006:	82 e0       	ldi	r24, 0x02	; 2
    8008:	15 df       	rcall	.-470    	; 0x7e34 <sendBTChar>
    800a:	80 e0       	ldi	r24, 0x00	; 0
    800c:	13 df       	rcall	.-474    	; 0x7e34 <sendBTChar>
    800e:	80 e0       	ldi	r24, 0x00	; 0
    8010:	11 df       	rcall	.-478    	; 0x7e34 <sendBTChar>
    8012:	df 91       	pop	r29
    8014:	cf 91       	pop	r28
    8016:	08 95       	ret

00008018 <hardwareflowcontrol>:
    8018:	cf 93       	push	r28
    801a:	df 93       	push	r29
    801c:	00 d0       	rcall	.+0      	; 0x801e <hardwareflowcontrol+0x6>
    801e:	1f 92       	push	r1
    8020:	cd b7       	in	r28, 0x3d	; 61
    8022:	de b7       	in	r29, 0x3e	; 62
    8024:	8a 83       	std	Y+2, r24	; 0x02
    8026:	9b 83       	std	Y+3, r25	; 0x03
    8028:	84 e2       	ldi	r24, 0x24	; 36
    802a:	44 de       	rcall	.-888    	; 0x7cb4 <ioport_get_pin_level>
    802c:	88 23       	and	r24, r24
    802e:	11 f0       	breq	.+4      	; 0x8034 <hardwareflowcontrol+0x1c>
    8030:	81 e0       	ldi	r24, 0x01	; 1
    8032:	1d c0       	rjmp	.+58     	; 0x806e <hardwareflowcontrol+0x56>
    8034:	61 e0       	ldi	r22, 0x01	; 1
    8036:	81 e2       	ldi	r24, 0x21	; 33
    8038:	e7 dd       	rcall	.-1074   	; 0x7c08 <ioport_set_pin_level>
    803a:	19 82       	std	Y+1, r1	; 0x01
    803c:	10 c0       	rjmp	.+32     	; 0x805e <hardwareflowcontrol+0x46>
    803e:	84 e2       	ldi	r24, 0x24	; 36
    8040:	39 de       	rcall	.-910    	; 0x7cb4 <ioport_get_pin_level>
    8042:	89 83       	std	Y+1, r24	; 0x01
    8044:	89 81       	ldd	r24, Y+1	; 0x01
    8046:	88 23       	and	r24, r24
    8048:	81 f4       	brne	.+32     	; 0x806a <hardwareflowcontrol+0x52>
    804a:	8a 81       	ldd	r24, Y+2	; 0x02
    804c:	9b 81       	ldd	r25, Y+3	; 0x03
    804e:	01 97       	sbiw	r24, 0x01	; 1
    8050:	8a 83       	std	Y+2, r24	; 0x02
    8052:	9b 83       	std	Y+3, r25	; 0x03
    8054:	65 ed       	ldi	r22, 0xD5	; 213
    8056:	74 e1       	ldi	r23, 0x14	; 20
    8058:	80 e0       	ldi	r24, 0x00	; 0
    805a:	90 e0       	ldi	r25, 0x00	; 0
    805c:	6c de       	rcall	.-808    	; 0x7d36 <__portable_avr_delay_cycles>
    805e:	8a 81       	ldd	r24, Y+2	; 0x02
    8060:	9b 81       	ldd	r25, Y+3	; 0x03
    8062:	18 16       	cp	r1, r24
    8064:	19 06       	cpc	r1, r25
    8066:	5c f3       	brlt	.-42     	; 0x803e <hardwareflowcontrol+0x26>
    8068:	01 c0       	rjmp	.+2      	; 0x806c <hardwareflowcontrol+0x54>
    806a:	00 00       	nop
    806c:	89 81       	ldd	r24, Y+1	; 0x01
    806e:	23 96       	adiw	r28, 0x03	; 3
    8070:	cd bf       	out	0x3d, r28	; 61
    8072:	de bf       	out	0x3e, r29	; 62
    8074:	df 91       	pop	r29
    8076:	cf 91       	pop	r28
    8078:	08 95       	ret

0000807a <btFactoryReset>:
    807a:	cf 93       	push	r28
    807c:	df 93       	push	r29
    807e:	cd b7       	in	r28, 0x3d	; 61
    8080:	de b7       	in	r29, 0x3e	; 62
    8082:	38 df       	rcall	.-400    	; 0x7ef4 <turnBTOff>
    8084:	60 e0       	ldi	r22, 0x00	; 0
    8086:	88 e2       	ldi	r24, 0x28	; 40
    8088:	bf dd       	rcall	.-1154   	; 0x7c08 <ioport_set_pin_level>
    808a:	1f df       	rcall	.-450    	; 0x7eca <turnBTOn>
    808c:	6a ea       	ldi	r22, 0xAA	; 170
    808e:	7b e7       	ldi	r23, 0x7B	; 123
    8090:	8c e1       	ldi	r24, 0x1C	; 28
    8092:	90 e0       	ldi	r25, 0x00	; 0
    8094:	50 de       	rcall	.-864    	; 0x7d36 <__portable_avr_delay_cycles>
    8096:	61 e0       	ldi	r22, 0x01	; 1
    8098:	88 e2       	ldi	r24, 0x28	; 40
    809a:	b6 dd       	rcall	.-1172   	; 0x7c08 <ioport_set_pin_level>
    809c:	df 91       	pop	r29
    809e:	cf 91       	pop	r28
    80a0:	08 95       	ret

000080a2 <btIsConnected>:
    80a2:	cf 93       	push	r28
    80a4:	df 93       	push	r29
    80a6:	cd b7       	in	r28, 0x3d	; 61
    80a8:	de b7       	in	r29, 0x3e	; 62
    80aa:	86 e2       	ldi	r24, 0x26	; 38
    80ac:	03 de       	rcall	.-1018   	; 0x7cb4 <ioport_get_pin_level>
    80ae:	88 2f       	mov	r24, r24
    80b0:	90 e0       	ldi	r25, 0x00	; 0
    80b2:	21 e0       	ldi	r18, 0x01	; 1
    80b4:	00 97       	sbiw	r24, 0x00	; 0
    80b6:	09 f4       	brne	.+2      	; 0x80ba <btIsConnected+0x18>
    80b8:	20 e0       	ldi	r18, 0x00	; 0
    80ba:	81 e0       	ldi	r24, 0x01	; 1
    80bc:	82 27       	eor	r24, r18
    80be:	88 2f       	mov	r24, r24
    80c0:	90 e0       	ldi	r25, 0x00	; 0
    80c2:	81 70       	andi	r24, 0x01	; 1
    80c4:	df 91       	pop	r29
    80c6:	cf 91       	pop	r28
    80c8:	08 95       	ret

000080ca <btClearAutoConnectList>:
    80ca:	cf 93       	push	r28
    80cc:	df 93       	push	r29
    80ce:	cd b7       	in	r28, 0x3d	; 61
    80d0:	de b7       	in	r29, 0x3e	; 62
    80d2:	88 ee       	ldi	r24, 0xE8	; 232
    80d4:	93 e0       	ldi	r25, 0x03	; 3
    80d6:	a0 df       	rcall	.-192    	; 0x8018 <hardwareflowcontrol>
    80d8:	86 ed       	ldi	r24, 0xD6	; 214
    80da:	91 e2       	ldi	r25, 0x21	; 33
    80dc:	dd de       	rcall	.-582    	; 0x7e98 <sendBTCmd>
    80de:	df 91       	pop	r29
    80e0:	cf 91       	pop	r28
    80e2:	08 95       	ret

000080e4 <BluetoothKeyboardMode>:
    80e4:	cf 93       	push	r28
    80e6:	df 93       	push	r29
    80e8:	cd b7       	in	r28, 0x3d	; 61
    80ea:	de b7       	in	r29, 0x3e	; 62
    80ec:	8c ed       	ldi	r24, 0xDC	; 220
    80ee:	91 e2       	ldi	r25, 0x21	; 33
    80f0:	d3 de       	rcall	.-602    	; 0x7e98 <sendBTCmd>
    80f2:	df 91       	pop	r29
    80f4:	cf 91       	pop	r28
    80f6:	08 95       	ret

000080f8 <BluetoothComboMode>:

bool BluetoothComboMode() // Keyboard & Mouse
{
    80f8:	cf 93       	push	r28
    80fa:	df 93       	push	r29
    80fc:	cd b7       	in	r28, 0x3d	; 61
    80fe:	de b7       	in	r29, 0x3e	; 62
	return sendBTCmd("BC:CD=0005C0");
    8100:	86 ef       	ldi	r24, 0xF6	; 246
    8102:	91 e2       	ldi	r25, 0x21	; 33
    8104:	c9 de       	rcall	.-622    	; 0x7e98 <sendBTCmd>
}
    8106:	df 91       	pop	r29
    8108:	cf 91       	pop	r28
    810a:	08 95       	ret

0000810c <BluetoothGamePadMode>:

bool BluetoothGamePadMode() // Gamepad (default)
{
    810c:	cf 93       	push	r28
    810e:	df 93       	push	r29
    8110:	cd b7       	in	r28, 0x3d	; 61
    8112:	de b7       	in	r29, 0x3e	; 62
	//return sendBTCmd("BC:CD=0005C8");
	return sendBTCmd("BC:CD=000508");
    8114:	83 e0       	ldi	r24, 0x03	; 3
    8116:	92 e2       	ldi	r25, 0x22	; 34
    8118:	bf de       	rcall	.-642    	; 0x7e98 <sendBTCmd>
}
    811a:	df 91       	pop	r29
    811c:	cf 91       	pop	r28
    811e:	08 95       	ret

00008120 <BluetoothJoystickMode>:

bool BluetoothJoystickMode()
{
    8120:	cf 93       	push	r28
    8122:	df 93       	push	r29
    8124:	cd b7       	in	r28, 0x3d	; 61
    8126:	de b7       	in	r29, 0x3e	; 62
	return sendBTCmd("BC:CD=0005C4");
    8128:	80 e1       	ldi	r24, 0x10	; 16
    812a:	92 e2       	ldi	r25, 0x22	; 34
    812c:	b5 de       	rcall	.-662    	; 0x7e98 <sendBTCmd>
}
    812e:	df 91       	pop	r29
    8130:	cf 91       	pop	r28
    8132:	08 95       	ret

00008134 <cpu_irq_save>:
	WatchdogPet();
	WatchDogEnable(false);
	turnBTOff();
	delay_ms(20);
	reset_do_soft_reset();
}
    8134:	cf 93       	push	r28
    8136:	df 93       	push	r29
    8138:	1f 92       	push	r1
    813a:	cd b7       	in	r28, 0x3d	; 61
    813c:	de b7       	in	r29, 0x3e	; 62
    813e:	8f e3       	ldi	r24, 0x3F	; 63
    8140:	90 e0       	ldi	r25, 0x00	; 0
    8142:	fc 01       	movw	r30, r24
    8144:	80 81       	ld	r24, Z
    8146:	89 83       	std	Y+1, r24	; 0x01
    8148:	f8 94       	cli
    814a:	89 81       	ldd	r24, Y+1	; 0x01
    814c:	0f 90       	pop	r0
    814e:	df 91       	pop	r29
    8150:	cf 91       	pop	r28
    8152:	08 95       	ret

00008154 <cpu_irq_restore>:
    8154:	cf 93       	push	r28
    8156:	df 93       	push	r29
    8158:	1f 92       	push	r1
    815a:	cd b7       	in	r28, 0x3d	; 61
    815c:	de b7       	in	r29, 0x3e	; 62
    815e:	89 83       	std	Y+1, r24	; 0x01
    8160:	8f e3       	ldi	r24, 0x3F	; 63
    8162:	90 e0       	ldi	r25, 0x00	; 0
    8164:	29 81       	ldd	r18, Y+1	; 0x01
    8166:	fc 01       	movw	r30, r24
    8168:	20 83       	st	Z, r18
    816a:	0f 90       	pop	r0
    816c:	df 91       	pop	r29
    816e:	cf 91       	pop	r28
    8170:	08 95       	ret

00008172 <sleep_set_mode>:
    8172:	cf 93       	push	r28
    8174:	df 93       	push	r29
    8176:	1f 92       	push	r1
    8178:	cd b7       	in	r28, 0x3d	; 61
    817a:	de b7       	in	r29, 0x3e	; 62
    817c:	89 83       	std	Y+1, r24	; 0x01
    817e:	88 e4       	ldi	r24, 0x48	; 72
    8180:	90 e0       	ldi	r25, 0x00	; 0
    8182:	28 e4       	ldi	r18, 0x48	; 72
    8184:	30 e0       	ldi	r19, 0x00	; 0
    8186:	f9 01       	movw	r30, r18
    8188:	20 81       	ld	r18, Z
    818a:	32 2f       	mov	r19, r18
    818c:	31 7f       	andi	r19, 0xF1	; 241
    818e:	29 81       	ldd	r18, Y+1	; 0x01
    8190:	23 2b       	or	r18, r19
    8192:	fc 01       	movw	r30, r24
    8194:	20 83       	st	Z, r18
    8196:	0f 90       	pop	r0
    8198:	df 91       	pop	r29
    819a:	cf 91       	pop	r28
    819c:	08 95       	ret

0000819e <sleepmgr_sleep>:
    819e:	1f 93       	push	r17
    81a0:	cf 93       	push	r28
    81a2:	df 93       	push	r29
    81a4:	00 d0       	rcall	.+0      	; 0x81a6 <sleepmgr_sleep+0x8>
    81a6:	00 d0       	rcall	.+0      	; 0x81a8 <sleepmgr_sleep+0xa>
    81a8:	cd b7       	in	r28, 0x3d	; 61
    81aa:	de b7       	in	r29, 0x3e	; 62
    81ac:	8c 83       	std	Y+4, r24	; 0x04
    81ae:	8c 81       	ldd	r24, Y+4	; 0x04
    81b0:	88 2f       	mov	r24, r24
    81b2:	90 e0       	ldi	r25, 0x00	; 0
    81b4:	01 97       	sbiw	r24, 0x01	; 1
    81b6:	8d 51       	subi	r24, 0x1D	; 29
    81b8:	9e 4f       	sbci	r25, 0xFE	; 254
    81ba:	89 83       	std	Y+1, r24	; 0x01
    81bc:	9a 83       	std	Y+2, r25	; 0x02
    81be:	89 81       	ldd	r24, Y+1	; 0x01
    81c0:	9a 81       	ldd	r25, Y+2	; 0x02
    81c2:	fc 01       	movw	r30, r24
    81c4:	14 91       	lpm	r17, Z
    81c6:	1b 83       	std	Y+3, r17	; 0x03
    81c8:	8b 81       	ldd	r24, Y+3	; 0x03
    81ca:	d3 df       	rcall	.-90     	; 0x8172 <sleep_set_mode>
    81cc:	88 e4       	ldi	r24, 0x48	; 72
    81ce:	90 e0       	ldi	r25, 0x00	; 0
    81d0:	28 e4       	ldi	r18, 0x48	; 72
    81d2:	30 e0       	ldi	r19, 0x00	; 0
    81d4:	f9 01       	movw	r30, r18
    81d6:	20 81       	ld	r18, Z
    81d8:	21 60       	ori	r18, 0x01	; 1
    81da:	fc 01       	movw	r30, r24
    81dc:	20 83       	st	Z, r18
    81de:	78 94       	sei
    81e0:	88 95       	sleep
    81e2:	88 e4       	ldi	r24, 0x48	; 72
    81e4:	90 e0       	ldi	r25, 0x00	; 0
    81e6:	28 e4       	ldi	r18, 0x48	; 72
    81e8:	30 e0       	ldi	r19, 0x00	; 0
    81ea:	f9 01       	movw	r30, r18
    81ec:	20 81       	ld	r18, Z
    81ee:	2e 7f       	andi	r18, 0xFE	; 254
    81f0:	fc 01       	movw	r30, r24
    81f2:	20 83       	st	Z, r18
    81f4:	24 96       	adiw	r28, 0x04	; 4
    81f6:	cd bf       	out	0x3d, r28	; 61
    81f8:	de bf       	out	0x3e, r29	; 62
    81fa:	df 91       	pop	r29
    81fc:	cf 91       	pop	r28
    81fe:	1f 91       	pop	r17
    8200:	08 95       	ret

00008202 <sleepmgr_init>:
    8202:	cf 93       	push	r28
    8204:	df 93       	push	r29
    8206:	1f 92       	push	r1
    8208:	cd b7       	in	r28, 0x3d	; 61
    820a:	de b7       	in	r29, 0x3e	; 62
    820c:	19 82       	std	Y+1, r1	; 0x01
    820e:	0a c0       	rjmp	.+20     	; 0x8224 <sleepmgr_init+0x22>
    8210:	89 81       	ldd	r24, Y+1	; 0x01
    8212:	88 2f       	mov	r24, r24
    8214:	90 e0       	ldi	r25, 0x00	; 0
    8216:	8d 58       	subi	r24, 0x8D	; 141
    8218:	97 4d       	sbci	r25, 0xD7	; 215
    821a:	fc 01       	movw	r30, r24
    821c:	10 82       	st	Z, r1
    821e:	89 81       	ldd	r24, Y+1	; 0x01
    8220:	8f 5f       	subi	r24, 0xFF	; 255
    8222:	89 83       	std	Y+1, r24	; 0x01
    8224:	89 81       	ldd	r24, Y+1	; 0x01
    8226:	85 30       	cpi	r24, 0x05	; 5
    8228:	98 f3       	brcs	.-26     	; 0x8210 <sleepmgr_init+0xe>
    822a:	81 e0       	ldi	r24, 0x01	; 1
    822c:	80 93 78 28 	sts	0x2878, r24
    8230:	0f 90       	pop	r0
    8232:	df 91       	pop	r29
    8234:	cf 91       	pop	r28
    8236:	08 95       	ret

00008238 <reset_do_soft_reset>:
    8238:	cf 93       	push	r28
    823a:	df 93       	push	r29
    823c:	cd b7       	in	r28, 0x3d	; 61
    823e:	de b7       	in	r29, 0x3e	; 62
    8240:	61 e0       	ldi	r22, 0x01	; 1
    8242:	89 e7       	ldi	r24, 0x79	; 121
    8244:	90 e0       	ldi	r25, 0x00	; 0
    8246:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <ccp_write_io>
    824a:	ff cf       	rjmp	.-2      	; 0x824a <reset_do_soft_reset+0x12>

0000824c <__portable_avr_delay_cycles>:
    824c:	61 50       	subi	r22, 0x01	; 1
    824e:	71 09       	sbc	r23, r1
    8250:	81 09       	sbc	r24, r1
    8252:	91 09       	sbc	r25, r1
    8254:	d9 f7       	brne	.-10     	; 0x824c <__portable_avr_delay_cycles>
    8256:	08 95       	ret

00008258 <pmic_init>:
    8258:	cf 93       	push	r28
    825a:	df 93       	push	r29
    825c:	cd b7       	in	r28, 0x3d	; 61
    825e:	de b7       	in	r29, 0x3e	; 62
    8260:	80 ea       	ldi	r24, 0xA0	; 160
    8262:	90 e0       	ldi	r25, 0x00	; 0
    8264:	27 e0       	ldi	r18, 0x07	; 7
    8266:	fc 01       	movw	r30, r24
    8268:	22 83       	std	Z+2, r18	; 0x02
    826a:	df 91       	pop	r29
    826c:	cf 91       	pop	r28
    826e:	08 95       	ret

00008270 <main>:
bool pulse, bios, turnedOn;

#include "build_timestamp.h"

int main (void)
{
    8270:	cf 92       	push	r12
    8272:	df 92       	push	r13
    8274:	ef 92       	push	r14
    8276:	ff 92       	push	r15
    8278:	0f 93       	push	r16
    827a:	1f 93       	push	r17
    827c:	cf 93       	push	r28
    827e:	df 93       	push	r29
    8280:	cd b7       	in	r28, 0x3d	; 61
    8282:	de b7       	in	r29, 0x3e	; 62
    8284:	c9 55       	subi	r28, 0x59	; 89
    8286:	d1 09       	sbc	r29, r1
    8288:	cd bf       	out	0x3d, r28	; 61
    828a:	de bf       	out	0x3e, r29	; 62
    struct Timeout startReleaseTimeout;
	struct Timeout rptTimeout;
    
	uint8_t i; // temporary variable.
    enum ButtonState tempBState;
	bool possiblyPoweringOff = false;
    828c:	1a 82       	std	Y+2, r1	; 0x02
	bool possiblyBiosMode = false;
    828e:	1b 82       	std	Y+3, r1	; 0x03
    bool doStartRelease = false;
    8290:	1c 82       	std	Y+4, r1	; 0x04
	cfgsel_t which_cfg;
	pulse = false;
    8292:	10 92 7b 28 	sts	0x287B, r1
	uint16_t battery_level=0u;
    8296:	1d 82       	std	Y+5, r1	; 0x05
    8298:	1e 82       	std	Y+6, r1	; 0x06
	bool chargingDone;
	
	WatchdogPet();  //already enabled in bootloader
    829a:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
	
	sysclk_init(); //Initialize System Clock
    829e:	0e 94 8d 2a 	call	0x551a	; 0x551a <sysclk_init>
	board_init(); //Setup IO
    82a2:	0e 94 07 05 	call	0xa0e	; 0xa0e <board_init>
	delay_ms(5);
    82a6:	6a e2       	ldi	r22, 0x2A	; 42
    82a8:	78 e6       	ldi	r23, 0x68	; 104
    82aa:	80 e0       	ldi	r24, 0x00	; 0
    82ac:	90 e0       	ldi	r25, 0x00	; 0
    82ae:	ce df       	rcall	.-100    	; 0x824c <__portable_avr_delay_cycles>
	
	setupLEDs(false);
    82b0:	80 e0       	ldi	r24, 0x00	; 0
    82b2:	0e 94 fd 24 	call	0x49fa	; 0x49fa <setupLEDs>
	setLEDValue(LED_OFF, LED_OFF, LED_DIM);
    82b6:	41 e0       	ldi	r20, 0x01	; 1
    82b8:	60 e0       	ldi	r22, 0x00	; 0
    82ba:	80 e0       	ldi	r24, 0x00	; 0
    82bc:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
	
	while(buttonActivated(B_START));
    82c0:	00 00       	nop
    82c2:	88 e0       	ldi	r24, 0x08	; 8
    82c4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    82c8:	88 23       	and	r24, r24
    82ca:	d9 f7       	brne	.-10     	; 0x82c2 <main+0x52>
	
	setupAnalog();
    82cc:	0e 94 7d 03 	call	0x6fa	; 0x6fa <setupAnalog>
	enableAnalog();
    82d0:	0e 94 03 04 	call	0x806	; 0x806 <enableAnalog>
	battery_level = sampleAnalogChannel(BATTERY_DETECT_ADC);
    82d4:	83 e0       	ldi	r24, 0x03	; 3
    82d6:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    82da:	8d 83       	std	Y+5, r24	; 0x05
    82dc:	9e 83       	std	Y+6, r25	; 0x06
	chargingDone = IsChargingDone();
    82de:	0e 94 f4 06 	call	0xde8	; 0xde8 <IsChargingDone>
    82e2:	8f 83       	std	Y+7, r24	; 0x07
	
	btFirstRun();
    82e4:	1e de       	rcall	.-964    	; 0x7f22 <btFirstRun>
	turnBTOn(); // Enable the Bluetooth module
    82e6:	f1 dd       	rcall	.-1054   	; 0x7eca <turnBTOn>
	setupBluetoothFast(); // Set baud rate to 115200
    82e8:	2c dd       	rcall	.-1448   	; 0x7d42 <setupBluetoothFast>
	 
	// Setup the watchdog timer period:
	WatchdogInit();
    82ea:	0e 94 8e 29 	call	0x531c	; 0x531c <WatchdogInit>

	// Setup the system tick:
	setupSysTick(&sysTickCallback);
    82ee:	86 e7       	ldi	r24, 0x76	; 118
    82f0:	96 e4       	ldi	r25, 0x46	; 70
    82f2:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <setupSysTick>
	
	// Insert application code here, after the board has been initialized.
	// Setup other peripherals:
	setupDbg();
    82f6:	0e 94 35 20 	call	0x406a	; 0x406a <setupDbg>
	setupUsb();
    82fa:	0e 94 38 28 	call	0x5070	; 0x5070 <setupUsb>

	
	// Sample each of the joysticks to set the center values:
	for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    82fe:	19 82       	std	Y+1, r1	; 0x01
    8300:	f6 c0       	rjmp	.+492    	; 0x84ee <main+0x27e>
		joysticks[i].previous_x = joysticks[i].center_x = joysticks[i].current_x  = sampleAnalogChannel(joysticks[i].adc_channel_x);
    8302:	89 81       	ldd	r24, Y+1	; 0x01
    8304:	c8 2e       	mov	r12, r24
    8306:	d1 2c       	mov	r13, r1
    8308:	89 81       	ldd	r24, Y+1	; 0x01
    830a:	08 2f       	mov	r16, r24
    830c:	10 e0       	ldi	r17, 0x00	; 0
    830e:	89 81       	ldd	r24, Y+1	; 0x01
    8310:	e8 2e       	mov	r14, r24
    8312:	f1 2c       	mov	r15, r1
    8314:	89 81       	ldd	r24, Y+1	; 0x01
    8316:	88 2f       	mov	r24, r24
    8318:	90 e0       	ldi	r25, 0x00	; 0
    831a:	88 0f       	add	r24, r24
    831c:	99 1f       	adc	r25, r25
    831e:	9c 01       	movw	r18, r24
    8320:	22 0f       	add	r18, r18
    8322:	33 1f       	adc	r19, r19
    8324:	22 0f       	add	r18, r18
    8326:	33 1f       	adc	r19, r19
    8328:	22 0f       	add	r18, r18
    832a:	33 1f       	adc	r19, r19
    832c:	28 1b       	sub	r18, r24
    832e:	39 0b       	sbc	r19, r25
    8330:	c9 01       	movw	r24, r18
    8332:	8a 5a       	subi	r24, 0xAA	; 170
    8334:	9f 4d       	sbci	r25, 0xDF	; 223
    8336:	dc 01       	movw	r26, r24
    8338:	8c 91       	ld	r24, X
    833a:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    833e:	ac 01       	movw	r20, r24
    8340:	c7 01       	movw	r24, r14
    8342:	88 0f       	add	r24, r24
    8344:	99 1f       	adc	r25, r25
    8346:	9c 01       	movw	r18, r24
    8348:	22 0f       	add	r18, r18
    834a:	33 1f       	adc	r19, r19
    834c:	22 0f       	add	r18, r18
    834e:	33 1f       	adc	r19, r19
    8350:	22 0f       	add	r18, r18
    8352:	33 1f       	adc	r19, r19
    8354:	28 1b       	sub	r18, r24
    8356:	39 0b       	sbc	r19, r25
    8358:	c9 01       	movw	r24, r18
    835a:	80 5a       	subi	r24, 0xA0	; 160
    835c:	9f 4d       	sbci	r25, 0xDF	; 223
    835e:	fc 01       	movw	r30, r24
    8360:	40 83       	st	Z, r20
    8362:	51 83       	std	Z+1, r21	; 0x01
    8364:	c7 01       	movw	r24, r14
    8366:	88 0f       	add	r24, r24
    8368:	99 1f       	adc	r25, r25
    836a:	9c 01       	movw	r18, r24
    836c:	22 0f       	add	r18, r18
    836e:	33 1f       	adc	r19, r19
    8370:	22 0f       	add	r18, r18
    8372:	33 1f       	adc	r19, r19
    8374:	22 0f       	add	r18, r18
    8376:	33 1f       	adc	r19, r19
    8378:	28 1b       	sub	r18, r24
    837a:	39 0b       	sbc	r19, r25
    837c:	c9 01       	movw	r24, r18
    837e:	80 5a       	subi	r24, 0xA0	; 160
    8380:	9f 4d       	sbci	r25, 0xDF	; 223
    8382:	dc 01       	movw	r26, r24
    8384:	4d 91       	ld	r20, X+
    8386:	5c 91       	ld	r21, X
    8388:	c8 01       	movw	r24, r16
    838a:	88 0f       	add	r24, r24
    838c:	99 1f       	adc	r25, r25
    838e:	9c 01       	movw	r18, r24
    8390:	22 0f       	add	r18, r18
    8392:	33 1f       	adc	r19, r19
    8394:	22 0f       	add	r18, r18
    8396:	33 1f       	adc	r19, r19
    8398:	22 0f       	add	r18, r18
    839a:	33 1f       	adc	r19, r19
    839c:	28 1b       	sub	r18, r24
    839e:	39 0b       	sbc	r19, r25
    83a0:	c9 01       	movw	r24, r18
    83a2:	88 5a       	subi	r24, 0xA8	; 168
    83a4:	9f 4d       	sbci	r25, 0xDF	; 223
    83a6:	fc 01       	movw	r30, r24
    83a8:	40 83       	st	Z, r20
    83aa:	51 83       	std	Z+1, r21	; 0x01
    83ac:	c8 01       	movw	r24, r16
    83ae:	88 0f       	add	r24, r24
    83b0:	99 1f       	adc	r25, r25
    83b2:	9c 01       	movw	r18, r24
    83b4:	22 0f       	add	r18, r18
    83b6:	33 1f       	adc	r19, r19
    83b8:	22 0f       	add	r18, r18
    83ba:	33 1f       	adc	r19, r19
    83bc:	22 0f       	add	r18, r18
    83be:	33 1f       	adc	r19, r19
    83c0:	28 1b       	sub	r18, r24
    83c2:	39 0b       	sbc	r19, r25
    83c4:	c9 01       	movw	r24, r18
    83c6:	88 5a       	subi	r24, 0xA8	; 168
    83c8:	9f 4d       	sbci	r25, 0xDF	; 223
    83ca:	dc 01       	movw	r26, r24
    83cc:	4d 91       	ld	r20, X+
    83ce:	5c 91       	ld	r21, X
    83d0:	c6 01       	movw	r24, r12
    83d2:	88 0f       	add	r24, r24
    83d4:	99 1f       	adc	r25, r25
    83d6:	9c 01       	movw	r18, r24
    83d8:	22 0f       	add	r18, r18
    83da:	33 1f       	adc	r19, r19
    83dc:	22 0f       	add	r18, r18
    83de:	33 1f       	adc	r19, r19
    83e0:	22 0f       	add	r18, r18
    83e2:	33 1f       	adc	r19, r19
    83e4:	28 1b       	sub	r18, r24
    83e6:	39 0b       	sbc	r19, r25
    83e8:	c9 01       	movw	r24, r18
    83ea:	84 5a       	subi	r24, 0xA4	; 164
    83ec:	9f 4d       	sbci	r25, 0xDF	; 223
    83ee:	fc 01       	movw	r30, r24
    83f0:	40 83       	st	Z, r20
    83f2:	51 83       	std	Z+1, r21	; 0x01
		joysticks[i].previous_y = joysticks[i].center_y = joysticks[i].current_y  = sampleAnalogChannel(joysticks[i].adc_channel_y);
    83f4:	89 81       	ldd	r24, Y+1	; 0x01
    83f6:	c8 2e       	mov	r12, r24
    83f8:	d1 2c       	mov	r13, r1
    83fa:	89 81       	ldd	r24, Y+1	; 0x01
    83fc:	08 2f       	mov	r16, r24
    83fe:	10 e0       	ldi	r17, 0x00	; 0
    8400:	89 81       	ldd	r24, Y+1	; 0x01
    8402:	e8 2e       	mov	r14, r24
    8404:	f1 2c       	mov	r15, r1
    8406:	89 81       	ldd	r24, Y+1	; 0x01
    8408:	88 2f       	mov	r24, r24
    840a:	90 e0       	ldi	r25, 0x00	; 0
    840c:	88 0f       	add	r24, r24
    840e:	99 1f       	adc	r25, r25
    8410:	9c 01       	movw	r18, r24
    8412:	22 0f       	add	r18, r18
    8414:	33 1f       	adc	r19, r19
    8416:	22 0f       	add	r18, r18
    8418:	33 1f       	adc	r19, r19
    841a:	22 0f       	add	r18, r18
    841c:	33 1f       	adc	r19, r19
    841e:	28 1b       	sub	r18, r24
    8420:	39 0b       	sbc	r19, r25
    8422:	c9 01       	movw	r24, r18
    8424:	89 5a       	subi	r24, 0xA9	; 169
    8426:	9f 4d       	sbci	r25, 0xDF	; 223
    8428:	dc 01       	movw	r26, r24
    842a:	8c 91       	ld	r24, X
    842c:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    8430:	ac 01       	movw	r20, r24
    8432:	c7 01       	movw	r24, r14
    8434:	88 0f       	add	r24, r24
    8436:	99 1f       	adc	r25, r25
    8438:	9c 01       	movw	r18, r24
    843a:	22 0f       	add	r18, r18
    843c:	33 1f       	adc	r19, r19
    843e:	22 0f       	add	r18, r18
    8440:	33 1f       	adc	r19, r19
    8442:	22 0f       	add	r18, r18
    8444:	33 1f       	adc	r19, r19
    8446:	28 1b       	sub	r18, r24
    8448:	39 0b       	sbc	r19, r25
    844a:	c9 01       	movw	r24, r18
    844c:	8e 59       	subi	r24, 0x9E	; 158
    844e:	9f 4d       	sbci	r25, 0xDF	; 223
    8450:	fc 01       	movw	r30, r24
    8452:	40 83       	st	Z, r20
    8454:	51 83       	std	Z+1, r21	; 0x01
    8456:	c7 01       	movw	r24, r14
    8458:	88 0f       	add	r24, r24
    845a:	99 1f       	adc	r25, r25
    845c:	9c 01       	movw	r18, r24
    845e:	22 0f       	add	r18, r18
    8460:	33 1f       	adc	r19, r19
    8462:	22 0f       	add	r18, r18
    8464:	33 1f       	adc	r19, r19
    8466:	22 0f       	add	r18, r18
    8468:	33 1f       	adc	r19, r19
    846a:	28 1b       	sub	r18, r24
    846c:	39 0b       	sbc	r19, r25
    846e:	c9 01       	movw	r24, r18
    8470:	8e 59       	subi	r24, 0x9E	; 158
    8472:	9f 4d       	sbci	r25, 0xDF	; 223
    8474:	dc 01       	movw	r26, r24
    8476:	4d 91       	ld	r20, X+
    8478:	5c 91       	ld	r21, X
    847a:	c8 01       	movw	r24, r16
    847c:	88 0f       	add	r24, r24
    847e:	99 1f       	adc	r25, r25
    8480:	9c 01       	movw	r18, r24
    8482:	22 0f       	add	r18, r18
    8484:	33 1f       	adc	r19, r19
    8486:	22 0f       	add	r18, r18
    8488:	33 1f       	adc	r19, r19
    848a:	22 0f       	add	r18, r18
    848c:	33 1f       	adc	r19, r19
    848e:	28 1b       	sub	r18, r24
    8490:	39 0b       	sbc	r19, r25
    8492:	c9 01       	movw	r24, r18
    8494:	86 5a       	subi	r24, 0xA6	; 166
    8496:	9f 4d       	sbci	r25, 0xDF	; 223
    8498:	fc 01       	movw	r30, r24
    849a:	40 83       	st	Z, r20
    849c:	51 83       	std	Z+1, r21	; 0x01
    849e:	c8 01       	movw	r24, r16
    84a0:	88 0f       	add	r24, r24
    84a2:	99 1f       	adc	r25, r25
    84a4:	9c 01       	movw	r18, r24
    84a6:	22 0f       	add	r18, r18
    84a8:	33 1f       	adc	r19, r19
    84aa:	22 0f       	add	r18, r18
    84ac:	33 1f       	adc	r19, r19
    84ae:	22 0f       	add	r18, r18
    84b0:	33 1f       	adc	r19, r19
    84b2:	28 1b       	sub	r18, r24
    84b4:	39 0b       	sbc	r19, r25
    84b6:	c9 01       	movw	r24, r18
    84b8:	86 5a       	subi	r24, 0xA6	; 166
    84ba:	9f 4d       	sbci	r25, 0xDF	; 223
    84bc:	dc 01       	movw	r26, r24
    84be:	4d 91       	ld	r20, X+
    84c0:	5c 91       	ld	r21, X
    84c2:	11 97       	sbiw	r26, 0x01	; 1
    84c4:	c6 01       	movw	r24, r12
    84c6:	88 0f       	add	r24, r24
    84c8:	99 1f       	adc	r25, r25
    84ca:	9c 01       	movw	r18, r24
    84cc:	22 0f       	add	r18, r18
    84ce:	33 1f       	adc	r19, r19
    84d0:	22 0f       	add	r18, r18
    84d2:	33 1f       	adc	r19, r19
    84d4:	22 0f       	add	r18, r18
    84d6:	33 1f       	adc	r19, r19
    84d8:	28 1b       	sub	r18, r24
    84da:	39 0b       	sbc	r19, r25
    84dc:	c9 01       	movw	r24, r18
    84de:	82 5a       	subi	r24, 0xA2	; 162
    84e0:	9f 4d       	sbci	r25, 0xDF	; 223
    84e2:	fc 01       	movw	r30, r24
    84e4:	40 83       	st	Z, r20
    84e6:	51 83       	std	Z+1, r21	; 0x01
	setupDbg();
	setupUsb();

	
	// Sample each of the joysticks to set the center values:
	for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    84e8:	89 81       	ldd	r24, Y+1	; 0x01
    84ea:	8f 5f       	subi	r24, 0xFF	; 255
    84ec:	89 83       	std	Y+1, r24	; 0x01
    84ee:	89 81       	ldd	r24, Y+1	; 0x01
    84f0:	82 30       	cpi	r24, 0x02	; 2
    84f2:	08 f4       	brcc	.+2      	; 0x84f6 <main+0x286>
    84f4:	06 cf       	rjmp	.-500    	; 0x8302 <main+0x92>
		joysticks[i].previous_x = joysticks[i].center_x = joysticks[i].current_x  = sampleAnalogChannel(joysticks[i].adc_channel_x);
		joysticks[i].previous_y = joysticks[i].center_y = joysticks[i].current_y  = sampleAnalogChannel(joysticks[i].adc_channel_y);
	}	
	
	sleepmgr_init(); // Initialize Sleep Manager
    84f6:	85 de       	rcall	.-758    	; 0x8202 <sleepmgr_init>
	enableSysTick(); // Enable System clock	
    84f8:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <enableSysTick>
	
	SetupStartPinExternalInterrupt();
    84fc:	a2 d4       	rcall	.+2372   	; 0x8e42 <SetupStartPinExternalInterrupt>
	SetupChrgStatPinExternalInterrupt();
    84fe:	0e 94 98 07 	call	0xf30	; 0xf30 <SetupChrgStatPinExternalInterrupt>
	
	pmic_init(); // Enable low/mid/high level interrupts
    8502:	aa de       	rcall	.-684    	; 0x8258 <pmic_init>
	cpu_irq_enable(); // Global interrupt enable
    8504:	78 94       	sei
	
	turnedOn = powerOn(global_header.powerOffSoftware);
    8506:	80 91 54 28 	lds	r24, 0x2854
    850a:	88 1f       	adc	r24, r24
    850c:	88 27       	eor	r24, r24
    850e:	88 1f       	adc	r24, r24
    8510:	90 91 55 28 	lds	r25, 0x2855
    8514:	9f 73       	andi	r25, 0x3F	; 63
    8516:	99 0f       	add	r25, r25
    8518:	89 2b       	or	r24, r25
    851a:	88 2f       	mov	r24, r24
    851c:	90 e0       	ldi	r25, 0x00	; 0
    851e:	21 e0       	ldi	r18, 0x01	; 1
    8520:	00 97       	sbiw	r24, 0x00	; 0
    8522:	09 f4       	brne	.+2      	; 0x8526 <main+0x2b6>
    8524:	20 e0       	ldi	r18, 0x00	; 0
    8526:	82 2f       	mov	r24, r18
    8528:	0e 94 42 24 	call	0x4884	; 0x4884 <powerOn>
    852c:	80 93 7a 28 	sts	0x287A, r24
	
	// Set the global/controller configuration:
	which_cfg = whichConfiguration();
    8530:	0e 94 82 11 	call	0x2304	; 0x2304 <whichConfiguration>
    8534:	88 87       	std	Y+8, r24	; 0x08
	loadConfiguration(which_cfg);
    8536:	88 85       	ldd	r24, Y+8	; 0x08
    8538:	0e 94 ae 10 	call	0x215c	; 0x215c <loadConfiguration>
	
	selectHandlers();
    853c:	f9 d3       	rcall	.+2034   	; 0x8d30 <selectHandlers>
	setupLEDs(!global_header.led_G_D0_B_D1);
    853e:	80 91 55 28 	lds	r24, 0x2855
    8542:	82 95       	swap	r24
    8544:	86 95       	lsr	r24
    8546:	86 95       	lsr	r24
    8548:	83 70       	andi	r24, 0x03	; 3
    854a:	90 91 56 28 	lds	r25, 0x2856
    854e:	9f 73       	andi	r25, 0x3F	; 63
    8550:	99 0f       	add	r25, r25
    8552:	99 0f       	add	r25, r25
    8554:	89 2b       	or	r24, r25
    8556:	98 2f       	mov	r25, r24
    8558:	81 e0       	ldi	r24, 0x01	; 1
    855a:	99 23       	and	r25, r25
    855c:	09 f0       	breq	.+2      	; 0x8560 <main+0x2f0>
    855e:	80 e0       	ldi	r24, 0x00	; 0
    8560:	0e 94 fd 24 	call	0x49fa	; 0x49fa <setupLEDs>

	// Send startup message:
	sendUSBLine("| DRONE | Version " STRINGIFY_EXPANDED(SW_VERSION));
    8564:	8d e1       	ldi	r24, 0x1D	; 29
    8566:	92 e2       	ldi	r25, 0x22	; 34
    8568:	0e 94 a7 28 	call	0x514e	; 0x514e <sendUSBLine>
	sendUSBLine(BUILD_DATE_TIME);
    856c:	86 e3       	ldi	r24, 0x36	; 54
    856e:	92 e2       	ldi	r25, 0x22	; 34
    8570:	0e 94 a7 28 	call	0x514e	; 0x514e <sendUSBLine>
	
	sendDBGLine("| DRONE | Version " STRINGIFY_EXPANDED(SW_VERSION));
    8574:	8d e1       	ldi	r24, 0x1D	; 29
    8576:	92 e2       	ldi	r25, 0x22	; 34
    8578:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
	
	initBTComms(global_header.bluetooth_mode_names[ccc.mode]);
    857c:	80 91 7c 28 	lds	r24, 0x287C
    8580:	88 2f       	mov	r24, r24
    8582:	90 e0       	ldi	r25, 0x00	; 0
    8584:	04 96       	adiw	r24, 0x04	; 4
    8586:	81 5b       	subi	r24, 0xB1	; 177
    8588:	97 4d       	sbci	r25, 0xD7	; 215
    858a:	ed dc       	rcall	.-1574   	; 0x7f66 <initBTComms>
		

	// Initialize the button handler:
	wdt_reset();
    858c:	a8 95       	wdr
	if (button_handler_init != NULL) {
    858e:	80 91 47 28 	lds	r24, 0x2847
    8592:	90 91 48 28 	lds	r25, 0x2848
    8596:	00 97       	sbiw	r24, 0x00	; 0
    8598:	49 f0       	breq	.+18     	; 0x85ac <main+0x33c>
		button_handler_init(&ccc);
    859a:	20 91 47 28 	lds	r18, 0x2847
    859e:	30 91 48 28 	lds	r19, 0x2848
    85a2:	8c e7       	ldi	r24, 0x7C	; 124
    85a4:	98 e2       	ldi	r25, 0x28	; 40
    85a6:	f9 01       	movw	r30, r18
    85a8:	09 95       	icall
    85aa:	04 c0       	rjmp	.+8      	; 0x85b4 <main+0x344>
	}
	else
	{
		sendDBGLine("!button_handler_init == null!");
    85ac:	8c e5       	ldi	r24, 0x5C	; 92
    85ae:	92 e2       	ldi	r25, 0x22	; 34
    85b0:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
	}		

	// Start the timeouts:
	startTimeout(&rptTimeout,REPORT_TIMEOUT_MS);
    85b4:	ce 01       	movw	r24, r28
    85b6:	8e 5a       	subi	r24, 0xAE	; 174
    85b8:	9f 4f       	sbci	r25, 0xFF	; 255
    85ba:	4d e0       	ldi	r20, 0x0D	; 13
    85bc:	50 e0       	ldi	r21, 0x00	; 0
    85be:	60 e0       	ldi	r22, 0x00	; 0
    85c0:	70 e0       	ldi	r23, 0x00	; 0
    85c2:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
	WatchdogPet();
    85c6:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
	
	startTimeout(&buttonSampleTimeout, BUTTON_SAMPLE_TIMEOUT_MS);
    85ca:	ce 01       	movw	r24, r28
    85cc:	0a 96       	adiw	r24, 0x0a	; 10
    85ce:	46 e0       	ldi	r20, 0x06	; 6
    85d0:	50 e0       	ldi	r21, 0x00	; 0
    85d2:	60 e0       	ldi	r22, 0x00	; 0
    85d4:	70 e0       	ldi	r23, 0x00	; 0
    85d6:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
	WatchdogPet();
    85da:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
	
	startTimeout(&joystickSampleTimeout, JOYSTICK_SAMPLE_TIMEOUT_MS);
    85de:	ce 01       	movw	r24, r28
    85e0:	42 96       	adiw	r24, 0x12	; 18
    85e2:	46 e0       	ldi	r20, 0x06	; 6
    85e4:	50 e0       	ldi	r21, 0x00	; 0
    85e6:	60 e0       	ldi	r22, 0x00	; 0
    85e8:	70 e0       	ldi	r23, 0x00	; 0
    85ea:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
	WatchdogPet();
    85ee:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
	
	startTimeout(&debugReportTimeout, DEBUG_REPORT_TIMEOUT_MS);
    85f2:	ce 01       	movw	r24, r28
    85f4:	8a 96       	adiw	r24, 0x2a	; 42
    85f6:	48 ee       	ldi	r20, 0xE8	; 232
    85f8:	53 e0       	ldi	r21, 0x03	; 3
    85fa:	60 e0       	ldi	r22, 0x00	; 0
    85fc:	70 e0       	ldi	r23, 0x00	; 0
    85fe:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
	WatchdogPet();
    8602:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
	
	startTimeout(&batteryCheckTimeout, BATTERY_CHECK_TIMEOUT_MS);
    8606:	ce 01       	movw	r24, r28
    8608:	c2 96       	adiw	r24, 0x32	; 50
    860a:	40 e6       	ldi	r20, 0x60	; 96
    860c:	5a ee       	ldi	r21, 0xEA	; 234
    860e:	60 e0       	ldi	r22, 0x00	; 0
    8610:	70 e0       	ldi	r23, 0x00	; 0
    8612:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
	WatchdogPet();
    8616:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
	
	startTimeout(&ledTimeout, LED_TIMEOUT_MS);
    861a:	ce 01       	movw	r24, r28
    861c:	ca 96       	adiw	r24, 0x3a	; 58
    861e:	48 ee       	ldi	r20, 0xE8	; 232
    8620:	53 e0       	ldi	r21, 0x03	; 3
    8622:	60 e0       	ldi	r22, 0x00	; 0
    8624:	70 e0       	ldi	r23, 0x00	; 0
    8626:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
	WatchdogPet();	
    862a:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
	
	startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    862e:	ce 01       	movw	r24, r28
    8630:	8e 5b       	subi	r24, 0xBE	; 190
    8632:	9f 4f       	sbci	r25, 0xFF	; 255
    8634:	40 ee       	ldi	r20, 0xE0	; 224
    8636:	53 e9       	ldi	r21, 0x93	; 147
    8638:	64 e0       	ldi	r22, 0x04	; 4
    863a:	70 e0       	ldi	r23, 0x00	; 0
    863c:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
	WatchdogPet();
    8640:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
	
	// Except the poweroff timeout:
	cancelTimeout(&powerOffTimeout);
    8644:	ce 01       	movw	r24, r28
    8646:	4a 96       	adiw	r24, 0x1a	; 26
    8648:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <cancelTimeout>
	
	// Main loop:
	sendDBGLine("Entering Main loop");
    864c:	8a e7       	ldi	r24, 0x7A	; 122
    864e:	92 e2       	ldi	r25, 0x22	; 34
    8650:	0e 94 b2 20 	call	0x4164	; 0x4164 <sendDBGLine>
	while(1) {
		
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
			!checkTimeout(&rptTimeout) && 
    8654:	ce 01       	movw	r24, r28
    8656:	8e 5a       	subi	r24, 0xAE	; 174
    8658:	9f 4f       	sbci	r25, 0xFF	; 255
    865a:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    865e:	98 2f       	mov	r25, r24
    8660:	81 e0       	ldi	r24, 0x01	; 1
    8662:	89 27       	eor	r24, r25
	// Main loop:
	sendDBGLine("Entering Main loop");
	while(1) {
		
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
    8664:	88 23       	and	r24, r24
    8666:	31 f1       	breq	.+76     	; 0x86b4 <main+0x444>
			!checkTimeout(&rptTimeout) && 
			!checkTimeout(&buttonSampleTimeout) && 
    8668:	ce 01       	movw	r24, r28
    866a:	0a 96       	adiw	r24, 0x0a	; 10
    866c:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    8670:	98 2f       	mov	r25, r24
    8672:	81 e0       	ldi	r24, 0x01	; 1
    8674:	89 27       	eor	r24, r25
	sendDBGLine("Entering Main loop");
	while(1) {
		
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
			!checkTimeout(&rptTimeout) && 
    8676:	88 23       	and	r24, r24
    8678:	e9 f0       	breq	.+58     	; 0x86b4 <main+0x444>
			!checkTimeout(&buttonSampleTimeout) && 
			!checkTimeout(&joystickSampleTimeout) && 
    867a:	ce 01       	movw	r24, r28
    867c:	42 96       	adiw	r24, 0x12	; 18
    867e:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    8682:	98 2f       	mov	r25, r24
    8684:	81 e0       	ldi	r24, 0x01	; 1
    8686:	89 27       	eor	r24, r25
	while(1) {
		
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
			!checkTimeout(&rptTimeout) && 
			!checkTimeout(&buttonSampleTimeout) && 
    8688:	88 23       	and	r24, r24
    868a:	a1 f0       	breq	.+40     	; 0x86b4 <main+0x444>
			!checkTimeout(&joystickSampleTimeout) && 
			!checkTimeout(&batteryCheckTimeout) &&
    868c:	ce 01       	movw	r24, r28
    868e:	c2 96       	adiw	r24, 0x32	; 50
    8690:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    8694:	98 2f       	mov	r25, r24
    8696:	81 e0       	ldi	r24, 0x01	; 1
    8698:	89 27       	eor	r24, r25
		
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
			!checkTimeout(&rptTimeout) && 
			!checkTimeout(&buttonSampleTimeout) && 
			!checkTimeout(&joystickSampleTimeout) && 
    869a:	88 23       	and	r24, r24
    869c:	59 f0       	breq	.+22     	; 0x86b4 <main+0x444>
			!checkTimeout(&batteryCheckTimeout) &&
			!checkTimeout(&ledTimeout)
    869e:	ce 01       	movw	r24, r28
    86a0:	ca 96       	adiw	r24, 0x3a	; 58
    86a2:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    86a6:	98 2f       	mov	r25, r24
    86a8:	81 e0       	ldi	r24, 0x01	; 1
    86aa:	89 27       	eor	r24, r25
		// Go to sleep if there aren't any pending timeouts; wait for the systick to wake us.
		if (
			!checkTimeout(&rptTimeout) && 
			!checkTimeout(&buttonSampleTimeout) && 
			!checkTimeout(&joystickSampleTimeout) && 
			!checkTimeout(&batteryCheckTimeout) &&
    86ac:	88 23       	and	r24, r24
    86ae:	11 f0       	breq	.+4      	; 0x86b4 <main+0x444>
			!checkTimeout(&ledTimeout)
		) 
		{
			sleepmgr_sleep(SLEEPMGR_IDLE);	
    86b0:	81 e0       	ldi	r24, 0x01	; 1
    86b2:	75 dd       	rcall	.-1302   	; 0x819e <sleepmgr_sleep>
		}		
		
		// Pet the WDT:
		WatchdogPet();
    86b4:	0e 94 9a 29 	call	0x5334	; 0x5334 <WatchdogPet>
		WatchdogTaskRunning(TASK_MAIN);
    86b8:	80 e0       	ldi	r24, 0x00	; 0
    86ba:	0e 94 d7 29 	call	0x53ae	; 0x53ae <WatchdogTaskRunning>
		
		if (checkTimeout(&batteryCheckTimeout)) 
    86be:	ce 01       	movw	r24, r28
    86c0:	c2 96       	adiw	r24, 0x32	; 50
    86c2:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    86c6:	88 23       	and	r24, r24
    86c8:	81 f0       	breq	.+32     	; 0x86ea <main+0x47a>
		{
			//Time to check the controller status?
			startTimeout(&batteryCheckTimeout, BATTERY_CHECK_TIMEOUT_MS);
    86ca:	ce 01       	movw	r24, r28
    86cc:	c2 96       	adiw	r24, 0x32	; 50
    86ce:	40 e6       	ldi	r20, 0x60	; 96
    86d0:	5a ee       	ldi	r21, 0xEA	; 234
    86d2:	60 e0       	ldi	r22, 0x00	; 0
    86d4:	70 e0       	ldi	r23, 0x00	; 0
    86d6:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
			//bool bluetoothConnected = btIsConnected();
			//if(bluetoothConnected)
			//{
				battery_level = sampleAnalogChannel(BATTERY_DETECT_ADC);
    86da:	83 e0       	ldi	r24, 0x03	; 3
    86dc:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    86e0:	8d 83       	std	Y+5, r24	; 0x05
    86e2:	9e 83       	std	Y+6, r25	; 0x06
			//}
			
			chargingDone = IsChargingDone();
    86e4:	0e 94 f4 06 	call	0xde8	; 0xde8 <IsChargingDone>
    86e8:	8f 83       	std	Y+7, r24	; 0x07
		}
		
		
		if (checkTimeout(&ledTimeout)) 
    86ea:	ce 01       	movw	r24, r28
    86ec:	ca 96       	adiw	r24, 0x3a	; 58
    86ee:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    86f2:	88 23       	and	r24, r24
    86f4:	01 f1       	breq	.+64     	; 0x8736 <main+0x4c6>
		{
			startTimeout(&ledTimeout, LED_TIMEOUT_MS);
    86f6:	ce 01       	movw	r24, r28
    86f8:	ca 96       	adiw	r24, 0x3a	; 58
    86fa:	48 ee       	ldi	r20, 0xE8	; 232
    86fc:	53 e0       	ldi	r21, 0x03	; 3
    86fe:	60 e0       	ldi	r22, 0x00	; 0
    8700:	70 e0       	ldi	r23, 0x00	; 0
    8702:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
			//Change the pulse state:
			pulse = !pulse;
    8706:	80 91 7b 28 	lds	r24, 0x287B
    870a:	88 2f       	mov	r24, r24
    870c:	90 e0       	ldi	r25, 0x00	; 0
    870e:	21 e0       	ldi	r18, 0x01	; 1
    8710:	00 97       	sbiw	r24, 0x00	; 0
    8712:	09 f4       	brne	.+2      	; 0x8716 <main+0x4a6>
    8714:	20 e0       	ldi	r18, 0x00	; 0
    8716:	81 e0       	ldi	r24, 0x01	; 1
    8718:	82 27       	eor	r24, r18
    871a:	88 2f       	mov	r24, r24
    871c:	90 e0       	ldi	r25, 0x00	; 0
    871e:	81 70       	andi	r24, 0x01	; 1
    8720:	80 93 7b 28 	sts	0x287B, r24
			MaintainControllerStatus(pulse,chargingDone,battery_level);
    8724:	20 91 7b 28 	lds	r18, 0x287B
    8728:	8d 81       	ldd	r24, Y+5	; 0x05
    872a:	9e 81       	ldd	r25, Y+6	; 0x06
    872c:	ac 01       	movw	r20, r24
    872e:	6f 81       	ldd	r22, Y+7	; 0x07
    8730:	82 2f       	mov	r24, r18
    8732:	0e 94 0c 07 	call	0xe18	; 0xe18 <MaintainControllerStatus>
		}
		
		if (ccc.mode==BTM_GAMEPAD && checkTimeout(&rptTimeout)) 
    8736:	80 91 7c 28 	lds	r24, 0x287C
    873a:	82 30       	cpi	r24, 0x02	; 2
    873c:	49 f5       	brne	.+82     	; 0x8790 <main+0x520>
    873e:	ce 01       	movw	r24, r28
    8740:	8e 5a       	subi	r24, 0xAE	; 174
    8742:	9f 4f       	sbci	r25, 0xFF	; 255
    8744:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    8748:	88 23       	and	r24, r24
    874a:	11 f1       	breq	.+68     	; 0x8790 <main+0x520>
		{
			startTimeout(&rptTimeout, REPORT_TIMEOUT_MS);
    874c:	ce 01       	movw	r24, r28
    874e:	8e 5a       	subi	r24, 0xAE	; 174
    8750:	9f 4f       	sbci	r25, 0xFF	; 255
    8752:	4d e0       	ldi	r20, 0x0D	; 13
    8754:	50 e0       	ldi	r21, 0x00	; 0
    8756:	60 e0       	ldi	r22, 0x00	; 0
    8758:	70 e0       	ldi	r23, 0x00	; 0
    875a:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
			
			button_handler(REPORT,0);
    875e:	20 91 49 28 	lds	r18, 0x2849
    8762:	30 91 4a 28 	lds	r19, 0x284A
    8766:	60 e0       	ldi	r22, 0x00	; 0
    8768:	81 e1       	ldi	r24, 0x11	; 17
    876a:	f9 01       	movw	r30, r18
    876c:	09 95       	icall
			
			//delta toggling for auto power off
			if(delta)
    876e:	80 91 5e 27 	lds	r24, 0x275E
    8772:	88 23       	and	r24, r24
    8774:	59 f0       	breq	.+22     	; 0x878c <main+0x51c>
			{
				startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    8776:	ce 01       	movw	r24, r28
    8778:	8e 5b       	subi	r24, 0xBE	; 190
    877a:	9f 4f       	sbci	r25, 0xFF	; 255
    877c:	40 ee       	ldi	r20, 0xE0	; 224
    877e:	53 e9       	ldi	r21, 0x93	; 147
    8780:	64 e0       	ldi	r22, 0x04	; 4
    8782:	70 e0       	ldi	r23, 0x00	; 0
    8784:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
				delta = false;
    8788:	10 92 5e 27 	sts	0x275E, r1
			}
			GamepadSendReport(); // send gamepad report
    878c:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <GamepadSendReport>
		}
		
		if (ccc.mode==BTM_JOYSTICK_ANALOG && checkTimeout(&rptTimeout))
    8790:	80 91 7c 28 	lds	r24, 0x287C
    8794:	87 30       	cpi	r24, 0x07	; 7
    8796:	49 f5       	brne	.+82     	; 0x87ea <main+0x57a>
    8798:	ce 01       	movw	r24, r28
    879a:	8e 5a       	subi	r24, 0xAE	; 174
    879c:	9f 4f       	sbci	r25, 0xFF	; 255
    879e:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    87a2:	88 23       	and	r24, r24
    87a4:	11 f1       	breq	.+68     	; 0x87ea <main+0x57a>
		{
			startTimeout(&rptTimeout, REPORT_TIMEOUT_MS);
    87a6:	ce 01       	movw	r24, r28
    87a8:	8e 5a       	subi	r24, 0xAE	; 174
    87aa:	9f 4f       	sbci	r25, 0xFF	; 255
    87ac:	4d e0       	ldi	r20, 0x0D	; 13
    87ae:	50 e0       	ldi	r21, 0x00	; 0
    87b0:	60 e0       	ldi	r22, 0x00	; 0
    87b2:	70 e0       	ldi	r23, 0x00	; 0
    87b4:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
			
			button_handler(REPORT,0);
    87b8:	20 91 49 28 	lds	r18, 0x2849
    87bc:	30 91 4a 28 	lds	r19, 0x284A
    87c0:	60 e0       	ldi	r22, 0x00	; 0
    87c2:	81 e1       	ldi	r24, 0x11	; 17
    87c4:	f9 01       	movw	r30, r18
    87c6:	09 95       	icall
			
			//delta toggling for auto power off
			if(jdelta)
    87c8:	80 91 67 27 	lds	r24, 0x2767
    87cc:	88 23       	and	r24, r24
    87ce:	59 f0       	breq	.+22     	; 0x87e6 <main+0x576>
			{
				startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    87d0:	ce 01       	movw	r24, r28
    87d2:	8e 5b       	subi	r24, 0xBE	; 190
    87d4:	9f 4f       	sbci	r25, 0xFF	; 255
    87d6:	40 ee       	ldi	r20, 0xE0	; 224
    87d8:	53 e9       	ldi	r21, 0x93	; 147
    87da:	64 e0       	ldi	r22, 0x04	; 4
    87dc:	70 e0       	ldi	r23, 0x00	; 0
    87de:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
				jdelta = false;
    87e2:	10 92 67 27 	sts	0x2767, r1
			}
			jStickSendReport(); // send joystick report 
    87e6:	0e 94 2c 19 	call	0x3258	; 0x3258 <jStickSendReport>
		}
		
		// Is it time to sample the buttons?
		if (checkTimeout(&buttonSampleTimeout)) {
    87ea:	ce 01       	movw	r24, r28
    87ec:	0a 96       	adiw	r24, 0x0a	; 10
    87ee:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    87f2:	88 23       	and	r24, r24
    87f4:	09 f4       	brne	.+2      	; 0x87f8 <main+0x588>
    87f6:	69 c1       	rjmp	.+722    	; 0x8aca <main+0x85a>
			startTimeout(&buttonSampleTimeout, BUTTON_SAMPLE_TIMEOUT_MS);
    87f8:	ce 01       	movw	r24, r28
    87fa:	0a 96       	adiw	r24, 0x0a	; 10
    87fc:	46 e0       	ldi	r20, 0x06	; 6
    87fe:	50 e0       	ldi	r21, 0x00	; 0
    8800:	60 e0       	ldi	r22, 0x00	; 0
    8802:	70 e0       	ldi	r23, 0x00	; 0
    8804:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
			
			// Scan the current state of each button:
			for (i = 0; i < NUM_BUTTONS; i++) {
    8808:	19 82       	std	Y+1, r1	; 0x01
    880a:	59 c0       	rjmp	.+178    	; 0x88be <main+0x64e>
				// Is the button currently released, but being pressed?
                tempBState = buttons[i].state;
    880c:	89 81       	ldd	r24, Y+1	; 0x01
    880e:	88 2f       	mov	r24, r24
    8810:	90 e0       	ldi	r25, 0x00	; 0
    8812:	88 0f       	add	r24, r24
    8814:	99 1f       	adc	r25, r25
    8816:	88 0f       	add	r24, r24
    8818:	99 1f       	adc	r25, r25
    881a:	8a 5f       	subi	r24, 0xFA	; 250
    881c:	9f 4d       	sbci	r25, 0xDF	; 223
    881e:	dc 01       	movw	r26, r24
    8820:	8c 91       	ld	r24, X
    8822:	89 87       	std	Y+9, r24	; 0x09
				if ((tempBState == BUTTON_RELEASED) && buttonActivated((enum ButtonName)i)) {
    8824:	89 85       	ldd	r24, Y+9	; 0x09
    8826:	88 23       	and	r24, r24
    8828:	d9 f4       	brne	.+54     	; 0x8860 <main+0x5f0>
    882a:	89 81       	ldd	r24, Y+1	; 0x01
    882c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    8830:	88 23       	and	r24, r24
    8832:	b1 f0       	breq	.+44     	; 0x8860 <main+0x5f0>
					// Then increment the debounce counter:
					buttons[i].debounce_counter++;
    8834:	89 81       	ldd	r24, Y+1	; 0x01
    8836:	88 2f       	mov	r24, r24
    8838:	90 e0       	ldi	r25, 0x00	; 0
    883a:	9c 01       	movw	r18, r24
    883c:	22 0f       	add	r18, r18
    883e:	33 1f       	adc	r19, r19
    8840:	22 0f       	add	r18, r18
    8842:	33 1f       	adc	r19, r19
    8844:	2b 5f       	subi	r18, 0xFB	; 251
    8846:	3f 4d       	sbci	r19, 0xDF	; 223
    8848:	f9 01       	movw	r30, r18
    884a:	20 81       	ld	r18, Z
    884c:	2f 5f       	subi	r18, 0xFF	; 255
    884e:	88 0f       	add	r24, r24
    8850:	99 1f       	adc	r25, r25
    8852:	88 0f       	add	r24, r24
    8854:	99 1f       	adc	r25, r25
    8856:	8b 5f       	subi	r24, 0xFB	; 251
    8858:	9f 4d       	sbci	r25, 0xDF	; 223
    885a:	dc 01       	movw	r26, r24
    885c:	2c 93       	st	X, r18
    885e:	2c c0       	rjmp	.+88     	; 0x88b8 <main+0x648>
				}
				// Or is the button currently pressed, but being released?
				else if ((tempBState != BUTTON_RELEASED) && !buttonActivated((enum ButtonName)i)) {
    8860:	89 85       	ldd	r24, Y+9	; 0x09
    8862:	88 23       	and	r24, r24
    8864:	f1 f0       	breq	.+60     	; 0x88a2 <main+0x632>
    8866:	89 81       	ldd	r24, Y+1	; 0x01
    8868:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    886c:	98 2f       	mov	r25, r24
    886e:	81 e0       	ldi	r24, 0x01	; 1
    8870:	89 27       	eor	r24, r25
    8872:	88 23       	and	r24, r24
    8874:	b1 f0       	breq	.+44     	; 0x88a2 <main+0x632>
					// Then increment the debounce counter:
					buttons[i].debounce_counter++;
    8876:	89 81       	ldd	r24, Y+1	; 0x01
    8878:	88 2f       	mov	r24, r24
    887a:	90 e0       	ldi	r25, 0x00	; 0
    887c:	9c 01       	movw	r18, r24
    887e:	22 0f       	add	r18, r18
    8880:	33 1f       	adc	r19, r19
    8882:	22 0f       	add	r18, r18
    8884:	33 1f       	adc	r19, r19
    8886:	2b 5f       	subi	r18, 0xFB	; 251
    8888:	3f 4d       	sbci	r19, 0xDF	; 223
    888a:	f9 01       	movw	r30, r18
    888c:	20 81       	ld	r18, Z
    888e:	2f 5f       	subi	r18, 0xFF	; 255
    8890:	88 0f       	add	r24, r24
    8892:	99 1f       	adc	r25, r25
    8894:	88 0f       	add	r24, r24
    8896:	99 1f       	adc	r25, r25
    8898:	8b 5f       	subi	r24, 0xFB	; 251
    889a:	9f 4d       	sbci	r25, 0xDF	; 223
    889c:	dc 01       	movw	r26, r24
    889e:	2c 93       	st	X, r18
    88a0:	0b c0       	rjmp	.+22     	; 0x88b8 <main+0x648>
				}
				// Otherwise reset the debounce counter:
				else {
					buttons[i].debounce_counter = 0;
    88a2:	89 81       	ldd	r24, Y+1	; 0x01
    88a4:	88 2f       	mov	r24, r24
    88a6:	90 e0       	ldi	r25, 0x00	; 0
    88a8:	88 0f       	add	r24, r24
    88aa:	99 1f       	adc	r25, r25
    88ac:	88 0f       	add	r24, r24
    88ae:	99 1f       	adc	r25, r25
    88b0:	8b 5f       	subi	r24, 0xFB	; 251
    88b2:	9f 4d       	sbci	r25, 0xDF	; 223
    88b4:	fc 01       	movw	r30, r24
    88b6:	10 82       	st	Z, r1
		// Is it time to sample the buttons?
		if (checkTimeout(&buttonSampleTimeout)) {
			startTimeout(&buttonSampleTimeout, BUTTON_SAMPLE_TIMEOUT_MS);
			
			// Scan the current state of each button:
			for (i = 0; i < NUM_BUTTONS; i++) {
    88b8:	89 81       	ldd	r24, Y+1	; 0x01
    88ba:	8f 5f       	subi	r24, 0xFF	; 255
    88bc:	89 83       	std	Y+1, r24	; 0x01
    88be:	89 81       	ldd	r24, Y+1	; 0x01
    88c0:	80 31       	cpi	r24, 0x10	; 16
    88c2:	08 f4       	brcc	.+2      	; 0x88c6 <main+0x656>
    88c4:	a3 cf       	rjmp	.-186    	; 0x880c <main+0x59c>
					buttons[i].debounce_counter = 0;
				}
			}
			
			// Handle button state changes:
			for (i = 0; i < NUM_BUTTONS; i++) {
    88c6:	19 82       	std	Y+1, r1	; 0x01
    88c8:	90 c0       	rjmp	.+288    	; 0x89ea <main+0x77a>
				// Is the debounce counter pass its threshold?
				if (buttons[i].debounce_counter >= DEBOUNCE_PERIOD) {
    88ca:	89 81       	ldd	r24, Y+1	; 0x01
    88cc:	88 2f       	mov	r24, r24
    88ce:	90 e0       	ldi	r25, 0x00	; 0
    88d0:	88 0f       	add	r24, r24
    88d2:	99 1f       	adc	r25, r25
    88d4:	88 0f       	add	r24, r24
    88d6:	99 1f       	adc	r25, r25
    88d8:	8b 5f       	subi	r24, 0xFB	; 251
    88da:	9f 4d       	sbci	r25, 0xDF	; 223
    88dc:	dc 01       	movw	r26, r24
    88de:	8c 91       	ld	r24, X
    88e0:	84 30       	cpi	r24, 0x04	; 4
    88e2:	08 f4       	brcc	.+2      	; 0x88e6 <main+0x676>
    88e4:	7f c0       	rjmp	.+254    	; 0x89e4 <main+0x774>
					// Then we need to send a press/release event.
					
					// Clear the debounce counter:
					buttons[i].debounce_counter = 0;
    88e6:	89 81       	ldd	r24, Y+1	; 0x01
    88e8:	88 2f       	mov	r24, r24
    88ea:	90 e0       	ldi	r25, 0x00	; 0
    88ec:	88 0f       	add	r24, r24
    88ee:	99 1f       	adc	r25, r25
    88f0:	88 0f       	add	r24, r24
    88f2:	99 1f       	adc	r25, r25
    88f4:	8b 5f       	subi	r24, 0xFB	; 251
    88f6:	9f 4d       	sbci	r25, 0xDF	; 223
    88f8:	fc 01       	movw	r30, r24
    88fa:	10 82       	st	Z, r1

					// Is the button's state currently released?
					if (buttons[i].state == BUTTON_RELEASED) {
    88fc:	89 81       	ldd	r24, Y+1	; 0x01
    88fe:	88 2f       	mov	r24, r24
    8900:	90 e0       	ldi	r25, 0x00	; 0
    8902:	88 0f       	add	r24, r24
    8904:	99 1f       	adc	r25, r25
    8906:	88 0f       	add	r24, r24
    8908:	99 1f       	adc	r25, r25
    890a:	8a 5f       	subi	r24, 0xFA	; 250
    890c:	9f 4d       	sbci	r25, 0xDF	; 223
    890e:	dc 01       	movw	r26, r24
    8910:	8c 91       	ld	r24, X
    8912:	88 23       	and	r24, r24
    8914:	69 f4       	brne	.+26     	; 0x8930 <main+0x6c0>
						// Then it needs to change to pressed:
						buttons[i].state = BUTTON_PRESSED;
    8916:	89 81       	ldd	r24, Y+1	; 0x01
    8918:	88 2f       	mov	r24, r24
    891a:	90 e0       	ldi	r25, 0x00	; 0
    891c:	88 0f       	add	r24, r24
    891e:	99 1f       	adc	r25, r25
    8920:	88 0f       	add	r24, r24
    8922:	99 1f       	adc	r25, r25
    8924:	8a 5f       	subi	r24, 0xFA	; 250
    8926:	9f 4d       	sbci	r25, 0xDF	; 223
    8928:	21 e0       	ldi	r18, 0x01	; 1
    892a:	fc 01       	movw	r30, r24
    892c:	20 83       	st	Z, r18
    892e:	0b c0       	rjmp	.+22     	; 0x8946 <main+0x6d6>
					}
					else {
						// Otherwise it needs to change to release:
						buttons[i].state = BUTTON_RELEASED;
    8930:	89 81       	ldd	r24, Y+1	; 0x01
    8932:	88 2f       	mov	r24, r24
    8934:	90 e0       	ldi	r25, 0x00	; 0
    8936:	88 0f       	add	r24, r24
    8938:	99 1f       	adc	r25, r25
    893a:	88 0f       	add	r24, r24
    893c:	99 1f       	adc	r25, r25
    893e:	8a 5f       	subi	r24, 0xFA	; 250
    8940:	9f 4d       	sbci	r25, 0xDF	; 223
    8942:	dc 01       	movw	r26, r24
    8944:	1c 92       	st	X, r1
					}
					
                    tempBState = buttons[i].state;
    8946:	89 81       	ldd	r24, Y+1	; 0x01
    8948:	88 2f       	mov	r24, r24
    894a:	90 e0       	ldi	r25, 0x00	; 0
    894c:	88 0f       	add	r24, r24
    894e:	99 1f       	adc	r25, r25
    8950:	88 0f       	add	r24, r24
    8952:	99 1f       	adc	r25, r25
    8954:	8a 5f       	subi	r24, 0xFA	; 250
    8956:	9f 4d       	sbci	r25, 0xDF	; 223
    8958:	fc 01       	movw	r30, r24
    895a:	80 81       	ld	r24, Z
    895c:	89 87       	std	Y+9, r24	; 0x09

					// At this point the button has just changed states.
					// Time to notify the device/computer.
					if (button_handler != NULL) {
    895e:	80 91 49 28 	lds	r24, 0x2849
    8962:	90 91 4a 28 	lds	r25, 0x284A
    8966:	00 97       	sbiw	r24, 0x00	; 0
    8968:	41 f1       	breq	.+80     	; 0x89ba <main+0x74a>
						//TODO: optimize other modes to be like gamepad mode
						if( ccc.mode!=BTM_GAMEPAD )
    896a:	80 91 7c 28 	lds	r24, 0x287C
    896e:	82 30       	cpi	r24, 0x02	; 2
    8970:	49 f0       	breq	.+18     	; 0x8984 <main+0x714>
						{
							startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    8972:	ce 01       	movw	r24, r28
    8974:	8e 5b       	subi	r24, 0xBE	; 190
    8976:	9f 4f       	sbci	r25, 0xFF	; 255
    8978:	40 ee       	ldi	r20, 0xE0	; 224
    897a:	53 e9       	ldi	r21, 0x93	; 147
    897c:	64 e0       	ldi	r22, 0x04	; 4
    897e:	70 e0       	ldi	r23, 0x00	; 0
    8980:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
						}
						if( ccc.mode!=BTM_JOYSTICK_ANALOG )
    8984:	80 91 7c 28 	lds	r24, 0x287C
    8988:	87 30       	cpi	r24, 0x07	; 7
    898a:	49 f0       	breq	.+18     	; 0x899e <main+0x72e>
						{
							startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS);
    898c:	ce 01       	movw	r24, r28
    898e:	8e 5b       	subi	r24, 0xBE	; 190
    8990:	9f 4f       	sbci	r25, 0xFF	; 255
    8992:	40 ee       	ldi	r20, 0xE0	; 224
    8994:	53 e9       	ldi	r21, 0x93	; 147
    8996:	64 e0       	ldi	r22, 0x04	; 4
    8998:	70 e0       	ldi	r23, 0x00	; 0
    899a:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
						}
                        //filter sending subsequent B_START BUTTON_RELEASED event
                        if( !(B_START==i && BUTTON_RELEASED==tempBState) ) { 
    899e:	89 81       	ldd	r24, Y+1	; 0x01
    89a0:	88 30       	cpi	r24, 0x08	; 8
    89a2:	19 f4       	brne	.+6      	; 0x89aa <main+0x73a>
    89a4:	89 85       	ldd	r24, Y+9	; 0x09
    89a6:	88 23       	and	r24, r24
    89a8:	41 f0       	breq	.+16     	; 0x89ba <main+0x74a>
							  button_handler((enum ButtonName)i, tempBState);
    89aa:	20 91 49 28 	lds	r18, 0x2849
    89ae:	30 91 4a 28 	lds	r19, 0x284A
    89b2:	69 85       	ldd	r22, Y+9	; 0x09
    89b4:	89 81       	ldd	r24, Y+1	; 0x01
    89b6:	f9 01       	movw	r30, r18
    89b8:	09 95       	icall
                        }
					}
					
					//Only send 1 B_START pressed message for the press event, 
					//  and filter all subsequent pressed messages until released
					if( B_START==i && BUTTON_PRESSED==buttons[B_START].state )
    89ba:	89 81       	ldd	r24, Y+1	; 0x01
    89bc:	88 30       	cpi	r24, 0x08	; 8
    89be:	91 f4       	brne	.+36     	; 0x89e4 <main+0x774>
    89c0:	80 91 26 20 	lds	r24, 0x2026
    89c4:	81 30       	cpi	r24, 0x01	; 1
    89c6:	71 f4       	brne	.+28     	; 0x89e4 <main+0x774>
					{
						buttons[B_START].state = BUTTON_LONG_PRESS;
    89c8:	82 e0       	ldi	r24, 0x02	; 2
    89ca:	80 93 26 20 	sts	0x2026, r24
                        doStartRelease = true;
    89ce:	81 e0       	ldi	r24, 0x01	; 1
    89d0:	8c 83       	std	Y+4, r24	; 0x04
                        startTimeout(&startReleaseTimeout, START_RELEASE_DLY_MS); //schedule B_START BUTTON_RELEASED event after delay
    89d2:	ce 01       	movw	r24, r28
    89d4:	86 5b       	subi	r24, 0xB6	; 182
    89d6:	9f 4f       	sbci	r25, 0xFF	; 255
    89d8:	46 e9       	ldi	r20, 0x96	; 150
    89da:	50 e0       	ldi	r21, 0x00	; 0
    89dc:	60 e0       	ldi	r22, 0x00	; 0
    89de:	70 e0       	ldi	r23, 0x00	; 0
    89e0:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
					buttons[i].debounce_counter = 0;
				}
			}
			
			// Handle button state changes:
			for (i = 0; i < NUM_BUTTONS; i++) {
    89e4:	89 81       	ldd	r24, Y+1	; 0x01
    89e6:	8f 5f       	subi	r24, 0xFF	; 255
    89e8:	89 83       	std	Y+1, r24	; 0x01
    89ea:	89 81       	ldd	r24, Y+1	; 0x01
    89ec:	80 31       	cpi	r24, 0x10	; 16
    89ee:	08 f4       	brcc	.+2      	; 0x89f2 <main+0x782>
    89f0:	6c cf       	rjmp	.-296    	; 0x88ca <main+0x65a>
					}
				}
				
			}

            if( doStartRelease && checkTimeout(&startReleaseTimeout) ) {
    89f2:	8c 81       	ldd	r24, Y+4	; 0x04
    89f4:	88 23       	and	r24, r24
    89f6:	81 f0       	breq	.+32     	; 0x8a18 <main+0x7a8>
    89f8:	ce 01       	movw	r24, r28
    89fa:	86 5b       	subi	r24, 0xB6	; 182
    89fc:	9f 4f       	sbci	r25, 0xFF	; 255
    89fe:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    8a02:	88 23       	and	r24, r24
    8a04:	49 f0       	breq	.+18     	; 0x8a18 <main+0x7a8>
				button_handler( B_START, BUTTON_RELEASED );  //send message with B_START released
    8a06:	20 91 49 28 	lds	r18, 0x2849
    8a0a:	30 91 4a 28 	lds	r19, 0x284A
    8a0e:	60 e0       	ldi	r22, 0x00	; 0
    8a10:	88 e0       	ldi	r24, 0x08	; 8
    8a12:	f9 01       	movw	r30, r18
    8a14:	09 95       	icall
				doStartRelease = false;
    8a16:	1c 82       	std	Y+4, r1	; 0x04
            }

			
			// Start the power off timeout if the start button was just pressed:
			if (!possiblyPoweringOff && buttons[B_START].state != BUTTON_RELEASED ) {
    8a18:	9a 81       	ldd	r25, Y+2	; 0x02
    8a1a:	81 e0       	ldi	r24, 0x01	; 1
    8a1c:	89 27       	eor	r24, r25
    8a1e:	88 23       	and	r24, r24
    8a20:	d1 f0       	breq	.+52     	; 0x8a56 <main+0x7e6>
    8a22:	80 91 26 20 	lds	r24, 0x2026
    8a26:	88 23       	and	r24, r24
    8a28:	b1 f0       	breq	.+44     	; 0x8a56 <main+0x7e6>
				possiblyPoweringOff = true;
    8a2a:	81 e0       	ldi	r24, 0x01	; 1
    8a2c:	8a 83       	std	Y+2, r24	; 0x02
				startTimeout(&powerOffTimeout, ((uint32_t)global_header.sleep_delay) * 50);
    8a2e:	80 91 4f 28 	lds	r24, 0x284F
    8a32:	28 2f       	mov	r18, r24
    8a34:	30 e0       	ldi	r19, 0x00	; 0
    8a36:	40 e0       	ldi	r20, 0x00	; 0
    8a38:	50 e0       	ldi	r21, 0x00	; 0
    8a3a:	82 e3       	ldi	r24, 0x32	; 50
    8a3c:	90 e0       	ldi	r25, 0x00	; 0
    8a3e:	dc 01       	movw	r26, r24
    8a40:	0f d3       	rcall	.+1566   	; 0x9060 <__muluhisi3>
    8a42:	dc 01       	movw	r26, r24
    8a44:	cb 01       	movw	r24, r22
    8a46:	9e 01       	movw	r18, r28
    8a48:	26 5e       	subi	r18, 0xE6	; 230
    8a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    8a4c:	ac 01       	movw	r20, r24
    8a4e:	bd 01       	movw	r22, r26
    8a50:	c9 01       	movw	r24, r18
    8a52:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
			}
						
			// Cancel the power off timeout if the start button was released:
			if (possiblyPoweringOff && buttons[B_START].state == BUTTON_RELEASED) {
    8a56:	8a 81       	ldd	r24, Y+2	; 0x02
    8a58:	88 23       	and	r24, r24
    8a5a:	49 f0       	breq	.+18     	; 0x8a6e <main+0x7fe>
    8a5c:	80 91 26 20 	lds	r24, 0x2026
    8a60:	88 23       	and	r24, r24
    8a62:	29 f4       	brne	.+10     	; 0x8a6e <main+0x7fe>
				possiblyPoweringOff = false;
    8a64:	1a 82       	std	Y+2, r1	; 0x02
				cancelTimeout(&powerOffTimeout);
    8a66:	ce 01       	movw	r24, r28
    8a68:	4a 96       	adiw	r24, 0x1a	; 26
    8a6a:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <cancelTimeout>
			}
			
			if (!possiblyBiosMode && buttons[B_SELECT].state != BUTTON_RELEASED ) {
    8a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    8a70:	81 e0       	ldi	r24, 0x01	; 1
    8a72:	89 27       	eor	r24, r25
    8a74:	88 23       	and	r24, r24
    8a76:	e9 f0       	breq	.+58     	; 0x8ab2 <main+0x842>
    8a78:	80 91 2a 20 	lds	r24, 0x202A
    8a7c:	88 23       	and	r24, r24
    8a7e:	c9 f0       	breq	.+50     	; 0x8ab2 <main+0x842>
				possiblyBiosMode = true;
    8a80:	81 e0       	ldi	r24, 0x01	; 1
    8a82:	8b 83       	std	Y+3, r24	; 0x03
				startTimeout(&biosModeTimeout, 2*((uint32_t)global_header.sleep_delay) * 50);
    8a84:	80 91 4f 28 	lds	r24, 0x284F
    8a88:	28 2f       	mov	r18, r24
    8a8a:	30 e0       	ldi	r19, 0x00	; 0
    8a8c:	40 e0       	ldi	r20, 0x00	; 0
    8a8e:	50 e0       	ldi	r21, 0x00	; 0
    8a90:	84 e6       	ldi	r24, 0x64	; 100
    8a92:	90 e0       	ldi	r25, 0x00	; 0
    8a94:	dc 01       	movw	r26, r24
    8a96:	e4 d2       	rcall	.+1480   	; 0x9060 <__muluhisi3>
    8a98:	dc 01       	movw	r26, r24
    8a9a:	cb 01       	movw	r24, r22
    8a9c:	9e 01       	movw	r18, r28
    8a9e:	2e 5d       	subi	r18, 0xDE	; 222
    8aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    8aa2:	ac 01       	movw	r20, r24
    8aa4:	bd 01       	movw	r22, r26
    8aa6:	c9 01       	movw	r24, r18
    8aa8:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
				displayWhichConfiguration(which_cfg);
    8aac:	88 85       	ldd	r24, Y+8	; 0x08
    8aae:	0e 94 02 11 	call	0x2204	; 0x2204 <displayWhichConfiguration>
			}
			
			
			if (possiblyBiosMode && buttons[B_SELECT].state == BUTTON_RELEASED) {
    8ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    8ab4:	88 23       	and	r24, r24
    8ab6:	49 f0       	breq	.+18     	; 0x8aca <main+0x85a>
    8ab8:	80 91 2a 20 	lds	r24, 0x202A
    8abc:	88 23       	and	r24, r24
    8abe:	29 f4       	brne	.+10     	; 0x8aca <main+0x85a>
				possiblyBiosMode = false;
    8ac0:	1b 82       	std	Y+3, r1	; 0x03
				cancelTimeout(&biosModeTimeout);
    8ac2:	ce 01       	movw	r24, r28
    8ac4:	82 96       	adiw	r24, 0x22	; 34
    8ac6:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <cancelTimeout>
			}
			
		}
		if (checkTimeout(&joystickSampleTimeout)) {
    8aca:	ce 01       	movw	r24, r28
    8acc:	42 96       	adiw	r24, 0x12	; 18
    8ace:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    8ad2:	88 23       	and	r24, r24
    8ad4:	09 f4       	brne	.+2      	; 0x8ad8 <main+0x868>
    8ad6:	9d c0       	rjmp	.+314    	; 0x8c12 <main+0x9a2>
			startTimeout(&joystickSampleTimeout, JOYSTICK_SAMPLE_TIMEOUT_MS);
    8ad8:	ce 01       	movw	r24, r28
    8ada:	42 96       	adiw	r24, 0x12	; 18
    8adc:	46 e0       	ldi	r20, 0x06	; 6
    8ade:	50 e0       	ldi	r21, 0x00	; 0
    8ae0:	60 e0       	ldi	r22, 0x00	; 0
    8ae2:	70 e0       	ldi	r23, 0x00	; 0
    8ae4:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
			
			// Sample each of the joysticks:
			for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    8ae8:	19 82       	std	Y+1, r1	; 0x01
    8aea:	8f c0       	rjmp	.+286    	; 0x8c0a <main+0x99a>
				//joysticks[i].previous_x = joysticks[i].current_x;
				joysticks[i].current_x  = sampleAnalogChannel(joysticks[i].adc_channel_x);
    8aec:	89 81       	ldd	r24, Y+1	; 0x01
    8aee:	08 2f       	mov	r16, r24
    8af0:	10 e0       	ldi	r17, 0x00	; 0
    8af2:	89 81       	ldd	r24, Y+1	; 0x01
    8af4:	88 2f       	mov	r24, r24
    8af6:	90 e0       	ldi	r25, 0x00	; 0
    8af8:	88 0f       	add	r24, r24
    8afa:	99 1f       	adc	r25, r25
    8afc:	9c 01       	movw	r18, r24
    8afe:	22 0f       	add	r18, r18
    8b00:	33 1f       	adc	r19, r19
    8b02:	22 0f       	add	r18, r18
    8b04:	33 1f       	adc	r19, r19
    8b06:	22 0f       	add	r18, r18
    8b08:	33 1f       	adc	r19, r19
    8b0a:	28 1b       	sub	r18, r24
    8b0c:	39 0b       	sbc	r19, r25
    8b0e:	c9 01       	movw	r24, r18
    8b10:	8a 5a       	subi	r24, 0xAA	; 170
    8b12:	9f 4d       	sbci	r25, 0xDF	; 223
    8b14:	dc 01       	movw	r26, r24
    8b16:	8c 91       	ld	r24, X
    8b18:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    8b1c:	ac 01       	movw	r20, r24
    8b1e:	c8 01       	movw	r24, r16
    8b20:	88 0f       	add	r24, r24
    8b22:	99 1f       	adc	r25, r25
    8b24:	9c 01       	movw	r18, r24
    8b26:	22 0f       	add	r18, r18
    8b28:	33 1f       	adc	r19, r19
    8b2a:	22 0f       	add	r18, r18
    8b2c:	33 1f       	adc	r19, r19
    8b2e:	22 0f       	add	r18, r18
    8b30:	33 1f       	adc	r19, r19
    8b32:	28 1b       	sub	r18, r24
    8b34:	39 0b       	sbc	r19, r25
    8b36:	c9 01       	movw	r24, r18
    8b38:	80 5a       	subi	r24, 0xA0	; 160
    8b3a:	9f 4d       	sbci	r25, 0xDF	; 223
    8b3c:	fc 01       	movw	r30, r24
    8b3e:	40 83       	st	Z, r20
    8b40:	51 83       	std	Z+1, r21	; 0x01
				
				//joysticks[i].previous_y = joysticks[i].current_y;
				joysticks[i].current_y  = sampleAnalogChannel(joysticks[i].adc_channel_y);
    8b42:	89 81       	ldd	r24, Y+1	; 0x01
    8b44:	08 2f       	mov	r16, r24
    8b46:	10 e0       	ldi	r17, 0x00	; 0
    8b48:	89 81       	ldd	r24, Y+1	; 0x01
    8b4a:	88 2f       	mov	r24, r24
    8b4c:	90 e0       	ldi	r25, 0x00	; 0
    8b4e:	88 0f       	add	r24, r24
    8b50:	99 1f       	adc	r25, r25
    8b52:	9c 01       	movw	r18, r24
    8b54:	22 0f       	add	r18, r18
    8b56:	33 1f       	adc	r19, r19
    8b58:	22 0f       	add	r18, r18
    8b5a:	33 1f       	adc	r19, r19
    8b5c:	22 0f       	add	r18, r18
    8b5e:	33 1f       	adc	r19, r19
    8b60:	28 1b       	sub	r18, r24
    8b62:	39 0b       	sbc	r19, r25
    8b64:	c9 01       	movw	r24, r18
    8b66:	89 5a       	subi	r24, 0xA9	; 169
    8b68:	9f 4d       	sbci	r25, 0xDF	; 223
    8b6a:	dc 01       	movw	r26, r24
    8b6c:	8c 91       	ld	r24, X
    8b6e:	0e 94 ef 03 	call	0x7de	; 0x7de <sampleAnalogChannel>
    8b72:	ac 01       	movw	r20, r24
    8b74:	c8 01       	movw	r24, r16
    8b76:	88 0f       	add	r24, r24
    8b78:	99 1f       	adc	r25, r25
    8b7a:	9c 01       	movw	r18, r24
    8b7c:	22 0f       	add	r18, r18
    8b7e:	33 1f       	adc	r19, r19
    8b80:	22 0f       	add	r18, r18
    8b82:	33 1f       	adc	r19, r19
    8b84:	22 0f       	add	r18, r18
    8b86:	33 1f       	adc	r19, r19
    8b88:	28 1b       	sub	r18, r24
    8b8a:	39 0b       	sbc	r19, r25
    8b8c:	c9 01       	movw	r24, r18
    8b8e:	8e 59       	subi	r24, 0x9E	; 158
    8b90:	9f 4d       	sbci	r25, 0xDF	; 223
    8b92:	fc 01       	movw	r30, r24
    8b94:	40 83       	st	Z, r20
    8b96:	51 83       	std	Z+1, r21	; 0x01
				
				if (joystick_handler != NULL) 
    8b98:	80 91 4b 28 	lds	r24, 0x284B
    8b9c:	90 91 4c 28 	lds	r25, 0x284C
    8ba0:	00 97       	sbiw	r24, 0x00	; 0
    8ba2:	81 f1       	breq	.+96     	; 0x8c04 <main+0x994>
				{
					joystick_handler((enum JoystickName)i, joysticks[i].current_x, joysticks[i].current_y);
    8ba4:	e0 91 4b 28 	lds	r30, 0x284B
    8ba8:	f0 91 4c 28 	lds	r31, 0x284C
    8bac:	89 81       	ldd	r24, Y+1	; 0x01
    8bae:	88 2f       	mov	r24, r24
    8bb0:	90 e0       	ldi	r25, 0x00	; 0
    8bb2:	88 0f       	add	r24, r24
    8bb4:	99 1f       	adc	r25, r25
    8bb6:	9c 01       	movw	r18, r24
    8bb8:	22 0f       	add	r18, r18
    8bba:	33 1f       	adc	r19, r19
    8bbc:	22 0f       	add	r18, r18
    8bbe:	33 1f       	adc	r19, r19
    8bc0:	22 0f       	add	r18, r18
    8bc2:	33 1f       	adc	r19, r19
    8bc4:	28 1b       	sub	r18, r24
    8bc6:	39 0b       	sbc	r19, r25
    8bc8:	c9 01       	movw	r24, r18
    8bca:	8e 59       	subi	r24, 0x9E	; 158
    8bcc:	9f 4d       	sbci	r25, 0xDF	; 223
    8bce:	dc 01       	movw	r26, r24
    8bd0:	8d 91       	ld	r24, X+
    8bd2:	9c 91       	ld	r25, X
    8bd4:	ac 01       	movw	r20, r24
    8bd6:	89 81       	ldd	r24, Y+1	; 0x01
    8bd8:	88 2f       	mov	r24, r24
    8bda:	90 e0       	ldi	r25, 0x00	; 0
    8bdc:	88 0f       	add	r24, r24
    8bde:	99 1f       	adc	r25, r25
    8be0:	9c 01       	movw	r18, r24
    8be2:	22 0f       	add	r18, r18
    8be4:	33 1f       	adc	r19, r19
    8be6:	22 0f       	add	r18, r18
    8be8:	33 1f       	adc	r19, r19
    8bea:	22 0f       	add	r18, r18
    8bec:	33 1f       	adc	r19, r19
    8bee:	28 1b       	sub	r18, r24
    8bf0:	39 0b       	sbc	r19, r25
    8bf2:	c9 01       	movw	r24, r18
    8bf4:	80 5a       	subi	r24, 0xA0	; 160
    8bf6:	9f 4d       	sbci	r25, 0xDF	; 223
    8bf8:	dc 01       	movw	r26, r24
    8bfa:	8d 91       	ld	r24, X+
    8bfc:	9c 91       	ld	r25, X
    8bfe:	bc 01       	movw	r22, r24
    8c00:	89 81       	ldd	r24, Y+1	; 0x01
    8c02:	09 95       	icall
		}
		if (checkTimeout(&joystickSampleTimeout)) {
			startTimeout(&joystickSampleTimeout, JOYSTICK_SAMPLE_TIMEOUT_MS);
			
			// Sample each of the joysticks:
			for (i = 0 ; i < NUM_JOYSTICKS; i++) {
    8c04:	89 81       	ldd	r24, Y+1	; 0x01
    8c06:	8f 5f       	subi	r24, 0xFF	; 255
    8c08:	89 83       	std	Y+1, r24	; 0x01
    8c0a:	89 81       	ldd	r24, Y+1	; 0x01
    8c0c:	82 30       	cpi	r24, 0x02	; 2
    8c0e:	08 f4       	brcc	.+2      	; 0x8c12 <main+0x9a2>
    8c10:	6d cf       	rjmp	.-294    	; 0x8aec <main+0x87c>
		//startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS); //<---- Effectively disables auto-poweroff for battery charge tweaking
        //#endif
		
		// Check if the start button has been held long enough to turn the device off:
		// Check if controller has been sitting idle long enough to turn the device off:
		if( checkTimeout(&powerOffTimeout) || checkTimeout(&powerOffUnused) )
    8c12:	ce 01       	movw	r24, r28
    8c14:	4a 96       	adiw	r24, 0x1a	; 26
    8c16:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    8c1a:	88 23       	and	r24, r24
    8c1c:	39 f4       	brne	.+14     	; 0x8c2c <main+0x9bc>
    8c1e:	ce 01       	movw	r24, r28
    8c20:	8e 5b       	subi	r24, 0xBE	; 190
    8c22:	9f 4f       	sbci	r25, 0xFF	; 255
    8c24:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    8c28:	88 23       	and	r24, r24
    8c2a:	69 f1       	breq	.+90     	; 0x8c86 <main+0xa16>
		{
			cancelTimeout(&powerOffTimeout);
    8c2c:	ce 01       	movw	r24, r28
    8c2e:	4a 96       	adiw	r24, 0x1a	; 26
    8c30:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <cancelTimeout>
			//cancelTimeout(&powerOffUnused);
			//starting the timer is more correct than cancel:
			//chargingDone prevents poweroff, so no reboot to restart the timer, then unplug charger, then don't press any buttons -
			//  powerOffUnused timer is still unplugged, so the controller will stay on until a button is pressed to start the timer or
			//  battery voltage drops
			startTimeout(&powerOffUnused, POWER_OFF_UNUSED_MS); 
    8c34:	ce 01       	movw	r24, r28
    8c36:	8e 5b       	subi	r24, 0xBE	; 190
    8c38:	9f 4f       	sbci	r25, 0xFF	; 255
    8c3a:	40 ee       	ldi	r20, 0xE0	; 224
    8c3c:	53 e9       	ldi	r21, 0x93	; 147
    8c3e:	64 e0       	ldi	r22, 0x04	; 4
    8c40:	70 e0       	ldi	r23, 0x00	; 0
    8c42:	0e 94 12 26 	call	0x4c24	; 0x4c24 <startTimeout>
			
			chargingDone = IsChargingDone(); //could have used logical-AND short circuiting above, but this is clearer
    8c46:	0e 94 f4 06 	call	0xde8	; 0xde8 <IsChargingDone>
    8c4a:	8f 83       	std	Y+7, r24	; 0x07
			//when chargingDone, don't poweroff 
			//(when the controller is unplugged, chargingDone will deassert and allow poweroff again)
			if( !chargingDone )
    8c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    8c4e:	81 e0       	ldi	r24, 0x01	; 1
    8c50:	89 27       	eor	r24, r25
    8c52:	88 23       	and	r24, r24
    8c54:	c1 f0       	breq	.+48     	; 0x8c86 <main+0xa16>
			{
				setLEDValue(LED_OFF, LED_OFF, LED_OFF);
    8c56:	40 e0       	ldi	r20, 0x00	; 0
    8c58:	60 e0       	ldi	r22, 0x00	; 0
    8c5a:	80 e0       	ldi	r24, 0x00	; 0
    8c5c:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
				powerOff(global_header.powerOffSoftware);
    8c60:	80 91 54 28 	lds	r24, 0x2854
    8c64:	88 1f       	adc	r24, r24
    8c66:	88 27       	eor	r24, r24
    8c68:	88 1f       	adc	r24, r24
    8c6a:	90 91 55 28 	lds	r25, 0x2855
    8c6e:	9f 73       	andi	r25, 0x3F	; 63
    8c70:	99 0f       	add	r25, r25
    8c72:	89 2b       	or	r24, r25
    8c74:	88 2f       	mov	r24, r24
    8c76:	90 e0       	ldi	r25, 0x00	; 0
    8c78:	21 e0       	ldi	r18, 0x01	; 1
    8c7a:	00 97       	sbiw	r24, 0x00	; 0
    8c7c:	09 f4       	brne	.+2      	; 0x8c80 <main+0xa10>
    8c7e:	20 e0       	ldi	r18, 0x00	; 0
    8c80:	82 2f       	mov	r24, r18
    8c82:	0e 94 91 23 	call	0x4722	; 0x4722 <powerOff>
			}
		}
		
		// Check if the select button has been held long enough to clear paired bluetooth list:
		if( checkTimeout(&biosModeTimeout) )
    8c86:	ce 01       	movw	r24, r28
    8c88:	82 96       	adiw	r24, 0x22	; 34
    8c8a:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <checkTimeout>
    8c8e:	88 23       	and	r24, r24
    8c90:	b1 f0       	breq	.+44     	; 0x8cbe <main+0xa4e>
		{
			cancelTimeout(&biosModeTimeout);
    8c92:	ce 01       	movw	r24, r28
    8c94:	82 96       	adiw	r24, 0x22	; 34
    8c96:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <cancelTimeout>
			bt_exitBypass();
    8c9a:	8a d9       	rcall	.-3308   	; 0x7fb0 <bt_exitBypass>
			btClearAutoConnectList();
    8c9c:	16 da       	rcall	.-3028   	; 0x80ca <btClearAutoConnectList>
			setLEDValue(LED_OFF, LED_OFF, LED_OFF); //off
    8c9e:	40 e0       	ldi	r20, 0x00	; 0
    8ca0:	60 e0       	ldi	r22, 0x00	; 0
    8ca2:	80 e0       	ldi	r24, 0x00	; 0
    8ca4:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
			setLEDValue(LED_OFF, LED_DIM, LED_OFF); //green
    8ca8:	40 e0       	ldi	r20, 0x00	; 0
    8caa:	61 e0       	ldi	r22, 0x01	; 1
    8cac:	80 e0       	ldi	r24, 0x00	; 0
    8cae:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <setLEDValue>
			delay_ms(2000);
    8cb2:	6b ea       	ldi	r22, 0xAB	; 171
    8cb4:	72 ec       	ldi	r23, 0xC2	; 194
    8cb6:	82 ea       	ldi	r24, 0xA2	; 162
    8cb8:	90 e0       	ldi	r25, 0x00	; 0
    8cba:	c8 da       	rcall	.-2672   	; 0x824c <__portable_avr_delay_cycles>
			reset_do_soft_reset();
    8cbc:	bd da       	rcall	.-2694   	; 0x8238 <reset_do_soft_reset>
		}
		
		// If button start and button select pressed send the bluetooth consumer report home key event.
		if (buttonActivated(B_START) & buttonActivated(B_SELECT))
    8cbe:	88 e0       	ldi	r24, 0x08	; 8
    8cc0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    8cc4:	08 2f       	mov	r16, r24
    8cc6:	10 e0       	ldi	r17, 0x00	; 0
    8cc8:	89 e0       	ldi	r24, 0x09	; 9
    8cca:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <buttonActivated>
    8cce:	88 2f       	mov	r24, r24
    8cd0:	90 e0       	ldi	r25, 0x00	; 0
    8cd2:	80 23       	and	r24, r16
    8cd4:	91 23       	and	r25, r17
    8cd6:	00 97       	sbiw	r24, 0x00	; 0
    8cd8:	31 f0       	breq	.+12     	; 0x8ce6 <main+0xa76>
		{
			delay_ms(250);
    8cda:	65 e5       	ldi	r22, 0x55	; 85
    8cdc:	78 e5       	ldi	r23, 0x58	; 88
    8cde:	84 e1       	ldi	r24, 0x14	; 20
    8ce0:	90 e0       	ldi	r25, 0x00	; 0
    8ce2:	b4 da       	rcall	.-2712   	; 0x824c <__portable_avr_delay_cycles>
			bt_homeButton();
    8ce4:	7d d9       	rcall	.-3334   	; 0x7fe0 <bt_homeButton>
		}
		
		// Check for commands from the computer (e.g. reset for bootloader entry):
		processComm();
    8ce6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <processComm>
	}
    8cea:	b4 cc       	rjmp	.-1688   	; 0x8654 <main+0x3e4>

00008cec <sysTickCallback>:
}

void sysTickCallback(void) {
    8cec:	cf 93       	push	r28
    8cee:	df 93       	push	r29
    8cf0:	cd b7       	in	r28, 0x3d	; 61
    8cf2:	de b7       	in	r29, 0x3e	; 62
	static unsigned int wdtCheckCount = 0;
	// Clear the interrupt flag:
	clearSysTickFlag();
    8cf4:	0e 94 91 27 	call	0x4f22	; 0x4f22 <clearSysTickFlag>
	
	// Increment system time:
	tickSystemTime();
    8cf8:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <tickSystemTime>
	
	/* Check for time to validate system is still running */
	wdtCheckCount++;
    8cfc:	80 91 4d 28 	lds	r24, 0x284D
    8d00:	90 91 4e 28 	lds	r25, 0x284E
    8d04:	01 96       	adiw	r24, 0x01	; 1
    8d06:	80 93 4d 28 	sts	0x284D, r24
    8d0a:	90 93 4e 28 	sts	0x284E, r25
	if (wdtCheckCount >= SYSTICK_FREQUENCY) {
    8d0e:	80 91 4d 28 	lds	r24, 0x284D
    8d12:	90 91 4e 28 	lds	r25, 0x284E
    8d16:	88 3e       	cpi	r24, 0xE8	; 232
    8d18:	23 e0       	ldi	r18, 0x03	; 3
    8d1a:	92 07       	cpc	r25, r18
    8d1c:	30 f0       	brcs	.+12     	; 0x8d2a <sysTickCallback+0x3e>
		wdtCheckCount = 0;
    8d1e:	10 92 4d 28 	sts	0x284D, r1
    8d22:	10 92 4e 28 	sts	0x284E, r1
		WatchdogValidate();
    8d26:	0e 94 a6 29 	call	0x534c	; 0x534c <WatchdogValidate>
	}
}
    8d2a:	df 91       	pop	r29
    8d2c:	cf 91       	pop	r28
    8d2e:	08 95       	ret

00008d30 <selectHandlers>:

void selectHandlers(void) {
    8d30:	cf 93       	push	r28
    8d32:	df 93       	push	r29
    8d34:	cd b7       	in	r28, 0x3d	; 61
    8d36:	de b7       	in	r29, 0x3e	; 62
	switch (ccc.mode) {
    8d38:	80 91 7c 28 	lds	r24, 0x287C
    8d3c:	88 2f       	mov	r24, r24
    8d3e:	90 e0       	ldi	r25, 0x00	; 0
    8d40:	82 30       	cpi	r24, 0x02	; 2
    8d42:	91 05       	cpc	r25, r1
    8d44:	09 f4       	brne	.+2      	; 0x8d48 <selectHandlers+0x18>
    8d46:	5a c0       	rjmp	.+180    	; 0x8dfc <selectHandlers+0xcc>
    8d48:	83 30       	cpi	r24, 0x03	; 3
    8d4a:	91 05       	cpc	r25, r1
    8d4c:	34 f4       	brge	.+12     	; 0x8d5a <selectHandlers+0x2a>
    8d4e:	00 97       	sbiw	r24, 0x00	; 0
    8d50:	79 f1       	breq	.+94     	; 0x8db0 <selectHandlers+0x80>
    8d52:	81 30       	cpi	r24, 0x01	; 1
    8d54:	91 05       	cpc	r25, r1
    8d56:	d9 f0       	breq	.+54     	; 0x8d8e <selectHandlers+0x5e>
    8d58:	64 c0       	rjmp	.+200    	; 0x8e22 <selectHandlers+0xf2>
    8d5a:	84 30       	cpi	r24, 0x04	; 4
    8d5c:	91 05       	cpc	r25, r1
    8d5e:	21 f0       	breq	.+8      	; 0x8d68 <selectHandlers+0x38>
    8d60:	87 30       	cpi	r24, 0x07	; 7
    8d62:	91 05       	cpc	r25, r1
    8d64:	c1 f1       	breq	.+112    	; 0x8dd6 <selectHandlers+0xa6>
    8d66:	5d c0       	rjmp	.+186    	; 0x8e22 <selectHandlers+0xf2>
		case BTM_KEYBOARD_MOUSE:
			button_handler_init = &keyboardMouseInit;
    8d68:	87 e5       	ldi	r24, 0x57	; 87
    8d6a:	9c e1       	ldi	r25, 0x1C	; 28
    8d6c:	80 93 47 28 	sts	0x2847, r24
    8d70:	90 93 48 28 	sts	0x2848, r25
			button_handler      = &keyboadMouseButtonHandler;
    8d74:	83 e7       	ldi	r24, 0x73	; 115
    8d76:	9c e1       	ldi	r25, 0x1C	; 28
    8d78:	80 93 49 28 	sts	0x2849, r24
    8d7c:	90 93 4a 28 	sts	0x284A, r25
			joystick_handler    = &keyboardMouseJoystickHandler;
    8d80:	82 e8       	ldi	r24, 0x82	; 130
    8d82:	9c e1       	ldi	r25, 0x1C	; 28
    8d84:	80 93 4b 28 	sts	0x284B, r24
    8d88:	90 93 4c 28 	sts	0x284C, r25
			break;
    8d8c:	57 c0       	rjmp	.+174    	; 0x8e3c <selectHandlers+0x10c>
			
		case BTM_IOS_KEYBOARD:
			button_handler_init = &keyboardiOSInit;
    8d8e:	8a e2       	ldi	r24, 0x2A	; 42
    8d90:	9a e0       	ldi	r25, 0x0A	; 10
    8d92:	80 93 47 28 	sts	0x2847, r24
    8d96:	90 93 48 28 	sts	0x2848, r25
			button_handler      = &keyboardiOSButtonHandler;
    8d9a:	8e e3       	ldi	r24, 0x3E	; 62
    8d9c:	9a e0       	ldi	r25, 0x0A	; 10
    8d9e:	80 93 49 28 	sts	0x2849, r24
    8da2:	90 93 4a 28 	sts	0x284A, r25
			joystick_handler    = NULL;
    8da6:	10 92 4b 28 	sts	0x284B, r1
    8daa:	10 92 4c 28 	sts	0x284C, r1
			break;
    8dae:	46 c0       	rjmp	.+140    	; 0x8e3c <selectHandlers+0x10c>

		case BTM_KEYBOARD:
			button_handler_init = &keyboardInit;
    8db0:	84 e5       	ldi	r24, 0x54	; 84
    8db2:	99 e1       	ldi	r25, 0x19	; 25
    8db4:	80 93 47 28 	sts	0x2847, r24
    8db8:	90 93 48 28 	sts	0x2848, r25
			button_handler      = &keyboardButtonHandler;
    8dbc:	88 e6       	ldi	r24, 0x68	; 104
    8dbe:	99 e1       	ldi	r25, 0x19	; 25
    8dc0:	80 93 49 28 	sts	0x2849, r24
    8dc4:	90 93 4a 28 	sts	0x284A, r25
			joystick_handler    = &keyboardJoystickHandler;
    8dc8:	87 e7       	ldi	r24, 0x77	; 119
    8dca:	99 e1       	ldi	r25, 0x19	; 25
    8dcc:	80 93 4b 28 	sts	0x284B, r24
    8dd0:	90 93 4c 28 	sts	0x284C, r25
			break;
    8dd4:	33 c0       	rjmp	.+102    	; 0x8e3c <selectHandlers+0x10c>
		
		case BTM_JOYSTICK_ANALOG:
			button_handler_init = &jStickInit;
    8dd6:	8f e2       	ldi	r24, 0x2F	; 47
    8dd8:	96 e1       	ldi	r25, 0x16	; 22
    8dda:	80 93 47 28 	sts	0x2847, r24
    8dde:	90 93 48 28 	sts	0x2848, r25
			button_handler      = &jStickButtonHandler;
    8de2:	81 eb       	ldi	r24, 0xB1	; 177
    8de4:	96 e1       	ldi	r25, 0x16	; 22
    8de6:	80 93 49 28 	sts	0x2849, r24
    8dea:	90 93 4a 28 	sts	0x284A, r25
			joystick_handler    = &jStickJoystickHandler;
    8dee:	82 ec       	ldi	r24, 0xC2	; 194
    8df0:	98 e1       	ldi	r25, 0x18	; 24
    8df2:	80 93 4b 28 	sts	0x284B, r24
    8df6:	90 93 4c 28 	sts	0x284C, r25
			break;
    8dfa:	20 c0       	rjmp	.+64     	; 0x8e3c <selectHandlers+0x10c>
		
		case BTM_GAMEPAD:
			button_handler_init = &gamepadInit;
    8dfc:	8e ed       	ldi	r24, 0xDE	; 222
    8dfe:	91 e1       	ldi	r25, 0x11	; 17
    8e00:	80 93 47 28 	sts	0x2847, r24
    8e04:	90 93 48 28 	sts	0x2848, r25
			button_handler      = &gamepadButtonHandler;
    8e08:	80 e6       	ldi	r24, 0x60	; 96
    8e0a:	92 e1       	ldi	r25, 0x12	; 18
    8e0c:	80 93 49 28 	sts	0x2849, r24
    8e10:	90 93 4a 28 	sts	0x284A, r25
			joystick_handler    = &gamepadJoystickHandler;
    8e14:	8d e9       	ldi	r24, 0x9D	; 157
    8e16:	95 e1       	ldi	r25, 0x15	; 21
    8e18:	80 93 4b 28 	sts	0x284B, r24
    8e1c:	90 93 4c 28 	sts	0x284C, r25
			break;
    8e20:	0d c0       	rjmp	.+26     	; 0x8e3c <selectHandlers+0x10c>
		
		default:
			button_handler_init = NULL;
    8e22:	10 92 47 28 	sts	0x2847, r1
    8e26:	10 92 48 28 	sts	0x2848, r1
			button_handler      = NULL;
    8e2a:	10 92 49 28 	sts	0x2849, r1
    8e2e:	10 92 4a 28 	sts	0x284A, r1
			joystick_handler    = NULL;
    8e32:	10 92 4b 28 	sts	0x284B, r1
    8e36:	10 92 4c 28 	sts	0x284C, r1
			break;
    8e3a:	00 00       	nop
	}
}
    8e3c:	df 91       	pop	r29
    8e3e:	cf 91       	pop	r28
    8e40:	08 95       	ret

00008e42 <SetupStartPinExternalInterrupt>:

//Setup START_PIN external interrupt
void SetupStartPinExternalInterrupt()
{
    8e42:	cf 93       	push	r28
    8e44:	df 93       	push	r29
    8e46:	cd b7       	in	r28, 0x3d	; 61
    8e48:	de b7       	in	r29, 0x3e	; 62
    8e4a:	2a 97       	sbiw	r28, 0x0a	; 10
    8e4c:	cd bf       	out	0x3d, r28	; 61
    8e4e:	de bf       	out	0x3e, r29	; 62
	irqflags_t flags;
	flags = cpu_irq_save();
    8e50:	71 d9       	rcall	.-3358   	; 0x8134 <cpu_irq_save>
    8e52:	89 83       	std	Y+1, r24	; 0x01
	
	PORTF_INT0MASK = 1u<<2; //Set PORTF interrupt on PORTF.2 pin
    8e54:	8a ea       	ldi	r24, 0xAA	; 170
    8e56:	96 e0       	ldi	r25, 0x06	; 6
    8e58:	24 e0       	ldi	r18, 0x04	; 4
    8e5a:	fc 01       	movw	r30, r24
    8e5c:	20 83       	st	Z, r18
    8e5e:	8a e2       	ldi	r24, 0x2A	; 42
    8e60:	8a 83       	std	Y+2, r24	; 0x02
    8e62:	81 e0       	ldi	r24, 0x01	; 1
    8e64:	8b 83       	std	Y+3, r24	; 0x03
    8e66:	8a 81       	ldd	r24, Y+2	; 0x02
    8e68:	8c 83       	std	Y+4, r24	; 0x04
    8e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    8e6c:	8d 83       	std	Y+5, r24	; 0x05
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static inline ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    8e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    8e70:	86 95       	lsr	r24
    8e72:	86 95       	lsr	r24
    8e74:	86 95       	lsr	r24
    8e76:	8e 83       	std	Y+6, r24	; 0x06
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    8e78:	8e 81       	ldd	r24, Y+6	; 0x06
    8e7a:	88 2f       	mov	r24, r24
    8e7c:	90 e0       	ldi	r25, 0x00	; 0
    8e7e:	88 0f       	add	r24, r24
    8e80:	99 1f       	adc	r25, r25
    8e82:	82 95       	swap	r24
    8e84:	92 95       	swap	r25
    8e86:	90 7f       	andi	r25, 0xF0	; 240
    8e88:	98 27       	eor	r25, r24
    8e8a:	80 7f       	andi	r24, 0xF0	; 240
    8e8c:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    8e8e:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
    8e90:	8f 83       	std	Y+7, r24	; 0x07
    8e92:	98 87       	std	Y+8, r25	; 0x08

	uint8_t flags = cpu_irq_save();
    8e94:	4f d9       	rcall	.-3426   	; 0x8134 <cpu_irq_save>
    8e96:	89 87       	std	Y+9, r24	; 0x09

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
    8e98:	80 eb       	ldi	r24, 0xB0	; 176
    8e9a:	90 e0       	ldi	r25, 0x00	; 0
    8e9c:	2a 81       	ldd	r18, Y+2	; 0x02
    8e9e:	2a 87       	std	Y+10, r18	; 0x0a
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    8ea0:	2a 85       	ldd	r18, Y+10	; 0x0a
    8ea2:	22 2f       	mov	r18, r18
    8ea4:	30 e0       	ldi	r19, 0x00	; 0
    8ea6:	a9 01       	movw	r20, r18
    8ea8:	47 70       	andi	r20, 0x07	; 7
    8eaa:	55 27       	eor	r21, r21
    8eac:	21 e0       	ldi	r18, 0x01	; 1
    8eae:	30 e0       	ldi	r19, 0x00	; 0
    8eb0:	02 c0       	rjmp	.+4      	; 0x8eb6 <SetupStartPinExternalInterrupt+0x74>
    8eb2:	22 0f       	add	r18, r18
    8eb4:	33 1f       	adc	r19, r19
    8eb6:	4a 95       	dec	r20
    8eb8:	e2 f7       	brpl	.-8      	; 0x8eb2 <SetupStartPinExternalInterrupt+0x70>
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	uint8_t flags = cpu_irq_save();

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
    8eba:	fc 01       	movw	r30, r24
    8ebc:	20 83       	st	Z, r18

	base->PIN0CTRL &= ~PORT_ISC_gm;
    8ebe:	8f 81       	ldd	r24, Y+7	; 0x07
    8ec0:	98 85       	ldd	r25, Y+8	; 0x08
    8ec2:	fc 01       	movw	r30, r24
    8ec4:	80 89       	ldd	r24, Z+16	; 0x10
    8ec6:	28 2f       	mov	r18, r24
    8ec8:	28 7f       	andi	r18, 0xF8	; 248
    8eca:	8f 81       	ldd	r24, Y+7	; 0x07
    8ecc:	98 85       	ldd	r25, Y+8	; 0x08
    8ece:	fc 01       	movw	r30, r24
    8ed0:	20 8b       	std	Z+16, r18	; 0x10
	base->PIN0CTRL |= (pin_sense & PORT_ISC_gm);
    8ed2:	8f 81       	ldd	r24, Y+7	; 0x07
    8ed4:	98 85       	ldd	r25, Y+8	; 0x08
    8ed6:	fc 01       	movw	r30, r24
    8ed8:	80 89       	ldd	r24, Z+16	; 0x10
    8eda:	98 2f       	mov	r25, r24
    8edc:	8b 81       	ldd	r24, Y+3	; 0x03
    8ede:	87 70       	andi	r24, 0x07	; 7
    8ee0:	89 2b       	or	r24, r25
    8ee2:	28 2f       	mov	r18, r24
    8ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    8ee6:	98 85       	ldd	r25, Y+8	; 0x08
    8ee8:	fc 01       	movw	r30, r24
    8eea:	20 8b       	std	Z+16, r18	; 0x10

	cpu_irq_restore(flags);
    8eec:	89 85       	ldd	r24, Y+9	; 0x09
    8eee:	32 d9       	rcall	.-3484   	; 0x8154 <cpu_irq_restore>
	arch_ioport_set_pin_sense_mode(START_PIN,IOPORT_SENSE_RISING);
	PORTF_INTCTRL = 2u; //Enable medium level external interrupt
    8ef0:	89 ea       	ldi	r24, 0xA9	; 169
    8ef2:	96 e0       	ldi	r25, 0x06	; 6
    8ef4:	22 e0       	ldi	r18, 0x02	; 2
    8ef6:	fc 01       	movw	r30, r24
    8ef8:	20 83       	st	Z, r18
	
	cpu_irq_restore(flags);
    8efa:	89 81       	ldd	r24, Y+1	; 0x01
    8efc:	2b d9       	rcall	.-3498   	; 0x8154 <cpu_irq_restore>
}
    8efe:	2a 96       	adiw	r28, 0x0a	; 10
    8f00:	cd bf       	out	0x3d, r28	; 61
    8f02:	de bf       	out	0x3e, r29	; 62
    8f04:	df 91       	pop	r29
    8f06:	cf 91       	pop	r28
    8f08:	08 95       	ret

00008f0a <__vector_104>:

// PORTF interrupt vector, Vector 0 is the reset vector
ISR(PORTF_INT0_vect)
{
    8f0a:	1f 92       	push	r1
    8f0c:	0f 92       	push	r0
    8f0e:	00 90 3f 00 	lds	r0, 0x003F
    8f12:	0f 92       	push	r0
    8f14:	11 24       	eor	r1, r1
    8f16:	00 90 3b 00 	lds	r0, 0x003B
    8f1a:	0f 92       	push	r0
    8f1c:	2f 93       	push	r18
    8f1e:	3f 93       	push	r19
    8f20:	4f 93       	push	r20
    8f22:	5f 93       	push	r21
    8f24:	6f 93       	push	r22
    8f26:	7f 93       	push	r23
    8f28:	8f 93       	push	r24
    8f2a:	9f 93       	push	r25
    8f2c:	af 93       	push	r26
    8f2e:	bf 93       	push	r27
    8f30:	ef 93       	push	r30
    8f32:	ff 93       	push	r31
    8f34:	cf 93       	push	r28
    8f36:	df 93       	push	r29
    8f38:	1f 92       	push	r1
    8f3a:	cd b7       	in	r28, 0x3d	; 61
    8f3c:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags;
	flags = cpu_irq_save();
    8f3e:	fa d8       	rcall	.-3596   	; 0x8134 <cpu_irq_save>
    8f40:	89 83       	std	Y+1, r24	; 0x01
	
	// If interrupt0 flag is set, clear it
	#define INT0IF 1u<<0
	#define INT1IF 1u<<1
	if( PORTF_INTFLAGS & INT0IF )
    8f42:	8c ea       	ldi	r24, 0xAC	; 172
    8f44:	96 e0       	ldi	r25, 0x06	; 6
    8f46:	fc 01       	movw	r30, r24
    8f48:	80 81       	ld	r24, Z
    8f4a:	88 2f       	mov	r24, r24
    8f4c:	90 e0       	ldi	r25, 0x00	; 0
    8f4e:	81 70       	andi	r24, 0x01	; 1
    8f50:	99 27       	eor	r25, r25
    8f52:	00 97       	sbiw	r24, 0x00	; 0
    8f54:	29 f0       	breq	.+10     	; 0x8f60 <__vector_104+0x56>
	{
		PORTF_INTFLAGS = INT0IF; // write-1-to-clear - to clear interrupt flag write a '1'
    8f56:	8c ea       	ldi	r24, 0xAC	; 172
    8f58:	96 e0       	ldi	r25, 0x06	; 6
    8f5a:	21 e0       	ldi	r18, 0x01	; 1
    8f5c:	fc 01       	movw	r30, r24
    8f5e:	20 83       	st	Z, r18
	}
	
	if (!turnedOn)
    8f60:	90 91 7a 28 	lds	r25, 0x287A
    8f64:	81 e0       	ldi	r24, 0x01	; 1
    8f66:	89 27       	eor	r24, r25
    8f68:	88 23       	and	r24, r24
    8f6a:	09 f0       	breq	.+2      	; 0x8f6e <__vector_104+0x64>
	{
		reset_do_soft_reset();
    8f6c:	65 d9       	rcall	.-3382   	; 0x8238 <reset_do_soft_reset>
	}
	
	cpu_irq_restore(flags);
    8f6e:	89 81       	ldd	r24, Y+1	; 0x01
    8f70:	f1 d8       	rcall	.-3614   	; 0x8154 <cpu_irq_restore>
}
    8f72:	0f 90       	pop	r0
    8f74:	df 91       	pop	r29
    8f76:	cf 91       	pop	r28
    8f78:	ff 91       	pop	r31
    8f7a:	ef 91       	pop	r30
    8f7c:	bf 91       	pop	r27
    8f7e:	af 91       	pop	r26
    8f80:	9f 91       	pop	r25
    8f82:	8f 91       	pop	r24
    8f84:	7f 91       	pop	r23
    8f86:	6f 91       	pop	r22
    8f88:	5f 91       	pop	r21
    8f8a:	4f 91       	pop	r20
    8f8c:	3f 91       	pop	r19
    8f8e:	2f 91       	pop	r18
    8f90:	0f 90       	pop	r0
    8f92:	00 92 3b 00 	sts	0x003B, r0
    8f96:	0f 90       	pop	r0
    8f98:	00 92 3f 00 	sts	0x003F, r0
    8f9c:	0f 90       	pop	r0
    8f9e:	1f 90       	pop	r1
    8fa0:	18 95       	reti

00008fa2 <__mulsi3>:
    8fa2:	db 01       	movw	r26, r22
    8fa4:	8f 93       	push	r24
    8fa6:	9f 93       	push	r25
    8fa8:	5b d0       	rcall	.+182    	; 0x9060 <__muluhisi3>
    8faa:	bf 91       	pop	r27
    8fac:	af 91       	pop	r26
    8fae:	a2 9f       	mul	r26, r18
    8fb0:	80 0d       	add	r24, r0
    8fb2:	91 1d       	adc	r25, r1
    8fb4:	a3 9f       	mul	r26, r19
    8fb6:	90 0d       	add	r25, r0
    8fb8:	b2 9f       	mul	r27, r18
    8fba:	90 0d       	add	r25, r0
    8fbc:	11 24       	eor	r1, r1
    8fbe:	08 95       	ret

00008fc0 <__divmodhi4>:
    8fc0:	97 fb       	bst	r25, 7
    8fc2:	07 2e       	mov	r0, r23
    8fc4:	16 f4       	brtc	.+4      	; 0x8fca <__divmodhi4+0xa>
    8fc6:	00 94       	com	r0
    8fc8:	06 d0       	rcall	.+12     	; 0x8fd6 <__divmodhi4_neg1>
    8fca:	77 fd       	sbrc	r23, 7
    8fcc:	08 d0       	rcall	.+16     	; 0x8fde <__divmodhi4_neg2>
    8fce:	58 d0       	rcall	.+176    	; 0x9080 <__udivmodhi4>
    8fd0:	07 fc       	sbrc	r0, 7
    8fd2:	05 d0       	rcall	.+10     	; 0x8fde <__divmodhi4_neg2>
    8fd4:	3e f4       	brtc	.+14     	; 0x8fe4 <__divmodhi4_exit>

00008fd6 <__divmodhi4_neg1>:
    8fd6:	90 95       	com	r25
    8fd8:	81 95       	neg	r24
    8fda:	9f 4f       	sbci	r25, 0xFF	; 255
    8fdc:	08 95       	ret

00008fde <__divmodhi4_neg2>:
    8fde:	70 95       	com	r23
    8fe0:	61 95       	neg	r22
    8fe2:	7f 4f       	sbci	r23, 0xFF	; 255

00008fe4 <__divmodhi4_exit>:
    8fe4:	08 95       	ret

00008fe6 <__udivmodsi4>:
    8fe6:	a1 e2       	ldi	r26, 0x21	; 33
    8fe8:	1a 2e       	mov	r1, r26
    8fea:	aa 1b       	sub	r26, r26
    8fec:	bb 1b       	sub	r27, r27
    8fee:	fd 01       	movw	r30, r26
    8ff0:	0d c0       	rjmp	.+26     	; 0x900c <__udivmodsi4_ep>

00008ff2 <__udivmodsi4_loop>:
    8ff2:	aa 1f       	adc	r26, r26
    8ff4:	bb 1f       	adc	r27, r27
    8ff6:	ee 1f       	adc	r30, r30
    8ff8:	ff 1f       	adc	r31, r31
    8ffa:	a2 17       	cp	r26, r18
    8ffc:	b3 07       	cpc	r27, r19
    8ffe:	e4 07       	cpc	r30, r20
    9000:	f5 07       	cpc	r31, r21
    9002:	20 f0       	brcs	.+8      	; 0x900c <__udivmodsi4_ep>
    9004:	a2 1b       	sub	r26, r18
    9006:	b3 0b       	sbc	r27, r19
    9008:	e4 0b       	sbc	r30, r20
    900a:	f5 0b       	sbc	r31, r21

0000900c <__udivmodsi4_ep>:
    900c:	66 1f       	adc	r22, r22
    900e:	77 1f       	adc	r23, r23
    9010:	88 1f       	adc	r24, r24
    9012:	99 1f       	adc	r25, r25
    9014:	1a 94       	dec	r1
    9016:	69 f7       	brne	.-38     	; 0x8ff2 <__udivmodsi4_loop>
    9018:	60 95       	com	r22
    901a:	70 95       	com	r23
    901c:	80 95       	com	r24
    901e:	90 95       	com	r25
    9020:	9b 01       	movw	r18, r22
    9022:	ac 01       	movw	r20, r24
    9024:	bd 01       	movw	r22, r26
    9026:	cf 01       	movw	r24, r30
    9028:	08 95       	ret

0000902a <__divmodsi4>:
    902a:	05 2e       	mov	r0, r21
    902c:	97 fb       	bst	r25, 7
    902e:	16 f4       	brtc	.+4      	; 0x9034 <__divmodsi4+0xa>
    9030:	00 94       	com	r0
    9032:	06 d0       	rcall	.+12     	; 0x9040 <__divmodsi4_neg1>
    9034:	57 fd       	sbrc	r21, 7
    9036:	0c d0       	rcall	.+24     	; 0x9050 <__divmodsi4_neg2>
    9038:	d6 df       	rcall	.-84     	; 0x8fe6 <__udivmodsi4>
    903a:	07 fc       	sbrc	r0, 7
    903c:	09 d0       	rcall	.+18     	; 0x9050 <__divmodsi4_neg2>
    903e:	7e f4       	brtc	.+30     	; 0x905e <__divmodsi4_exit>

00009040 <__divmodsi4_neg1>:
    9040:	90 95       	com	r25
    9042:	80 95       	com	r24
    9044:	70 95       	com	r23
    9046:	61 95       	neg	r22
    9048:	7f 4f       	sbci	r23, 0xFF	; 255
    904a:	8f 4f       	sbci	r24, 0xFF	; 255
    904c:	9f 4f       	sbci	r25, 0xFF	; 255
    904e:	08 95       	ret

00009050 <__divmodsi4_neg2>:
    9050:	50 95       	com	r21
    9052:	40 95       	com	r20
    9054:	30 95       	com	r19
    9056:	21 95       	neg	r18
    9058:	3f 4f       	sbci	r19, 0xFF	; 255
    905a:	4f 4f       	sbci	r20, 0xFF	; 255
    905c:	5f 4f       	sbci	r21, 0xFF	; 255

0000905e <__divmodsi4_exit>:
    905e:	08 95       	ret

00009060 <__muluhisi3>:
    9060:	23 d0       	rcall	.+70     	; 0x90a8 <__umulhisi3>
    9062:	a5 9f       	mul	r26, r21
    9064:	90 0d       	add	r25, r0
    9066:	b4 9f       	mul	r27, r20
    9068:	90 0d       	add	r25, r0
    906a:	a4 9f       	mul	r26, r20
    906c:	80 0d       	add	r24, r0
    906e:	91 1d       	adc	r25, r1
    9070:	11 24       	eor	r1, r1
    9072:	08 95       	ret

00009074 <__mulshisi3>:
    9074:	b7 ff       	sbrs	r27, 7
    9076:	f4 cf       	rjmp	.-24     	; 0x9060 <__muluhisi3>

00009078 <__mulohisi3>:
    9078:	f3 df       	rcall	.-26     	; 0x9060 <__muluhisi3>
    907a:	82 1b       	sub	r24, r18
    907c:	93 0b       	sbc	r25, r19
    907e:	08 95       	ret

00009080 <__udivmodhi4>:
    9080:	aa 1b       	sub	r26, r26
    9082:	bb 1b       	sub	r27, r27
    9084:	51 e1       	ldi	r21, 0x11	; 17
    9086:	07 c0       	rjmp	.+14     	; 0x9096 <__udivmodhi4_ep>

00009088 <__udivmodhi4_loop>:
    9088:	aa 1f       	adc	r26, r26
    908a:	bb 1f       	adc	r27, r27
    908c:	a6 17       	cp	r26, r22
    908e:	b7 07       	cpc	r27, r23
    9090:	10 f0       	brcs	.+4      	; 0x9096 <__udivmodhi4_ep>
    9092:	a6 1b       	sub	r26, r22
    9094:	b7 0b       	sbc	r27, r23

00009096 <__udivmodhi4_ep>:
    9096:	88 1f       	adc	r24, r24
    9098:	99 1f       	adc	r25, r25
    909a:	5a 95       	dec	r21
    909c:	a9 f7       	brne	.-22     	; 0x9088 <__udivmodhi4_loop>
    909e:	80 95       	com	r24
    90a0:	90 95       	com	r25
    90a2:	bc 01       	movw	r22, r24
    90a4:	cd 01       	movw	r24, r26
    90a6:	08 95       	ret

000090a8 <__umulhisi3>:
    90a8:	a2 9f       	mul	r26, r18
    90aa:	b0 01       	movw	r22, r0
    90ac:	b3 9f       	mul	r27, r19
    90ae:	c0 01       	movw	r24, r0
    90b0:	a3 9f       	mul	r26, r19
    90b2:	01 d0       	rcall	.+2      	; 0x90b6 <__umulhisi3+0xe>
    90b4:	b2 9f       	mul	r27, r18
    90b6:	70 0d       	add	r23, r0
    90b8:	81 1d       	adc	r24, r1
    90ba:	11 24       	eor	r1, r1
    90bc:	91 1d       	adc	r25, r1
    90be:	08 95       	ret

000090c0 <memchr>:
    90c0:	fc 01       	movw	r30, r24
    90c2:	41 50       	subi	r20, 0x01	; 1
    90c4:	50 40       	sbci	r21, 0x00	; 0
    90c6:	30 f0       	brcs	.+12     	; 0x90d4 <memchr+0x14>
    90c8:	01 90       	ld	r0, Z+
    90ca:	06 16       	cp	r0, r22
    90cc:	d1 f7       	brne	.-12     	; 0x90c2 <memchr+0x2>
    90ce:	31 97       	sbiw	r30, 0x01	; 1
    90d0:	cf 01       	movw	r24, r30
    90d2:	08 95       	ret
    90d4:	88 27       	eor	r24, r24
    90d6:	99 27       	eor	r25, r25
    90d8:	08 95       	ret

000090da <memcpy>:
    90da:	fb 01       	movw	r30, r22
    90dc:	dc 01       	movw	r26, r24
    90de:	02 c0       	rjmp	.+4      	; 0x90e4 <memcpy+0xa>
    90e0:	01 90       	ld	r0, Z+
    90e2:	0d 92       	st	X+, r0
    90e4:	41 50       	subi	r20, 0x01	; 1
    90e6:	50 40       	sbci	r21, 0x00	; 0
    90e8:	d8 f7       	brcc	.-10     	; 0x90e0 <memcpy+0x6>
    90ea:	08 95       	ret

000090ec <strcmp>:
    90ec:	fb 01       	movw	r30, r22
    90ee:	dc 01       	movw	r26, r24
    90f0:	8d 91       	ld	r24, X+
    90f2:	01 90       	ld	r0, Z+
    90f4:	80 19       	sub	r24, r0
    90f6:	01 10       	cpse	r0, r1
    90f8:	d9 f3       	breq	.-10     	; 0x90f0 <strcmp+0x4>
    90fa:	99 0b       	sbc	r25, r25
    90fc:	08 95       	ret

000090fe <strlen>:
    90fe:	fc 01       	movw	r30, r24
    9100:	01 90       	ld	r0, Z+
    9102:	00 20       	and	r0, r0
    9104:	e9 f7       	brne	.-6      	; 0x9100 <strlen+0x2>
    9106:	80 95       	com	r24
    9108:	90 95       	com	r25
    910a:	8e 0f       	add	r24, r30
    910c:	9f 1f       	adc	r25, r31
    910e:	08 95       	ret

00009110 <itoa>:
    9110:	fb 01       	movw	r30, r22
    9112:	9f 01       	movw	r18, r30
    9114:	e8 94       	clt
    9116:	42 30       	cpi	r20, 0x02	; 2
    9118:	bc f0       	brlt	.+46     	; 0x9148 <itoa+0x38>
    911a:	45 32       	cpi	r20, 0x25	; 37
    911c:	ac f4       	brge	.+42     	; 0x9148 <itoa+0x38>
    911e:	4a 30       	cpi	r20, 0x0A	; 10
    9120:	29 f4       	brne	.+10     	; 0x912c <itoa+0x1c>
    9122:	97 fb       	bst	r25, 7
    9124:	1e f4       	brtc	.+6      	; 0x912c <itoa+0x1c>
    9126:	90 95       	com	r25
    9128:	81 95       	neg	r24
    912a:	9f 4f       	sbci	r25, 0xFF	; 255
    912c:	64 2f       	mov	r22, r20
    912e:	77 27       	eor	r23, r23
    9130:	a7 df       	rcall	.-178    	; 0x9080 <__udivmodhi4>
    9132:	80 5d       	subi	r24, 0xD0	; 208
    9134:	8a 33       	cpi	r24, 0x3A	; 58
    9136:	0c f0       	brlt	.+2      	; 0x913a <itoa+0x2a>
    9138:	89 5d       	subi	r24, 0xD9	; 217
    913a:	81 93       	st	Z+, r24
    913c:	cb 01       	movw	r24, r22
    913e:	00 97       	sbiw	r24, 0x00	; 0
    9140:	a9 f7       	brne	.-22     	; 0x912c <itoa+0x1c>
    9142:	16 f4       	brtc	.+4      	; 0x9148 <itoa+0x38>
    9144:	5d e2       	ldi	r21, 0x2D	; 45
    9146:	51 93       	st	Z+, r21
    9148:	10 82       	st	Z, r1
    914a:	c9 01       	movw	r24, r18
    914c:	00 c0       	rjmp	.+0      	; 0x914e <strrev>

0000914e <strrev>:
    914e:	dc 01       	movw	r26, r24
    9150:	fc 01       	movw	r30, r24
    9152:	67 2f       	mov	r22, r23
    9154:	71 91       	ld	r23, Z+
    9156:	77 23       	and	r23, r23
    9158:	e1 f7       	brne	.-8      	; 0x9152 <strrev+0x4>
    915a:	32 97       	sbiw	r30, 0x02	; 2
    915c:	04 c0       	rjmp	.+8      	; 0x9166 <strrev+0x18>
    915e:	7c 91       	ld	r23, X
    9160:	6d 93       	st	X+, r22
    9162:	70 83       	st	Z, r23
    9164:	62 91       	ld	r22, -Z
    9166:	ae 17       	cp	r26, r30
    9168:	bf 07       	cpc	r27, r31
    916a:	c8 f3       	brcs	.-14     	; 0x915e <strrev+0x10>
    916c:	08 95       	ret

0000916e <_exit>:
    916e:	f8 94       	cli

00009170 <__stop_program>:
    9170:	ff cf       	rjmp	.-2      	; 0x9170 <__stop_program>
